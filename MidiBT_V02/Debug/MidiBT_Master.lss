
MidiBT_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004568  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00004568  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048c  2000000c  00004574  0001000c  2**2
                  ALLOC
  3 .stack        00002000  20000498  00004a00  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c356  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ca3  00000000  00000000  0002c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002848  00000000  00000000  0002f088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b0  00000000  00000000  000318d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000690  00000000  00000000  00032080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012bf2  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c0a1  00000000  00000000  00045302  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005c1bb  00000000  00000000  000513a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000019e4  00000000  00000000  000ad560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002498 	.word	0x20002498
       4:	00004079 	.word	0x00004079
       8:	0000410d 	.word	0x0000410d
       c:	0000410d 	.word	0x0000410d
	...
      2c:	0000410d 	.word	0x0000410d
	...
      38:	0000410d 	.word	0x0000410d
      3c:	0000410d 	.word	0x0000410d
      40:	0000410d 	.word	0x0000410d
      44:	0000410d 	.word	0x0000410d
      48:	0000410d 	.word	0x0000410d
      4c:	0000410d 	.word	0x0000410d
      50:	0000410d 	.word	0x0000410d
      54:	0000410d 	.word	0x0000410d
      58:	0000410d 	.word	0x0000410d
      5c:	00001a95 	.word	0x00001a95
      60:	00001aa9 	.word	0x00001aa9
      64:	00001abd 	.word	0x00001abd
      68:	00001ad1 	.word	0x00001ad1
      6c:	00001ae5 	.word	0x00001ae5
      70:	00001af9 	.word	0x00001af9
      74:	00001f29 	.word	0x00001f29
      78:	00001f3d 	.word	0x00001f3d
      7c:	00001f51 	.word	0x00001f51
      80:	00001f65 	.word	0x00001f65
      84:	00001f79 	.word	0x00001f79
      88:	00001f8d 	.word	0x00001f8d
      8c:	00001fa1 	.word	0x00001fa1
      90:	00001fb5 	.word	0x00001fb5
      94:	0000410d 	.word	0x0000410d
      98:	0000410d 	.word	0x0000410d
      9c:	0000410d 	.word	0x0000410d
      a0:	0000410d 	.word	0x0000410d

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	00004568 	.word	0x00004568

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00004568 	.word	0x00004568
      f8:	20000010 	.word	0x20000010
      fc:	00004568 	.word	0x00004568
     100:	00000000 	.word	0x00000000

00000104 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     104:	b580      	push	{r7, lr}
     106:	b084      	sub	sp, #16
     108:	af00      	add	r7, sp, #0
     10a:	1c02      	adds	r2, r0, #0
     10c:	1dfb      	adds	r3, r7, #7
     10e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     110:	230f      	movs	r3, #15
     112:	18fb      	adds	r3, r7, r3
     114:	1dfa      	adds	r2, r7, #7
     116:	7812      	ldrb	r2, [r2, #0]
     118:	09d2      	lsrs	r2, r2, #7
     11a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     11c:	230e      	movs	r3, #14
     11e:	18fb      	adds	r3, r7, r3
     120:	1dfa      	adds	r2, r7, #7
     122:	7812      	ldrb	r2, [r2, #0]
     124:	0952      	lsrs	r2, r2, #5
     126:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     128:	4b0d      	ldr	r3, [pc, #52]	; (160 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     12a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10f      	bne.n	156 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     136:	230f      	movs	r3, #15
     138:	18fb      	adds	r3, r7, r3
     13a:	781b      	ldrb	r3, [r3, #0]
     13c:	009b      	lsls	r3, r3, #2
     13e:	2210      	movs	r2, #16
     140:	4694      	mov	ip, r2
     142:	44bc      	add	ip, r7
     144:	4463      	add	r3, ip
     146:	3b08      	subs	r3, #8
     148:	681a      	ldr	r2, [r3, #0]
     14a:	230e      	movs	r3, #14
     14c:	18fb      	adds	r3, r7, r3
     14e:	781b      	ldrb	r3, [r3, #0]
     150:	01db      	lsls	r3, r3, #7
     152:	18d3      	adds	r3, r2, r3
     154:	e000      	b.n	158 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     156:	2300      	movs	r3, #0
	}
}
     158:	1c18      	adds	r0, r3, #0
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}
     160:	41004400 	.word	0x41004400

00000164 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     164:	b580      	push	{r7, lr}
     166:	b082      	sub	sp, #8
     168:	af00      	add	r7, sp, #0
     16a:	1c02      	adds	r2, r0, #0
     16c:	1dfb      	adds	r3, r7, #7
     16e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     170:	1dfb      	adds	r3, r7, #7
     172:	781b      	ldrb	r3, [r3, #0]
     174:	1c18      	adds	r0, r3, #0
     176:	4b03      	ldr	r3, [pc, #12]	; (184 <port_get_group_from_gpio_pin+0x20>)
     178:	4798      	blx	r3
     17a:	1c03      	adds	r3, r0, #0
}
     17c:	1c18      	adds	r0, r3, #0
     17e:	46bd      	mov	sp, r7
     180:	b002      	add	sp, #8
     182:	bd80      	pop	{r7, pc}
     184:	00000105 	.word	0x00000105

00000188 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2200      	movs	r2, #0
     194:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2201      	movs	r2, #1
     19a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2200      	movs	r2, #0
     1a0:	709a      	strb	r2, [r3, #2]
}
     1a2:	46bd      	mov	sp, r7
     1a4:	b002      	add	sp, #8
     1a6:	bd80      	pop	{r7, pc}

000001a8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	1c02      	adds	r2, r0, #0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
     1b4:	1dbb      	adds	r3, r7, #6
     1b6:	1c0a      	adds	r2, r1, #0
     1b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ba:	1dfb      	adds	r3, r7, #7
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	1c18      	adds	r0, r3, #0
     1c0:	4b0c      	ldr	r3, [pc, #48]	; (1f4 <port_pin_set_output_level+0x4c>)
     1c2:	4798      	blx	r3
     1c4:	1c03      	adds	r3, r0, #0
     1c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1c8:	1dfb      	adds	r3, r7, #7
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	221f      	movs	r2, #31
     1ce:	4013      	ands	r3, r2
     1d0:	2201      	movs	r2, #1
     1d2:	409a      	lsls	r2, r3
     1d4:	1c13      	adds	r3, r2, #0
     1d6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1d8:	1dbb      	adds	r3, r7, #6
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	2b00      	cmp	r3, #0
     1de:	d003      	beq.n	1e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1e0:	68fb      	ldr	r3, [r7, #12]
     1e2:	68ba      	ldr	r2, [r7, #8]
     1e4:	619a      	str	r2, [r3, #24]
     1e6:	e002      	b.n	1ee <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	68ba      	ldr	r2, [r7, #8]
     1ec:	615a      	str	r2, [r3, #20]
	}
}
     1ee:	46bd      	mov	sp, r7
     1f0:	b004      	add	sp, #16
     1f2:	bd80      	pop	{r7, pc}
     1f4:	00000165 	.word	0x00000165

000001f8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     1fc:	4b03      	ldr	r3, [pc, #12]	; (20c <system_interrupt_enable_global+0x14>)
     1fe:	2201      	movs	r2, #1
     200:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     202:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     206:	b662      	cpsie	i
}
     208:	46bd      	mov	sp, r7
     20a:	bd80      	pop	{r7, pc}
     20c:	20000008 	.word	0x20000008

00000210 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     210:	b580      	push	{r7, lr}
     212:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     214:	b672      	cpsid	i
     216:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     21a:	4b02      	ldr	r3, [pc, #8]	; (224 <system_interrupt_disable_global+0x14>)
     21c:	2200      	movs	r2, #0
     21e:	701a      	strb	r2, [r3, #0]
}
     220:	46bd      	mov	sp, r7
     222:	bd80      	pop	{r7, pc}
     224:	20000008 	.word	0x20000008

00000228 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     228:	b580      	push	{r7, lr}
     22a:	b084      	sub	sp, #16
     22c:	af00      	add	r7, sp, #0
     22e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     230:	687b      	ldr	r3, [r7, #4]
     232:	681b      	ldr	r3, [r3, #0]
     234:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     236:	68fb      	ldr	r3, [r7, #12]
     238:	8a1b      	ldrh	r3, [r3, #16]
     23a:	b29b      	uxth	r3, r3
     23c:	1c1a      	adds	r2, r3, #0
     23e:	2380      	movs	r3, #128	; 0x80
     240:	021b      	lsls	r3, r3, #8
     242:	4013      	ands	r3, r2
     244:	1e5a      	subs	r2, r3, #1
     246:	4193      	sbcs	r3, r2
     248:	b2db      	uxtb	r3, r3
#endif
}
     24a:	1c18      	adds	r0, r3, #0
     24c:	46bd      	mov	sp, r7
     24e:	b004      	add	sp, #16
     250:	bd80      	pop	{r7, pc}
     252:	46c0      	nop			; (mov r8, r8)

00000254 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     254:	b580      	push	{r7, lr}
     256:	b082      	sub	sp, #8
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	687b      	ldr	r3, [r7, #4]
     260:	1c18      	adds	r0, r3, #0
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <_usart_wait_for_sync+0x1c>)
     264:	4798      	blx	r3
     266:	1e03      	subs	r3, r0, #0
     268:	d1f9      	bne.n	25e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     26a:	46bd      	mov	sp, r7
     26c:	b002      	add	sp, #8
     26e:	bd80      	pop	{r7, pc}
     270:	00000229 	.word	0x00000229

00000274 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
     27a:	6078      	str	r0, [r7, #4]
     27c:	1c0a      	adds	r2, r1, #0
     27e:	1cfb      	adds	r3, r7, #3
     280:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     282:	687b      	ldr	r3, [r7, #4]
     284:	2221      	movs	r2, #33	; 0x21
     286:	5c9b      	ldrb	r3, [r3, r2]
     288:	b2d9      	uxtb	r1, r3
     28a:	1cfb      	adds	r3, r7, #3
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	2201      	movs	r2, #1
     290:	409a      	lsls	r2, r3
     292:	1c13      	adds	r3, r2, #0
     294:	b2db      	uxtb	r3, r3
     296:	1c0a      	adds	r2, r1, #0
     298:	4313      	orrs	r3, r2
     29a:	b2db      	uxtb	r3, r3
     29c:	b2d9      	uxtb	r1, r3
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2221      	movs	r2, #33	; 0x21
     2a2:	5499      	strb	r1, [r3, r2]

}
     2a4:	46bd      	mov	sp, r7
     2a6:	b002      	add	sp, #8
     2a8:	bd80      	pop	{r7, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <reset_BT>:
volatile uint8_t rx_buffer_SERCOM4[MAX_RX_BUFFER_LENGTH],rx_buffer_SERCOM5[MAX_RX_BUFFER_LENGTH];
void reset_BT(void);

// Reset BT module
void reset_BT(void)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(Reset_BT_PIN,0);
     2b0:	2010      	movs	r0, #16
     2b2:	2100      	movs	r1, #0
     2b4:	4b0d      	ldr	r3, [pc, #52]	; (2ec <reset_BT+0x40>)
     2b6:	4798      	blx	r3

	msCounter=10;
     2b8:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <reset_BT+0x44>)
     2ba:	220a      	movs	r2, #10
     2bc:	601a      	str	r2, [r3, #0]
	while (msCounter){}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	4b0b      	ldr	r3, [pc, #44]	; (2f0 <reset_BT+0x44>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d1fb      	bne.n	2c0 <reset_BT+0x14>

	port_pin_set_output_level(Reset_BT_PIN,1);
     2c8:	2010      	movs	r0, #16
     2ca:	2101      	movs	r1, #1
     2cc:	4b07      	ldr	r3, [pc, #28]	; (2ec <reset_BT+0x40>)
     2ce:	4798      	blx	r3
	port_pin_set_output_level(Green_LED_PIN,1);
     2d0:	2007      	movs	r0, #7
     2d2:	2101      	movs	r1, #1
     2d4:	4b05      	ldr	r3, [pc, #20]	; (2ec <reset_BT+0x40>)
     2d6:	4798      	blx	r3
	
	msCounter=50;
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <reset_BT+0x44>)
     2da:	2232      	movs	r2, #50	; 0x32
     2dc:	601a      	str	r2, [r3, #0]
	while (msCounter){}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b03      	ldr	r3, [pc, #12]	; (2f0 <reset_BT+0x44>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	2b00      	cmp	r3, #0
     2e6:	d1fb      	bne.n	2e0 <reset_BT+0x34>
}
     2e8:	46bd      	mov	sp, r7
     2ea:	bd80      	pop	{r7, pc}
     2ec:	000001a9 	.word	0x000001a9
     2f0:	20000348 	.word	0x20000348

000002f4 <usart_read_callback_SERCOM4>:
	

void usart_read_callback_SERCOM4(struct usart_module *const usart_module)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
	uint8_t received_data = *(usart_module->rx_buffer_ptr);
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	695a      	ldr	r2, [r3, #20]
     300:	230f      	movs	r3, #15
     302:	18fb      	adds	r3, r7, r3
     304:	7812      	ldrb	r2, [r2, #0]
     306:	701a      	strb	r2, [r3, #0]

	system_interrupt_disable_global();
     308:	4b0e      	ldr	r3, [pc, #56]	; (344 <usart_read_callback_SERCOM4+0x50>)
     30a:	4798      	blx	r3
	if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = received_data;
     30c:	4b0e      	ldr	r3, [pc, #56]	; (348 <usart_read_callback_SERCOM4+0x54>)
     30e:	4a0f      	ldr	r2, [pc, #60]	; (34c <usart_read_callback_SERCOM4+0x58>)
     310:	5c9b      	ldrb	r3, [r3, r2]
     312:	3301      	adds	r3, #1
     314:	4a0c      	ldr	r2, [pc, #48]	; (348 <usart_read_callback_SERCOM4+0x54>)
     316:	490e      	ldr	r1, [pc, #56]	; (350 <usart_read_callback_SERCOM4+0x5c>)
     318:	5c52      	ldrb	r2, [r2, r1]
     31a:	4293      	cmp	r3, r2
     31c:	d00d      	beq.n	33a <usart_read_callback_SERCOM4+0x46>
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <usart_read_callback_SERCOM4+0x54>)
     320:	4a0a      	ldr	r2, [pc, #40]	; (34c <usart_read_callback_SERCOM4+0x58>)
     322:	5c9b      	ldrb	r3, [r3, r2]
     324:	1c5a      	adds	r2, r3, #1
     326:	b2d0      	uxtb	r0, r2
     328:	4a07      	ldr	r2, [pc, #28]	; (348 <usart_read_callback_SERCOM4+0x54>)
     32a:	4908      	ldr	r1, [pc, #32]	; (34c <usart_read_callback_SERCOM4+0x58>)
     32c:	5450      	strb	r0, [r2, r1]
     32e:	1c19      	adds	r1, r3, #0
     330:	4b05      	ldr	r3, [pc, #20]	; (348 <usart_read_callback_SERCOM4+0x54>)
     332:	220f      	movs	r2, #15
     334:	18ba      	adds	r2, r7, r2
     336:	7812      	ldrb	r2, [r2, #0]
     338:	545a      	strb	r2, [r3, r1]
	system_interrupt_enable_global();
     33a:	4b06      	ldr	r3, [pc, #24]	; (354 <usart_read_callback_SERCOM4+0x60>)
     33c:	4798      	blx	r3

}
     33e:	46bd      	mov	sp, r7
     340:	b004      	add	sp, #16
     342:	bd80      	pop	{r7, pc}
     344:	00000211 	.word	0x00000211
     348:	200000c0 	.word	0x200000c0
     34c:	00000202 	.word	0x00000202
     350:	00000203 	.word	0x00000203
     354:	000001f9 	.word	0x000001f9

00000358 <usart_write_callback_SERCOM5>:

void usart_write_callback_SERCOM5(struct usart_module *const usart_module)
{
     358:	b580      	push	{r7, lr}
     35a:	b082      	sub	sp, #8
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
//	port_pin_toggle_output_level(LED_0_PIN);
}
     360:	46bd      	mov	sp, r7
     362:	b002      	add	sp, #8
     364:	bd80      	pop	{r7, pc}
     366:	46c0      	nop			; (mov r8, r8)

00000368 <usart_read_callback_SERCOM5>:

void usart_read_callback_SERCOM5(struct usart_module *const usart_module)
{
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	uint8_t received_data = *(usart_module->rx_buffer_ptr);
     370:	687b      	ldr	r3, [r7, #4]
     372:	695a      	ldr	r2, [r3, #20]
     374:	230f      	movs	r3, #15
     376:	18fb      	adds	r3, r7, r3
     378:	7812      	ldrb	r2, [r2, #0]
     37a:	701a      	strb	r2, [r3, #0]
	if (((serialQ.bt_in + 1) != serialQ.bt_out))
     37c:	4a10      	ldr	r2, [pc, #64]	; (3c0 <usart_read_callback_SERCOM5+0x58>)
     37e:	2380      	movs	r3, #128	; 0x80
     380:	009b      	lsls	r3, r3, #2
     382:	5cd3      	ldrb	r3, [r2, r3]
     384:	3301      	adds	r3, #1
     386:	4a0e      	ldr	r2, [pc, #56]	; (3c0 <usart_read_callback_SERCOM5+0x58>)
     388:	490e      	ldr	r1, [pc, #56]	; (3c4 <usart_read_callback_SERCOM5+0x5c>)
     38a:	5c52      	ldrb	r2, [r2, r1]
     38c:	4293      	cmp	r3, r2
     38e:	d013      	beq.n	3b8 <usart_read_callback_SERCOM5+0x50>
	{	
		serialQ.blueToothToMidi[serialQ.bt_in++] = received_data;
     390:	4a0b      	ldr	r2, [pc, #44]	; (3c0 <usart_read_callback_SERCOM5+0x58>)
     392:	2380      	movs	r3, #128	; 0x80
     394:	009b      	lsls	r3, r3, #2
     396:	5cd3      	ldrb	r3, [r2, r3]
     398:	1c5a      	adds	r2, r3, #1
     39a:	b2d0      	uxtb	r0, r2
     39c:	4908      	ldr	r1, [pc, #32]	; (3c0 <usart_read_callback_SERCOM5+0x58>)
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	0092      	lsls	r2, r2, #2
     3a2:	5488      	strb	r0, [r1, r2]
     3a4:	1c19      	adds	r1, r3, #0
     3a6:	4a06      	ldr	r2, [pc, #24]	; (3c0 <usart_read_callback_SERCOM5+0x58>)
     3a8:	2380      	movs	r3, #128	; 0x80
     3aa:	005b      	lsls	r3, r3, #1
     3ac:	1852      	adds	r2, r2, r1
     3ae:	18d3      	adds	r3, r2, r3
     3b0:	220f      	movs	r2, #15
     3b2:	18ba      	adds	r2, r7, r2
     3b4:	7812      	ldrb	r2, [r2, #0]
     3b6:	701a      	strb	r2, [r3, #0]

	}
}
     3b8:	46bd      	mov	sp, r7
     3ba:	b004      	add	sp, #16
     3bc:	bd80      	pop	{r7, pc}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	200000c0 	.word	0x200000c0
     3c4:	00000201 	.word	0x00000201

000003c8 <usart_write_callback_SERCOM4>:

void usart_write_callback_SERCOM4(struct usart_module *const usart_module)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b082      	sub	sp, #8
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
//	port_pin_toggle_output_level(LED_0_PIN);
}
     3d0:	46bd      	mov	sp, r7
     3d2:	b002      	add	sp, #8
     3d4:	bd80      	pop	{r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)

000003d8 <configure_usart_callbacks>:

//! [setup]


void configure_usart_callbacks(void)
{
     3d8:	b580      	push	{r7, lr}
     3da:	af00      	add	r7, sp, #0
	//! [setup_register_callbacks]
	usart_register_callback(&WT41_SERCOM5, usart_write_callback_SERCOM5, USART_CALLBACK_BUFFER_TRANSMITTED);
     3dc:	4a18      	ldr	r2, [pc, #96]	; (440 <configure_usart_callbacks+0x68>)
     3de:	4b19      	ldr	r3, [pc, #100]	; (444 <configure_usart_callbacks+0x6c>)
     3e0:	1c10      	adds	r0, r2, #0
     3e2:	1c19      	adds	r1, r3, #0
     3e4:	2200      	movs	r2, #0
     3e6:	4b18      	ldr	r3, [pc, #96]	; (448 <configure_usart_callbacks+0x70>)
     3e8:	4798      	blx	r3
	usart_register_callback(&WT41_SERCOM5,usart_read_callback_SERCOM5, USART_CALLBACK_BUFFER_RECEIVED);
     3ea:	4a15      	ldr	r2, [pc, #84]	; (440 <configure_usart_callbacks+0x68>)
     3ec:	4b17      	ldr	r3, [pc, #92]	; (44c <configure_usart_callbacks+0x74>)
     3ee:	1c10      	adds	r0, r2, #0
     3f0:	1c19      	adds	r1, r3, #0
     3f2:	2201      	movs	r2, #1
     3f4:	4b14      	ldr	r3, [pc, #80]	; (448 <configure_usart_callbacks+0x70>)
     3f6:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&WT41_SERCOM5, USART_CALLBACK_BUFFER_TRANSMITTED);
     3f8:	4b11      	ldr	r3, [pc, #68]	; (440 <configure_usart_callbacks+0x68>)
     3fa:	1c18      	adds	r0, r3, #0
     3fc:	2100      	movs	r1, #0
     3fe:	4b14      	ldr	r3, [pc, #80]	; (450 <configure_usart_callbacks+0x78>)
     400:	4798      	blx	r3
	usart_enable_callback(&WT41_SERCOM5, USART_CALLBACK_BUFFER_RECEIVED);
     402:	4b0f      	ldr	r3, [pc, #60]	; (440 <configure_usart_callbacks+0x68>)
     404:	1c18      	adds	r0, r3, #0
     406:	2101      	movs	r1, #1
     408:	4b11      	ldr	r3, [pc, #68]	; (450 <configure_usart_callbacks+0x78>)
     40a:	4798      	blx	r3
	//! [setup_enable_callbacks]

	//! [setup_register_callbacks]
	usart_register_callback(&midi_SERCOM4, usart_write_callback_SERCOM4, USART_CALLBACK_BUFFER_TRANSMITTED);
     40c:	4a11      	ldr	r2, [pc, #68]	; (454 <configure_usart_callbacks+0x7c>)
     40e:	4b12      	ldr	r3, [pc, #72]	; (458 <configure_usart_callbacks+0x80>)
     410:	1c10      	adds	r0, r2, #0
     412:	1c19      	adds	r1, r3, #0
     414:	2200      	movs	r2, #0
     416:	4b0c      	ldr	r3, [pc, #48]	; (448 <configure_usart_callbacks+0x70>)
     418:	4798      	blx	r3
	usart_register_callback(&midi_SERCOM4,usart_read_callback_SERCOM4, USART_CALLBACK_BUFFER_RECEIVED);
     41a:	4a0e      	ldr	r2, [pc, #56]	; (454 <configure_usart_callbacks+0x7c>)
     41c:	4b0f      	ldr	r3, [pc, #60]	; (45c <configure_usart_callbacks+0x84>)
     41e:	1c10      	adds	r0, r2, #0
     420:	1c19      	adds	r1, r3, #0
     422:	2201      	movs	r2, #1
     424:	4b08      	ldr	r3, [pc, #32]	; (448 <configure_usart_callbacks+0x70>)
     426:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&midi_SERCOM4, USART_CALLBACK_BUFFER_TRANSMITTED);
     428:	4b0a      	ldr	r3, [pc, #40]	; (454 <configure_usart_callbacks+0x7c>)
     42a:	1c18      	adds	r0, r3, #0
     42c:	2100      	movs	r1, #0
     42e:	4b08      	ldr	r3, [pc, #32]	; (450 <configure_usart_callbacks+0x78>)
     430:	4798      	blx	r3
	usart_enable_callback(&midi_SERCOM4, USART_CALLBACK_BUFFER_RECEIVED);
     432:	4b08      	ldr	r3, [pc, #32]	; (454 <configure_usart_callbacks+0x7c>)
     434:	1c18      	adds	r0, r3, #0
     436:	2101      	movs	r1, #1
     438:	4b05      	ldr	r3, [pc, #20]	; (450 <configure_usart_callbacks+0x78>)
     43a:	4798      	blx	r3
	//! [setup_enable_callbacks]

}
     43c:	46bd      	mov	sp, r7
     43e:	bd80      	pop	{r7, pc}
     440:	20000064 	.word	0x20000064
     444:	00000359 	.word	0x00000359
     448:	00000d5d 	.word	0x00000d5d
     44c:	00000369 	.word	0x00000369
     450:	00000275 	.word	0x00000275
     454:	20000088 	.word	0x20000088
     458:	000003c9 	.word	0x000003c9
     45c:	000002f5 	.word	0x000002f5

00000460 <init>:
//! [setup]

void init(void) ;

void init(void) 
{
     460:	b580      	push	{r7, lr}
     462:	b084      	sub	sp, #16
     464:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     466:	230c      	movs	r3, #12
     468:	18fb      	adds	r3, r7, r3
     46a:	1c18      	adds	r0, r3, #0
     46c:	4b40      	ldr	r3, [pc, #256]	; (570 <init+0x110>)
     46e:	4798      	blx	r3

	system_clock_init();
     470:	4b40      	ldr	r3, [pc, #256]	; (574 <init+0x114>)
     472:	4798      	blx	r3
	
	/* Configure outputs, set high */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     474:	230c      	movs	r3, #12
     476:	18fb      	adds	r3, r7, r3
     478:	2201      	movs	r2, #1
     47a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(Red_LED_PIN, &pin_conf);
     47c:	230c      	movs	r3, #12
     47e:	18fb      	adds	r3, r7, r3
     480:	2005      	movs	r0, #5
     482:	1c19      	adds	r1, r3, #0
     484:	4b3c      	ldr	r3, [pc, #240]	; (578 <init+0x118>)
     486:	4798      	blx	r3
	port_pin_set_output_level(Red_LED_PIN, 1);
     488:	2005      	movs	r0, #5
     48a:	2101      	movs	r1, #1
     48c:	4b3b      	ldr	r3, [pc, #236]	; (57c <init+0x11c>)
     48e:	4798      	blx	r3
	port_pin_set_config(Yellow_LED_PIN, &pin_conf);
     490:	230c      	movs	r3, #12
     492:	18fb      	adds	r3, r7, r3
     494:	2006      	movs	r0, #6
     496:	1c19      	adds	r1, r3, #0
     498:	4b37      	ldr	r3, [pc, #220]	; (578 <init+0x118>)
     49a:	4798      	blx	r3
	port_pin_set_output_level(Yellow_LED_PIN, 1);
     49c:	2006      	movs	r0, #6
     49e:	2101      	movs	r1, #1
     4a0:	4b36      	ldr	r3, [pc, #216]	; (57c <init+0x11c>)
     4a2:	4798      	blx	r3
	port_pin_set_config(Green_LED_PIN, &pin_conf);
     4a4:	230c      	movs	r3, #12
     4a6:	18fb      	adds	r3, r7, r3
     4a8:	2007      	movs	r0, #7
     4aa:	1c19      	adds	r1, r3, #0
     4ac:	4b32      	ldr	r3, [pc, #200]	; (578 <init+0x118>)
     4ae:	4798      	blx	r3
	port_pin_set_output_level(Green_LED_PIN, 1);
     4b0:	2007      	movs	r0, #7
     4b2:	2101      	movs	r1, #1
     4b4:	4b31      	ldr	r3, [pc, #196]	; (57c <init+0x11c>)
     4b6:	4798      	blx	r3
	port_pin_set_config(Reset_BT_PIN, &pin_conf);
     4b8:	230c      	movs	r3, #12
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	2010      	movs	r0, #16
     4be:	1c19      	adds	r1, r3, #0
     4c0:	4b2d      	ldr	r3, [pc, #180]	; (578 <init+0x118>)
     4c2:	4798      	blx	r3
	port_pin_set_output_level(Reset_BT_PIN, 1);	
     4c4:	2010      	movs	r0, #16
     4c6:	2101      	movs	r1, #1
     4c8:	4b2c      	ldr	r3, [pc, #176]	; (57c <init+0x11c>)
     4ca:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4cc:	230c      	movs	r3, #12
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	2200      	movs	r2, #0
     4d2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;			
     4d4:	230c      	movs	r3, #12
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	2201      	movs	r2, #1
     4da:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(UNPAIR_PUSH_BUTTON, &pin_conf);
     4dc:	230c      	movs	r3, #12
     4de:	18fb      	adds	r3, r7, r3
     4e0:	2004      	movs	r0, #4
     4e2:	1c19      	adds	r1, r3, #0
     4e4:	4b24      	ldr	r3, [pc, #144]	; (578 <init+0x118>)
     4e6:	4798      	blx	r3
	port_pin_set_config(WT41_CARRIER_DETECT_PIN, &pin_conf);
     4e8:	230c      	movs	r3, #12
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	2017      	movs	r0, #23
     4ee:	1c19      	adds	r1, r3, #0
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <init+0x118>)
     4f2:	4798      	blx	r3
	


	configure_tc4();
     4f4:	4b22      	ldr	r3, [pc, #136]	; (580 <init+0x120>)
     4f6:	4798      	blx	r3
	configure_tc4_callbacks();	
     4f8:	4b22      	ldr	r3, [pc, #136]	; (584 <init+0x124>)
     4fa:	4798      	blx	r3
	

	configure_usart_SERCOM5();
     4fc:	4b22      	ldr	r3, [pc, #136]	; (588 <init+0x128>)
     4fe:	4798      	blx	r3
	configure_usart_SERCOM4();
     500:	4b22      	ldr	r3, [pc, #136]	; (58c <init+0x12c>)
     502:	4798      	blx	r3
	init_serial_buffers();
     504:	4b22      	ldr	r3, [pc, #136]	; (590 <init+0x130>)
     506:	4798      	blx	r3

	
	configure_usart_callbacks();
     508:	4b22      	ldr	r3, [pc, #136]	; (594 <init+0x134>)
     50a:	4798      	blx	r3
		

	WT41_SERCOM5.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX	
     50c:	4b22      	ldr	r3, [pc, #136]	; (598 <init+0x138>)
     50e:	681b      	ldr	r3, [r3, #0]
     510:	2202      	movs	r2, #2
     512:	731a      	strb	r2, [r3, #12]
	midi_SERCOM4.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX
     514:	4b21      	ldr	r3, [pc, #132]	; (59c <init+0x13c>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	2202      	movs	r2, #2
     51a:	731a      	strb	r2, [r3, #12]
	system_interrupt_enable_global();
     51c:	4b20      	ldr	r3, [pc, #128]	; (5a0 <init+0x140>)
     51e:	4798      	blx	r3

	usart_read_buffer_job(&WT41_SERCOM5,(uint8_t *)rx_buffer_SERCOM5, MAX_RX_BUFFER_LENGTH);
     520:	4a1d      	ldr	r2, [pc, #116]	; (598 <init+0x138>)
     522:	4b20      	ldr	r3, [pc, #128]	; (5a4 <init+0x144>)
     524:	1c10      	adds	r0, r2, #0
     526:	1c19      	adds	r1, r3, #0
     528:	2201      	movs	r2, #1
     52a:	4b1f      	ldr	r3, [pc, #124]	; (5a8 <init+0x148>)
     52c:	4798      	blx	r3
	usart_read_buffer_job(&midi_SERCOM4,(uint8_t *)rx_buffer_SERCOM4, MAX_RX_BUFFER_LENGTH);
     52e:	4a1b      	ldr	r2, [pc, #108]	; (59c <init+0x13c>)
     530:	4b1e      	ldr	r3, [pc, #120]	; (5ac <init+0x14c>)
     532:	1c10      	adds	r0, r2, #0
     534:	1c19      	adds	r1, r3, #0
     536:	2201      	movs	r2, #1
     538:	4b1b      	ldr	r3, [pc, #108]	; (5a8 <init+0x148>)
     53a:	4798      	blx	r3
	
	wait_10msSec(20);	// wait .2 sec above to complete
     53c:	2014      	movs	r0, #20
     53e:	4b1c      	ldr	r3, [pc, #112]	; (5b0 <init+0x150>)
     540:	4798      	blx	r3

// prime the pump
	uint8_t string[] = "at\r\n";
     542:	1d3b      	adds	r3, r7, #4
     544:	4a1b      	ldr	r2, [pc, #108]	; (5b4 <init+0x154>)
     546:	6811      	ldr	r1, [r2, #0]
     548:	6019      	str	r1, [r3, #0]
     54a:	7912      	ldrb	r2, [r2, #4]
     54c:	711a      	strb	r2, [r3, #4]
	usart_write_buffer_wait(&WT41_SERCOM5, string, sizeof(string));
     54e:	4a12      	ldr	r2, [pc, #72]	; (598 <init+0x138>)
     550:	1d3b      	adds	r3, r7, #4
     552:	1c10      	adds	r0, r2, #0
     554:	1c19      	adds	r1, r3, #0
     556:	2205      	movs	r2, #5
     558:	4b17      	ldr	r3, [pc, #92]	; (5b8 <init+0x158>)
     55a:	4798      	blx	r3
	usart_write_buffer_wait(&midi_SERCOM4, string, sizeof(string));
     55c:	4a0f      	ldr	r2, [pc, #60]	; (59c <init+0x13c>)
     55e:	1d3b      	adds	r3, r7, #4
     560:	1c10      	adds	r0, r2, #0
     562:	1c19      	adds	r1, r3, #0
     564:	2205      	movs	r2, #5
     566:	4b14      	ldr	r3, [pc, #80]	; (5b8 <init+0x158>)
     568:	4798      	blx	r3


}
     56a:	46bd      	mov	sp, r7
     56c:	b004      	add	sp, #16
     56e:	bd80      	pop	{r7, pc}
     570:	00000189 	.word	0x00000189
     574:	000038ad 	.word	0x000038ad
     578:	000026a5 	.word	0x000026a5
     57c:	000001a9 	.word	0x000001a9
     580:	00001935 	.word	0x00001935
     584:	00001991 	.word	0x00001991
     588:	000007d5 	.word	0x000007d5
     58c:	00000755 	.word	0x00000755
     590:	00000951 	.word	0x00000951
     594:	000003d9 	.word	0x000003d9
     598:	20000064 	.word	0x20000064
     59c:	20000088 	.word	0x20000088
     5a0:	000001f9 	.word	0x000001f9
     5a4:	200000b0 	.word	0x200000b0
     5a8:	00000da1 	.word	0x00000da1
     5ac:	200000ac 	.word	0x200000ac
     5b0:	000018d5 	.word	0x000018d5
     5b4:	00004364 	.word	0x00004364
     5b8:	0000329d 	.word	0x0000329d

000005bc <usart_write_SERCOM>:

//enum status_code usart_write_wait(struct usart_module *const module,	const uint16_t tx_data)
enum status_code usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data);

enum status_code usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b084      	sub	sp, #16
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
     5c4:	1c0a      	adds	r2, r1, #0
     5c6:	1cfb      	adds	r3, r7, #3
     5c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	60fb      	str	r3, [r7, #12]

	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC))return STATUS_BUSY;
     5d0:	68fb      	ldr	r3, [r7, #12]
     5d2:	7b9b      	ldrb	r3, [r3, #14]
     5d4:	b2db      	uxtb	r3, r3
     5d6:	1c1a      	adds	r2, r3, #0
     5d8:	2302      	movs	r3, #2
     5da:	4013      	ands	r3, r2
     5dc:	d101      	bne.n	5e2 <usart_write_SERCOM+0x26>
     5de:	2305      	movs	r3, #5
     5e0:	e012      	b.n	608 <usart_write_SERCOM+0x4c>

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	79db      	ldrb	r3, [r3, #7]
     5e6:	2201      	movs	r2, #1
     5e8:	4053      	eors	r3, r2
     5ea:	b2db      	uxtb	r3, r3
     5ec:	2b00      	cmp	r3, #0
     5ee:	d001      	beq.n	5f4 <usart_write_SERCOM+0x38>
		return STATUS_ERR_DENIED;
     5f0:	231c      	movs	r3, #28
     5f2:	e009      	b.n	608 <usart_write_SERCOM+0x4c>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	1c18      	adds	r0, r3, #0
     5f8:	4b05      	ldr	r3, [pc, #20]	; (610 <usart_write_SERCOM+0x54>)
     5fa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     5fc:	1cfb      	adds	r3, r7, #3
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	b29a      	uxth	r2, r3
     602:	68fb      	ldr	r3, [r7, #12]
     604:	831a      	strh	r2, [r3, #24]

	return STATUS_OK; 
     606:	2300      	movs	r3, #0

}
     608:	1c18      	adds	r0, r3, #0
     60a:	46bd      	mov	sp, r7
     60c:	b004      	add	sp, #16
     60e:	bd80      	pop	{r7, pc}
     610:	00000255 	.word	0x00000255

00000614 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     614:	b580      	push	{r7, lr}
     616:	b082      	sub	sp, #8
     618:	af00      	add	r7, sp, #0
     61a:	1c02      	adds	r2, r0, #0
     61c:	1dfb      	adds	r3, r7, #7
     61e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <system_interrupt_enable+0x28>)
     622:	1dfa      	adds	r2, r7, #7
     624:	7812      	ldrb	r2, [r2, #0]
     626:	1c11      	adds	r1, r2, #0
     628:	221f      	movs	r2, #31
     62a:	400a      	ands	r2, r1
     62c:	2101      	movs	r1, #1
     62e:	4091      	lsls	r1, r2
     630:	1c0a      	adds	r2, r1, #0
     632:	601a      	str	r2, [r3, #0]
}
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	e000e100 	.word	0xe000e100

00000640 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     640:	b580      	push	{r7, lr}
     642:	b084      	sub	sp, #16
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     648:	687b      	ldr	r3, [r7, #4]
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	8a1b      	ldrh	r3, [r3, #16]
     652:	b29b      	uxth	r3, r3
     654:	1c1a      	adds	r2, r3, #0
     656:	2380      	movs	r3, #128	; 0x80
     658:	021b      	lsls	r3, r3, #8
     65a:	4013      	ands	r3, r2
     65c:	1e5a      	subs	r2, r3, #1
     65e:	4193      	sbcs	r3, r2
     660:	b2db      	uxtb	r3, r3
#endif
}
     662:	1c18      	adds	r0, r3, #0
     664:	46bd      	mov	sp, r7
     666:	b004      	add	sp, #16
     668:	bd80      	pop	{r7, pc}
     66a:	46c0      	nop			; (mov r8, r8)

0000066c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     66c:	b580      	push	{r7, lr}
     66e:	b082      	sub	sp, #8
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     674:	46c0      	nop			; (mov r8, r8)
     676:	687b      	ldr	r3, [r7, #4]
     678:	1c18      	adds	r0, r3, #0
     67a:	4b03      	ldr	r3, [pc, #12]	; (688 <_usart_wait_for_sync+0x1c>)
     67c:	4798      	blx	r3
     67e:	1e03      	subs	r3, r0, #0
     680:	d1f9      	bne.n	676 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     682:	46bd      	mov	sp, r7
     684:	b002      	add	sp, #8
     686:	bd80      	pop	{r7, pc}
     688:	00000641 	.word	0x00000641

0000068c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     694:	687b      	ldr	r3, [r7, #4]
     696:	2280      	movs	r2, #128	; 0x80
     698:	05d2      	lsls	r2, r2, #23
     69a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	2200      	movs	r2, #0
     6a0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	22ff      	movs	r2, #255	; 0xff
     6a6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	2200      	movs	r2, #0
     6ac:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	2200      	movs	r2, #0
     6b2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	2296      	movs	r2, #150	; 0x96
     6b8:	0192      	lsls	r2, r2, #6
     6ba:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	2201      	movs	r2, #1
     6c0:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	2201      	movs	r2, #1
     6c6:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	2200      	movs	r2, #0
     6cc:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	2200      	movs	r2, #0
     6d2:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2200      	movs	r2, #0
     6d8:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	2288      	movs	r2, #136	; 0x88
     6de:	0352      	lsls	r2, r2, #13
     6e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	2200      	movs	r2, #0
     6e6:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	2200      	movs	r2, #0
     6ec:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	2200      	movs	r2, #0
     6f2:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	2200      	movs	r2, #0
     6f8:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	2200      	movs	r2, #0
     6fe:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
     700:	687b      	ldr	r3, [r7, #4]
     702:	2200      	movs	r2, #0
     704:	62da      	str	r2, [r3, #44]	; 0x2c
	config->receive_pulse_length                        = 19;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
#endif
}
     706:	46bd      	mov	sp, r7
     708:	b002      	add	sp, #8
     70a:	bd80      	pop	{r7, pc}

0000070c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     70c:	b580      	push	{r7, lr}
     70e:	b084      	sub	sp, #16
     710:	af00      	add	r7, sp, #0
     712:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     714:	687b      	ldr	r3, [r7, #4]
     716:	681b      	ldr	r3, [r3, #0]
     718:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	1c18      	adds	r0, r3, #0
     720:	4b09      	ldr	r3, [pc, #36]	; (748 <usart_enable+0x3c>)
     722:	4798      	blx	r3
     724:	1c03      	adds	r3, r0, #0
     726:	1c18      	adds	r0, r3, #0
     728:	4b08      	ldr	r3, [pc, #32]	; (74c <usart_enable+0x40>)
     72a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	1c18      	adds	r0, r3, #0
     730:	4b07      	ldr	r3, [pc, #28]	; (750 <usart_enable+0x44>)
     732:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     734:	68fb      	ldr	r3, [r7, #12]
     736:	681b      	ldr	r3, [r3, #0]
     738:	2202      	movs	r2, #2
     73a:	431a      	orrs	r2, r3
     73c:	68fb      	ldr	r3, [r7, #12]
     73e:	601a      	str	r2, [r3, #0]
}
     740:	46bd      	mov	sp, r7
     742:	b004      	add	sp, #16
     744:	bd80      	pop	{r7, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00001a41 	.word	0x00001a41
     74c:	00000615 	.word	0x00000615
     750:	0000066d 	.word	0x0000066d

00000754 <configure_usart_SERCOM4>:
//! [setup_enable]
}
*/
//! [setup]
void configure_usart_SERCOM4(void)
{
     754:	b580      	push	{r7, lr}
     756:	b08c      	sub	sp, #48	; 0x30
     758:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
     75a:	1c3b      	adds	r3, r7, #0
     75c:	1c18      	adds	r0, r3, #0
     75e:	4b15      	ldr	r3, [pc, #84]	; (7b4 <configure_usart_SERCOM4+0x60>)
     760:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 31200;  // midi
     762:	1c3b      	adds	r3, r7, #0
     764:	4a14      	ldr	r2, [pc, #80]	; (7b8 <configure_usart_SERCOM4+0x64>)
     766:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_1;
     768:	1c3b      	adds	r3, r7, #0
     76a:	2201      	movs	r2, #1
     76c:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     76e:	1c3b      	adds	r3, r7, #0
     770:	22c4      	movs	r2, #196	; 0xc4
     772:	0392      	lsls	r2, r2, #14
     774:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;  // unused
     776:	1c3b      	adds	r3, r7, #0
     778:	2201      	movs	r2, #1
     77a:	4252      	negs	r2, r2
     77c:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;  // unused
     77e:	1c3b      	adds	r3, r7, #0
     780:	2201      	movs	r2, #1
     782:	4252      	negs	r2, r2
     784:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     786:	1c3b      	adds	r3, r7, #0
     788:	4a0c      	ldr	r2, [pc, #48]	; (7bc <configure_usart_SERCOM4+0x68>)
     78a:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;	
     78c:	1c3b      	adds	r3, r7, #0
     78e:	4a0c      	ldr	r2, [pc, #48]	; (7c0 <configure_usart_SERCOM4+0x6c>)
     790:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&midi_SERCOM4,
     792:	46c0      	nop			; (mov r8, r8)
     794:	4a0b      	ldr	r2, [pc, #44]	; (7c4 <configure_usart_SERCOM4+0x70>)
     796:	490c      	ldr	r1, [pc, #48]	; (7c8 <configure_usart_SERCOM4+0x74>)
     798:	1c3b      	adds	r3, r7, #0
     79a:	1c10      	adds	r0, r2, #0
     79c:	1c1a      	adds	r2, r3, #0
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <configure_usart_SERCOM4+0x78>)
     7a0:	4798      	blx	r3
     7a2:	1e03      	subs	r3, r0, #0
     7a4:	d1f6      	bne.n	794 <configure_usart_SERCOM4+0x40>
	SERCOM4, &config_usart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&midi_SERCOM4);
     7a6:	4b07      	ldr	r3, [pc, #28]	; (7c4 <configure_usart_SERCOM4+0x70>)
     7a8:	1c18      	adds	r0, r3, #0
     7aa:	4b09      	ldr	r3, [pc, #36]	; (7d0 <configure_usart_SERCOM4+0x7c>)
     7ac:	4798      	blx	r3
	//! [setup_enable]
}
     7ae:	46bd      	mov	sp, r7
     7b0:	b00c      	add	sp, #48	; 0x30
     7b2:	bd80      	pop	{r7, pc}
     7b4:	0000068d 	.word	0x0000068d
     7b8:	000079e0 	.word	0x000079e0
     7bc:	002a0003 	.word	0x002a0003
     7c0:	002b0003 	.word	0x002b0003
     7c4:	20000088 	.word	0x20000088
     7c8:	42001800 	.word	0x42001800
     7cc:	00002fe1 	.word	0x00002fe1
     7d0:	0000070d 	.word	0x0000070d

000007d4 <configure_usart_SERCOM5>:
//! [setup]
void configure_usart_SERCOM5(void)
{
     7d4:	b580      	push	{r7, lr}
     7d6:	b08c      	sub	sp, #48	; 0x30
     7d8:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
     7da:	1c3b      	adds	r3, r7, #0
     7dc:	1c18      	adds	r0, r3, #0
     7de:	4b15      	ldr	r3, [pc, #84]	; (834 <configure_usart_SERCOM5+0x60>)
     7e0:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 115200;
     7e2:	1c3b      	adds	r3, r7, #0
     7e4:	22e1      	movs	r2, #225	; 0xe1
     7e6:	0252      	lsls	r2, r2, #9
     7e8:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_1; 
     7ea:	1c3b      	adds	r3, r7, #0
     7ec:	2201      	movs	r2, #1
     7ee:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1; // USART_RX_3_TX_2_XCK_3; //USART_RX_1_TX_0_XCK_1
     7f0:	1c3b      	adds	r3, r7, #0
     7f2:	2280      	movs	r2, #128	; 0x80
     7f4:	0352      	lsls	r2, r2, #13
     7f6:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PB16C_SERCOM5_PAD0;  // TX
     7f8:	1c3b      	adds	r3, r7, #0
     7fa:	4a0f      	ldr	r2, [pc, #60]	; (838 <configure_usart_SERCOM5+0x64>)
     7fc:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_PB17C_SERCOM5_PAD1;  // RX
     7fe:	1c3b      	adds	r3, r7, #0
     800:	4a0e      	ldr	r2, [pc, #56]	; (83c <configure_usart_SERCOM5+0x68>)
     802:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// UNUSED
     804:	1c3b      	adds	r3, r7, #0
     806:	4a0e      	ldr	r2, [pc, #56]	; (840 <configure_usart_SERCOM5+0x6c>)
     808:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// UNUSED
     80a:	1c3b      	adds	r3, r7, #0
     80c:	4a0d      	ldr	r2, [pc, #52]	; (844 <configure_usart_SERCOM5+0x70>)
     80e:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&WT41_SERCOM5, SERCOM5, &config_usart) != STATUS_OK) {
     810:	46c0      	nop			; (mov r8, r8)
     812:	4a0d      	ldr	r2, [pc, #52]	; (848 <configure_usart_SERCOM5+0x74>)
     814:	490d      	ldr	r1, [pc, #52]	; (84c <configure_usart_SERCOM5+0x78>)
     816:	1c3b      	adds	r3, r7, #0
     818:	1c10      	adds	r0, r2, #0
     81a:	1c1a      	adds	r2, r3, #0
     81c:	4b0c      	ldr	r3, [pc, #48]	; (850 <configure_usart_SERCOM5+0x7c>)
     81e:	4798      	blx	r3
     820:	1e03      	subs	r3, r0, #0
     822:	d1f6      	bne.n	812 <configure_usart_SERCOM5+0x3e>
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&WT41_SERCOM5);
     824:	4b08      	ldr	r3, [pc, #32]	; (848 <configure_usart_SERCOM5+0x74>)
     826:	1c18      	adds	r0, r3, #0
     828:	4b0a      	ldr	r3, [pc, #40]	; (854 <configure_usart_SERCOM5+0x80>)
     82a:	4798      	blx	r3
	//! [setup_enable]
}
     82c:	46bd      	mov	sp, r7
     82e:	b00c      	add	sp, #48	; 0x30
     830:	bd80      	pop	{r7, pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	0000068d 	.word	0x0000068d
     838:	00300002 	.word	0x00300002
     83c:	00310002 	.word	0x00310002
     840:	00360003 	.word	0x00360003
     844:	00370003 	.word	0x00370003
     848:	20000064 	.word	0x20000064
     84c:	42001c00 	.word	0x42001c00
     850:	00002fe1 	.word	0x00002fe1
     854:	0000070d 	.word	0x0000070d

00000858 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     858:	b580      	push	{r7, lr}
     85a:	b084      	sub	sp, #16
     85c:	af00      	add	r7, sp, #0
     85e:	1c02      	adds	r2, r0, #0
     860:	1dfb      	adds	r3, r7, #7
     862:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     864:	230f      	movs	r3, #15
     866:	18fb      	adds	r3, r7, r3
     868:	1dfa      	adds	r2, r7, #7
     86a:	7812      	ldrb	r2, [r2, #0]
     86c:	09d2      	lsrs	r2, r2, #7
     86e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     870:	230e      	movs	r3, #14
     872:	18fb      	adds	r3, r7, r3
     874:	1dfa      	adds	r2, r7, #7
     876:	7812      	ldrb	r2, [r2, #0]
     878:	0952      	lsrs	r2, r2, #5
     87a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     87c:	4b0d      	ldr	r3, [pc, #52]	; (8b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     87e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     880:	230f      	movs	r3, #15
     882:	18fb      	adds	r3, r7, r3
     884:	781b      	ldrb	r3, [r3, #0]
     886:	2b00      	cmp	r3, #0
     888:	d10f      	bne.n	8aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     88a:	230f      	movs	r3, #15
     88c:	18fb      	adds	r3, r7, r3
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	009b      	lsls	r3, r3, #2
     892:	2210      	movs	r2, #16
     894:	4694      	mov	ip, r2
     896:	44bc      	add	ip, r7
     898:	4463      	add	r3, ip
     89a:	3b08      	subs	r3, #8
     89c:	681a      	ldr	r2, [r3, #0]
     89e:	230e      	movs	r3, #14
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	781b      	ldrb	r3, [r3, #0]
     8a4:	01db      	lsls	r3, r3, #7
     8a6:	18d3      	adds	r3, r2, r3
     8a8:	e000      	b.n	8ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     8aa:	2300      	movs	r3, #0
	}
}
     8ac:	1c18      	adds	r0, r3, #0
     8ae:	46bd      	mov	sp, r7
     8b0:	b004      	add	sp, #16
     8b2:	bd80      	pop	{r7, pc}
     8b4:	41004400 	.word	0x41004400

000008b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	1c02      	adds	r2, r0, #0
     8c0:	1dfb      	adds	r3, r7, #7
     8c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     8c4:	1dfb      	adds	r3, r7, #7
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	1c18      	adds	r0, r3, #0
     8ca:	4b03      	ldr	r3, [pc, #12]	; (8d8 <port_get_group_from_gpio_pin+0x20>)
     8cc:	4798      	blx	r3
     8ce:	1c03      	adds	r3, r0, #0
}
     8d0:	1c18      	adds	r0, r3, #0
     8d2:	46bd      	mov	sp, r7
     8d4:	b002      	add	sp, #8
     8d6:	bd80      	pop	{r7, pc}
     8d8:	00000859 	.word	0x00000859

000008dc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     8dc:	b580      	push	{r7, lr}
     8de:	b084      	sub	sp, #16
     8e0:	af00      	add	r7, sp, #0
     8e2:	1c02      	adds	r2, r0, #0
     8e4:	1dfb      	adds	r3, r7, #7
     8e6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     8e8:	1dfb      	adds	r3, r7, #7
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	1c18      	adds	r0, r3, #0
     8ee:	4b0b      	ldr	r3, [pc, #44]	; (91c <port_pin_get_input_level+0x40>)
     8f0:	4798      	blx	r3
     8f2:	1c03      	adds	r3, r0, #0
     8f4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     8f6:	1dfb      	adds	r3, r7, #7
     8f8:	781b      	ldrb	r3, [r3, #0]
     8fa:	221f      	movs	r2, #31
     8fc:	4013      	ands	r3, r2
     8fe:	2201      	movs	r2, #1
     900:	409a      	lsls	r2, r3
     902:	1c13      	adds	r3, r2, #0
     904:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	6a1b      	ldr	r3, [r3, #32]
     90a:	68ba      	ldr	r2, [r7, #8]
     90c:	4013      	ands	r3, r2
     90e:	1e5a      	subs	r2, r3, #1
     910:	4193      	sbcs	r3, r2
     912:	b2db      	uxtb	r3, r3
}
     914:	1c18      	adds	r0, r3, #0
     916:	46bd      	mov	sp, r7
     918:	b004      	add	sp, #16
     91a:	bd80      	pop	{r7, pc}
     91c:	000008b9 	.word	0x000008b9

00000920 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     920:	b580      	push	{r7, lr}
     922:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <system_interrupt_enable_global+0x14>)
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
     92a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     92e:	b662      	cpsie	i
}
     930:	46bd      	mov	sp, r7
     932:	bd80      	pop	{r7, pc}
     934:	20000008 	.word	0x20000008

00000938 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     938:	b580      	push	{r7, lr}
     93a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     93c:	b672      	cpsid	i
     93e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     942:	4b02      	ldr	r3, [pc, #8]	; (94c <system_interrupt_disable_global+0x14>)
     944:	2200      	movs	r2, #0
     946:	701a      	strb	r2, [r3, #0]
}
     948:	46bd      	mov	sp, r7
     94a:	bd80      	pop	{r7, pc}
     94c:	20000008 	.word	0x20000008

00000950 <init_serial_buffers>:

struct bufferDef serialQ;
char lastBT;

struct bufferDef *init_serial_buffers(void)
{	uint16_t i;
     950:	b580      	push	{r7, lr}
     952:	b082      	sub	sp, #8
     954:	af00      	add	r7, sp, #0
	for (i=0; i<255; i++)
     956:	1dbb      	adds	r3, r7, #6
     958:	2200      	movs	r2, #0
     95a:	801a      	strh	r2, [r3, #0]
     95c:	e014      	b.n	988 <init_serial_buffers+0x38>
	{
		serialQ.blueToothToMidi[i] = serialQ.midiToBlueTooth[i] = 0; 
     95e:	1dbb      	adds	r3, r7, #6
     960:	881a      	ldrh	r2, [r3, #0]
     962:	1dbb      	adds	r3, r7, #6
     964:	881b      	ldrh	r3, [r3, #0]
     966:	4915      	ldr	r1, [pc, #84]	; (9bc <init_serial_buffers+0x6c>)
     968:	2000      	movs	r0, #0
     96a:	54c8      	strb	r0, [r1, r3]
     96c:	4913      	ldr	r1, [pc, #76]	; (9bc <init_serial_buffers+0x6c>)
     96e:	5cc8      	ldrb	r0, [r1, r3]
     970:	4912      	ldr	r1, [pc, #72]	; (9bc <init_serial_buffers+0x6c>)
     972:	2380      	movs	r3, #128	; 0x80
     974:	005b      	lsls	r3, r3, #1
     976:	188a      	adds	r2, r1, r2
     978:	18d3      	adds	r3, r2, r3
     97a:	1c02      	adds	r2, r0, #0
     97c:	701a      	strb	r2, [r3, #0]
struct bufferDef serialQ;
char lastBT;

struct bufferDef *init_serial_buffers(void)
{	uint16_t i;
	for (i=0; i<255; i++)
     97e:	1dbb      	adds	r3, r7, #6
     980:	881a      	ldrh	r2, [r3, #0]
     982:	1dbb      	adds	r3, r7, #6
     984:	3201      	adds	r2, #1
     986:	801a      	strh	r2, [r3, #0]
     988:	1dbb      	adds	r3, r7, #6
     98a:	881b      	ldrh	r3, [r3, #0]
     98c:	2bfe      	cmp	r3, #254	; 0xfe
     98e:	d9e6      	bls.n	95e <init_serial_buffers+0xe>
	{
		serialQ.blueToothToMidi[i] = serialQ.midiToBlueTooth[i] = 0; 
	}
	serialQ.bt_in = 0;
     990:	4a0a      	ldr	r2, [pc, #40]	; (9bc <init_serial_buffers+0x6c>)
     992:	2380      	movs	r3, #128	; 0x80
     994:	009b      	lsls	r3, r3, #2
     996:	2100      	movs	r1, #0
     998:	54d1      	strb	r1, [r2, r3]
	serialQ.bt_out = 0;
     99a:	4b08      	ldr	r3, [pc, #32]	; (9bc <init_serial_buffers+0x6c>)
     99c:	4a08      	ldr	r2, [pc, #32]	; (9c0 <init_serial_buffers+0x70>)
     99e:	2100      	movs	r1, #0
     9a0:	5499      	strb	r1, [r3, r2]
	serialQ.midi_in = 0;
     9a2:	4b06      	ldr	r3, [pc, #24]	; (9bc <init_serial_buffers+0x6c>)
     9a4:	4a07      	ldr	r2, [pc, #28]	; (9c4 <init_serial_buffers+0x74>)
     9a6:	2100      	movs	r1, #0
     9a8:	5499      	strb	r1, [r3, r2]
	serialQ.midi_out = 0;
     9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <init_serial_buffers+0x6c>)
     9ac:	4a06      	ldr	r2, [pc, #24]	; (9c8 <init_serial_buffers+0x78>)
     9ae:	2100      	movs	r1, #0
     9b0:	5499      	strb	r1, [r3, r2]
	return &serialQ;	
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <init_serial_buffers+0x6c>)
}
     9b4:	1c18      	adds	r0, r3, #0
     9b6:	46bd      	mov	sp, r7
     9b8:	b002      	add	sp, #8
     9ba:	bd80      	pop	{r7, pc}
     9bc:	200000c0 	.word	0x200000c0
     9c0:	00000201 	.word	0x00000201
     9c4:	00000202 	.word	0x00000202
     9c8:	00000203 	.word	0x00000203

000009cc <midi_to_bt_loadQ>:
	if ((serialQ.bt_in + 1) != serialQ.bt_out) serialQ.blueToothToMidi[serialQ.bt_in++] = lastBT = data;
		else return STATUS_ERR_DENIED;
	return STATUS_OK;	
}
enum status_code midi_to_bt_loadQ (uint8_t data)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b082      	sub	sp, #8
     9d0:	af00      	add	r7, sp, #0
     9d2:	1c02      	adds	r2, r0, #0
     9d4:	1dfb      	adds	r3, r7, #7
     9d6:	701a      	strb	r2, [r3, #0]
	if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = data;
     9d8:	4b0e      	ldr	r3, [pc, #56]	; (a14 <midi_to_bt_loadQ+0x48>)
     9da:	4a0f      	ldr	r2, [pc, #60]	; (a18 <midi_to_bt_loadQ+0x4c>)
     9dc:	5c9b      	ldrb	r3, [r3, r2]
     9de:	3301      	adds	r3, #1
     9e0:	4a0c      	ldr	r2, [pc, #48]	; (a14 <midi_to_bt_loadQ+0x48>)
     9e2:	490e      	ldr	r1, [pc, #56]	; (a1c <midi_to_bt_loadQ+0x50>)
     9e4:	5c52      	ldrb	r2, [r2, r1]
     9e6:	4293      	cmp	r3, r2
     9e8:	d00e      	beq.n	a08 <midi_to_bt_loadQ+0x3c>
     9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <midi_to_bt_loadQ+0x48>)
     9ec:	4a0a      	ldr	r2, [pc, #40]	; (a18 <midi_to_bt_loadQ+0x4c>)
     9ee:	5c9b      	ldrb	r3, [r3, r2]
     9f0:	1c5a      	adds	r2, r3, #1
     9f2:	b2d0      	uxtb	r0, r2
     9f4:	4a07      	ldr	r2, [pc, #28]	; (a14 <midi_to_bt_loadQ+0x48>)
     9f6:	4908      	ldr	r1, [pc, #32]	; (a18 <midi_to_bt_loadQ+0x4c>)
     9f8:	5450      	strb	r0, [r2, r1]
     9fa:	1c19      	adds	r1, r3, #0
     9fc:	4b05      	ldr	r3, [pc, #20]	; (a14 <midi_to_bt_loadQ+0x48>)
     9fe:	1dfa      	adds	r2, r7, #7
     a00:	7812      	ldrb	r2, [r2, #0]
     a02:	545a      	strb	r2, [r3, r1]
		else return STATUS_ERR_DENIED;
	return STATUS_OK;
     a04:	2300      	movs	r3, #0
     a06:	e000      	b.n	a0a <midi_to_bt_loadQ+0x3e>
	return STATUS_OK;	
}
enum status_code midi_to_bt_loadQ (uint8_t data)
{
	if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = data;
		else return STATUS_ERR_DENIED;
     a08:	231c      	movs	r3, #28
	return STATUS_OK;
}
     a0a:	1c18      	adds	r0, r3, #0
     a0c:	46bd      	mov	sp, r7
     a0e:	b002      	add	sp, #8
     a10:	bd80      	pop	{r7, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	200000c0 	.word	0x200000c0
     a18:	00000202 	.word	0x00000202
     a1c:	00000203 	.word	0x00000203

00000a20 <load_iWrap_Cmd>:


void load_iWrap_Cmd( char *str)
{
     a20:	b580      	push	{r7, lr}
     a22:	b084      	sub	sp, #16
     a24:	af00      	add	r7, sp, #0
     a26:	6078      	str	r0, [r7, #4]
	uint8_t i;
	unsigned int len;
	len = strlen((const char*)str);
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	1c18      	adds	r0, r3, #0
     a2c:	4b12      	ldr	r3, [pc, #72]	; (a78 <load_iWrap_Cmd+0x58>)
     a2e:	4798      	blx	r3
     a30:	1c03      	adds	r3, r0, #0
     a32:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
     a34:	230f      	movs	r3, #15
     a36:	18fb      	adds	r3, r7, r3
     a38:	2200      	movs	r2, #0
     a3a:	701a      	strb	r2, [r3, #0]
     a3c:	e012      	b.n	a64 <load_iWrap_Cmd+0x44>
	{
		system_interrupt_disable_global();
     a3e:	4b0f      	ldr	r3, [pc, #60]	; (a7c <load_iWrap_Cmd+0x5c>)
     a40:	4798      	blx	r3
		midi_to_bt_loadQ(*str);
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	1c18      	adds	r0, r3, #0
     a48:	4b0d      	ldr	r3, [pc, #52]	; (a80 <load_iWrap_Cmd+0x60>)
     a4a:	4798      	blx	r3
		system_interrupt_enable_global();
     a4c:	4b0d      	ldr	r3, [pc, #52]	; (a84 <load_iWrap_Cmd+0x64>)
     a4e:	4798      	blx	r3
		str++;	
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	3301      	adds	r3, #1
     a54:	607b      	str	r3, [r7, #4]
void load_iWrap_Cmd( char *str)
{
	uint8_t i;
	unsigned int len;
	len = strlen((const char*)str);
	for (i = 0; i < len; i++)
     a56:	230f      	movs	r3, #15
     a58:	18fb      	adds	r3, r7, r3
     a5a:	781a      	ldrb	r2, [r3, #0]
     a5c:	230f      	movs	r3, #15
     a5e:	18fb      	adds	r3, r7, r3
     a60:	3201      	adds	r2, #1
     a62:	701a      	strb	r2, [r3, #0]
     a64:	230f      	movs	r3, #15
     a66:	18fb      	adds	r3, r7, r3
     a68:	781a      	ldrb	r2, [r3, #0]
     a6a:	68bb      	ldr	r3, [r7, #8]
     a6c:	429a      	cmp	r2, r3
     a6e:	d3e6      	bcc.n	a3e <load_iWrap_Cmd+0x1e>
		system_interrupt_disable_global();
		midi_to_bt_loadQ(*str);
		system_interrupt_enable_global();
		str++;	
	}
}
     a70:	46bd      	mov	sp, r7
     a72:	b004      	add	sp, #16
     a74:	bd80      	pop	{r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	00004339 	.word	0x00004339
     a7c:	00000939 	.word	0x00000939
     a80:	000009cd 	.word	0x000009cd
     a84:	00000921 	.word	0x00000921

00000a88 <bt_to_midi_length>:
------------------------------------------------------------------------------*/

uint16_t blen, mlen;

uint8_t bt_to_midi_length (void)
{	uint16_t temp = 0;
     a88:	b580      	push	{r7, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	af00      	add	r7, sp, #0
     a8e:	1dbb      	adds	r3, r7, #6
     a90:	2200      	movs	r2, #0
     a92:	801a      	strh	r2, [r3, #0]
	if (serialQ.bt_in != serialQ.bt_out) 
     a94:	4a1c      	ldr	r2, [pc, #112]	; (b08 <bt_to_midi_length+0x80>)
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	009b      	lsls	r3, r3, #2
     a9a:	5cd2      	ldrb	r2, [r2, r3]
     a9c:	4b1a      	ldr	r3, [pc, #104]	; (b08 <bt_to_midi_length+0x80>)
     a9e:	491b      	ldr	r1, [pc, #108]	; (b0c <bt_to_midi_length+0x84>)
     aa0:	5c5b      	ldrb	r3, [r3, r1]
     aa2:	429a      	cmp	r2, r3
     aa4:	d024      	beq.n	af0 <bt_to_midi_length+0x68>
	{	if (serialQ.bt_in > serialQ.bt_out) 
     aa6:	4a18      	ldr	r2, [pc, #96]	; (b08 <bt_to_midi_length+0x80>)
     aa8:	2380      	movs	r3, #128	; 0x80
     aaa:	009b      	lsls	r3, r3, #2
     aac:	5cd2      	ldrb	r2, [r2, r3]
     aae:	4b16      	ldr	r3, [pc, #88]	; (b08 <bt_to_midi_length+0x80>)
     ab0:	4916      	ldr	r1, [pc, #88]	; (b0c <bt_to_midi_length+0x84>)
     ab2:	5c5b      	ldrb	r3, [r3, r1]
     ab4:	429a      	cmp	r2, r3
     ab6:	d90c      	bls.n	ad2 <bt_to_midi_length+0x4a>
			temp = serialQ.bt_in - serialQ.bt_out;
     ab8:	4a13      	ldr	r2, [pc, #76]	; (b08 <bt_to_midi_length+0x80>)
     aba:	2380      	movs	r3, #128	; 0x80
     abc:	009b      	lsls	r3, r3, #2
     abe:	5cd3      	ldrb	r3, [r2, r3]
     ac0:	b299      	uxth	r1, r3
     ac2:	4b11      	ldr	r3, [pc, #68]	; (b08 <bt_to_midi_length+0x80>)
     ac4:	4a11      	ldr	r2, [pc, #68]	; (b0c <bt_to_midi_length+0x84>)
     ac6:	5c9b      	ldrb	r3, [r3, r2]
     ac8:	b29a      	uxth	r2, r3
     aca:	1dbb      	adds	r3, r7, #6
     acc:	1a8a      	subs	r2, r1, r2
     ace:	801a      	strh	r2, [r3, #0]
     ad0:	e00e      	b.n	af0 <bt_to_midi_length+0x68>
		else
		{
			temp = 256 - serialQ.bt_out + serialQ.bt_in;
     ad2:	4a0d      	ldr	r2, [pc, #52]	; (b08 <bt_to_midi_length+0x80>)
     ad4:	2380      	movs	r3, #128	; 0x80
     ad6:	009b      	lsls	r3, r3, #2
     ad8:	5cd3      	ldrb	r3, [r2, r3]
     ada:	b29a      	uxth	r2, r3
     adc:	4b0a      	ldr	r3, [pc, #40]	; (b08 <bt_to_midi_length+0x80>)
     ade:	490b      	ldr	r1, [pc, #44]	; (b0c <bt_to_midi_length+0x84>)
     ae0:	5c5b      	ldrb	r3, [r3, r1]
     ae2:	b29b      	uxth	r3, r3
     ae4:	1ad3      	subs	r3, r2, r3
     ae6:	b29a      	uxth	r2, r3
     ae8:	1dbb      	adds	r3, r7, #6
     aea:	3201      	adds	r2, #1
     aec:	32ff      	adds	r2, #255	; 0xff
     aee:	801a      	strh	r2, [r3, #0]
		}
	}
	blen = temp;
     af0:	4b07      	ldr	r3, [pc, #28]	; (b10 <bt_to_midi_length+0x88>)
     af2:	1dba      	adds	r2, r7, #6
     af4:	8812      	ldrh	r2, [r2, #0]
     af6:	801a      	strh	r2, [r3, #0]
	return (temp);
     af8:	1dbb      	adds	r3, r7, #6
     afa:	881b      	ldrh	r3, [r3, #0]
     afc:	b2db      	uxtb	r3, r3
}
     afe:	1c18      	adds	r0, r3, #0
     b00:	46bd      	mov	sp, r7
     b02:	b002      	add	sp, #8
     b04:	bd80      	pop	{r7, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	200000c0 	.word	0x200000c0
     b0c:	00000201 	.word	0x00000201
     b10:	200002c8 	.word	0x200002c8

00000b14 <midi_to_bt_length>:
uint8_t midi_to_bt_length (void)
{	uint16_t temp =0;
     b14:	b580      	push	{r7, lr}
     b16:	b082      	sub	sp, #8
     b18:	af00      	add	r7, sp, #0
     b1a:	1dbb      	adds	r3, r7, #6
     b1c:	2200      	movs	r2, #0
     b1e:	801a      	strh	r2, [r3, #0]
	if (serialQ.midi_in != serialQ.midi_out) 
     b20:	4b1a      	ldr	r3, [pc, #104]	; (b8c <midi_to_bt_length+0x78>)
     b22:	4a1b      	ldr	r2, [pc, #108]	; (b90 <midi_to_bt_length+0x7c>)
     b24:	5c9a      	ldrb	r2, [r3, r2]
     b26:	4b19      	ldr	r3, [pc, #100]	; (b8c <midi_to_bt_length+0x78>)
     b28:	491a      	ldr	r1, [pc, #104]	; (b94 <midi_to_bt_length+0x80>)
     b2a:	5c5b      	ldrb	r3, [r3, r1]
     b2c:	429a      	cmp	r2, r3
     b2e:	d021      	beq.n	b74 <midi_to_bt_length+0x60>
	{
		if (serialQ.midi_in > serialQ.midi_out) 
     b30:	4b16      	ldr	r3, [pc, #88]	; (b8c <midi_to_bt_length+0x78>)
     b32:	4a17      	ldr	r2, [pc, #92]	; (b90 <midi_to_bt_length+0x7c>)
     b34:	5c9a      	ldrb	r2, [r3, r2]
     b36:	4b15      	ldr	r3, [pc, #84]	; (b8c <midi_to_bt_length+0x78>)
     b38:	4916      	ldr	r1, [pc, #88]	; (b94 <midi_to_bt_length+0x80>)
     b3a:	5c5b      	ldrb	r3, [r3, r1]
     b3c:	429a      	cmp	r2, r3
     b3e:	d90b      	bls.n	b58 <midi_to_bt_length+0x44>
			temp = serialQ.midi_in - serialQ.midi_out;
     b40:	4b12      	ldr	r3, [pc, #72]	; (b8c <midi_to_bt_length+0x78>)
     b42:	4a13      	ldr	r2, [pc, #76]	; (b90 <midi_to_bt_length+0x7c>)
     b44:	5c9b      	ldrb	r3, [r3, r2]
     b46:	b299      	uxth	r1, r3
     b48:	4b10      	ldr	r3, [pc, #64]	; (b8c <midi_to_bt_length+0x78>)
     b4a:	4a12      	ldr	r2, [pc, #72]	; (b94 <midi_to_bt_length+0x80>)
     b4c:	5c9b      	ldrb	r3, [r3, r2]
     b4e:	b29a      	uxth	r2, r3
     b50:	1dbb      	adds	r3, r7, #6
     b52:	1a8a      	subs	r2, r1, r2
     b54:	801a      	strh	r2, [r3, #0]
     b56:	e00d      	b.n	b74 <midi_to_bt_length+0x60>
		else
		{
			temp = 256 - serialQ.midi_out + serialQ.midi_in;
     b58:	4b0c      	ldr	r3, [pc, #48]	; (b8c <midi_to_bt_length+0x78>)
     b5a:	4a0d      	ldr	r2, [pc, #52]	; (b90 <midi_to_bt_length+0x7c>)
     b5c:	5c9b      	ldrb	r3, [r3, r2]
     b5e:	b29a      	uxth	r2, r3
     b60:	4b0a      	ldr	r3, [pc, #40]	; (b8c <midi_to_bt_length+0x78>)
     b62:	490c      	ldr	r1, [pc, #48]	; (b94 <midi_to_bt_length+0x80>)
     b64:	5c5b      	ldrb	r3, [r3, r1]
     b66:	b29b      	uxth	r3, r3
     b68:	1ad3      	subs	r3, r2, r3
     b6a:	b29a      	uxth	r2, r3
     b6c:	1dbb      	adds	r3, r7, #6
     b6e:	3201      	adds	r2, #1
     b70:	32ff      	adds	r2, #255	; 0xff
     b72:	801a      	strh	r2, [r3, #0]
		}
	}
	mlen= temp;
     b74:	4b08      	ldr	r3, [pc, #32]	; (b98 <midi_to_bt_length+0x84>)
     b76:	1dba      	adds	r2, r7, #6
     b78:	8812      	ldrh	r2, [r2, #0]
     b7a:	801a      	strh	r2, [r3, #0]
	return (temp);
     b7c:	1dbb      	adds	r3, r7, #6
     b7e:	881b      	ldrh	r3, [r3, #0]
     b80:	b2db      	uxtb	r3, r3
}
     b82:	1c18      	adds	r0, r3, #0
     b84:	46bd      	mov	sp, r7
     b86:	b002      	add	sp, #8
     b88:	bd80      	pop	{r7, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	200000c0 	.word	0x200000c0
     b90:	00000202 	.word	0x00000202
     b94:	00000203 	.word	0x00000203
     b98:	200002c6 	.word	0x200002c6

00000b9c <check_usarts>:
enum status_code usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data);
extern char pair_addr[20];
extern uint8_t sysState;

void check_usarts(void)
{	
     b9c:	b590      	push	{r4, r7, lr}
     b9e:	b085      	sub	sp, #20
     ba0:	af00      	add	r7, sp, #0
	uint32_t length, lenMax=0;
     ba2:	2300      	movs	r3, #0
     ba4:	60fb      	str	r3, [r7, #12]
	uint8_t tx_data;
	enum status_code status_code;	

	// write from the midi Q to the WT41 
	length = midi_to_bt_length();
     ba6:	4b32      	ldr	r3, [pc, #200]	; (c70 <check_usarts+0xd4>)
     ba8:	4798      	blx	r3
     baa:	1c03      	adds	r3, r0, #0
     bac:	60bb      	str	r3, [r7, #8]
	if (length > lenMax ) lenMax = length;
     bae:	68ba      	ldr	r2, [r7, #8]
     bb0:	68fb      	ldr	r3, [r7, #12]
     bb2:	429a      	cmp	r2, r3
     bb4:	d901      	bls.n	bba <check_usarts+0x1e>
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	60fb      	str	r3, [r7, #12]
	if (length>0)	{
     bba:	68bb      	ldr	r3, [r7, #8]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d01d      	beq.n	bfc <check_usarts+0x60>
		tx_data = serialQ.midiToBlueTooth[serialQ.midi_out];
     bc0:	4b2c      	ldr	r3, [pc, #176]	; (c74 <check_usarts+0xd8>)
     bc2:	4a2d      	ldr	r2, [pc, #180]	; (c78 <check_usarts+0xdc>)
     bc4:	5c9b      	ldrb	r3, [r3, r2]
     bc6:	1c19      	adds	r1, r3, #0
     bc8:	1dfb      	adds	r3, r7, #7
     bca:	4a2a      	ldr	r2, [pc, #168]	; (c74 <check_usarts+0xd8>)
     bcc:	5c52      	ldrb	r2, [r2, r1]
     bce:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_SERCOM(&WT41_SERCOM5, tx_data); 
     bd0:	1dbc      	adds	r4, r7, #6
     bd2:	4a2a      	ldr	r2, [pc, #168]	; (c7c <check_usarts+0xe0>)
     bd4:	1dfb      	adds	r3, r7, #7
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	1c10      	adds	r0, r2, #0
     bda:	1c19      	adds	r1, r3, #0
     bdc:	4b28      	ldr	r3, [pc, #160]	; (c80 <check_usarts+0xe4>)
     bde:	4798      	blx	r3
     be0:	1c03      	adds	r3, r0, #0
     be2:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK)
     be4:	1dbb      	adds	r3, r7, #6
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	2b00      	cmp	r3, #0
     bea:	d107      	bne.n	bfc <check_usarts+0x60>
		{
			serialQ.midi_out++;			// write ok, inc ptr
     bec:	4b21      	ldr	r3, [pc, #132]	; (c74 <check_usarts+0xd8>)
     bee:	4a22      	ldr	r2, [pc, #136]	; (c78 <check_usarts+0xdc>)
     bf0:	5c9b      	ldrb	r3, [r3, r2]
     bf2:	3301      	adds	r3, #1
     bf4:	b2d9      	uxtb	r1, r3
     bf6:	4b1f      	ldr	r3, [pc, #124]	; (c74 <check_usarts+0xd8>)
     bf8:	4a1f      	ldr	r2, [pc, #124]	; (c78 <check_usarts+0xdc>)
     bfa:	5499      	strb	r1, [r3, r2]
		}
	}

	// write from the WT41  Q to midi 
	length = bt_to_midi_length();
     bfc:	4b21      	ldr	r3, [pc, #132]	; (c84 <check_usarts+0xe8>)
     bfe:	4798      	blx	r3
     c00:	1c03      	adds	r3, r0, #0
     c02:	60bb      	str	r3, [r7, #8]
	if (length>0)	{
     c04:	68bb      	ldr	r3, [r7, #8]
     c06:	2b00      	cmp	r3, #0
     c08:	d02f      	beq.n	c6a <check_usarts+0xce>
		if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == true) { 
     c0a:	2017      	movs	r0, #23
     c0c:	4b1e      	ldr	r3, [pc, #120]	; (c88 <check_usarts+0xec>)
     c0e:	4798      	blx	r3
     c10:	1e03      	subs	r3, r0, #0
     c12:	d022      	beq.n	c5a <check_usarts+0xbe>
				// CARRIER  only relay when carrier is present, this should be midi data
				// mod 10/3/16
			tx_data = serialQ.blueToothToMidi[serialQ.bt_out];
     c14:	4b17      	ldr	r3, [pc, #92]	; (c74 <check_usarts+0xd8>)
     c16:	4a1d      	ldr	r2, [pc, #116]	; (c8c <check_usarts+0xf0>)
     c18:	5c9b      	ldrb	r3, [r3, r2]
     c1a:	1c18      	adds	r0, r3, #0
     c1c:	1dfb      	adds	r3, r7, #7
     c1e:	4915      	ldr	r1, [pc, #84]	; (c74 <check_usarts+0xd8>)
     c20:	2280      	movs	r2, #128	; 0x80
     c22:	0052      	lsls	r2, r2, #1
     c24:	1809      	adds	r1, r1, r0
     c26:	188a      	adds	r2, r1, r2
     c28:	7812      	ldrb	r2, [r2, #0]
     c2a:	701a      	strb	r2, [r3, #0]
			status_code  = usart_write_SERCOM(&midi_SERCOM4, tx_data); 
     c2c:	1dbc      	adds	r4, r7, #6
     c2e:	4a18      	ldr	r2, [pc, #96]	; (c90 <check_usarts+0xf4>)
     c30:	1dfb      	adds	r3, r7, #7
     c32:	781b      	ldrb	r3, [r3, #0]
     c34:	1c10      	adds	r0, r2, #0
     c36:	1c19      	adds	r1, r3, #0
     c38:	4b11      	ldr	r3, [pc, #68]	; (c80 <check_usarts+0xe4>)
     c3a:	4798      	blx	r3
     c3c:	1c03      	adds	r3, r0, #0
     c3e:	7023      	strb	r3, [r4, #0]
			if (status_code == STATUS_OK) {
     c40:	1dbb      	adds	r3, r7, #6
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	2b00      	cmp	r3, #0
     c46:	d110      	bne.n	c6a <check_usarts+0xce>
				serialQ.bt_out++;			// write ok, inc ptr
     c48:	4b0a      	ldr	r3, [pc, #40]	; (c74 <check_usarts+0xd8>)
     c4a:	4a10      	ldr	r2, [pc, #64]	; (c8c <check_usarts+0xf0>)
     c4c:	5c9b      	ldrb	r3, [r3, r2]
     c4e:	3301      	adds	r3, #1
     c50:	b2d9      	uxtb	r1, r3
     c52:	4b08      	ldr	r3, [pc, #32]	; (c74 <check_usarts+0xd8>)
     c54:	4a0d      	ldr	r2, [pc, #52]	; (c8c <check_usarts+0xf0>)
     c56:	5499      	strb	r1, [r3, r2]
     c58:	e007      	b.n	c6a <check_usarts+0xce>
			}
		}
		else  serialQ.bt_out++; // remove item from Q		// mod 10/3/16
     c5a:	4b06      	ldr	r3, [pc, #24]	; (c74 <check_usarts+0xd8>)
     c5c:	4a0b      	ldr	r2, [pc, #44]	; (c8c <check_usarts+0xf0>)
     c5e:	5c9b      	ldrb	r3, [r3, r2]
     c60:	3301      	adds	r3, #1
     c62:	b2d9      	uxtb	r1, r3
     c64:	4b03      	ldr	r3, [pc, #12]	; (c74 <check_usarts+0xd8>)
     c66:	4a09      	ldr	r2, [pc, #36]	; (c8c <check_usarts+0xf0>)
     c68:	5499      	strb	r1, [r3, r2]
	}
}
     c6a:	46bd      	mov	sp, r7
     c6c:	b005      	add	sp, #20
     c6e:	bd90      	pop	{r4, r7, pc}
     c70:	00000b15 	.word	0x00000b15
     c74:	200000c0 	.word	0x200000c0
     c78:	00000203 	.word	0x00000203
     c7c:	20000064 	.word	0x20000064
     c80:	000005bd 	.word	0x000005bd
     c84:	00000a89 	.word	0x00000a89
     c88:	000008dd 	.word	0x000008dd
     c8c:	00000201 	.word	0x00000201
     c90:	20000088 	.word	0x20000088

00000c94 <system_interrupt_enter_critical_section>:
     c94:	b580      	push	{r7, lr}
     c96:	af00      	add	r7, sp, #0
     c98:	4b01      	ldr	r3, [pc, #4]	; (ca0 <system_interrupt_enter_critical_section+0xc>)
     c9a:	4798      	blx	r3
     c9c:	46bd      	mov	sp, r7
     c9e:	bd80      	pop	{r7, pc}
     ca0:	000025f1 	.word	0x000025f1

00000ca4 <system_interrupt_leave_critical_section>:
     ca4:	b580      	push	{r7, lr}
     ca6:	af00      	add	r7, sp, #0
     ca8:	4b01      	ldr	r3, [pc, #4]	; (cb0 <system_interrupt_leave_critical_section+0xc>)
     caa:	4798      	blx	r3
     cac:	46bd      	mov	sp, r7
     cae:	bd80      	pop	{r7, pc}
     cb0:	00002641 	.word	0x00002641

00000cb4 <usart_is_syncing>:
     cb4:	b580      	push	{r7, lr}
     cb6:	b084      	sub	sp, #16
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	60fb      	str	r3, [r7, #12]
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	8a1b      	ldrh	r3, [r3, #16]
     cc6:	b29b      	uxth	r3, r3
     cc8:	1c1a      	adds	r2, r3, #0
     cca:	2380      	movs	r3, #128	; 0x80
     ccc:	021b      	lsls	r3, r3, #8
     cce:	4013      	ands	r3, r2
     cd0:	1e5a      	subs	r2, r3, #1
     cd2:	4193      	sbcs	r3, r2
     cd4:	b2db      	uxtb	r3, r3
     cd6:	1c18      	adds	r0, r3, #0
     cd8:	46bd      	mov	sp, r7
     cda:	b004      	add	sp, #16
     cdc:	bd80      	pop	{r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)

00000ce0 <_usart_wait_for_sync>:
     ce0:	b580      	push	{r7, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
     ce8:	46c0      	nop			; (mov r8, r8)
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	1c18      	adds	r0, r3, #0
     cee:	4b03      	ldr	r3, [pc, #12]	; (cfc <_usart_wait_for_sync+0x1c>)
     cf0:	4798      	blx	r3
     cf2:	1e03      	subs	r3, r0, #0
     cf4:	d1f9      	bne.n	cea <_usart_wait_for_sync+0xa>
     cf6:	46bd      	mov	sp, r7
     cf8:	b002      	add	sp, #8
     cfa:	bd80      	pop	{r7, pc}
     cfc:	00000cb5 	.word	0x00000cb5

00000d00 <_usart_read_buffer>:
     d00:	b580      	push	{r7, lr}
     d02:	b086      	sub	sp, #24
     d04:	af00      	add	r7, sp, #0
     d06:	60f8      	str	r0, [r7, #12]
     d08:	60b9      	str	r1, [r7, #8]
     d0a:	1dbb      	adds	r3, r7, #6
     d0c:	801a      	strh	r2, [r3, #0]
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	617b      	str	r3, [r7, #20]
     d14:	4b0f      	ldr	r3, [pc, #60]	; (d54 <_usart_read_buffer+0x54>)
     d16:	4798      	blx	r3
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	8b9b      	ldrh	r3, [r3, #28]
     d1c:	b29b      	uxth	r3, r3
     d1e:	2b00      	cmp	r3, #0
     d20:	d003      	beq.n	d2a <_usart_read_buffer+0x2a>
     d22:	4b0d      	ldr	r3, [pc, #52]	; (d58 <_usart_read_buffer+0x58>)
     d24:	4798      	blx	r3
     d26:	2305      	movs	r3, #5
     d28:	e010      	b.n	d4c <_usart_read_buffer+0x4c>
     d2a:	68fb      	ldr	r3, [r7, #12]
     d2c:	1dba      	adds	r2, r7, #6
     d2e:	8812      	ldrh	r2, [r2, #0]
     d30:	839a      	strh	r2, [r3, #28]
     d32:	4b09      	ldr	r3, [pc, #36]	; (d58 <_usart_read_buffer+0x58>)
     d34:	4798      	blx	r3
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	68ba      	ldr	r2, [r7, #8]
     d3a:	615a      	str	r2, [r3, #20]
     d3c:	68fb      	ldr	r3, [r7, #12]
     d3e:	2222      	movs	r2, #34	; 0x22
     d40:	2105      	movs	r1, #5
     d42:	5499      	strb	r1, [r3, r2]
     d44:	697b      	ldr	r3, [r7, #20]
     d46:	2204      	movs	r2, #4
     d48:	735a      	strb	r2, [r3, #13]
     d4a:	2300      	movs	r3, #0
     d4c:	1c18      	adds	r0, r3, #0
     d4e:	46bd      	mov	sp, r7
     d50:	b006      	add	sp, #24
     d52:	bd80      	pop	{r7, pc}
     d54:	00000c95 	.word	0x00000c95
     d58:	00000ca5 	.word	0x00000ca5

00000d5c <usart_register_callback>:
     d5c:	b580      	push	{r7, lr}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
     d62:	60f8      	str	r0, [r7, #12]
     d64:	60b9      	str	r1, [r7, #8]
     d66:	1dfb      	adds	r3, r7, #7
     d68:	701a      	strb	r2, [r3, #0]
     d6a:	1dfb      	adds	r3, r7, #7
     d6c:	781a      	ldrb	r2, [r3, #0]
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	3202      	adds	r2, #2
     d72:	0092      	lsls	r2, r2, #2
     d74:	68b9      	ldr	r1, [r7, #8]
     d76:	50d1      	str	r1, [r2, r3]
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	2220      	movs	r2, #32
     d7c:	5c9b      	ldrb	r3, [r3, r2]
     d7e:	b2d9      	uxtb	r1, r3
     d80:	1dfb      	adds	r3, r7, #7
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	2201      	movs	r2, #1
     d86:	409a      	lsls	r2, r3
     d88:	1c13      	adds	r3, r2, #0
     d8a:	b2db      	uxtb	r3, r3
     d8c:	1c0a      	adds	r2, r1, #0
     d8e:	4313      	orrs	r3, r2
     d90:	b2db      	uxtb	r3, r3
     d92:	b2d9      	uxtb	r1, r3
     d94:	68fb      	ldr	r3, [r7, #12]
     d96:	2220      	movs	r2, #32
     d98:	5499      	strb	r1, [r3, r2]
     d9a:	46bd      	mov	sp, r7
     d9c:	b004      	add	sp, #16
     d9e:	bd80      	pop	{r7, pc}

00000da0 <usart_read_buffer_job>:
     da0:	b580      	push	{r7, lr}
     da2:	b084      	sub	sp, #16
     da4:	af00      	add	r7, sp, #0
     da6:	60f8      	str	r0, [r7, #12]
     da8:	60b9      	str	r1, [r7, #8]
     daa:	1dbb      	adds	r3, r7, #6
     dac:	801a      	strh	r2, [r3, #0]
     dae:	1dbb      	adds	r3, r7, #6
     db0:	881b      	ldrh	r3, [r3, #0]
     db2:	2b00      	cmp	r3, #0
     db4:	d101      	bne.n	dba <usart_read_buffer_job+0x1a>
     db6:	2317      	movs	r3, #23
     db8:	e012      	b.n	de0 <usart_read_buffer_job+0x40>
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	799b      	ldrb	r3, [r3, #6]
     dbe:	2201      	movs	r2, #1
     dc0:	4053      	eors	r3, r2
     dc2:	b2db      	uxtb	r3, r3
     dc4:	2b00      	cmp	r3, #0
     dc6:	d001      	beq.n	dcc <usart_read_buffer_job+0x2c>
     dc8:	231c      	movs	r3, #28
     dca:	e009      	b.n	de0 <usart_read_buffer_job+0x40>
     dcc:	68f9      	ldr	r1, [r7, #12]
     dce:	68ba      	ldr	r2, [r7, #8]
     dd0:	1dbb      	adds	r3, r7, #6
     dd2:	881b      	ldrh	r3, [r3, #0]
     dd4:	1c08      	adds	r0, r1, #0
     dd6:	1c11      	adds	r1, r2, #0
     dd8:	1c1a      	adds	r2, r3, #0
     dda:	4b03      	ldr	r3, [pc, #12]	; (de8 <usart_read_buffer_job+0x48>)
     ddc:	4798      	blx	r3
     dde:	1c03      	adds	r3, r0, #0
     de0:	1c18      	adds	r0, r3, #0
     de2:	46bd      	mov	sp, r7
     de4:	b004      	add	sp, #16
     de6:	bd80      	pop	{r7, pc}
     de8:	00000d01 	.word	0x00000d01

00000dec <_usart_interrupt_handler>:
     dec:	b580      	push	{r7, lr}
     dee:	b088      	sub	sp, #32
     df0:	af00      	add	r7, sp, #0
     df2:	1c02      	adds	r2, r0, #0
     df4:	1dfb      	adds	r3, r7, #7
     df6:	701a      	strb	r2, [r3, #0]
     df8:	1dfb      	adds	r3, r7, #7
     dfa:	781a      	ldrb	r2, [r3, #0]
     dfc:	4b83      	ldr	r3, [pc, #524]	; (100c <_usart_interrupt_handler+0x220>)
     dfe:	0092      	lsls	r2, r2, #2
     e00:	58d3      	ldr	r3, [r2, r3]
     e02:	61bb      	str	r3, [r7, #24]
     e04:	69bb      	ldr	r3, [r7, #24]
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	617b      	str	r3, [r7, #20]
     e0a:	69bb      	ldr	r3, [r7, #24]
     e0c:	1c18      	adds	r0, r3, #0
     e0e:	4b80      	ldr	r3, [pc, #512]	; (1010 <_usart_interrupt_handler+0x224>)
     e10:	4798      	blx	r3
     e12:	697b      	ldr	r3, [r7, #20]
     e14:	7b9b      	ldrb	r3, [r3, #14]
     e16:	b2da      	uxtb	r2, r3
     e18:	2312      	movs	r3, #18
     e1a:	18fb      	adds	r3, r7, r3
     e1c:	801a      	strh	r2, [r3, #0]
     e1e:	697b      	ldr	r3, [r7, #20]
     e20:	7b5b      	ldrb	r3, [r3, #13]
     e22:	b2db      	uxtb	r3, r3
     e24:	b29a      	uxth	r2, r3
     e26:	2312      	movs	r3, #18
     e28:	18fb      	adds	r3, r7, r3
     e2a:	2112      	movs	r1, #18
     e2c:	1879      	adds	r1, r7, r1
     e2e:	8809      	ldrh	r1, [r1, #0]
     e30:	400a      	ands	r2, r1
     e32:	801a      	strh	r2, [r3, #0]
     e34:	69bb      	ldr	r3, [r7, #24]
     e36:	2220      	movs	r2, #32
     e38:	5c9b      	ldrb	r3, [r3, r2]
     e3a:	69ba      	ldr	r2, [r7, #24]
     e3c:	2121      	movs	r1, #33	; 0x21
     e3e:	5c52      	ldrb	r2, [r2, r1]
     e40:	4013      	ands	r3, r2
     e42:	b2da      	uxtb	r2, r3
     e44:	2310      	movs	r3, #16
     e46:	18fb      	adds	r3, r7, r3
     e48:	801a      	strh	r2, [r3, #0]
     e4a:	2312      	movs	r3, #18
     e4c:	18fb      	adds	r3, r7, r3
     e4e:	881b      	ldrh	r3, [r3, #0]
     e50:	2201      	movs	r2, #1
     e52:	4013      	ands	r3, r2
     e54:	d044      	beq.n	ee0 <_usart_interrupt_handler+0xf4>
     e56:	69bb      	ldr	r3, [r7, #24]
     e58:	8bdb      	ldrh	r3, [r3, #30]
     e5a:	b29b      	uxth	r3, r3
     e5c:	2b00      	cmp	r3, #0
     e5e:	d03c      	beq.n	eda <_usart_interrupt_handler+0xee>
     e60:	69bb      	ldr	r3, [r7, #24]
     e62:	699b      	ldr	r3, [r3, #24]
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	b2da      	uxtb	r2, r3
     e68:	231e      	movs	r3, #30
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	801a      	strh	r2, [r3, #0]
     e6e:	69bb      	ldr	r3, [r7, #24]
     e70:	699b      	ldr	r3, [r3, #24]
     e72:	1c5a      	adds	r2, r3, #1
     e74:	69bb      	ldr	r3, [r7, #24]
     e76:	619a      	str	r2, [r3, #24]
     e78:	69bb      	ldr	r3, [r7, #24]
     e7a:	795b      	ldrb	r3, [r3, #5]
     e7c:	2b01      	cmp	r3, #1
     e7e:	d112      	bne.n	ea6 <_usart_interrupt_handler+0xba>
     e80:	69bb      	ldr	r3, [r7, #24]
     e82:	699b      	ldr	r3, [r3, #24]
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	b2db      	uxtb	r3, r3
     e88:	021b      	lsls	r3, r3, #8
     e8a:	b29a      	uxth	r2, r3
     e8c:	231e      	movs	r3, #30
     e8e:	18fb      	adds	r3, r7, r3
     e90:	881b      	ldrh	r3, [r3, #0]
     e92:	4313      	orrs	r3, r2
     e94:	b29a      	uxth	r2, r3
     e96:	231e      	movs	r3, #30
     e98:	18fb      	adds	r3, r7, r3
     e9a:	801a      	strh	r2, [r3, #0]
     e9c:	69bb      	ldr	r3, [r7, #24]
     e9e:	699b      	ldr	r3, [r3, #24]
     ea0:	1c5a      	adds	r2, r3, #1
     ea2:	69bb      	ldr	r3, [r7, #24]
     ea4:	619a      	str	r2, [r3, #24]
     ea6:	231e      	movs	r3, #30
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	881b      	ldrh	r3, [r3, #0]
     eac:	05db      	lsls	r3, r3, #23
     eae:	0ddb      	lsrs	r3, r3, #23
     eb0:	b29a      	uxth	r2, r3
     eb2:	697b      	ldr	r3, [r7, #20]
     eb4:	831a      	strh	r2, [r3, #24]
     eb6:	69bb      	ldr	r3, [r7, #24]
     eb8:	8bdb      	ldrh	r3, [r3, #30]
     eba:	b29b      	uxth	r3, r3
     ebc:	3b01      	subs	r3, #1
     ebe:	b29b      	uxth	r3, r3
     ec0:	69ba      	ldr	r2, [r7, #24]
     ec2:	1c19      	adds	r1, r3, #0
     ec4:	83d1      	strh	r1, [r2, #30]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d106      	bne.n	ed8 <_usart_interrupt_handler+0xec>
     eca:	697b      	ldr	r3, [r7, #20]
     ecc:	2201      	movs	r2, #1
     ece:	731a      	strb	r2, [r3, #12]
     ed0:	697b      	ldr	r3, [r7, #20]
     ed2:	2202      	movs	r2, #2
     ed4:	735a      	strb	r2, [r3, #13]
     ed6:	e003      	b.n	ee0 <_usart_interrupt_handler+0xf4>
     ed8:	e002      	b.n	ee0 <_usart_interrupt_handler+0xf4>
     eda:	697b      	ldr	r3, [r7, #20]
     edc:	2201      	movs	r2, #1
     ede:	731a      	strb	r2, [r3, #12]
     ee0:	2312      	movs	r3, #18
     ee2:	18fb      	adds	r3, r7, r3
     ee4:	881b      	ldrh	r3, [r3, #0]
     ee6:	2202      	movs	r2, #2
     ee8:	4013      	ands	r3, r2
     eea:	d011      	beq.n	f10 <_usart_interrupt_handler+0x124>
     eec:	697b      	ldr	r3, [r7, #20]
     eee:	2202      	movs	r2, #2
     ef0:	731a      	strb	r2, [r3, #12]
     ef2:	69bb      	ldr	r3, [r7, #24]
     ef4:	2223      	movs	r2, #35	; 0x23
     ef6:	2100      	movs	r1, #0
     ef8:	5499      	strb	r1, [r3, r2]
     efa:	2310      	movs	r3, #16
     efc:	18fb      	adds	r3, r7, r3
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	2201      	movs	r2, #1
     f02:	4013      	ands	r3, r2
     f04:	d004      	beq.n	f10 <_usart_interrupt_handler+0x124>
     f06:	69bb      	ldr	r3, [r7, #24]
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	69ba      	ldr	r2, [r7, #24]
     f0c:	1c10      	adds	r0, r2, #0
     f0e:	4798      	blx	r3
     f10:	2312      	movs	r3, #18
     f12:	18fb      	adds	r3, r7, r3
     f14:	881b      	ldrh	r3, [r3, #0]
     f16:	2204      	movs	r2, #4
     f18:	4013      	ands	r3, r2
     f1a:	d100      	bne.n	f1e <_usart_interrupt_handler+0x132>
     f1c:	e073      	b.n	1006 <_usart_interrupt_handler+0x21a>
     f1e:	69bb      	ldr	r3, [r7, #24]
     f20:	8b9b      	ldrh	r3, [r3, #28]
     f22:	b29b      	uxth	r3, r3
     f24:	2b00      	cmp	r3, #0
     f26:	d100      	bne.n	f2a <_usart_interrupt_handler+0x13e>
     f28:	e06a      	b.n	1000 <_usart_interrupt_handler+0x214>
     f2a:	697b      	ldr	r3, [r7, #20]
     f2c:	8a1b      	ldrh	r3, [r3, #16]
     f2e:	b29b      	uxth	r3, r3
     f30:	b2da      	uxtb	r2, r3
     f32:	230f      	movs	r3, #15
     f34:	18fb      	adds	r3, r7, r3
     f36:	2107      	movs	r1, #7
     f38:	400a      	ands	r2, r1
     f3a:	701a      	strb	r2, [r3, #0]
     f3c:	230f      	movs	r3, #15
     f3e:	18fb      	adds	r3, r7, r3
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	2b00      	cmp	r3, #0
     f44:	d043      	beq.n	fce <_usart_interrupt_handler+0x1e2>
     f46:	230f      	movs	r3, #15
     f48:	18fb      	adds	r3, r7, r3
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	2202      	movs	r2, #2
     f4e:	4013      	ands	r3, r2
     f50:	d00c      	beq.n	f6c <_usart_interrupt_handler+0x180>
     f52:	69bb      	ldr	r3, [r7, #24]
     f54:	2222      	movs	r2, #34	; 0x22
     f56:	211a      	movs	r1, #26
     f58:	5499      	strb	r1, [r3, r2]
     f5a:	697b      	ldr	r3, [r7, #20]
     f5c:	8a1b      	ldrh	r3, [r3, #16]
     f5e:	b29b      	uxth	r3, r3
     f60:	2202      	movs	r2, #2
     f62:	4313      	orrs	r3, r2
     f64:	b29a      	uxth	r2, r3
     f66:	697b      	ldr	r3, [r7, #20]
     f68:	821a      	strh	r2, [r3, #16]
     f6a:	e024      	b.n	fb6 <_usart_interrupt_handler+0x1ca>
     f6c:	230f      	movs	r3, #15
     f6e:	18fb      	adds	r3, r7, r3
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	2204      	movs	r2, #4
     f74:	4013      	ands	r3, r2
     f76:	d00c      	beq.n	f92 <_usart_interrupt_handler+0x1a6>
     f78:	69bb      	ldr	r3, [r7, #24]
     f7a:	2222      	movs	r2, #34	; 0x22
     f7c:	211e      	movs	r1, #30
     f7e:	5499      	strb	r1, [r3, r2]
     f80:	697b      	ldr	r3, [r7, #20]
     f82:	8a1b      	ldrh	r3, [r3, #16]
     f84:	b29b      	uxth	r3, r3
     f86:	2204      	movs	r2, #4
     f88:	4313      	orrs	r3, r2
     f8a:	b29a      	uxth	r2, r3
     f8c:	697b      	ldr	r3, [r7, #20]
     f8e:	821a      	strh	r2, [r3, #16]
     f90:	e011      	b.n	fb6 <_usart_interrupt_handler+0x1ca>
     f92:	230f      	movs	r3, #15
     f94:	18fb      	adds	r3, r7, r3
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	2201      	movs	r2, #1
     f9a:	4013      	ands	r3, r2
     f9c:	d00b      	beq.n	fb6 <_usart_interrupt_handler+0x1ca>
     f9e:	69bb      	ldr	r3, [r7, #24]
     fa0:	2222      	movs	r2, #34	; 0x22
     fa2:	2113      	movs	r1, #19
     fa4:	5499      	strb	r1, [r3, r2]
     fa6:	697b      	ldr	r3, [r7, #20]
     fa8:	8a1b      	ldrh	r3, [r3, #16]
     faa:	b29b      	uxth	r3, r3
     fac:	2201      	movs	r2, #1
     fae:	4313      	orrs	r3, r2
     fb0:	b29a      	uxth	r2, r3
     fb2:	697b      	ldr	r3, [r7, #20]
     fb4:	821a      	strh	r2, [r3, #16]
     fb6:	2310      	movs	r3, #16
     fb8:	18fb      	adds	r3, r7, r3
     fba:	881b      	ldrh	r3, [r3, #0]
     fbc:	2204      	movs	r2, #4
     fbe:	4013      	ands	r3, r2
     fc0:	d021      	beq.n	1006 <_usart_interrupt_handler+0x21a>
     fc2:	69bb      	ldr	r3, [r7, #24]
     fc4:	691b      	ldr	r3, [r3, #16]
     fc6:	69ba      	ldr	r2, [r7, #24]
     fc8:	1c10      	adds	r0, r2, #0
     fca:	4798      	blx	r3
     fcc:	e01b      	b.n	1006 <_usart_interrupt_handler+0x21a>
     fce:	697b      	ldr	r3, [r7, #20]
     fd0:	8b1b      	ldrh	r3, [r3, #24]
     fd2:	b29a      	uxth	r2, r3
     fd4:	230e      	movs	r3, #14
     fd6:	18fb      	adds	r3, r7, r3
     fd8:	701a      	strb	r2, [r3, #0]
     fda:	69bb      	ldr	r3, [r7, #24]
     fdc:	695b      	ldr	r3, [r3, #20]
     fde:	220e      	movs	r2, #14
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	7812      	ldrb	r2, [r2, #0]
     fe4:	701a      	strb	r2, [r3, #0]
     fe6:	2310      	movs	r3, #16
     fe8:	18fb      	adds	r3, r7, r3
     fea:	881b      	ldrh	r3, [r3, #0]
     fec:	2202      	movs	r2, #2
     fee:	4013      	ands	r3, r2
     ff0:	d005      	beq.n	ffe <_usart_interrupt_handler+0x212>
     ff2:	69bb      	ldr	r3, [r7, #24]
     ff4:	68db      	ldr	r3, [r3, #12]
     ff6:	69ba      	ldr	r2, [r7, #24]
     ff8:	1c10      	adds	r0, r2, #0
     ffa:	4798      	blx	r3
     ffc:	e003      	b.n	1006 <_usart_interrupt_handler+0x21a>
     ffe:	e002      	b.n	1006 <_usart_interrupt_handler+0x21a>
    1000:	697b      	ldr	r3, [r7, #20]
    1002:	2204      	movs	r2, #4
    1004:	731a      	strb	r2, [r3, #12]
    1006:	46bd      	mov	sp, r7
    1008:	b008      	add	sp, #32
    100a:	bd80      	pop	{r7, pc}
    100c:	20000368 	.word	0x20000368
    1010:	00000ce1 	.word	0x00000ce1

00001014 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1014:	b580      	push	{r7, lr}
    1016:	b084      	sub	sp, #16
    1018:	af00      	add	r7, sp, #0
    101a:	1c02      	adds	r2, r0, #0
    101c:	1dfb      	adds	r3, r7, #7
    101e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1020:	230f      	movs	r3, #15
    1022:	18fb      	adds	r3, r7, r3
    1024:	1dfa      	adds	r2, r7, #7
    1026:	7812      	ldrb	r2, [r2, #0]
    1028:	09d2      	lsrs	r2, r2, #7
    102a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    102c:	230e      	movs	r3, #14
    102e:	18fb      	adds	r3, r7, r3
    1030:	1dfa      	adds	r2, r7, #7
    1032:	7812      	ldrb	r2, [r2, #0]
    1034:	0952      	lsrs	r2, r2, #5
    1036:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1038:	4b0d      	ldr	r3, [pc, #52]	; (1070 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    103a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	2b00      	cmp	r3, #0
    1044:	d10f      	bne.n	1066 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1046:	230f      	movs	r3, #15
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	009b      	lsls	r3, r3, #2
    104e:	2210      	movs	r2, #16
    1050:	4694      	mov	ip, r2
    1052:	44bc      	add	ip, r7
    1054:	4463      	add	r3, ip
    1056:	3b08      	subs	r3, #8
    1058:	681a      	ldr	r2, [r3, #0]
    105a:	230e      	movs	r3, #14
    105c:	18fb      	adds	r3, r7, r3
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	01db      	lsls	r3, r3, #7
    1062:	18d3      	adds	r3, r2, r3
    1064:	e000      	b.n	1068 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1066:	2300      	movs	r3, #0
	}
}
    1068:	1c18      	adds	r0, r3, #0
    106a:	46bd      	mov	sp, r7
    106c:	b004      	add	sp, #16
    106e:	bd80      	pop	{r7, pc}
    1070:	41004400 	.word	0x41004400

00001074 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1074:	b580      	push	{r7, lr}
    1076:	b082      	sub	sp, #8
    1078:	af00      	add	r7, sp, #0
    107a:	1c02      	adds	r2, r0, #0
    107c:	1dfb      	adds	r3, r7, #7
    107e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1080:	1dfb      	adds	r3, r7, #7
    1082:	781b      	ldrb	r3, [r3, #0]
    1084:	1c18      	adds	r0, r3, #0
    1086:	4b03      	ldr	r3, [pc, #12]	; (1094 <port_get_group_from_gpio_pin+0x20>)
    1088:	4798      	blx	r3
    108a:	1c03      	adds	r3, r0, #0
}
    108c:	1c18      	adds	r0, r3, #0
    108e:	46bd      	mov	sp, r7
    1090:	b002      	add	sp, #8
    1092:	bd80      	pop	{r7, pc}
    1094:	00001015 	.word	0x00001015

00001098 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1098:	b580      	push	{r7, lr}
    109a:	b084      	sub	sp, #16
    109c:	af00      	add	r7, sp, #0
    109e:	1c02      	adds	r2, r0, #0
    10a0:	1dfb      	adds	r3, r7, #7
    10a2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    10a4:	1dfb      	adds	r3, r7, #7
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	1c18      	adds	r0, r3, #0
    10aa:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <port_pin_get_input_level+0x40>)
    10ac:	4798      	blx	r3
    10ae:	1c03      	adds	r3, r0, #0
    10b0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    10b2:	1dfb      	adds	r3, r7, #7
    10b4:	781b      	ldrb	r3, [r3, #0]
    10b6:	221f      	movs	r2, #31
    10b8:	4013      	ands	r3, r2
    10ba:	2201      	movs	r2, #1
    10bc:	409a      	lsls	r2, r3
    10be:	1c13      	adds	r3, r2, #0
    10c0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	6a1b      	ldr	r3, [r3, #32]
    10c6:	68ba      	ldr	r2, [r7, #8]
    10c8:	4013      	ands	r3, r2
    10ca:	1e5a      	subs	r2, r3, #1
    10cc:	4193      	sbcs	r3, r2
    10ce:	b2db      	uxtb	r3, r3
}
    10d0:	1c18      	adds	r0, r3, #0
    10d2:	46bd      	mov	sp, r7
    10d4:	b004      	add	sp, #16
    10d6:	bd80      	pop	{r7, pc}
    10d8:	00001075 	.word	0x00001075

000010dc <exit_SSP_WT41>:

extern bool BTpaired;


void exit_SSP_WT41(void)
{
    10dc:	b580      	push	{r7, lr}
    10de:	af00      	add	r7, sp, #0
	msCounter = 120;
    10e0:	4b0a      	ldr	r3, [pc, #40]	; (110c <exit_SSP_WT41+0x30>)
    10e2:	2278      	movs	r2, #120	; 0x78
    10e4:	601a      	str	r2, [r3, #0]
	while(msCounter>0){}   // wait 1.2 sec - don't run serial - go quite
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	4b08      	ldr	r3, [pc, #32]	; (110c <exit_SSP_WT41+0x30>)
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d1fb      	bne.n	10e8 <exit_SSP_WT41+0xc>
	init_serial_buffers();
    10f0:	4b07      	ldr	r3, [pc, #28]	; (1110 <exit_SSP_WT41+0x34>)
    10f2:	4798      	blx	r3
	load_iWrap_Cmd((char*)"+++");
    10f4:	4b07      	ldr	r3, [pc, #28]	; (1114 <exit_SSP_WT41+0x38>)
    10f6:	1c18      	adds	r0, r3, #0
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <exit_SSP_WT41+0x3c>)
    10fa:	4798      	blx	r3
	while(msCounter>0){}   // wait 1.2 sec - don't run serial - go quite
    10fc:	46c0      	nop			; (mov r8, r8)
    10fe:	4b03      	ldr	r3, [pc, #12]	; (110c <exit_SSP_WT41+0x30>)
    1100:	681b      	ldr	r3, [r3, #0]
    1102:	2b00      	cmp	r3, #0
    1104:	d1fb      	bne.n	10fe <exit_SSP_WT41+0x22>
}
    1106:	46bd      	mov	sp, r7
    1108:	bd80      	pop	{r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	20000348 	.word	0x20000348
    1110:	00000951 	.word	0x00000951
    1114:	0000436c 	.word	0x0000436c
    1118:	00000a21 	.word	0x00000a21

0000111c <inquiry_WT41>:



// sends a bt inquiry looking for a bt module
enum status_code inquiry_WT41(void)
{
    111c:	b590      	push	{r4, r7, lr}
    111e:	b085      	sub	sp, #20
    1120:	af00      	add	r7, sp, #0
/*														MOD 8/18
	port_pin_set_output_level(Green_LED_PIN,1);	
	port_pin_set_output_level(Yellow_LED_PIN,1);
	port_pin_set_output_level(Red_LED_PIN,0);	*/

	init_serial_buffers();
    1122:	4b24      	ldr	r3, [pc, #144]	; (11b4 <inquiry_WT41+0x98>)
    1124:	4798      	blx	r3
	load_iWrap_Cmd((char*) "at\r\ninquiry 5 name\r\n"); // 5 sec to inquiry if other bt is out there
    1126:	4b24      	ldr	r3, [pc, #144]	; (11b8 <inquiry_WT41+0x9c>)
    1128:	1c18      	adds	r0, r3, #0
    112a:	4b24      	ldr	r3, [pc, #144]	; (11bc <inquiry_WT41+0xa0>)
    112c:	4798      	blx	r3

	msCounter = 1000;	// wait 10 sec
    112e:	4b24      	ldr	r3, [pc, #144]	; (11c0 <inquiry_WT41+0xa4>)
    1130:	22fa      	movs	r2, #250	; 0xfa
    1132:	0092      	lsls	r2, r2, #2
    1134:	601a      	str	r2, [r3, #0]

	while (msCounter)
    1136:	e033      	b.n	11a0 <inquiry_WT41+0x84>
	{
		check_usarts();
    1138:	4b22      	ldr	r3, [pc, #136]	; (11c4 <inquiry_WT41+0xa8>)
    113a:	4798      	blx	r3

		ptrBtName = ptrName = 0;
    113c:	2300      	movs	r3, #0
    113e:	60fb      	str	r3, [r7, #12]
    1140:	68fb      	ldr	r3, [r7, #12]
    1142:	60bb      	str	r3, [r7, #8]
		strcpy(cStr,BT_NAME_SLAVE);
    1144:	4a20      	ldr	r2, [pc, #128]	; (11c8 <inquiry_WT41+0xac>)
    1146:	4b21      	ldr	r3, [pc, #132]	; (11cc <inquiry_WT41+0xb0>)
    1148:	1c11      	adds	r1, r2, #0
    114a:	1c1a      	adds	r2, r3, #0
    114c:	2309      	movs	r3, #9
    114e:	1c08      	adds	r0, r1, #0
    1150:	1c11      	adds	r1, r2, #0
    1152:	1c1a      	adds	r2, r3, #0
    1154:	4b1e      	ldr	r3, [pc, #120]	; (11d0 <inquiry_WT41+0xb4>)
    1156:	4798      	blx	r3
		ptrBtName = memmem((char *)(serialQ.blueToothToMidi),255, cStr,5);		// look at only 1st 6 char - not software version
    1158:	4a1e      	ldr	r2, [pc, #120]	; (11d4 <inquiry_WT41+0xb8>)
    115a:	4b1b      	ldr	r3, [pc, #108]	; (11c8 <inquiry_WT41+0xac>)
    115c:	1c10      	adds	r0, r2, #0
    115e:	21ff      	movs	r1, #255	; 0xff
    1160:	1c1a      	adds	r2, r3, #0
    1162:	2305      	movs	r3, #5
    1164:	4c1c      	ldr	r4, [pc, #112]	; (11d8 <inquiry_WT41+0xbc>)
    1166:	47a0      	blx	r4
    1168:	1c03      	adds	r3, r0, #0
    116a:	60bb      	str	r3, [r7, #8]

//		ptrName = memmem((char *)(serialQ.blueToothToMidi),255, "NAME",4);

uint32_t l;
		l = ptrBtName-serialQ.blueToothToMidi;
    116c:	68ba      	ldr	r2, [r7, #8]
    116e:	4b19      	ldr	r3, [pc, #100]	; (11d4 <inquiry_WT41+0xb8>)
    1170:	1ad3      	subs	r3, r2, r3
    1172:	607b      	str	r3, [r7, #4]

		if (ptrBtName && (ptrBtName-19>serialQ.blueToothToMidi)) 
    1174:	68bb      	ldr	r3, [r7, #8]
    1176:	2b00      	cmp	r3, #0
    1178:	d012      	beq.n	11a0 <inquiry_WT41+0x84>
    117a:	68bb      	ldr	r3, [r7, #8]
    117c:	3b13      	subs	r3, #19
    117e:	1e1a      	subs	r2, r3, #0
    1180:	4b14      	ldr	r3, [pc, #80]	; (11d4 <inquiry_WT41+0xb8>)
    1182:	429a      	cmp	r2, r3
    1184:	d90c      	bls.n	11a0 <inquiry_WT41+0x84>
		{	memcpy(pair_addr,ptrBtName-19,17);
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	3b13      	subs	r3, #19
    118a:	4a14      	ldr	r2, [pc, #80]	; (11dc <inquiry_WT41+0xc0>)
    118c:	1c10      	adds	r0, r2, #0
    118e:	1c19      	adds	r1, r3, #0
    1190:	2211      	movs	r2, #17
    1192:	4b0f      	ldr	r3, [pc, #60]	; (11d0 <inquiry_WT41+0xb4>)
    1194:	4798      	blx	r3
			pair_addr[17] = 0;
    1196:	4b11      	ldr	r3, [pc, #68]	; (11dc <inquiry_WT41+0xc0>)
    1198:	2200      	movs	r2, #0
    119a:	745a      	strb	r2, [r3, #17]
			return STATUS_OK; // cStr found and pair_addr documented
    119c:	2300      	movs	r3, #0
    119e:	e004      	b.n	11aa <inquiry_WT41+0x8e>
	init_serial_buffers();
	load_iWrap_Cmd((char*) "at\r\ninquiry 5 name\r\n"); // 5 sec to inquiry if other bt is out there

	msCounter = 1000;	// wait 10 sec

	while (msCounter)
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <inquiry_WT41+0xa4>)
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d1c7      	bne.n	1138 <inquiry_WT41+0x1c>
			pair_addr[17] = 0;
			return STATUS_OK; // cStr found and pair_addr documented
		}

	}
	return STATUS_ERR_DENIED;
    11a8:	231c      	movs	r3, #28
}
    11aa:	1c18      	adds	r0, r3, #0
    11ac:	46bd      	mov	sp, r7
    11ae:	b005      	add	sp, #20
    11b0:	bd90      	pop	{r4, r7, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	00000951 	.word	0x00000951
    11b8:	00004370 	.word	0x00004370
    11bc:	00000a21 	.word	0x00000a21
    11c0:	20000348 	.word	0x20000348
    11c4:	00000b9d 	.word	0x00000b9d
    11c8:	200002cc 	.word	0x200002cc
    11cc:	00004388 	.word	0x00004388
    11d0:	000042d9 	.word	0x000042d9
    11d4:	200001c0 	.word	0x200001c0
    11d8:	000042eb 	.word	0x000042eb
    11dc:	20000330 	.word	0x20000330

000011e0 <check_WT41_paired>:



enum status_code check_WT41_paired(void)
{// check if pair and get pair
    11e0:	b590      	push	{r4, r7, lr}
    11e2:	b083      	sub	sp, #12
    11e4:	af00      	add	r7, sp, #0
	uint8_t *ptr;


	init_serial_buffers();
    11e6:	4b29      	ldr	r3, [pc, #164]	; (128c <check_WT41_paired+0xac>)
    11e8:	4798      	blx	r3
	load_iWrap_Cmd((char*)"set bt pair\r\n");
    11ea:	4b29      	ldr	r3, [pc, #164]	; (1290 <check_WT41_paired+0xb0>)
    11ec:	1c18      	adds	r0, r3, #0
    11ee:	4b29      	ldr	r3, [pc, #164]	; (1294 <check_WT41_paired+0xb4>)
    11f0:	4798      	blx	r3

	msCounter = 200;	// wait 2 sec
    11f2:	4b29      	ldr	r3, [pc, #164]	; (1298 <check_WT41_paired+0xb8>)
    11f4:	22c8      	movs	r2, #200	; 0xc8
    11f6:	601a      	str	r2, [r3, #0]
	while (msCounter)	
    11f8:	e03c      	b.n	1274 <check_WT41_paired+0x94>
	{
		check_usarts();
    11fa:	4b28      	ldr	r3, [pc, #160]	; (129c <check_WT41_paired+0xbc>)
    11fc:	4798      	blx	r3
		
		strcpy(cStr,"SET BT PAIR");
    11fe:	4a28      	ldr	r2, [pc, #160]	; (12a0 <check_WT41_paired+0xc0>)
    1200:	4b28      	ldr	r3, [pc, #160]	; (12a4 <check_WT41_paired+0xc4>)
    1202:	1c11      	adds	r1, r2, #0
    1204:	1c1a      	adds	r2, r3, #0
    1206:	230c      	movs	r3, #12
    1208:	1c08      	adds	r0, r1, #0
    120a:	1c11      	adds	r1, r2, #0
    120c:	1c1a      	adds	r2, r3, #0
    120e:	4b26      	ldr	r3, [pc, #152]	; (12a8 <check_WT41_paired+0xc8>)
    1210:	4798      	blx	r3
		ptr = memmem((char *)(serialQ.blueToothToMidi),100, cStr,strlen(cStr));
    1212:	4b23      	ldr	r3, [pc, #140]	; (12a0 <check_WT41_paired+0xc0>)
    1214:	1c18      	adds	r0, r3, #0
    1216:	4b25      	ldr	r3, [pc, #148]	; (12ac <check_WT41_paired+0xcc>)
    1218:	4798      	blx	r3
    121a:	1c04      	adds	r4, r0, #0
    121c:	4a24      	ldr	r2, [pc, #144]	; (12b0 <check_WT41_paired+0xd0>)
    121e:	4b20      	ldr	r3, [pc, #128]	; (12a0 <check_WT41_paired+0xc0>)
    1220:	1c10      	adds	r0, r2, #0
    1222:	2164      	movs	r1, #100	; 0x64
    1224:	1c1a      	adds	r2, r3, #0
    1226:	1c23      	adds	r3, r4, #0
    1228:	4c22      	ldr	r4, [pc, #136]	; (12b4 <check_WT41_paired+0xd4>)
    122a:	47a0      	blx	r4
    122c:	1c03      	adds	r3, r0, #0
    122e:	607b      	str	r3, [r7, #4]

		if(ptr) {
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	2b00      	cmp	r3, #0
    1234:	d012      	beq.n	125c <check_WT41_paired+0x7c>
				wait_10msSec(50);				// wait for pair addr
    1236:	2032      	movs	r0, #50	; 0x32
    1238:	4b1f      	ldr	r3, [pc, #124]	; (12b8 <check_WT41_paired+0xd8>)
    123a:	4798      	blx	r3
				memcpy(pair_addr,ptr+12,17);
    123c:	687b      	ldr	r3, [r7, #4]
    123e:	330c      	adds	r3, #12
    1240:	4a1e      	ldr	r2, [pc, #120]	; (12bc <check_WT41_paired+0xdc>)
    1242:	1c10      	adds	r0, r2, #0
    1244:	1c19      	adds	r1, r3, #0
    1246:	2211      	movs	r2, #17
    1248:	4b17      	ldr	r3, [pc, #92]	; (12a8 <check_WT41_paired+0xc8>)
    124a:	4798      	blx	r3
				pair_addr[17] = 0;
    124c:	4b1b      	ldr	r3, [pc, #108]	; (12bc <check_WT41_paired+0xdc>)
    124e:	2200      	movs	r2, #0
    1250:	745a      	strb	r2, [r3, #17]
				BTpaired = true;
    1252:	4b1b      	ldr	r3, [pc, #108]	; (12c0 <check_WT41_paired+0xe0>)
    1254:	2201      	movs	r2, #1
    1256:	701a      	strb	r2, [r3, #0]

				return STATUS_OK;
    1258:	2300      	movs	r3, #0
    125a:	e013      	b.n	1284 <check_WT41_paired+0xa4>
			}

			else if (!msCounter)	// exit if timed out
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <check_WT41_paired+0xb8>)
    125e:	681b      	ldr	r3, [r3, #0]
    1260:	2b00      	cmp	r3, #0
    1262:	d107      	bne.n	1274 <check_WT41_paired+0x94>
			{
				pair_addr[0]=0;
    1264:	4b15      	ldr	r3, [pc, #84]	; (12bc <check_WT41_paired+0xdc>)
    1266:	2200      	movs	r2, #0
    1268:	701a      	strb	r2, [r3, #0]
				BTpaired = false;
    126a:	4b15      	ldr	r3, [pc, #84]	; (12c0 <check_WT41_paired+0xe0>)
    126c:	2200      	movs	r2, #0
    126e:	701a      	strb	r2, [r3, #0]
				return STATUS_ERR_DENIED;
    1270:	231c      	movs	r3, #28
    1272:	e007      	b.n	1284 <check_WT41_paired+0xa4>

	init_serial_buffers();
	load_iWrap_Cmd((char*)"set bt pair\r\n");

	msCounter = 200;	// wait 2 sec
	while (msCounter)	
    1274:	4b08      	ldr	r3, [pc, #32]	; (1298 <check_WT41_paired+0xb8>)
    1276:	681b      	ldr	r3, [r3, #0]
    1278:	2b00      	cmp	r3, #0
    127a:	d1be      	bne.n	11fa <check_WT41_paired+0x1a>
				BTpaired = false;
				return STATUS_ERR_DENIED;
			}

	}
	BTpaired = false;
    127c:	4b10      	ldr	r3, [pc, #64]	; (12c0 <check_WT41_paired+0xe0>)
    127e:	2200      	movs	r2, #0
    1280:	701a      	strb	r2, [r3, #0]
	return STATUS_ERR_DENIED;
    1282:	231c      	movs	r3, #28
}
    1284:	1c18      	adds	r0, r3, #0
    1286:	46bd      	mov	sp, r7
    1288:	b003      	add	sp, #12
    128a:	bd90      	pop	{r4, r7, pc}
    128c:	00000951 	.word	0x00000951
    1290:	00004394 	.word	0x00004394
    1294:	00000a21 	.word	0x00000a21
    1298:	20000348 	.word	0x20000348
    129c:	00000b9d 	.word	0x00000b9d
    12a0:	200002cc 	.word	0x200002cc
    12a4:	000043a4 	.word	0x000043a4
    12a8:	000042d9 	.word	0x000042d9
    12ac:	00004339 	.word	0x00004339
    12b0:	200001c0 	.word	0x200001c0
    12b4:	000042eb 	.word	0x000042eb
    12b8:	000018d5 	.word	0x000018d5
    12bc:	20000330 	.word	0x20000330
    12c0:	20000389 	.word	0x20000389

000012c4 <check_WT41_responding>:


// tests to see is the bt module is responding to ascii commands
enum status_code check_WT41_responding(void)
{
    12c4:	b590      	push	{r4, r7, lr}
    12c6:	b083      	sub	sp, #12
    12c8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr;
	ptr = NULL;
    12ca:	2300      	movs	r3, #0
    12cc:	607b      	str	r3, [r7, #4]

	for (i=0; i< 3; i++)
    12ce:	1cfb      	adds	r3, r7, #3
    12d0:	2200      	movs	r2, #0
    12d2:	701a      	strb	r2, [r3, #0]
    12d4:	1cfb      	adds	r3, r7, #3
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	2b02      	cmp	r3, #2
    12da:	d835      	bhi.n	1348 <check_WT41_responding+0x84>
	{
		msCounter = 200/3;
    12dc:	4b1d      	ldr	r3, [pc, #116]	; (1354 <check_WT41_responding+0x90>)
    12de:	2242      	movs	r2, #66	; 0x42
    12e0:	601a      	str	r2, [r3, #0]
		init_serial_buffers();
    12e2:	4b1d      	ldr	r3, [pc, #116]	; (1358 <check_WT41_responding+0x94>)
    12e4:	4798      	blx	r3
		load_iWrap_Cmd( (char*)"at\r\nat\r\n");
    12e6:	4b1d      	ldr	r3, [pc, #116]	; (135c <check_WT41_responding+0x98>)
    12e8:	1c18      	adds	r0, r3, #0
    12ea:	4b1d      	ldr	r3, [pc, #116]	; (1360 <check_WT41_responding+0x9c>)
    12ec:	4798      	blx	r3
		while (msCounter)
    12ee:	e01e      	b.n	132e <check_WT41_responding+0x6a>
		{
			check_usarts();
    12f0:	4b1c      	ldr	r3, [pc, #112]	; (1364 <check_WT41_responding+0xa0>)
    12f2:	4798      	blx	r3
			strcpy(cStr,"OK\r\n");			// check WT41 responding
    12f4:	4a1c      	ldr	r2, [pc, #112]	; (1368 <check_WT41_responding+0xa4>)
    12f6:	4b1d      	ldr	r3, [pc, #116]	; (136c <check_WT41_responding+0xa8>)
    12f8:	1c11      	adds	r1, r2, #0
    12fa:	1c1a      	adds	r2, r3, #0
    12fc:	2305      	movs	r3, #5
    12fe:	1c08      	adds	r0, r1, #0
    1300:	1c11      	adds	r1, r2, #0
    1302:	1c1a      	adds	r2, r3, #0
    1304:	4b1a      	ldr	r3, [pc, #104]	; (1370 <check_WT41_responding+0xac>)
    1306:	4798      	blx	r3
			ptr = memmem((char *)(serialQ.blueToothToMidi),100, cStr,strlen(cStr));
    1308:	4b17      	ldr	r3, [pc, #92]	; (1368 <check_WT41_responding+0xa4>)
    130a:	1c18      	adds	r0, r3, #0
    130c:	4b19      	ldr	r3, [pc, #100]	; (1374 <check_WT41_responding+0xb0>)
    130e:	4798      	blx	r3
    1310:	1c04      	adds	r4, r0, #0
    1312:	4a19      	ldr	r2, [pc, #100]	; (1378 <check_WT41_responding+0xb4>)
    1314:	4b14      	ldr	r3, [pc, #80]	; (1368 <check_WT41_responding+0xa4>)
    1316:	1c10      	adds	r0, r2, #0
    1318:	2164      	movs	r1, #100	; 0x64
    131a:	1c1a      	adds	r2, r3, #0
    131c:	1c23      	adds	r3, r4, #0
    131e:	4c17      	ldr	r4, [pc, #92]	; (137c <check_WT41_responding+0xb8>)
    1320:	47a0      	blx	r4
    1322:	1c03      	adds	r3, r0, #0
    1324:	607b      	str	r3, [r7, #4]
			if (ptr) break;
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	2b00      	cmp	r3, #0
    132a:	d000      	beq.n	132e <check_WT41_responding+0x6a>
    132c:	e003      	b.n	1336 <check_WT41_responding+0x72>
	for (i=0; i< 3; i++)
	{
		msCounter = 200/3;
		init_serial_buffers();
		load_iWrap_Cmd( (char*)"at\r\nat\r\n");
		while (msCounter)
    132e:	4b09      	ldr	r3, [pc, #36]	; (1354 <check_WT41_responding+0x90>)
    1330:	681b      	ldr	r3, [r3, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d1dc      	bne.n	12f0 <check_WT41_responding+0x2c>
			check_usarts();
			strcpy(cStr,"OK\r\n");			// check WT41 responding
			ptr = memmem((char *)(serialQ.blueToothToMidi),100, cStr,strlen(cStr));
			if (ptr) break;
		}
		if(ptr) 
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	2b00      	cmp	r3, #0
    133a:	d001      	beq.n	1340 <check_WT41_responding+0x7c>
			return STATUS_OK;
    133c:	2300      	movs	r3, #0
    133e:	e004      	b.n	134a <check_WT41_responding+0x86>
		else 
		{
			reset_BT();							// not responding, try reset
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <check_WT41_responding+0xbc>)
    1342:	4798      	blx	r3
			return STATUS_ERR_DENIED;
    1344:	231c      	movs	r3, #28
    1346:	e000      	b.n	134a <check_WT41_responding+0x86>
		}
	}
	return STATUS_ERR_DENIED;
    1348:	231c      	movs	r3, #28
}
    134a:	1c18      	adds	r0, r3, #0
    134c:	46bd      	mov	sp, r7
    134e:	b003      	add	sp, #12
    1350:	bd90      	pop	{r4, r7, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	20000348 	.word	0x20000348
    1358:	00000951 	.word	0x00000951
    135c:	000043b0 	.word	0x000043b0
    1360:	00000a21 	.word	0x00000a21
    1364:	00000b9d 	.word	0x00000b9d
    1368:	200002cc 	.word	0x200002cc
    136c:	000043bc 	.word	0x000043bc
    1370:	000042d9 	.word	0x000042d9
    1374:	00004339 	.word	0x00004339
    1378:	200001c0 	.word	0x200001c0
    137c:	000042eb 	.word	0x000042eb
    1380:	000002ad 	.word	0x000002ad

00001384 <pair_WT41>:
requirements:  address to pair with is in pair_addr

*/

enum status_code pair_WT41(void)
{
    1384:	b590      	push	{r4, r7, lr}
    1386:	b083      	sub	sp, #12
    1388:	af00      	add	r7, sp, #0
	uint8_t *ptr;

	init_serial_buffers();
    138a:	4b27      	ldr	r3, [pc, #156]	; (1428 <pair_WT41+0xa4>)
    138c:	4798      	blx	r3
	
	msCounter = 1500;		// set time out at 15 sec
    138e:	4b27      	ldr	r3, [pc, #156]	; (142c <pair_WT41+0xa8>)
    1390:	4a27      	ldr	r2, [pc, #156]	; (1430 <pair_WT41+0xac>)
    1392:	601a      	str	r2, [r3, #0]
	
	strcpy(cStr, "\r\npair ");
    1394:	4a27      	ldr	r2, [pc, #156]	; (1434 <pair_WT41+0xb0>)
    1396:	4b28      	ldr	r3, [pc, #160]	; (1438 <pair_WT41+0xb4>)
    1398:	1c11      	adds	r1, r2, #0
    139a:	1c1a      	adds	r2, r3, #0
    139c:	2308      	movs	r3, #8
    139e:	1c08      	adds	r0, r1, #0
    13a0:	1c11      	adds	r1, r2, #0
    13a2:	1c1a      	adds	r2, r3, #0
    13a4:	4b25      	ldr	r3, [pc, #148]	; (143c <pair_WT41+0xb8>)
    13a6:	4798      	blx	r3
	strcat(cStr,pair_addr);
    13a8:	4a22      	ldr	r2, [pc, #136]	; (1434 <pair_WT41+0xb0>)
    13aa:	4b25      	ldr	r3, [pc, #148]	; (1440 <pair_WT41+0xbc>)
    13ac:	1c10      	adds	r0, r2, #0
    13ae:	1c19      	adds	r1, r3, #0
    13b0:	4b24      	ldr	r3, [pc, #144]	; (1444 <pair_WT41+0xc0>)
    13b2:	4798      	blx	r3
	strcat(cStr,"\r\n");
    13b4:	4b1f      	ldr	r3, [pc, #124]	; (1434 <pair_WT41+0xb0>)
    13b6:	1c18      	adds	r0, r3, #0
    13b8:	4b23      	ldr	r3, [pc, #140]	; (1448 <pair_WT41+0xc4>)
    13ba:	4798      	blx	r3
    13bc:	1c03      	adds	r3, r0, #0
    13be:	1c1a      	adds	r2, r3, #0
    13c0:	4b1c      	ldr	r3, [pc, #112]	; (1434 <pair_WT41+0xb0>)
    13c2:	18d2      	adds	r2, r2, r3
    13c4:	4b21      	ldr	r3, [pc, #132]	; (144c <pair_WT41+0xc8>)
    13c6:	1c11      	adds	r1, r2, #0
    13c8:	1c1a      	adds	r2, r3, #0
    13ca:	2303      	movs	r3, #3
    13cc:	1c08      	adds	r0, r1, #0
    13ce:	1c11      	adds	r1, r2, #0
    13d0:	1c1a      	adds	r2, r3, #0
    13d2:	4b1a      	ldr	r3, [pc, #104]	; (143c <pair_WT41+0xb8>)
    13d4:	4798      	blx	r3
	load_iWrap_Cmd((char*) cStr);	   // send request
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <pair_WT41+0xb0>)
    13d8:	1c18      	adds	r0, r3, #0
    13da:	4b1d      	ldr	r3, [pc, #116]	; (1450 <pair_WT41+0xcc>)
    13dc:	4798      	blx	r3
	
	while (msCounter)				// wait for OK
    13de:	e00f      	b.n	1400 <pair_WT41+0x7c>
	{
		ptr = memmem((char *)(serialQ.blueToothToMidi),100,"OK",2);
    13e0:	4a1c      	ldr	r2, [pc, #112]	; (1454 <pair_WT41+0xd0>)
    13e2:	4b1d      	ldr	r3, [pc, #116]	; (1458 <pair_WT41+0xd4>)
    13e4:	1c10      	adds	r0, r2, #0
    13e6:	2164      	movs	r1, #100	; 0x64
    13e8:	1c1a      	adds	r2, r3, #0
    13ea:	2302      	movs	r3, #2
    13ec:	4c1b      	ldr	r4, [pc, #108]	; (145c <pair_WT41+0xd8>)
    13ee:	47a0      	blx	r4
    13f0:	1c03      	adds	r3, r0, #0
    13f2:	607b      	str	r3, [r7, #4]
		if (ptr) break;
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d000      	beq.n	13fc <pair_WT41+0x78>
    13fa:	e005      	b.n	1408 <pair_WT41+0x84>
		check_usarts();		
    13fc:	4b18      	ldr	r3, [pc, #96]	; (1460 <pair_WT41+0xdc>)
    13fe:	4798      	blx	r3
	strcpy(cStr, "\r\npair ");
	strcat(cStr,pair_addr);
	strcat(cStr,"\r\n");
	load_iWrap_Cmd((char*) cStr);	   // send request
	
	while (msCounter)				// wait for OK
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <pair_WT41+0xa8>)
    1402:	681b      	ldr	r3, [r3, #0]
    1404:	2b00      	cmp	r3, #0
    1406:	d1eb      	bne.n	13e0 <pair_WT41+0x5c>
		ptr = memmem((char *)(serialQ.blueToothToMidi),100,"OK",2);
		if (ptr) break;
		check_usarts();		
	}
	// Look for OK		
	if( ptr ) {
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	2b00      	cmp	r3, #0
    140c:	d004      	beq.n	1418 <pair_WT41+0x94>
			BTpaired = true;
    140e:	4b15      	ldr	r3, [pc, #84]	; (1464 <pair_WT41+0xe0>)
    1410:	2201      	movs	r2, #1
    1412:	701a      	strb	r2, [r3, #0]
			return STATUS_OK;
    1414:	2300      	movs	r3, #0
    1416:	e002      	b.n	141e <pair_WT41+0x9a>
		}
		else {
			unpair_WT41();
    1418:	4b13      	ldr	r3, [pc, #76]	; (1468 <pair_WT41+0xe4>)
    141a:	4798      	blx	r3
			return STATUS_ERR_DENIED;
    141c:	231c      	movs	r3, #28
		}
}
    141e:	1c18      	adds	r0, r3, #0
    1420:	46bd      	mov	sp, r7
    1422:	b003      	add	sp, #12
    1424:	bd90      	pop	{r4, r7, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	00000951 	.word	0x00000951
    142c:	20000348 	.word	0x20000348
    1430:	000005dc 	.word	0x000005dc
    1434:	200002cc 	.word	0x200002cc
    1438:	000043c4 	.word	0x000043c4
    143c:	000042d9 	.word	0x000042d9
    1440:	20000330 	.word	0x20000330
    1444:	0000431f 	.word	0x0000431f
    1448:	00004339 	.word	0x00004339
    144c:	000043cc 	.word	0x000043cc
    1450:	00000a21 	.word	0x00000a21
    1454:	200001c0 	.word	0x200001c0
    1458:	000043d0 	.word	0x000043d0
    145c:	000042eb 	.word	0x000042eb
    1460:	00000b9d 	.word	0x00000b9d
    1464:	20000389 	.word	0x20000389
    1468:	0000146d 	.word	0x0000146d

0000146c <unpair_WT41>:


enum status_code unpair_WT41(void)
{
    146c:	b580      	push	{r7, lr}
    146e:	af00      	add	r7, sp, #0
	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == true) exit_SSP_WT41();
    1470:	2017      	movs	r0, #23
    1472:	4b2f      	ldr	r3, [pc, #188]	; (1530 <unpair_WT41+0xc4>)
    1474:	4798      	blx	r3
    1476:	1e03      	subs	r3, r0, #0
    1478:	d001      	beq.n	147e <unpair_WT41+0x12>
    147a:	4b2e      	ldr	r3, [pc, #184]	; (1534 <unpair_WT41+0xc8>)
    147c:	4798      	blx	r3
	
	// turn off autocall
	strcpy((char *)cStr,"at\r\nSET CONTROL AUTOCALL\r\n");		// removes it
    147e:	4a2e      	ldr	r2, [pc, #184]	; (1538 <unpair_WT41+0xcc>)
    1480:	4b2e      	ldr	r3, [pc, #184]	; (153c <unpair_WT41+0xd0>)
    1482:	1c11      	adds	r1, r2, #0
    1484:	1c1a      	adds	r2, r3, #0
    1486:	231b      	movs	r3, #27
    1488:	1c08      	adds	r0, r1, #0
    148a:	1c11      	adds	r1, r2, #0
    148c:	1c1a      	adds	r2, r3, #0
    148e:	4b2c      	ldr	r3, [pc, #176]	; (1540 <unpair_WT41+0xd4>)
    1490:	4798      	blx	r3
	init_serial_buffers();
    1492:	4b2c      	ldr	r3, [pc, #176]	; (1544 <unpair_WT41+0xd8>)
    1494:	4798      	blx	r3
	load_iWrap_Cmd((char*) cStr);	// send command to remove autocall
    1496:	4b28      	ldr	r3, [pc, #160]	; (1538 <unpair_WT41+0xcc>)
    1498:	1c18      	adds	r0, r3, #0
    149a:	4b2b      	ldr	r3, [pc, #172]	; (1548 <unpair_WT41+0xdc>)
    149c:	4798      	blx	r3
	wait_10msSec(10);	// wait .1 sec above to be sent	
    149e:	200a      	movs	r0, #10
    14a0:	4b2a      	ldr	r3, [pc, #168]	; (154c <unpair_WT41+0xe0>)
    14a2:	4798      	blx	r3
	
	check_WT41_paired();
    14a4:	4b2a      	ldr	r3, [pc, #168]	; (1550 <unpair_WT41+0xe4>)
    14a6:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    14a8:	4b2a      	ldr	r3, [pc, #168]	; (1554 <unpair_WT41+0xe8>)
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d101      	bne.n	14b4 <unpair_WT41+0x48>
		return STATUS_OK;
    14b0:	2300      	movs	r3, #0
    14b2:	e03a      	b.n	152a <unpair_WT41+0xbe>
	
	cStr[0]=0;							
    14b4:	4b20      	ldr	r3, [pc, #128]	; (1538 <unpair_WT41+0xcc>)
    14b6:	2200      	movs	r2, #0
    14b8:	701a      	strb	r2, [r3, #0]
	strcpy(cStr, "at\r\nset bt pair ");
    14ba:	4a1f      	ldr	r2, [pc, #124]	; (1538 <unpair_WT41+0xcc>)
    14bc:	4b26      	ldr	r3, [pc, #152]	; (1558 <unpair_WT41+0xec>)
    14be:	1c11      	adds	r1, r2, #0
    14c0:	1c1a      	adds	r2, r3, #0
    14c2:	2311      	movs	r3, #17
    14c4:	1c08      	adds	r0, r1, #0
    14c6:	1c11      	adds	r1, r2, #0
    14c8:	1c1a      	adds	r2, r3, #0
    14ca:	4b1d      	ldr	r3, [pc, #116]	; (1540 <unpair_WT41+0xd4>)
    14cc:	4798      	blx	r3
	strcat(cStr,pair_addr);
    14ce:	4a1a      	ldr	r2, [pc, #104]	; (1538 <unpair_WT41+0xcc>)
    14d0:	4b20      	ldr	r3, [pc, #128]	; (1554 <unpair_WT41+0xe8>)
    14d2:	1c10      	adds	r0, r2, #0
    14d4:	1c19      	adds	r1, r3, #0
    14d6:	4b21      	ldr	r3, [pc, #132]	; (155c <unpair_WT41+0xf0>)
    14d8:	4798      	blx	r3
	strcat(cStr,"\r\n");
    14da:	4b17      	ldr	r3, [pc, #92]	; (1538 <unpair_WT41+0xcc>)
    14dc:	1c18      	adds	r0, r3, #0
    14de:	4b20      	ldr	r3, [pc, #128]	; (1560 <unpair_WT41+0xf4>)
    14e0:	4798      	blx	r3
    14e2:	1c03      	adds	r3, r0, #0
    14e4:	1c1a      	adds	r2, r3, #0
    14e6:	4b14      	ldr	r3, [pc, #80]	; (1538 <unpair_WT41+0xcc>)
    14e8:	18d2      	adds	r2, r2, r3
    14ea:	4b1e      	ldr	r3, [pc, #120]	; (1564 <unpair_WT41+0xf8>)
    14ec:	1c11      	adds	r1, r2, #0
    14ee:	1c1a      	adds	r2, r3, #0
    14f0:	2303      	movs	r3, #3
    14f2:	1c08      	adds	r0, r1, #0
    14f4:	1c11      	adds	r1, r2, #0
    14f6:	1c1a      	adds	r2, r3, #0
    14f8:	4b11      	ldr	r3, [pc, #68]	; (1540 <unpair_WT41+0xd4>)
    14fa:	4798      	blx	r3
	init_serial_buffers();
    14fc:	4b11      	ldr	r3, [pc, #68]	; (1544 <unpair_WT41+0xd8>)
    14fe:	4798      	blx	r3
	load_iWrap_Cmd((char*) cStr);	// send command to remove pairing
    1500:	4b0d      	ldr	r3, [pc, #52]	; (1538 <unpair_WT41+0xcc>)
    1502:	1c18      	adds	r0, r3, #0
    1504:	4b10      	ldr	r3, [pc, #64]	; (1548 <unpair_WT41+0xdc>)
    1506:	4798      	blx	r3
	
	wait_sec(1);
    1508:	2001      	movs	r0, #1
    150a:	4b17      	ldr	r3, [pc, #92]	; (1568 <unpair_WT41+0xfc>)
    150c:	4798      	blx	r3
	
	check_WT41_paired();
    150e:	4b10      	ldr	r3, [pc, #64]	; (1550 <unpair_WT41+0xe4>)
    1510:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    1512:	4b10      	ldr	r3, [pc, #64]	; (1554 <unpair_WT41+0xe8>)
    1514:	781b      	ldrb	r3, [r3, #0]
    1516:	2b00      	cmp	r3, #0
    1518:	d104      	bne.n	1524 <unpair_WT41+0xb8>
	{
		sysState = INQUIRY_STATE;
    151a:	4b14      	ldr	r3, [pc, #80]	; (156c <unpair_WT41+0x100>)
    151c:	22f3      	movs	r2, #243	; 0xf3
    151e:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1520:	2300      	movs	r3, #0
    1522:	e002      	b.n	152a <unpair_WT41+0xbe>
	}
	else 
	{
		reset_BT();
    1524:	4b12      	ldr	r3, [pc, #72]	; (1570 <unpair_WT41+0x104>)
    1526:	4798      	blx	r3
		return STATUS_ERR_DENIED; 	
    1528:	231c      	movs	r3, #28
	}
}
    152a:	1c18      	adds	r0, r3, #0
    152c:	46bd      	mov	sp, r7
    152e:	bd80      	pop	{r7, pc}
    1530:	00001099 	.word	0x00001099
    1534:	000010dd 	.word	0x000010dd
    1538:	200002cc 	.word	0x200002cc
    153c:	000043d4 	.word	0x000043d4
    1540:	000042d9 	.word	0x000042d9
    1544:	00000951 	.word	0x00000951
    1548:	00000a21 	.word	0x00000a21
    154c:	000018d5 	.word	0x000018d5
    1550:	000011e1 	.word	0x000011e1
    1554:	20000330 	.word	0x20000330
    1558:	000043f0 	.word	0x000043f0
    155c:	0000431f 	.word	0x0000431f
    1560:	00004339 	.word	0x00004339
    1564:	000043cc 	.word	0x000043cc
    1568:	000018a5 	.word	0x000018a5
    156c:	20000475 	.word	0x20000475
    1570:	000002ad 	.word	0x000002ad

00001574 <BT_master_init>:


void BT_master_init(void)
{	uint8_t *ptr;
    1574:	b590      	push	{r4, r7, lr}
    1576:	b083      	sub	sp, #12
    1578:	af00      	add	r7, sp, #0

// check if it's been initialized once

//	init_serial_buffers();
	init_serial_buffers();
    157a:	4b40      	ldr	r3, [pc, #256]	; (167c <BT_master_init+0x108>)
    157c:	4798      	blx	r3
	load_iWrap_Cmd((char*) "at\r\nset\r\n");
    157e:	4b40      	ldr	r3, [pc, #256]	; (1680 <BT_master_init+0x10c>)
    1580:	1c18      	adds	r0, r3, #0
    1582:	4b40      	ldr	r3, [pc, #256]	; (1684 <BT_master_init+0x110>)
    1584:	4798      	blx	r3

	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) != true) check_unpairPB();
    1586:	2017      	movs	r0, #23
    1588:	4b3f      	ldr	r3, [pc, #252]	; (1688 <BT_master_init+0x114>)
    158a:	4798      	blx	r3
    158c:	1c03      	adds	r3, r0, #0
    158e:	1c1a      	adds	r2, r3, #0
    1590:	2301      	movs	r3, #1
    1592:	4053      	eors	r3, r2
    1594:	b2db      	uxtb	r3, r3
    1596:	2b00      	cmp	r3, #0
    1598:	d001      	beq.n	159e <BT_master_init+0x2a>
    159a:	4b3c      	ldr	r3, [pc, #240]	; (168c <BT_master_init+0x118>)
    159c:	4798      	blx	r3
	
	msCounter = 1000;
    159e:	4b3c      	ldr	r3, [pc, #240]	; (1690 <BT_master_init+0x11c>)
    15a0:	22fa      	movs	r2, #250	; 0xfa
    15a2:	0092      	lsls	r2, r2, #2
    15a4:	601a      	str	r2, [r3, #0]
	
	while (msCounter)				// wait for OK
    15a6:	e01e      	b.n	15e6 <BT_master_init+0x72>
	{
		check_usarts();
    15a8:	4b3a      	ldr	r3, [pc, #232]	; (1694 <BT_master_init+0x120>)
    15aa:	4798      	blx	r3
		strcpy(cStr,BT_NAME_MASTER);
    15ac:	4a3a      	ldr	r2, [pc, #232]	; (1698 <BT_master_init+0x124>)
    15ae:	4b3b      	ldr	r3, [pc, #236]	; (169c <BT_master_init+0x128>)
    15b0:	1c11      	adds	r1, r2, #0
    15b2:	1c1a      	adds	r2, r3, #0
    15b4:	2309      	movs	r3, #9
    15b6:	1c08      	adds	r0, r1, #0
    15b8:	1c11      	adds	r1, r2, #0
    15ba:	1c1a      	adds	r2, r3, #0
    15bc:	4b38      	ldr	r3, [pc, #224]	; (16a0 <BT_master_init+0x12c>)
    15be:	4798      	blx	r3
		ptr = memmem((char *)(serialQ.blueToothToMidi),255, cStr,strlen(cStr));
    15c0:	4b35      	ldr	r3, [pc, #212]	; (1698 <BT_master_init+0x124>)
    15c2:	1c18      	adds	r0, r3, #0
    15c4:	4b37      	ldr	r3, [pc, #220]	; (16a4 <BT_master_init+0x130>)
    15c6:	4798      	blx	r3
    15c8:	1c04      	adds	r4, r0, #0
    15ca:	4a37      	ldr	r2, [pc, #220]	; (16a8 <BT_master_init+0x134>)
    15cc:	4b32      	ldr	r3, [pc, #200]	; (1698 <BT_master_init+0x124>)
    15ce:	1c10      	adds	r0, r2, #0
    15d0:	21ff      	movs	r1, #255	; 0xff
    15d2:	1c1a      	adds	r2, r3, #0
    15d4:	1c23      	adds	r3, r4, #0
    15d6:	4c35      	ldr	r4, [pc, #212]	; (16ac <BT_master_init+0x138>)
    15d8:	47a0      	blx	r4
    15da:	1c03      	adds	r3, r0, #0
    15dc:	607b      	str	r3, [r7, #4]
		if (ptr) break;
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d000      	beq.n	15e6 <BT_master_init+0x72>
    15e4:	e003      	b.n	15ee <BT_master_init+0x7a>

	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) != true) check_unpairPB();
	
	msCounter = 1000;
	
	while (msCounter)				// wait for OK
    15e6:	4b2a      	ldr	r3, [pc, #168]	; (1690 <BT_master_init+0x11c>)
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	2b00      	cmp	r3, #0
    15ec:	d1dc      	bne.n	15a8 <BT_master_init+0x34>
		strcpy(cStr,BT_NAME_MASTER);
		ptr = memmem((char *)(serialQ.blueToothToMidi),255, cStr,strlen(cStr));
		if (ptr) break;
	}

	if(ptr == NULL)   // initialize WT41
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d140      	bne.n	1676 <BT_master_init+0x102>
	{
		load_iWrap_Cmd((char*)WT41_SUPERVISORY_TIMEOUT);
    15f4:	4b2e      	ldr	r3, [pc, #184]	; (16b0 <BT_master_init+0x13c>)
    15f6:	1c18      	adds	r0, r3, #0
    15f8:	4b22      	ldr	r3, [pc, #136]	; (1684 <BT_master_init+0x110>)
    15fa:	4798      	blx	r3
		wait_10msSec(5);
    15fc:	2005      	movs	r0, #5
    15fe:	4b2d      	ldr	r3, [pc, #180]	; (16b4 <BT_master_init+0x140>)
    1600:	4798      	blx	r3
		load_iWrap_Cmd((char*)WT41_CARRIER_DETECT_CMD);
    1602:	4b2d      	ldr	r3, [pc, #180]	; (16b8 <BT_master_init+0x144>)
    1604:	1c18      	adds	r0, r3, #0
    1606:	4b1f      	ldr	r3, [pc, #124]	; (1684 <BT_master_init+0x110>)
    1608:	4798      	blx	r3
		wait_10msSec(5);
    160a:	2005      	movs	r0, #5
    160c:	4b29      	ldr	r3, [pc, #164]	; (16b4 <BT_master_init+0x140>)
    160e:	4798      	blx	r3
/*
		load_iWrap_Cmd((char*)WT41_AUTOCALL);
		wait_10msSec(5);
*/
		strcpy(cStr,"at\r\nat\r\nset bt name ");		// rename
    1610:	4a21      	ldr	r2, [pc, #132]	; (1698 <BT_master_init+0x124>)
    1612:	4b2a      	ldr	r3, [pc, #168]	; (16bc <BT_master_init+0x148>)
    1614:	1c11      	adds	r1, r2, #0
    1616:	1c1a      	adds	r2, r3, #0
    1618:	2315      	movs	r3, #21
    161a:	1c08      	adds	r0, r1, #0
    161c:	1c11      	adds	r1, r2, #0
    161e:	1c1a      	adds	r2, r3, #0
    1620:	4b1f      	ldr	r3, [pc, #124]	; (16a0 <BT_master_init+0x12c>)
    1622:	4798      	blx	r3
		strcat(cStr,BT_NAME_MASTER);
    1624:	4b1c      	ldr	r3, [pc, #112]	; (1698 <BT_master_init+0x124>)
    1626:	1c18      	adds	r0, r3, #0
    1628:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <BT_master_init+0x130>)
    162a:	4798      	blx	r3
    162c:	1c03      	adds	r3, r0, #0
    162e:	1c1a      	adds	r2, r3, #0
    1630:	4b19      	ldr	r3, [pc, #100]	; (1698 <BT_master_init+0x124>)
    1632:	18d2      	adds	r2, r2, r3
    1634:	4b19      	ldr	r3, [pc, #100]	; (169c <BT_master_init+0x128>)
    1636:	1c11      	adds	r1, r2, #0
    1638:	1c1a      	adds	r2, r3, #0
    163a:	2309      	movs	r3, #9
    163c:	1c08      	adds	r0, r1, #0
    163e:	1c11      	adds	r1, r2, #0
    1640:	1c1a      	adds	r2, r3, #0
    1642:	4b17      	ldr	r3, [pc, #92]	; (16a0 <BT_master_init+0x12c>)
    1644:	4798      	blx	r3
		strcat(cStr,"\r\n");
    1646:	4b14      	ldr	r3, [pc, #80]	; (1698 <BT_master_init+0x124>)
    1648:	1c18      	adds	r0, r3, #0
    164a:	4b16      	ldr	r3, [pc, #88]	; (16a4 <BT_master_init+0x130>)
    164c:	4798      	blx	r3
    164e:	1c03      	adds	r3, r0, #0
    1650:	1c1a      	adds	r2, r3, #0
    1652:	4b11      	ldr	r3, [pc, #68]	; (1698 <BT_master_init+0x124>)
    1654:	18d2      	adds	r2, r2, r3
    1656:	4b1a      	ldr	r3, [pc, #104]	; (16c0 <BT_master_init+0x14c>)
    1658:	1c11      	adds	r1, r2, #0
    165a:	1c1a      	adds	r2, r3, #0
    165c:	2303      	movs	r3, #3
    165e:	1c08      	adds	r0, r1, #0
    1660:	1c11      	adds	r1, r2, #0
    1662:	1c1a      	adds	r2, r3, #0
    1664:	4b0e      	ldr	r3, [pc, #56]	; (16a0 <BT_master_init+0x12c>)
    1666:	4798      	blx	r3
		load_iWrap_Cmd((char*)cStr);
    1668:	4b0b      	ldr	r3, [pc, #44]	; (1698 <BT_master_init+0x124>)
    166a:	1c18      	adds	r0, r3, #0
    166c:	4b05      	ldr	r3, [pc, #20]	; (1684 <BT_master_init+0x110>)
    166e:	4798      	blx	r3
		wait_10msSec(25);
    1670:	2019      	movs	r0, #25
    1672:	4b10      	ldr	r3, [pc, #64]	; (16b4 <BT_master_init+0x140>)
    1674:	4798      	blx	r3
	}
}
    1676:	46bd      	mov	sp, r7
    1678:	b003      	add	sp, #12
    167a:	bd90      	pop	{r4, r7, pc}
    167c:	00000951 	.word	0x00000951
    1680:	00004404 	.word	0x00004404
    1684:	00000a21 	.word	0x00000a21
    1688:	00001099 	.word	0x00001099
    168c:	00001c25 	.word	0x00001c25
    1690:	20000348 	.word	0x20000348
    1694:	00000b9d 	.word	0x00000b9d
    1698:	200002cc 	.word	0x200002cc
    169c:	00004410 	.word	0x00004410
    16a0:	000042d9 	.word	0x000042d9
    16a4:	00004339 	.word	0x00004339
    16a8:	200001c0 	.word	0x200001c0
    16ac:	000042eb 	.word	0x000042eb
    16b0:	0000441c 	.word	0x0000441c
    16b4:	000018d5 	.word	0x000018d5
    16b8:	00004438 	.word	0x00004438
    16bc:	00004454 	.word	0x00004454
    16c0:	000043cc 	.word	0x000043cc

000016c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	b082      	sub	sp, #8
    16c8:	af00      	add	r7, sp, #0
    16ca:	1c02      	adds	r2, r0, #0
    16cc:	1dfb      	adds	r3, r7, #7
    16ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16d0:	4b06      	ldr	r3, [pc, #24]	; (16ec <system_interrupt_enable+0x28>)
    16d2:	1dfa      	adds	r2, r7, #7
    16d4:	7812      	ldrb	r2, [r2, #0]
    16d6:	1c11      	adds	r1, r2, #0
    16d8:	221f      	movs	r2, #31
    16da:	400a      	ands	r2, r1
    16dc:	2101      	movs	r1, #1
    16de:	4091      	lsls	r1, r2
    16e0:	1c0a      	adds	r2, r1, #0
    16e2:	601a      	str	r2, [r3, #0]
}
    16e4:	46bd      	mov	sp, r7
    16e6:	b002      	add	sp, #8
    16e8:	bd80      	pop	{r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	e000e100 	.word	0xe000e100

000016f0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b084      	sub	sp, #16
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	60fb      	str	r3, [r7, #12]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16fe:	68fb      	ldr	r3, [r7, #12]
    1700:	7bdb      	ldrb	r3, [r3, #15]
    1702:	b2db      	uxtb	r3, r3
    1704:	1c1a      	adds	r2, r3, #0
    1706:	2380      	movs	r3, #128	; 0x80
    1708:	4013      	ands	r3, r2
    170a:	1e5a      	subs	r2, r3, #1
    170c:	4193      	sbcs	r3, r2
    170e:	b2db      	uxtb	r3, r3
#endif
}
    1710:	1c18      	adds	r0, r3, #0
    1712:	46bd      	mov	sp, r7
    1714:	b004      	add	sp, #16
    1716:	bd80      	pop	{r7, pc}

00001718 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	2200      	movs	r2, #0
    1724:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	2200      	movs	r2, #0
    172a:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	2200      	movs	r2, #0
    1730:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	2200      	movs	r2, #0
    1736:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	2200      	movs	r2, #0
    173c:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	2200      	movs	r2, #0
    1742:	705a      	strb	r2, [r3, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	2200      	movs	r2, #0
    1748:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	2200      	movs	r2, #0
    174e:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	2200      	movs	r2, #0
    1754:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	2200      	movs	r2, #0
    175a:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	2200      	movs	r2, #0
    1760:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	2200      	movs	r2, #0
    1766:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	2200      	movs	r2, #0
    176c:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	2200      	movs	r2, #0
    1772:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	2200      	movs	r2, #0
    1778:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	2200      	movs	r2, #0
    177e:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1780:	687b      	ldr	r3, [r7, #4]
    1782:	2200      	movs	r2, #0
    1784:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	2200      	movs	r2, #0
    178a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	2200      	movs	r2, #0
    1790:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	2200      	movs	r2, #0
    1796:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    1798:	46bd      	mov	sp, r7
    179a:	b002      	add	sp, #8
    179c:	bd80      	pop	{r7, pc}
    179e:	46c0      	nop			; (mov r8, r8)

000017a0 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	b084      	sub	sp, #16
    17a4:	af00      	add	r7, sp, #0
    17a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	1c18      	adds	r0, r3, #0
    17b4:	4b07      	ldr	r3, [pc, #28]	; (17d4 <tc_enable+0x34>)
    17b6:	4798      	blx	r3
    17b8:	1e03      	subs	r3, r0, #0
    17ba:	d1f9      	bne.n	17b0 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	881b      	ldrh	r3, [r3, #0]
    17c0:	b29b      	uxth	r3, r3
    17c2:	2202      	movs	r2, #2
    17c4:	4313      	orrs	r3, r2
    17c6:	b29a      	uxth	r2, r3
    17c8:	68fb      	ldr	r3, [r7, #12]
    17ca:	801a      	strh	r2, [r3, #0]
}
    17cc:	46bd      	mov	sp, r7
    17ce:	b004      	add	sp, #16
    17d0:	bd80      	pop	{r7, pc}
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	000016f1 	.word	0x000016f1

000017d8 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    17d8:	b580      	push	{r7, lr}
    17da:	b082      	sub	sp, #8
    17dc:	af00      	add	r7, sp, #0
    17de:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    17e0:	4a04      	ldr	r2, [pc, #16]	; (17f4 <_tc_interrupt_get_interrupt_vector+0x1c>)
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	18d3      	adds	r3, r2, r3
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	b2db      	uxtb	r3, r3
    17ea:	b25b      	sxtb	r3, r3
}
    17ec:	1c18      	adds	r0, r3, #0
    17ee:	46bd      	mov	sp, r7
    17f0:	b002      	add	sp, #8
    17f2:	bd80      	pop	{r7, pc}
    17f4:	20000000 	.word	0x20000000

000017f8 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	af00      	add	r7, sp, #0
    17fe:	6078      	str	r0, [r7, #4]
    1800:	1c0a      	adds	r2, r1, #0
    1802:	1cfb      	adds	r3, r7, #3
    1804:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	1c18      	adds	r0, r3, #0
    180c:	4b22      	ldr	r3, [pc, #136]	; (1898 <tc_enable_callback+0xa0>)
    180e:	4798      	blx	r3
    1810:	1c03      	adds	r3, r0, #0
    1812:	1c18      	adds	r0, r3, #0
    1814:	4b21      	ldr	r3, [pc, #132]	; (189c <tc_enable_callback+0xa4>)
    1816:	4798      	blx	r3
    1818:	1c03      	adds	r3, r0, #0
    181a:	1c18      	adds	r0, r3, #0
    181c:	4b20      	ldr	r3, [pc, #128]	; (18a0 <tc_enable_callback+0xa8>)
    181e:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1820:	1cfb      	adds	r3, r7, #3
    1822:	781b      	ldrb	r3, [r3, #0]
    1824:	2b02      	cmp	r3, #2
    1826:	d10b      	bne.n	1840 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	7e5b      	ldrb	r3, [r3, #25]
    182c:	2210      	movs	r2, #16
    182e:	4313      	orrs	r3, r2
    1830:	b2da      	uxtb	r2, r3
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2210      	movs	r2, #16
    183c:	735a      	strb	r2, [r3, #13]
    183e:	e027      	b.n	1890 <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1840:	1cfb      	adds	r3, r7, #3
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	2b03      	cmp	r3, #3
    1846:	d10b      	bne.n	1860 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	7e5b      	ldrb	r3, [r3, #25]
    184c:	2220      	movs	r2, #32
    184e:	4313      	orrs	r3, r2
    1850:	b2da      	uxtb	r2, r3
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2220      	movs	r2, #32
    185c:	735a      	strb	r2, [r3, #13]
    185e:	e017      	b.n	1890 <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	7e5b      	ldrb	r3, [r3, #25]
    1864:	b2d9      	uxtb	r1, r3
    1866:	1cfb      	adds	r3, r7, #3
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	2201      	movs	r2, #1
    186c:	409a      	lsls	r2, r3
    186e:	1c13      	adds	r3, r2, #0
    1870:	b2db      	uxtb	r3, r3
    1872:	1c0a      	adds	r2, r1, #0
    1874:	4313      	orrs	r3, r2
    1876:	b2db      	uxtb	r3, r3
    1878:	b2da      	uxtb	r2, r3
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	1cfa      	adds	r2, r7, #3
    1884:	7812      	ldrb	r2, [r2, #0]
    1886:	2101      	movs	r1, #1
    1888:	4091      	lsls	r1, r2
    188a:	1c0a      	adds	r2, r1, #0
    188c:	b2d2      	uxtb	r2, r2
    188e:	735a      	strb	r2, [r3, #13]
	}
}
    1890:	46bd      	mov	sp, r7
    1892:	b002      	add	sp, #8
    1894:	bd80      	pop	{r7, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00002141 	.word	0x00002141
    189c:	000017d9 	.word	0x000017d9
    18a0:	000016c5 	.word	0x000016c5

000018a4 <wait_sec>:

#define CONF_TC_MODULE TC4


void wait_sec(uint32_t wait)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	b082      	sub	sp, #8
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
	msCounter = wait*100;
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	2264      	movs	r2, #100	; 0x64
    18b0:	435a      	muls	r2, r3
    18b2:	4b06      	ldr	r3, [pc, #24]	; (18cc <wait_sec+0x28>)
    18b4:	601a      	str	r2, [r3, #0]
	while (msCounter) check_usarts();
    18b6:	e001      	b.n	18bc <wait_sec+0x18>
    18b8:	4b05      	ldr	r3, [pc, #20]	; (18d0 <wait_sec+0x2c>)
    18ba:	4798      	blx	r3
    18bc:	4b03      	ldr	r3, [pc, #12]	; (18cc <wait_sec+0x28>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d1f9      	bne.n	18b8 <wait_sec+0x14>
}
    18c4:	46bd      	mov	sp, r7
    18c6:	b002      	add	sp, #8
    18c8:	bd80      	pop	{r7, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	20000348 	.word	0x20000348
    18d0:	00000b9d 	.word	0x00000b9d

000018d4 <wait_10msSec>:

void wait_10msSec(uint32_t wait)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	b082      	sub	sp, #8
    18d8:	af00      	add	r7, sp, #0
    18da:	6078      	str	r0, [r7, #4]
	msCounter = wait;
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <wait_10msSec+0x24>)
    18de:	687a      	ldr	r2, [r7, #4]
    18e0:	601a      	str	r2, [r3, #0]
	while (msCounter) check_usarts();
    18e2:	e001      	b.n	18e8 <wait_10msSec+0x14>
    18e4:	4b05      	ldr	r3, [pc, #20]	; (18fc <wait_10msSec+0x28>)
    18e6:	4798      	blx	r3
    18e8:	4b03      	ldr	r3, [pc, #12]	; (18f8 <wait_10msSec+0x24>)
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d1f9      	bne.n	18e4 <wait_10msSec+0x10>
}
    18f0:	46bd      	mov	sp, r7
    18f2:	b002      	add	sp, #8
    18f4:	bd80      	pop	{r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	20000348 	.word	0x20000348
    18fc:	00000b9d 	.word	0x00000b9d

00001900 <tc_callback_to_toggle_led>:
extern char pair_addr[20];


void tc_callback_to_toggle_led(
		struct tc_module *const module_inst)
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
//	tc_callback_occurred = true;
//	port_pin_toggle_output_level(Yellow_LED_PIN);
	if (msCounter>0) msCounter--;
    1908:	4b08      	ldr	r3, [pc, #32]	; (192c <tc_callback_to_toggle_led+0x2c>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d004      	beq.n	191a <tc_callback_to_toggle_led+0x1a>
    1910:	4b06      	ldr	r3, [pc, #24]	; (192c <tc_callback_to_toggle_led+0x2c>)
    1912:	681b      	ldr	r3, [r3, #0]
    1914:	1e5a      	subs	r2, r3, #1
    1916:	4b05      	ldr	r3, [pc, #20]	; (192c <tc_callback_to_toggle_led+0x2c>)
    1918:	601a      	str	r2, [r3, #0]
	//if(usartTimeout<SERIAL_COMM_QUITE) usartTimeout++;
	ledTimer++;
    191a:	4b05      	ldr	r3, [pc, #20]	; (1930 <tc_callback_to_toggle_led+0x30>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	1c5a      	adds	r2, r3, #1
    1920:	4b03      	ldr	r3, [pc, #12]	; (1930 <tc_callback_to_toggle_led+0x30>)
    1922:	601a      	str	r2, [r3, #0]

}
    1924:	46bd      	mov	sp, r7
    1926:	b002      	add	sp, #8
    1928:	bd80      	pop	{r7, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	20000348 	.word	0x20000348
    1930:	20000344 	.word	0x20000344

00001934 <configure_tc4>:
//! [callback_funcs]

//! [setup]
void configure_tc4(void)
{
    1934:	b580      	push	{r7, lr}
    1936:	b08e      	sub	sp, #56	; 0x38
    1938:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    193a:	1d3b      	adds	r3, r7, #4
    193c:	1c18      	adds	r0, r3, #0
    193e:	4b0f      	ldr	r3, [pc, #60]	; (197c <configure_tc4+0x48>)
    1940:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    1942:	1d3b      	adds	r3, r7, #4
    1944:	2204      	movs	r2, #4
    1946:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;			// 12M
    1948:	1d3b      	adds	r3, r7, #4
    194a:	2201      	movs	r2, #1
    194c:	701a      	strb	r2, [r3, #0]
	
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    194e:	1d3b      	adds	r3, r7, #4
    1950:	22e0      	movs	r2, #224	; 0xe0
    1952:	00d2      	lsls	r2, r2, #3
    1954:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 138;	  	// calculated from 12M and measured at 10ms with scope
    1956:	1d3b      	adds	r3, r7, #4
    1958:	2229      	movs	r2, #41	; 0x29
    195a:	218a      	movs	r1, #138	; 0x8a
    195c:	5499      	strb	r1, [r3, r2]

	//! [setup_set_config]
	tc_init(&tc_instance_tc4, CONF_TC_MODULE, &config_tc);
    195e:	4a08      	ldr	r2, [pc, #32]	; (1980 <configure_tc4+0x4c>)
    1960:	4908      	ldr	r1, [pc, #32]	; (1984 <configure_tc4+0x50>)
    1962:	1d3b      	adds	r3, r7, #4
    1964:	1c10      	adds	r0, r2, #0
    1966:	1c1a      	adds	r2, r3, #0
    1968:	4b07      	ldr	r3, [pc, #28]	; (1988 <configure_tc4+0x54>)
    196a:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance_tc4);
    196c:	4b04      	ldr	r3, [pc, #16]	; (1980 <configure_tc4+0x4c>)
    196e:	1c18      	adds	r0, r3, #0
    1970:	4b06      	ldr	r3, [pc, #24]	; (198c <configure_tc4+0x58>)
    1972:	4798      	blx	r3
	//! [setup_enable]
}
    1974:	46bd      	mov	sp, r7
    1976:	b00e      	add	sp, #56	; 0x38
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	00001719 	.word	0x00001719
    1980:	2000034c 	.word	0x2000034c
    1984:	42003000 	.word	0x42003000
    1988:	00002191 	.word	0x00002191
    198c:	000017a1 	.word	0x000017a1

00001990 <configure_tc4_callbacks>:

void configure_tc4_callbacks(void)
{
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(&tc_instance_tc4, tc_callback_to_toggle_led,TC_CALLBACK_OVERFLOW);
    1994:	4a06      	ldr	r2, [pc, #24]	; (19b0 <configure_tc4_callbacks+0x20>)
    1996:	4b07      	ldr	r3, [pc, #28]	; (19b4 <configure_tc4_callbacks+0x24>)
    1998:	1c10      	adds	r0, r2, #0
    199a:	1c19      	adds	r1, r3, #0
    199c:	2200      	movs	r2, #0
    199e:	4b06      	ldr	r3, [pc, #24]	; (19b8 <configure_tc4_callbacks+0x28>)
    19a0:	4798      	blx	r3

	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance_tc4, TC_CALLBACK_OVERFLOW);
    19a2:	4b03      	ldr	r3, [pc, #12]	; (19b0 <configure_tc4_callbacks+0x20>)
    19a4:	1c18      	adds	r0, r3, #0
    19a6:	2100      	movs	r1, #0
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <configure_tc4_callbacks+0x2c>)
    19aa:	4798      	blx	r3

}
    19ac:	46bd      	mov	sp, r7
    19ae:	bd80      	pop	{r7, pc}
    19b0:	2000034c 	.word	0x2000034c
    19b4:	00001901 	.word	0x00001901
    19b8:	00001eb5 	.word	0x00001eb5
    19bc:	000017f9 	.word	0x000017f9

000019c0 <_sercom_default_handler>:
    19c0:	b580      	push	{r7, lr}
    19c2:	b082      	sub	sp, #8
    19c4:	af00      	add	r7, sp, #0
    19c6:	1c02      	adds	r2, r0, #0
    19c8:	1dfb      	adds	r3, r7, #7
    19ca:	701a      	strb	r2, [r3, #0]
    19cc:	46bd      	mov	sp, r7
    19ce:	b002      	add	sp, #8
    19d0:	bd80      	pop	{r7, pc}
    19d2:	46c0      	nop			; (mov r8, r8)

000019d4 <_sercom_set_handler>:
    19d4:	b580      	push	{r7, lr}
    19d6:	b084      	sub	sp, #16
    19d8:	af00      	add	r7, sp, #0
    19da:	1c02      	adds	r2, r0, #0
    19dc:	6039      	str	r1, [r7, #0]
    19de:	1dfb      	adds	r3, r7, #7
    19e0:	701a      	strb	r2, [r3, #0]
    19e2:	4b13      	ldr	r3, [pc, #76]	; (1a30 <_sercom_set_handler+0x5c>)
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2201      	movs	r2, #1
    19e8:	4053      	eors	r3, r2
    19ea:	b2db      	uxtb	r3, r3
    19ec:	2b00      	cmp	r3, #0
    19ee:	d015      	beq.n	1a1c <_sercom_set_handler+0x48>
    19f0:	2300      	movs	r3, #0
    19f2:	60fb      	str	r3, [r7, #12]
    19f4:	e00c      	b.n	1a10 <_sercom_set_handler+0x3c>
    19f6:	4b0f      	ldr	r3, [pc, #60]	; (1a34 <_sercom_set_handler+0x60>)
    19f8:	68fa      	ldr	r2, [r7, #12]
    19fa:	0092      	lsls	r2, r2, #2
    19fc:	490e      	ldr	r1, [pc, #56]	; (1a38 <_sercom_set_handler+0x64>)
    19fe:	50d1      	str	r1, [r2, r3]
    1a00:	4b0e      	ldr	r3, [pc, #56]	; (1a3c <_sercom_set_handler+0x68>)
    1a02:	68fa      	ldr	r2, [r7, #12]
    1a04:	0092      	lsls	r2, r2, #2
    1a06:	2100      	movs	r1, #0
    1a08:	50d1      	str	r1, [r2, r3]
    1a0a:	68fb      	ldr	r3, [r7, #12]
    1a0c:	3301      	adds	r3, #1
    1a0e:	60fb      	str	r3, [r7, #12]
    1a10:	68fb      	ldr	r3, [r7, #12]
    1a12:	2b05      	cmp	r3, #5
    1a14:	d9ef      	bls.n	19f6 <_sercom_set_handler+0x22>
    1a16:	4b06      	ldr	r3, [pc, #24]	; (1a30 <_sercom_set_handler+0x5c>)
    1a18:	2201      	movs	r2, #1
    1a1a:	701a      	strb	r2, [r3, #0]
    1a1c:	1dfb      	adds	r3, r7, #7
    1a1e:	781a      	ldrb	r2, [r3, #0]
    1a20:	4b04      	ldr	r3, [pc, #16]	; (1a34 <_sercom_set_handler+0x60>)
    1a22:	0092      	lsls	r2, r2, #2
    1a24:	6839      	ldr	r1, [r7, #0]
    1a26:	50d1      	str	r1, [r2, r3]
    1a28:	46bd      	mov	sp, r7
    1a2a:	b004      	add	sp, #16
    1a2c:	bd80      	pop	{r7, pc}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	20000028 	.word	0x20000028
    1a34:	2000002c 	.word	0x2000002c
    1a38:	000019c1 	.word	0x000019c1
    1a3c:	20000368 	.word	0x20000368

00001a40 <_sercom_get_interrupt_vector>:
    1a40:	b590      	push	{r4, r7, lr}
    1a42:	b085      	sub	sp, #20
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
    1a48:	2308      	movs	r3, #8
    1a4a:	18fa      	adds	r2, r7, r3
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <_sercom_get_interrupt_vector+0x48>)
    1a4e:	1c11      	adds	r1, r2, #0
    1a50:	1c1a      	adds	r2, r3, #0
    1a52:	2306      	movs	r3, #6
    1a54:	1c08      	adds	r0, r1, #0
    1a56:	1c11      	adds	r1, r2, #0
    1a58:	1c1a      	adds	r2, r3, #0
    1a5a:	4b0c      	ldr	r3, [pc, #48]	; (1a8c <_sercom_get_interrupt_vector+0x4c>)
    1a5c:	4798      	blx	r3
    1a5e:	230f      	movs	r3, #15
    1a60:	18fc      	adds	r4, r7, r3
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	1c18      	adds	r0, r3, #0
    1a66:	4b0a      	ldr	r3, [pc, #40]	; (1a90 <_sercom_get_interrupt_vector+0x50>)
    1a68:	4798      	blx	r3
    1a6a:	1c03      	adds	r3, r0, #0
    1a6c:	7023      	strb	r3, [r4, #0]
    1a6e:	230f      	movs	r3, #15
    1a70:	18fb      	adds	r3, r7, r3
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2208      	movs	r2, #8
    1a76:	18ba      	adds	r2, r7, r2
    1a78:	5cd3      	ldrb	r3, [r2, r3]
    1a7a:	b2db      	uxtb	r3, r3
    1a7c:	b25b      	sxtb	r3, r3
    1a7e:	1c18      	adds	r0, r3, #0
    1a80:	46bd      	mov	sp, r7
    1a82:	b005      	add	sp, #20
    1a84:	bd90      	pop	{r4, r7, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	0000446c 	.word	0x0000446c
    1a8c:	000042d9 	.word	0x000042d9
    1a90:	00002ca9 	.word	0x00002ca9

00001a94 <SERCOM0_Handler>:
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0
    1a98:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <SERCOM0_Handler+0x10>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	2000      	movs	r0, #0
    1a9e:	4798      	blx	r3
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bd80      	pop	{r7, pc}
    1aa4:	2000002c 	.word	0x2000002c

00001aa8 <SERCOM1_Handler>:
    1aa8:	b580      	push	{r7, lr}
    1aaa:	af00      	add	r7, sp, #0
    1aac:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <SERCOM1_Handler+0x10>)
    1aae:	685b      	ldr	r3, [r3, #4]
    1ab0:	2001      	movs	r0, #1
    1ab2:	4798      	blx	r3
    1ab4:	46bd      	mov	sp, r7
    1ab6:	bd80      	pop	{r7, pc}
    1ab8:	2000002c 	.word	0x2000002c

00001abc <SERCOM2_Handler>:
    1abc:	b580      	push	{r7, lr}
    1abe:	af00      	add	r7, sp, #0
    1ac0:	4b02      	ldr	r3, [pc, #8]	; (1acc <SERCOM2_Handler+0x10>)
    1ac2:	689b      	ldr	r3, [r3, #8]
    1ac4:	2002      	movs	r0, #2
    1ac6:	4798      	blx	r3
    1ac8:	46bd      	mov	sp, r7
    1aca:	bd80      	pop	{r7, pc}
    1acc:	2000002c 	.word	0x2000002c

00001ad0 <SERCOM3_Handler>:
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
    1ad4:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <SERCOM3_Handler+0x10>)
    1ad6:	68db      	ldr	r3, [r3, #12]
    1ad8:	2003      	movs	r0, #3
    1ada:	4798      	blx	r3
    1adc:	46bd      	mov	sp, r7
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	2000002c 	.word	0x2000002c

00001ae4 <SERCOM4_Handler>:
    1ae4:	b580      	push	{r7, lr}
    1ae6:	af00      	add	r7, sp, #0
    1ae8:	4b02      	ldr	r3, [pc, #8]	; (1af4 <SERCOM4_Handler+0x10>)
    1aea:	691b      	ldr	r3, [r3, #16]
    1aec:	2004      	movs	r0, #4
    1aee:	4798      	blx	r3
    1af0:	46bd      	mov	sp, r7
    1af2:	bd80      	pop	{r7, pc}
    1af4:	2000002c 	.word	0x2000002c

00001af8 <SERCOM5_Handler>:
    1af8:	b580      	push	{r7, lr}
    1afa:	af00      	add	r7, sp, #0
    1afc:	4b02      	ldr	r3, [pc, #8]	; (1b08 <SERCOM5_Handler+0x10>)
    1afe:	695b      	ldr	r3, [r3, #20]
    1b00:	2005      	movs	r0, #5
    1b02:	4798      	blx	r3
    1b04:	46bd      	mov	sp, r7
    1b06:	bd80      	pop	{r7, pc}
    1b08:	2000002c 	.word	0x2000002c

00001b0c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b084      	sub	sp, #16
    1b10:	af00      	add	r7, sp, #0
    1b12:	1c02      	adds	r2, r0, #0
    1b14:	1dfb      	adds	r3, r7, #7
    1b16:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1b18:	230f      	movs	r3, #15
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	1dfa      	adds	r2, r7, #7
    1b1e:	7812      	ldrb	r2, [r2, #0]
    1b20:	09d2      	lsrs	r2, r2, #7
    1b22:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1b24:	230e      	movs	r3, #14
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	1dfa      	adds	r2, r7, #7
    1b2a:	7812      	ldrb	r2, [r2, #0]
    1b2c:	0952      	lsrs	r2, r2, #5
    1b2e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1b30:	4b0d      	ldr	r3, [pc, #52]	; (1b68 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1b32:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1b34:	230f      	movs	r3, #15
    1b36:	18fb      	adds	r3, r7, r3
    1b38:	781b      	ldrb	r3, [r3, #0]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d10f      	bne.n	1b5e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1b3e:	230f      	movs	r3, #15
    1b40:	18fb      	adds	r3, r7, r3
    1b42:	781b      	ldrb	r3, [r3, #0]
    1b44:	009b      	lsls	r3, r3, #2
    1b46:	2210      	movs	r2, #16
    1b48:	4694      	mov	ip, r2
    1b4a:	44bc      	add	ip, r7
    1b4c:	4463      	add	r3, ip
    1b4e:	3b08      	subs	r3, #8
    1b50:	681a      	ldr	r2, [r3, #0]
    1b52:	230e      	movs	r3, #14
    1b54:	18fb      	adds	r3, r7, r3
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	01db      	lsls	r3, r3, #7
    1b5a:	18d3      	adds	r3, r2, r3
    1b5c:	e000      	b.n	1b60 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1b5e:	2300      	movs	r3, #0
	}
}
    1b60:	1c18      	adds	r0, r3, #0
    1b62:	46bd      	mov	sp, r7
    1b64:	b004      	add	sp, #16
    1b66:	bd80      	pop	{r7, pc}
    1b68:	41004400 	.word	0x41004400

00001b6c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b082      	sub	sp, #8
    1b70:	af00      	add	r7, sp, #0
    1b72:	1c02      	adds	r2, r0, #0
    1b74:	1dfb      	adds	r3, r7, #7
    1b76:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1b78:	1dfb      	adds	r3, r7, #7
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	1c18      	adds	r0, r3, #0
    1b7e:	4b03      	ldr	r3, [pc, #12]	; (1b8c <port_get_group_from_gpio_pin+0x20>)
    1b80:	4798      	blx	r3
    1b82:	1c03      	adds	r3, r0, #0
}
    1b84:	1c18      	adds	r0, r3, #0
    1b86:	46bd      	mov	sp, r7
    1b88:	b002      	add	sp, #8
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	00001b0d 	.word	0x00001b0d

00001b90 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	b084      	sub	sp, #16
    1b94:	af00      	add	r7, sp, #0
    1b96:	1c02      	adds	r2, r0, #0
    1b98:	1dfb      	adds	r3, r7, #7
    1b9a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1b9c:	1dfb      	adds	r3, r7, #7
    1b9e:	781b      	ldrb	r3, [r3, #0]
    1ba0:	1c18      	adds	r0, r3, #0
    1ba2:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <port_pin_get_input_level+0x40>)
    1ba4:	4798      	blx	r3
    1ba6:	1c03      	adds	r3, r0, #0
    1ba8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	221f      	movs	r2, #31
    1bb0:	4013      	ands	r3, r2
    1bb2:	2201      	movs	r2, #1
    1bb4:	409a      	lsls	r2, r3
    1bb6:	1c13      	adds	r3, r2, #0
    1bb8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	6a1b      	ldr	r3, [r3, #32]
    1bbe:	68ba      	ldr	r2, [r7, #8]
    1bc0:	4013      	ands	r3, r2
    1bc2:	1e5a      	subs	r2, r3, #1
    1bc4:	4193      	sbcs	r3, r2
    1bc6:	b2db      	uxtb	r3, r3
}
    1bc8:	1c18      	adds	r0, r3, #0
    1bca:	46bd      	mov	sp, r7
    1bcc:	b004      	add	sp, #16
    1bce:	bd80      	pop	{r7, pc}
    1bd0:	00001b6d 	.word	0x00001b6d

00001bd4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b084      	sub	sp, #16
    1bd8:	af00      	add	r7, sp, #0
    1bda:	1c02      	adds	r2, r0, #0
    1bdc:	1dfb      	adds	r3, r7, #7
    1bde:	701a      	strb	r2, [r3, #0]
    1be0:	1dbb      	adds	r3, r7, #6
    1be2:	1c0a      	adds	r2, r1, #0
    1be4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1be6:	1dfb      	adds	r3, r7, #7
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	1c18      	adds	r0, r3, #0
    1bec:	4b0c      	ldr	r3, [pc, #48]	; (1c20 <port_pin_set_output_level+0x4c>)
    1bee:	4798      	blx	r3
    1bf0:	1c03      	adds	r3, r0, #0
    1bf2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1bf4:	1dfb      	adds	r3, r7, #7
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	221f      	movs	r2, #31
    1bfa:	4013      	ands	r3, r2
    1bfc:	2201      	movs	r2, #1
    1bfe:	409a      	lsls	r2, r3
    1c00:	1c13      	adds	r3, r2, #0
    1c02:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1c04:	1dbb      	adds	r3, r7, #6
    1c06:	781b      	ldrb	r3, [r3, #0]
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d003      	beq.n	1c14 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1c0c:	68fb      	ldr	r3, [r7, #12]
    1c0e:	68ba      	ldr	r2, [r7, #8]
    1c10:	619a      	str	r2, [r3, #24]
    1c12:	e002      	b.n	1c1a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c14:	68fb      	ldr	r3, [r7, #12]
    1c16:	68ba      	ldr	r2, [r7, #8]
    1c18:	615a      	str	r2, [r3, #20]
	}
}
    1c1a:	46bd      	mov	sp, r7
    1c1c:	b004      	add	sp, #16
    1c1e:	bd80      	pop	{r7, pc}
    1c20:	00001b6d 	.word	0x00001b6d

00001c24 <check_unpairPB>:
uint32_t val;
extern char cStr[];


void check_unpairPB(void)			// looks to see if unpair button is pushed
{	
    1c24:	b580      	push	{r7, lr}
    1c26:	af00      	add	r7, sp, #0
	while (port_pin_get_input_level(UNPAIR_PUSH_BUTTON) == false)
    1c28:	e019      	b.n	1c5e <check_unpairPB+0x3a>
	{
		port_pin_set_output_level(Green_LED_PIN,0);
    1c2a:	2007      	movs	r0, #7
    1c2c:	2100      	movs	r1, #0
    1c2e:	4b12      	ldr	r3, [pc, #72]	; (1c78 <check_unpairPB+0x54>)
    1c30:	4798      	blx	r3
		port_pin_set_output_level(Yellow_LED_PIN,0);
    1c32:	2006      	movs	r0, #6
    1c34:	2100      	movs	r1, #0
    1c36:	4b10      	ldr	r3, [pc, #64]	; (1c78 <check_unpairPB+0x54>)
    1c38:	4798      	blx	r3
		port_pin_set_output_level(Red_LED_PIN,0);
    1c3a:	2005      	movs	r0, #5
    1c3c:	2100      	movs	r1, #0
    1c3e:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <check_unpairPB+0x54>)
    1c40:	4798      	blx	r3
		ckStatus = unpair_WT41();
    1c42:	4b0e      	ldr	r3, [pc, #56]	; (1c7c <check_unpairPB+0x58>)
    1c44:	4798      	blx	r3
    1c46:	1c03      	adds	r3, r0, #0
    1c48:	1c1a      	adds	r2, r3, #0
    1c4a:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <check_unpairPB+0x5c>)
    1c4c:	701a      	strb	r2, [r3, #0]
		if (ckStatus == STATUS_OK) 	
    1c4e:	4b0c      	ldr	r3, [pc, #48]	; (1c80 <check_unpairPB+0x5c>)
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d103      	bne.n	1c5e <check_unpairPB+0x3a>
		{	
			sysState = INIT_STATE;
    1c56:	4b0b      	ldr	r3, [pc, #44]	; (1c84 <check_unpairPB+0x60>)
    1c58:	22f0      	movs	r2, #240	; 0xf0
    1c5a:	701a      	strb	r2, [r3, #0]
			break;
    1c5c:	e009      	b.n	1c72 <check_unpairPB+0x4e>
extern char cStr[];


void check_unpairPB(void)			// looks to see if unpair button is pushed
{	
	while (port_pin_get_input_level(UNPAIR_PUSH_BUTTON) == false)
    1c5e:	2004      	movs	r0, #4
    1c60:	4b09      	ldr	r3, [pc, #36]	; (1c88 <check_unpairPB+0x64>)
    1c62:	4798      	blx	r3
    1c64:	1c03      	adds	r3, r0, #0
    1c66:	1c1a      	adds	r2, r3, #0
    1c68:	2301      	movs	r3, #1
    1c6a:	4053      	eors	r3, r2
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d1db      	bne.n	1c2a <check_unpairPB+0x6>
		{	
			sysState = INIT_STATE;
			break;
		}
	}
}
    1c72:	46bd      	mov	sp, r7
    1c74:	bd80      	pop	{r7, pc}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	00001bd5 	.word	0x00001bd5
    1c7c:	0000146d 	.word	0x0000146d
    1c80:	20000381 	.word	0x20000381
    1c84:	20000475 	.word	0x20000475
    1c88:	00001b91 	.word	0x00001b91

00001c8c <main>:

int main(void)
{	
    1c8c:	b580      	push	{r7, lr}
    1c8e:	af00      	add	r7, sp, #0

	init();
    1c90:	4b75      	ldr	r3, [pc, #468]	; (1e68 <main+0x1dc>)
    1c92:	4798      	blx	r3

	port_pin_set_output_level(Red_LED_PIN,0);
    1c94:	2005      	movs	r0, #5
    1c96:	2100      	movs	r1, #0
    1c98:	4b74      	ldr	r3, [pc, #464]	; (1e6c <main+0x1e0>)
    1c9a:	4798      	blx	r3
	init_serial_buffers();
    1c9c:	4b74      	ldr	r3, [pc, #464]	; (1e70 <main+0x1e4>)
    1c9e:	4798      	blx	r3


	reset_BT();
    1ca0:	4b74      	ldr	r3, [pc, #464]	; (1e74 <main+0x1e8>)
    1ca2:	4798      	blx	r3
	BT_master_init();
    1ca4:	4b74      	ldr	r3, [pc, #464]	; (1e78 <main+0x1ec>)
    1ca6:	4798      	blx	r3
	
	sysState = INIT_STATE;
    1ca8:	4b74      	ldr	r3, [pc, #464]	; (1e7c <main+0x1f0>)
    1caa:	22f0      	movs	r2, #240	; 0xf0
    1cac:	701a      	strb	r2, [r3, #0]

	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) != true) check_unpairPB();
    1cae:	2017      	movs	r0, #23
    1cb0:	4b73      	ldr	r3, [pc, #460]	; (1e80 <main+0x1f4>)
    1cb2:	4798      	blx	r3
    1cb4:	1c03      	adds	r3, r0, #0
    1cb6:	1c1a      	adds	r2, r3, #0
    1cb8:	2301      	movs	r3, #1
    1cba:	4053      	eors	r3, r2
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d001      	beq.n	1cc6 <main+0x3a>
    1cc2:	4b70      	ldr	r3, [pc, #448]	; (1e84 <main+0x1f8>)
    1cc4:	4798      	blx	r3

	port_pin_set_output_level(Green_LED_PIN,1);	
    1cc6:	2007      	movs	r0, #7
    1cc8:	2101      	movs	r1, #1
    1cca:	4b68      	ldr	r3, [pc, #416]	; (1e6c <main+0x1e0>)
    1ccc:	4798      	blx	r3
	port_pin_set_output_level(Yellow_LED_PIN,1);
    1cce:	2006      	movs	r0, #6
    1cd0:	2101      	movs	r1, #1
    1cd2:	4b66      	ldr	r3, [pc, #408]	; (1e6c <main+0x1e0>)
    1cd4:	4798      	blx	r3
	port_pin_set_output_level(Red_LED_PIN,0);	
    1cd6:	2005      	movs	r0, #5
    1cd8:	2100      	movs	r1, #0
    1cda:	4b64      	ldr	r3, [pc, #400]	; (1e6c <main+0x1e0>)
    1cdc:	4798      	blx	r3

	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) != true) check_unpairPB();
    1cde:	2017      	movs	r0, #23
    1ce0:	4b67      	ldr	r3, [pc, #412]	; (1e80 <main+0x1f4>)
    1ce2:	4798      	blx	r3
    1ce4:	1c03      	adds	r3, r0, #0
    1ce6:	1c1a      	adds	r2, r3, #0
    1ce8:	2301      	movs	r3, #1
    1cea:	4053      	eors	r3, r2
    1cec:	b2db      	uxtb	r3, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d001      	beq.n	1cf6 <main+0x6a>
    1cf2:	4b64      	ldr	r3, [pc, #400]	; (1e84 <main+0x1f8>)
    1cf4:	4798      	blx	r3

	while(!BTpaired && !(port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == true))   // if carrier detected the WT41 autocall has taken place;
    1cf6:	e063      	b.n	1dc0 <main+0x134>
	{
		switch(sysState)
    1cf8:	4b60      	ldr	r3, [pc, #384]	; (1e7c <main+0x1f0>)
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	3bf0      	subs	r3, #240	; 0xf0
    1cfe:	2b05      	cmp	r3, #5
    1d00:	d85e      	bhi.n	1dc0 <main+0x134>
    1d02:	009a      	lsls	r2, r3, #2
    1d04:	4b60      	ldr	r3, [pc, #384]	; (1e88 <main+0x1fc>)
    1d06:	18d3      	adds	r3, r2, r3
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	469f      	mov	pc, r3
		{
			case INIT_STATE:							
			// check WT41 responding
				if (check_WT41_responding() != STATUS_OK) break;
    1d0c:	4b5f      	ldr	r3, [pc, #380]	; (1e8c <main+0x200>)
    1d0e:	4798      	blx	r3
    1d10:	1e03      	subs	r3, r0, #0
    1d12:	d000      	beq.n	1d16 <main+0x8a>
    1d14:	e054      	b.n	1dc0 <main+0x134>
				else sysState = 	CK_PAIR_STATE;	
    1d16:	4b59      	ldr	r3, [pc, #356]	; (1e7c <main+0x1f0>)
    1d18:	22f1      	movs	r2, #241	; 0xf1
    1d1a:	701a      	strb	r2, [r3, #0]
		
			case CK_PAIR_STATE:							// check if paired
				if (check_WT41_paired() == STATUS_OK) 
    1d1c:	4b5c      	ldr	r3, [pc, #368]	; (1e90 <main+0x204>)
    1d1e:	4798      	blx	r3
    1d20:	1e03      	subs	r3, r0, #0
    1d22:	d103      	bne.n	1d2c <main+0xa0>
				{
					sysState = PAIRED_STATE;
    1d24:	4b55      	ldr	r3, [pc, #340]	; (1e7c <main+0x1f0>)
    1d26:	22f2      	movs	r2, #242	; 0xf2
    1d28:	701a      	strb	r2, [r3, #0]
    1d2a:	e003      	b.n	1d34 <main+0xa8>
				}
				else
				{	sysState = PAIRING_STATE;
    1d2c:	4b53      	ldr	r3, [pc, #332]	; (1e7c <main+0x1f0>)
    1d2e:	22f5      	movs	r2, #245	; 0xf5
    1d30:	701a      	strb	r2, [r3, #0]
					break;
    1d32:	e045      	b.n	1dc0 <main+0x134>
				} 
			
			case PAIRED_STATE:							// paired & waiting for iWrap autocall to take place
				port_pin_set_output_level(Yellow_LED_PIN,0);
    1d34:	2006      	movs	r0, #6
    1d36:	2100      	movs	r1, #0
    1d38:	4b4c      	ldr	r3, [pc, #304]	; (1e6c <main+0x1e0>)
    1d3a:	4798      	blx	r3
				port_pin_set_output_level(Red_LED_PIN,1);
    1d3c:	2005      	movs	r0, #5
    1d3e:	2101      	movs	r1, #1
    1d40:	4b4a      	ldr	r3, [pc, #296]	; (1e6c <main+0x1e0>)
    1d42:	4798      	blx	r3
				port_pin_set_output_level(Green_LED_PIN,1);
    1d44:	2007      	movs	r0, #7
    1d46:	2101      	movs	r1, #1
    1d48:	4b48      	ldr	r3, [pc, #288]	; (1e6c <main+0x1e0>)
    1d4a:	4798      	blx	r3
				BTpaired = true;
    1d4c:	4b51      	ldr	r3, [pc, #324]	; (1e94 <main+0x208>)
    1d4e:	2201      	movs	r2, #1
    1d50:	701a      	strb	r2, [r3, #0]
				break;
    1d52:	e035      	b.n	1dc0 <main+0x134>
					
			
			case INQUIRY_STATE:							// not paired	 - find a slave to pair with
				port_pin_set_output_level(Yellow_LED_PIN,1);
    1d54:	2006      	movs	r0, #6
    1d56:	2101      	movs	r1, #1
    1d58:	4b44      	ldr	r3, [pc, #272]	; (1e6c <main+0x1e0>)
    1d5a:	4798      	blx	r3
				port_pin_set_output_level(Red_LED_PIN,0);
    1d5c:	2005      	movs	r0, #5
    1d5e:	2100      	movs	r1, #0
    1d60:	4b42      	ldr	r3, [pc, #264]	; (1e6c <main+0x1e0>)
    1d62:	4798      	blx	r3
				port_pin_set_output_level(Green_LED_PIN,1);
    1d64:	2007      	movs	r0, #7
    1d66:	2101      	movs	r1, #1
    1d68:	4b40      	ldr	r3, [pc, #256]	; (1e6c <main+0x1e0>)
    1d6a:	4798      	blx	r3
				
				test = inquiry_WT41();
    1d6c:	4b4a      	ldr	r3, [pc, #296]	; (1e98 <main+0x20c>)
    1d6e:	4798      	blx	r3
    1d70:	1c03      	adds	r3, r0, #0
    1d72:	1c1a      	adds	r2, r3, #0
    1d74:	4b49      	ldr	r3, [pc, #292]	; (1e9c <main+0x210>)
    1d76:	701a      	strb	r2, [r3, #0]

				if (test != STATUS_OK) 	break;
    1d78:	4b48      	ldr	r3, [pc, #288]	; (1e9c <main+0x210>)
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d000      	beq.n	1d82 <main+0xf6>
    1d80:	e01e      	b.n	1dc0 <main+0x134>
				sysState = PAIRING_STATE;
    1d82:	4b3e      	ldr	r3, [pc, #248]	; (1e7c <main+0x1f0>)
    1d84:	22f5      	movs	r2, #245	; 0xf5
    1d86:	701a      	strb	r2, [r3, #0]
					
			case PAIRING_STATE:							// pair with slave
				test = pair_WT41();
    1d88:	4b45      	ldr	r3, [pc, #276]	; (1ea0 <main+0x214>)
    1d8a:	4798      	blx	r3
    1d8c:	1c03      	adds	r3, r0, #0
    1d8e:	1c1a      	adds	r2, r3, #0
    1d90:	4b42      	ldr	r3, [pc, #264]	; (1e9c <main+0x210>)
    1d92:	701a      	strb	r2, [r3, #0]

				if (test == STATUS_OK)
    1d94:	4b41      	ldr	r3, [pc, #260]	; (1e9c <main+0x210>)
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d10d      	bne.n	1db8 <main+0x12c>
				{
					sysState = PAIRED_STATE;
    1d9c:	4b37      	ldr	r3, [pc, #220]	; (1e7c <main+0x1f0>)
    1d9e:	22f2      	movs	r2, #242	; 0xf2
    1da0:	701a      	strb	r2, [r3, #0]
					load_iWrap_Cmd((char*)WT41_AUTOCALL);		// start calling
    1da2:	4b40      	ldr	r3, [pc, #256]	; (1ea4 <main+0x218>)
    1da4:	1c18      	adds	r0, r3, #0
    1da6:	4b40      	ldr	r3, [pc, #256]	; (1ea8 <main+0x21c>)
    1da8:	4798      	blx	r3
					wait_10msSec(5);
    1daa:	2005      	movs	r0, #5
    1dac:	4b3f      	ldr	r3, [pc, #252]	; (1eac <main+0x220>)
    1dae:	4798      	blx	r3
					BTpaired = true;
    1db0:	4b38      	ldr	r3, [pc, #224]	; (1e94 <main+0x208>)
    1db2:	2201      	movs	r2, #1
    1db4:	701a      	strb	r2, [r3, #0]
    1db6:	e002      	b.n	1dbe <main+0x132>
				}
				else
				{
					sysState = INQUIRY_STATE;
    1db8:	4b30      	ldr	r3, [pc, #192]	; (1e7c <main+0x1f0>)
    1dba:	22f3      	movs	r2, #243	; 0xf3
    1dbc:	701a      	strb	r2, [r3, #0]
				}
				break;
    1dbe:	46c0      	nop			; (mov r8, r8)
	port_pin_set_output_level(Yellow_LED_PIN,1);
	port_pin_set_output_level(Red_LED_PIN,0);	

	if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) != true) check_unpairPB();

	while(!BTpaired && !(port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == true))   // if carrier detected the WT41 autocall has taken place;
    1dc0:	4b34      	ldr	r3, [pc, #208]	; (1e94 <main+0x208>)
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	2201      	movs	r2, #1
    1dc6:	4053      	eors	r3, r2
    1dc8:	b2db      	uxtb	r3, r3
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d009      	beq.n	1de2 <main+0x156>
    1dce:	2017      	movs	r0, #23
    1dd0:	4b2b      	ldr	r3, [pc, #172]	; (1e80 <main+0x1f4>)
    1dd2:	4798      	blx	r3
    1dd4:	1c03      	adds	r3, r0, #0
    1dd6:	1c1a      	adds	r2, r3, #0
    1dd8:	2301      	movs	r3, #1
    1dda:	4053      	eors	r3, r2
    1ddc:	b2db      	uxtb	r3, r3
    1dde:	2b00      	cmp	r3, #0
    1de0:	d18a      	bne.n	1cf8 <main+0x6c>
				}
				break;
		}
	}

	init_serial_buffers(); //for testing
    1de2:	4b23      	ldr	r3, [pc, #140]	; (1e70 <main+0x1e4>)
    1de4:	4798      	blx	r3
			
	while (1)
	{
		if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == false)
    1de6:	2017      	movs	r0, #23
    1de8:	4b25      	ldr	r3, [pc, #148]	; (1e80 <main+0x1f4>)
    1dea:	4798      	blx	r3
    1dec:	1c03      	adds	r3, r0, #0
    1dee:	1c1a      	adds	r2, r3, #0
    1df0:	2301      	movs	r3, #1
    1df2:	4053      	eors	r3, r2
    1df4:	b2db      	uxtb	r3, r3
    1df6:	2b00      	cmp	r3, #0
    1df8:	d01b      	beq.n	1e32 <main+0x1a6>
		{	// NO CARRIER
			BTinSSPmode =  false;
    1dfa:	4b2d      	ldr	r3, [pc, #180]	; (1eb0 <main+0x224>)
    1dfc:	2200      	movs	r2, #0
    1dfe:	701a      	strb	r2, [r3, #0]
			// flash yellow
			port_pin_set_output_level(Yellow_LED_PIN,0);
    1e00:	2006      	movs	r0, #6
    1e02:	2100      	movs	r1, #0
    1e04:	4b19      	ldr	r3, [pc, #100]	; (1e6c <main+0x1e0>)
    1e06:	4798      	blx	r3
			port_pin_set_output_level(Red_LED_PIN,1);
    1e08:	2005      	movs	r0, #5
    1e0a:	2101      	movs	r1, #1
    1e0c:	4b17      	ldr	r3, [pc, #92]	; (1e6c <main+0x1e0>)
    1e0e:	4798      	blx	r3
			port_pin_set_output_level(Green_LED_PIN,1);
    1e10:	2007      	movs	r0, #7
    1e12:	2101      	movs	r1, #1
    1e14:	4b15      	ldr	r3, [pc, #84]	; (1e6c <main+0x1e0>)
    1e16:	4798      	blx	r3
			wait_10msSec(5);		  // check_usarts(); also called during wait
    1e18:	2005      	movs	r0, #5
    1e1a:	4b24      	ldr	r3, [pc, #144]	; (1eac <main+0x220>)
    1e1c:	4798      	blx	r3
			port_pin_set_output_level(Yellow_LED_PIN,1);
    1e1e:	2006      	movs	r0, #6
    1e20:	2101      	movs	r1, #1
    1e22:	4b12      	ldr	r3, [pc, #72]	; (1e6c <main+0x1e0>)
    1e24:	4798      	blx	r3
			wait_10msSec(50);	 		// checks usarts	
    1e26:	2032      	movs	r0, #50	; 0x32
    1e28:	4b20      	ldr	r3, [pc, #128]	; (1eac <main+0x220>)
    1e2a:	4798      	blx	r3
			check_unpairPB();							// mod 10/3/16
    1e2c:	4b15      	ldr	r3, [pc, #84]	; (1e84 <main+0x1f8>)
    1e2e:	4798      	blx	r3
    1e30:	e018      	b.n	1e64 <main+0x1d8>
		}
 		else			 // CARRIER DETECTED							// flash green led
 		{
			BTinSSPmode =  true;
    1e32:	4b1f      	ldr	r3, [pc, #124]	; (1eb0 <main+0x224>)
    1e34:	2201      	movs	r2, #1
    1e36:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(Yellow_LED_PIN,1);
    1e38:	2006      	movs	r0, #6
    1e3a:	2101      	movs	r1, #1
    1e3c:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <main+0x1e0>)
    1e3e:	4798      	blx	r3
			port_pin_set_output_level(Red_LED_PIN,1);
    1e40:	2005      	movs	r0, #5
    1e42:	2101      	movs	r1, #1
    1e44:	4b09      	ldr	r3, [pc, #36]	; (1e6c <main+0x1e0>)
    1e46:	4798      	blx	r3
			port_pin_set_output_level(Green_LED_PIN,0);
    1e48:	2007      	movs	r0, #7
    1e4a:	2100      	movs	r1, #0
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <main+0x1e0>)
    1e4e:	4798      	blx	r3
			wait_10msSec(5);		  // check_usarts(); also called during wait
    1e50:	2005      	movs	r0, #5
    1e52:	4b16      	ldr	r3, [pc, #88]	; (1eac <main+0x220>)
    1e54:	4798      	blx	r3
			port_pin_set_output_level(Green_LED_PIN,1);
    1e56:	2007      	movs	r0, #7
    1e58:	2101      	movs	r1, #1
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <main+0x1e0>)
    1e5c:	4798      	blx	r3
			wait_10msSec(50);	 			
    1e5e:	2032      	movs	r0, #50	; 0x32
    1e60:	4b12      	ldr	r3, [pc, #72]	; (1eac <main+0x220>)
    1e62:	4798      	blx	r3
 		}

 	}
    1e64:	e7bf      	b.n	1de6 <main+0x15a>
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	00000461 	.word	0x00000461
    1e6c:	00001bd5 	.word	0x00001bd5
    1e70:	00000951 	.word	0x00000951
    1e74:	000002ad 	.word	0x000002ad
    1e78:	00001575 	.word	0x00001575
    1e7c:	20000475 	.word	0x20000475
    1e80:	00001b91 	.word	0x00001b91
    1e84:	00001c25 	.word	0x00001c25
    1e88:	000044a0 	.word	0x000044a0
    1e8c:	000012c5 	.word	0x000012c5
    1e90:	000011e1 	.word	0x000011e1
    1e94:	20000389 	.word	0x20000389
    1e98:	0000111d 	.word	0x0000111d
    1e9c:	20000394 	.word	0x20000394
    1ea0:	00001385 	.word	0x00001385
    1ea4:	00004474 	.word	0x00004474
    1ea8:	00000a21 	.word	0x00000a21
    1eac:	000018d5 	.word	0x000018d5
    1eb0:	2000045c 	.word	0x2000045c

00001eb4 <tc_register_callback>:
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b084      	sub	sp, #16
    1eb8:	af00      	add	r7, sp, #0
    1eba:	60f8      	str	r0, [r7, #12]
    1ebc:	60b9      	str	r1, [r7, #8]
    1ebe:	1dfb      	adds	r3, r7, #7
    1ec0:	701a      	strb	r2, [r3, #0]
    1ec2:	1dfb      	adds	r3, r7, #7
    1ec4:	781a      	ldrb	r2, [r3, #0]
    1ec6:	68fb      	ldr	r3, [r7, #12]
    1ec8:	3202      	adds	r2, #2
    1eca:	0092      	lsls	r2, r2, #2
    1ecc:	68b9      	ldr	r1, [r7, #8]
    1ece:	50d1      	str	r1, [r2, r3]
    1ed0:	1dfb      	adds	r3, r7, #7
    1ed2:	781b      	ldrb	r3, [r3, #0]
    1ed4:	2b02      	cmp	r3, #2
    1ed6:	d107      	bne.n	1ee8 <tc_register_callback+0x34>
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	7e1b      	ldrb	r3, [r3, #24]
    1edc:	2210      	movs	r2, #16
    1ede:	4313      	orrs	r3, r2
    1ee0:	b2da      	uxtb	r2, r3
    1ee2:	68fb      	ldr	r3, [r7, #12]
    1ee4:	761a      	strb	r2, [r3, #24]
    1ee6:	e01a      	b.n	1f1e <tc_register_callback+0x6a>
    1ee8:	1dfb      	adds	r3, r7, #7
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	2b03      	cmp	r3, #3
    1eee:	d107      	bne.n	1f00 <tc_register_callback+0x4c>
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	7e1b      	ldrb	r3, [r3, #24]
    1ef4:	2220      	movs	r2, #32
    1ef6:	4313      	orrs	r3, r2
    1ef8:	b2da      	uxtb	r2, r3
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	761a      	strb	r2, [r3, #24]
    1efe:	e00e      	b.n	1f1e <tc_register_callback+0x6a>
    1f00:	68fb      	ldr	r3, [r7, #12]
    1f02:	7e1b      	ldrb	r3, [r3, #24]
    1f04:	b2d9      	uxtb	r1, r3
    1f06:	1dfb      	adds	r3, r7, #7
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	2201      	movs	r2, #1
    1f0c:	409a      	lsls	r2, r3
    1f0e:	1c13      	adds	r3, r2, #0
    1f10:	b2db      	uxtb	r3, r3
    1f12:	1c0a      	adds	r2, r1, #0
    1f14:	4313      	orrs	r3, r2
    1f16:	b2db      	uxtb	r3, r3
    1f18:	b2da      	uxtb	r2, r3
    1f1a:	68fb      	ldr	r3, [r7, #12]
    1f1c:	761a      	strb	r2, [r3, #24]
    1f1e:	2300      	movs	r3, #0
    1f20:	1c18      	adds	r0, r3, #0
    1f22:	46bd      	mov	sp, r7
    1f24:	b004      	add	sp, #16
    1f26:	bd80      	pop	{r7, pc}

00001f28 <TC0_Handler>:
    1f28:	b580      	push	{r7, lr}
    1f2a:	af00      	add	r7, sp, #0
    1f2c:	2000      	movs	r0, #0
    1f2e:	4b02      	ldr	r3, [pc, #8]	; (1f38 <TC0_Handler+0x10>)
    1f30:	4798      	blx	r3
    1f32:	46bd      	mov	sp, r7
    1f34:	bd80      	pop	{r7, pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00001fc9 	.word	0x00001fc9

00001f3c <TC1_Handler>:
    1f3c:	b580      	push	{r7, lr}
    1f3e:	af00      	add	r7, sp, #0
    1f40:	2001      	movs	r0, #1
    1f42:	4b02      	ldr	r3, [pc, #8]	; (1f4c <TC1_Handler+0x10>)
    1f44:	4798      	blx	r3
    1f46:	46bd      	mov	sp, r7
    1f48:	bd80      	pop	{r7, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	00001fc9 	.word	0x00001fc9

00001f50 <TC2_Handler>:
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
    1f54:	2002      	movs	r0, #2
    1f56:	4b02      	ldr	r3, [pc, #8]	; (1f60 <TC2_Handler+0x10>)
    1f58:	4798      	blx	r3
    1f5a:	46bd      	mov	sp, r7
    1f5c:	bd80      	pop	{r7, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	00001fc9 	.word	0x00001fc9

00001f64 <TC3_Handler>:
    1f64:	b580      	push	{r7, lr}
    1f66:	af00      	add	r7, sp, #0
    1f68:	2003      	movs	r0, #3
    1f6a:	4b02      	ldr	r3, [pc, #8]	; (1f74 <TC3_Handler+0x10>)
    1f6c:	4798      	blx	r3
    1f6e:	46bd      	mov	sp, r7
    1f70:	bd80      	pop	{r7, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001fc9 	.word	0x00001fc9

00001f78 <TC4_Handler>:
    1f78:	b580      	push	{r7, lr}
    1f7a:	af00      	add	r7, sp, #0
    1f7c:	2004      	movs	r0, #4
    1f7e:	4b02      	ldr	r3, [pc, #8]	; (1f88 <TC4_Handler+0x10>)
    1f80:	4798      	blx	r3
    1f82:	46bd      	mov	sp, r7
    1f84:	bd80      	pop	{r7, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001fc9 	.word	0x00001fc9

00001f8c <TC5_Handler>:
    1f8c:	b580      	push	{r7, lr}
    1f8e:	af00      	add	r7, sp, #0
    1f90:	2005      	movs	r0, #5
    1f92:	4b02      	ldr	r3, [pc, #8]	; (1f9c <TC5_Handler+0x10>)
    1f94:	4798      	blx	r3
    1f96:	46bd      	mov	sp, r7
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00001fc9 	.word	0x00001fc9

00001fa0 <TC6_Handler>:
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	2006      	movs	r0, #6
    1fa6:	4b02      	ldr	r3, [pc, #8]	; (1fb0 <TC6_Handler+0x10>)
    1fa8:	4798      	blx	r3
    1faa:	46bd      	mov	sp, r7
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	00001fc9 	.word	0x00001fc9

00001fb4 <TC7_Handler>:
    1fb4:	b580      	push	{r7, lr}
    1fb6:	af00      	add	r7, sp, #0
    1fb8:	2007      	movs	r0, #7
    1fba:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <TC7_Handler+0x10>)
    1fbc:	4798      	blx	r3
    1fbe:	46bd      	mov	sp, r7
    1fc0:	bd80      	pop	{r7, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	00001fc9 	.word	0x00001fc9

00001fc8 <_tc_interrupt_handler>:
    1fc8:	b580      	push	{r7, lr}
    1fca:	b084      	sub	sp, #16
    1fcc:	af00      	add	r7, sp, #0
    1fce:	1c02      	adds	r2, r0, #0
    1fd0:	1dfb      	adds	r3, r7, #7
    1fd2:	701a      	strb	r2, [r3, #0]
    1fd4:	1dfb      	adds	r3, r7, #7
    1fd6:	781a      	ldrb	r2, [r3, #0]
    1fd8:	4b28      	ldr	r3, [pc, #160]	; (207c <STACK_SIZE+0x7c>)
    1fda:	0092      	lsls	r2, r2, #2
    1fdc:	58d3      	ldr	r3, [r2, r3]
    1fde:	60fb      	str	r3, [r7, #12]
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	7b9b      	ldrb	r3, [r3, #14]
    1fe6:	b2db      	uxtb	r3, r3
    1fe8:	68fa      	ldr	r2, [r7, #12]
    1fea:	7e12      	ldrb	r2, [r2, #24]
    1fec:	4013      	ands	r3, r2
    1fee:	b2da      	uxtb	r2, r3
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	7e59      	ldrb	r1, [r3, #25]
    1ff4:	230b      	movs	r3, #11
    1ff6:	18fb      	adds	r3, r7, r3
    1ff8:	400a      	ands	r2, r1
    1ffa:	701a      	strb	r2, [r3, #0]
    1ffc:	230b      	movs	r3, #11
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	2201      	movs	r2, #1
    2004:	4013      	ands	r3, r2
    2006:	d008      	beq.n	201a <STACK_SIZE+0x1a>
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	689b      	ldr	r3, [r3, #8]
    200c:	68fa      	ldr	r2, [r7, #12]
    200e:	1c10      	adds	r0, r2, #0
    2010:	4798      	blx	r3
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	681b      	ldr	r3, [r3, #0]
    2016:	2201      	movs	r2, #1
    2018:	739a      	strb	r2, [r3, #14]
    201a:	230b      	movs	r3, #11
    201c:	18fb      	adds	r3, r7, r3
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	2202      	movs	r2, #2
    2022:	4013      	ands	r3, r2
    2024:	d008      	beq.n	2038 <STACK_SIZE+0x38>
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	68db      	ldr	r3, [r3, #12]
    202a:	68fa      	ldr	r2, [r7, #12]
    202c:	1c10      	adds	r0, r2, #0
    202e:	4798      	blx	r3
    2030:	68fb      	ldr	r3, [r7, #12]
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	2202      	movs	r2, #2
    2036:	739a      	strb	r2, [r3, #14]
    2038:	230b      	movs	r3, #11
    203a:	18fb      	adds	r3, r7, r3
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	2210      	movs	r2, #16
    2040:	4013      	ands	r3, r2
    2042:	d008      	beq.n	2056 <STACK_SIZE+0x56>
    2044:	68fb      	ldr	r3, [r7, #12]
    2046:	691b      	ldr	r3, [r3, #16]
    2048:	68fa      	ldr	r2, [r7, #12]
    204a:	1c10      	adds	r0, r2, #0
    204c:	4798      	blx	r3
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	2210      	movs	r2, #16
    2054:	739a      	strb	r2, [r3, #14]
    2056:	230b      	movs	r3, #11
    2058:	18fb      	adds	r3, r7, r3
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	2220      	movs	r2, #32
    205e:	4013      	ands	r3, r2
    2060:	d008      	beq.n	2074 <STACK_SIZE+0x74>
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	695b      	ldr	r3, [r3, #20]
    2066:	68fa      	ldr	r2, [r7, #12]
    2068:	1c10      	adds	r0, r2, #0
    206a:	4798      	blx	r3
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	2220      	movs	r2, #32
    2072:	739a      	strb	r2, [r3, #14]
    2074:	46bd      	mov	sp, r7
    2076:	b004      	add	sp, #16
    2078:	bd80      	pop	{r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	20000478 	.word	0x20000478

00002080 <system_gclk_chan_get_config_defaults>:
    2080:	b580      	push	{r7, lr}
    2082:	b082      	sub	sp, #8
    2084:	af00      	add	r7, sp, #0
    2086:	6078      	str	r0, [r7, #4]
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	2200      	movs	r2, #0
    208c:	701a      	strb	r2, [r3, #0]
    208e:	46bd      	mov	sp, r7
    2090:	b002      	add	sp, #8
    2092:	bd80      	pop	{r7, pc}

00002094 <system_apb_clock_set_mask>:
    2094:	b580      	push	{r7, lr}
    2096:	b082      	sub	sp, #8
    2098:	af00      	add	r7, sp, #0
    209a:	1c02      	adds	r2, r0, #0
    209c:	6039      	str	r1, [r7, #0]
    209e:	1dfb      	adds	r3, r7, #7
    20a0:	701a      	strb	r2, [r3, #0]
    20a2:	1dfb      	adds	r3, r7, #7
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	2b01      	cmp	r3, #1
    20a8:	d00a      	beq.n	20c0 <system_apb_clock_set_mask+0x2c>
    20aa:	2b02      	cmp	r3, #2
    20ac:	d00f      	beq.n	20ce <system_apb_clock_set_mask+0x3a>
    20ae:	2b00      	cmp	r3, #0
    20b0:	d114      	bne.n	20dc <system_apb_clock_set_mask+0x48>
    20b2:	4b0e      	ldr	r3, [pc, #56]	; (20ec <system_apb_clock_set_mask+0x58>)
    20b4:	4a0d      	ldr	r2, [pc, #52]	; (20ec <system_apb_clock_set_mask+0x58>)
    20b6:	6991      	ldr	r1, [r2, #24]
    20b8:	683a      	ldr	r2, [r7, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	619a      	str	r2, [r3, #24]
    20be:	e00f      	b.n	20e0 <system_apb_clock_set_mask+0x4c>
    20c0:	4b0a      	ldr	r3, [pc, #40]	; (20ec <system_apb_clock_set_mask+0x58>)
    20c2:	4a0a      	ldr	r2, [pc, #40]	; (20ec <system_apb_clock_set_mask+0x58>)
    20c4:	69d1      	ldr	r1, [r2, #28]
    20c6:	683a      	ldr	r2, [r7, #0]
    20c8:	430a      	orrs	r2, r1
    20ca:	61da      	str	r2, [r3, #28]
    20cc:	e008      	b.n	20e0 <system_apb_clock_set_mask+0x4c>
    20ce:	4b07      	ldr	r3, [pc, #28]	; (20ec <system_apb_clock_set_mask+0x58>)
    20d0:	4a06      	ldr	r2, [pc, #24]	; (20ec <system_apb_clock_set_mask+0x58>)
    20d2:	6a11      	ldr	r1, [r2, #32]
    20d4:	683a      	ldr	r2, [r7, #0]
    20d6:	430a      	orrs	r2, r1
    20d8:	621a      	str	r2, [r3, #32]
    20da:	e001      	b.n	20e0 <system_apb_clock_set_mask+0x4c>
    20dc:	2317      	movs	r3, #23
    20de:	e000      	b.n	20e2 <system_apb_clock_set_mask+0x4e>
    20e0:	2300      	movs	r3, #0
    20e2:	1c18      	adds	r0, r3, #0
    20e4:	46bd      	mov	sp, r7
    20e6:	b002      	add	sp, #8
    20e8:	bd80      	pop	{r7, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	40000400 	.word	0x40000400

000020f0 <system_pinmux_get_config_defaults>:
    20f0:	b580      	push	{r7, lr}
    20f2:	b082      	sub	sp, #8
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	2280      	movs	r2, #128	; 0x80
    20fc:	701a      	strb	r2, [r3, #0]
    20fe:	687b      	ldr	r3, [r7, #4]
    2100:	2200      	movs	r2, #0
    2102:	705a      	strb	r2, [r3, #1]
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	2201      	movs	r2, #1
    2108:	709a      	strb	r2, [r3, #2]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	2200      	movs	r2, #0
    210e:	70da      	strb	r2, [r3, #3]
    2110:	46bd      	mov	sp, r7
    2112:	b002      	add	sp, #8
    2114:	bd80      	pop	{r7, pc}
    2116:	46c0      	nop			; (mov r8, r8)

00002118 <tc_is_syncing>:
    2118:	b580      	push	{r7, lr}
    211a:	b084      	sub	sp, #16
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	60fb      	str	r3, [r7, #12]
    2126:	68fb      	ldr	r3, [r7, #12]
    2128:	7bdb      	ldrb	r3, [r3, #15]
    212a:	b2db      	uxtb	r3, r3
    212c:	1c1a      	adds	r2, r3, #0
    212e:	2380      	movs	r3, #128	; 0x80
    2130:	4013      	ands	r3, r2
    2132:	1e5a      	subs	r2, r3, #1
    2134:	4193      	sbcs	r3, r2
    2136:	b2db      	uxtb	r3, r3
    2138:	1c18      	adds	r0, r3, #0
    213a:	46bd      	mov	sp, r7
    213c:	b004      	add	sp, #16
    213e:	bd80      	pop	{r7, pc}

00002140 <_tc_get_inst_index>:
    2140:	b590      	push	{r4, r7, lr}
    2142:	b08d      	sub	sp, #52	; 0x34
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	230c      	movs	r3, #12
    214a:	18fb      	adds	r3, r7, r3
    214c:	4a0f      	ldr	r2, [pc, #60]	; (218c <_tc_get_inst_index+0x4c>)
    214e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2150:	c313      	stmia	r3!, {r0, r1, r4}
    2152:	ca13      	ldmia	r2!, {r0, r1, r4}
    2154:	c313      	stmia	r3!, {r0, r1, r4}
    2156:	ca03      	ldmia	r2!, {r0, r1}
    2158:	c303      	stmia	r3!, {r0, r1}
    215a:	2300      	movs	r3, #0
    215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    215e:	e00d      	b.n	217c <_tc_get_inst_index+0x3c>
    2160:	230c      	movs	r3, #12
    2162:	18fb      	adds	r3, r7, r3
    2164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2166:	0092      	lsls	r2, r2, #2
    2168:	58d2      	ldr	r2, [r2, r3]
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	429a      	cmp	r2, r3
    216e:	d102      	bne.n	2176 <_tc_get_inst_index+0x36>
    2170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2172:	b2db      	uxtb	r3, r3
    2174:	e006      	b.n	2184 <_tc_get_inst_index+0x44>
    2176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2178:	3301      	adds	r3, #1
    217a:	62fb      	str	r3, [r7, #44]	; 0x2c
    217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    217e:	2b07      	cmp	r3, #7
    2180:	d9ee      	bls.n	2160 <_tc_get_inst_index+0x20>
    2182:	2300      	movs	r3, #0
    2184:	1c18      	adds	r0, r3, #0
    2186:	46bd      	mov	sp, r7
    2188:	b00d      	add	sp, #52	; 0x34
    218a:	bd90      	pop	{r4, r7, pc}
    218c:	000044b8 	.word	0x000044b8

00002190 <tc_init>:
    2190:	b590      	push	{r4, r7, lr}
    2192:	b08f      	sub	sp, #60	; 0x3c
    2194:	af00      	add	r7, sp, #0
    2196:	60f8      	str	r0, [r7, #12]
    2198:	60b9      	str	r1, [r7, #8]
    219a:	607a      	str	r2, [r7, #4]
    219c:	2336      	movs	r3, #54	; 0x36
    219e:	18fb      	adds	r3, r7, r3
    21a0:	2200      	movs	r2, #0
    21a2:	801a      	strh	r2, [r3, #0]
    21a4:	2335      	movs	r3, #53	; 0x35
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	2200      	movs	r2, #0
    21aa:	701a      	strb	r2, [r3, #0]
    21ac:	2334      	movs	r3, #52	; 0x34
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	2200      	movs	r2, #0
    21b2:	701a      	strb	r2, [r3, #0]
    21b4:	2331      	movs	r3, #49	; 0x31
    21b6:	18fc      	adds	r4, r7, r3
    21b8:	68bb      	ldr	r3, [r7, #8]
    21ba:	1c18      	adds	r0, r3, #0
    21bc:	4bc0      	ldr	r3, [pc, #768]	; (24c0 <tc_init+0x330>)
    21be:	4798      	blx	r3
    21c0:	1c03      	adds	r3, r0, #0
    21c2:	7023      	strb	r3, [r4, #0]
    21c4:	2328      	movs	r3, #40	; 0x28
    21c6:	18fa      	adds	r2, r7, r3
    21c8:	4bbe      	ldr	r3, [pc, #760]	; (24c4 <tc_init+0x334>)
    21ca:	1c11      	adds	r1, r2, #0
    21cc:	1c1a      	adds	r2, r3, #0
    21ce:	2308      	movs	r3, #8
    21d0:	1c08      	adds	r0, r1, #0
    21d2:	1c11      	adds	r1, r2, #0
    21d4:	1c1a      	adds	r2, r3, #0
    21d6:	4bbc      	ldr	r3, [pc, #752]	; (24c8 <tc_init+0x338>)
    21d8:	4798      	blx	r3
    21da:	2318      	movs	r3, #24
    21dc:	18fa      	adds	r2, r7, r3
    21de:	4bbb      	ldr	r3, [pc, #748]	; (24cc <tc_init+0x33c>)
    21e0:	1c11      	adds	r1, r2, #0
    21e2:	1c1a      	adds	r2, r3, #0
    21e4:	2310      	movs	r3, #16
    21e6:	1c08      	adds	r0, r1, #0
    21e8:	1c11      	adds	r1, r2, #0
    21ea:	1c1a      	adds	r2, r3, #0
    21ec:	4bb6      	ldr	r3, [pc, #728]	; (24c8 <tc_init+0x338>)
    21ee:	4798      	blx	r3
    21f0:	2333      	movs	r3, #51	; 0x33
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	2200      	movs	r2, #0
    21f6:	701a      	strb	r2, [r3, #0]
    21f8:	e00e      	b.n	2218 <tc_init+0x88>
    21fa:	2333      	movs	r3, #51	; 0x33
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	781a      	ldrb	r2, [r3, #0]
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	3202      	adds	r2, #2
    2204:	0092      	lsls	r2, r2, #2
    2206:	2100      	movs	r1, #0
    2208:	50d1      	str	r1, [r2, r3]
    220a:	2333      	movs	r3, #51	; 0x33
    220c:	18fb      	adds	r3, r7, r3
    220e:	781a      	ldrb	r2, [r3, #0]
    2210:	2333      	movs	r3, #51	; 0x33
    2212:	18fb      	adds	r3, r7, r3
    2214:	3201      	adds	r2, #1
    2216:	701a      	strb	r2, [r3, #0]
    2218:	2333      	movs	r3, #51	; 0x33
    221a:	18fb      	adds	r3, r7, r3
    221c:	781b      	ldrb	r3, [r3, #0]
    221e:	2b03      	cmp	r3, #3
    2220:	d9eb      	bls.n	21fa <tc_init+0x6a>
    2222:	68fb      	ldr	r3, [r7, #12]
    2224:	2200      	movs	r2, #0
    2226:	761a      	strb	r2, [r3, #24]
    2228:	68fb      	ldr	r3, [r7, #12]
    222a:	2200      	movs	r2, #0
    222c:	765a      	strb	r2, [r3, #25]
    222e:	2331      	movs	r3, #49	; 0x31
    2230:	18fb      	adds	r3, r7, r3
    2232:	781a      	ldrb	r2, [r3, #0]
    2234:	4ba6      	ldr	r3, [pc, #664]	; (24d0 <tc_init+0x340>)
    2236:	0092      	lsls	r2, r2, #2
    2238:	68f9      	ldr	r1, [r7, #12]
    223a:	50d1      	str	r1, [r2, r3]
    223c:	68fb      	ldr	r3, [r7, #12]
    223e:	68ba      	ldr	r2, [r7, #8]
    2240:	601a      	str	r2, [r3, #0]
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	789b      	ldrb	r3, [r3, #2]
    2246:	2b08      	cmp	r3, #8
    2248:	d107      	bne.n	225a <tc_init+0xca>
    224a:	2331      	movs	r3, #49	; 0x31
    224c:	18fb      	adds	r3, r7, r3
    224e:	781b      	ldrb	r3, [r3, #0]
    2250:	2201      	movs	r2, #1
    2252:	4013      	ands	r3, r2
    2254:	d001      	beq.n	225a <tc_init+0xca>
    2256:	2317      	movs	r3, #23
    2258:	e1c3      	b.n	25e2 <tc_init+0x452>
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	789a      	ldrb	r2, [r3, #2]
    225e:	68fb      	ldr	r3, [r7, #12]
    2260:	711a      	strb	r2, [r3, #4]
    2262:	68bb      	ldr	r3, [r7, #8]
    2264:	881b      	ldrh	r3, [r3, #0]
    2266:	b29b      	uxth	r3, r3
    2268:	1c1a      	adds	r2, r3, #0
    226a:	2301      	movs	r3, #1
    226c:	4013      	ands	r3, r2
    226e:	d001      	beq.n	2274 <tc_init+0xe4>
    2270:	2305      	movs	r3, #5
    2272:	e1b6      	b.n	25e2 <tc_init+0x452>
    2274:	68bb      	ldr	r3, [r7, #8]
    2276:	7bdb      	ldrb	r3, [r3, #15]
    2278:	b2db      	uxtb	r3, r3
    227a:	1c1a      	adds	r2, r3, #0
    227c:	2310      	movs	r3, #16
    227e:	4013      	ands	r3, r2
    2280:	d001      	beq.n	2286 <tc_init+0xf6>
    2282:	231c      	movs	r3, #28
    2284:	e1ad      	b.n	25e2 <tc_init+0x452>
    2286:	68bb      	ldr	r3, [r7, #8]
    2288:	881b      	ldrh	r3, [r3, #0]
    228a:	b29b      	uxth	r3, r3
    228c:	1c1a      	adds	r2, r3, #0
    228e:	2302      	movs	r3, #2
    2290:	4013      	ands	r3, r2
    2292:	d001      	beq.n	2298 <tc_init+0x108>
    2294:	231c      	movs	r3, #28
    2296:	e1a4      	b.n	25e2 <tc_init+0x452>
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	7c1b      	ldrb	r3, [r3, #16]
    229c:	2b00      	cmp	r3, #0
    229e:	d017      	beq.n	22d0 <tc_init+0x140>
    22a0:	2314      	movs	r3, #20
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	1c18      	adds	r0, r3, #0
    22a6:	4b8b      	ldr	r3, [pc, #556]	; (24d4 <tc_init+0x344>)
    22a8:	4798      	blx	r3
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	699b      	ldr	r3, [r3, #24]
    22ae:	b2da      	uxtb	r2, r3
    22b0:	2314      	movs	r3, #20
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	701a      	strb	r2, [r3, #0]
    22b6:	2314      	movs	r3, #20
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	2201      	movs	r2, #1
    22bc:	705a      	strb	r2, [r3, #1]
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	695b      	ldr	r3, [r3, #20]
    22c2:	b2da      	uxtb	r2, r3
    22c4:	2314      	movs	r3, #20
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	1c10      	adds	r0, r2, #0
    22ca:	1c19      	adds	r1, r3, #0
    22cc:	4b82      	ldr	r3, [pc, #520]	; (24d8 <tc_init+0x348>)
    22ce:	4798      	blx	r3
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	7f1b      	ldrb	r3, [r3, #28]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d017      	beq.n	2308 <tc_init+0x178>
    22d8:	2314      	movs	r3, #20
    22da:	18fb      	adds	r3, r7, r3
    22dc:	1c18      	adds	r0, r3, #0
    22de:	4b7d      	ldr	r3, [pc, #500]	; (24d4 <tc_init+0x344>)
    22e0:	4798      	blx	r3
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22e6:	b2da      	uxtb	r2, r3
    22e8:	2314      	movs	r3, #20
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	701a      	strb	r2, [r3, #0]
    22ee:	2314      	movs	r3, #20
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	2201      	movs	r2, #1
    22f4:	705a      	strb	r2, [r3, #1]
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	6a1b      	ldr	r3, [r3, #32]
    22fa:	b2da      	uxtb	r2, r3
    22fc:	2314      	movs	r3, #20
    22fe:	18fb      	adds	r3, r7, r3
    2300:	1c10      	adds	r0, r2, #0
    2302:	1c19      	adds	r1, r3, #0
    2304:	4b74      	ldr	r3, [pc, #464]	; (24d8 <tc_init+0x348>)
    2306:	4798      	blx	r3
    2308:	2331      	movs	r3, #49	; 0x31
    230a:	18fb      	adds	r3, r7, r3
    230c:	781a      	ldrb	r2, [r3, #0]
    230e:	2318      	movs	r3, #24
    2310:	18fb      	adds	r3, r7, r3
    2312:	0052      	lsls	r2, r2, #1
    2314:	5ad3      	ldrh	r3, [r2, r3]
    2316:	2002      	movs	r0, #2
    2318:	1c19      	adds	r1, r3, #0
    231a:	4b70      	ldr	r3, [pc, #448]	; (24dc <tc_init+0x34c>)
    231c:	4798      	blx	r3
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	789b      	ldrb	r3, [r3, #2]
    2322:	2b08      	cmp	r3, #8
    2324:	d10b      	bne.n	233e <tc_init+0x1ae>
    2326:	2331      	movs	r3, #49	; 0x31
    2328:	18fb      	adds	r3, r7, r3
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	1c5a      	adds	r2, r3, #1
    232e:	2318      	movs	r3, #24
    2330:	18fb      	adds	r3, r7, r3
    2332:	0052      	lsls	r2, r2, #1
    2334:	5ad3      	ldrh	r3, [r2, r3]
    2336:	2002      	movs	r0, #2
    2338:	1c19      	adds	r1, r3, #0
    233a:	4b68      	ldr	r3, [pc, #416]	; (24dc <tc_init+0x34c>)
    233c:	4798      	blx	r3
    233e:	2310      	movs	r3, #16
    2340:	18fb      	adds	r3, r7, r3
    2342:	1c18      	adds	r0, r3, #0
    2344:	4b66      	ldr	r3, [pc, #408]	; (24e0 <tc_init+0x350>)
    2346:	4798      	blx	r3
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	781a      	ldrb	r2, [r3, #0]
    234c:	2310      	movs	r3, #16
    234e:	18fb      	adds	r3, r7, r3
    2350:	701a      	strb	r2, [r3, #0]
    2352:	2331      	movs	r3, #49	; 0x31
    2354:	18fb      	adds	r3, r7, r3
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	2228      	movs	r2, #40	; 0x28
    235a:	18ba      	adds	r2, r7, r2
    235c:	5cd2      	ldrb	r2, [r2, r3]
    235e:	2310      	movs	r3, #16
    2360:	18fb      	adds	r3, r7, r3
    2362:	1c10      	adds	r0, r2, #0
    2364:	1c19      	adds	r1, r3, #0
    2366:	4b5f      	ldr	r3, [pc, #380]	; (24e4 <tc_init+0x354>)
    2368:	4798      	blx	r3
    236a:	2331      	movs	r3, #49	; 0x31
    236c:	18fb      	adds	r3, r7, r3
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	2228      	movs	r2, #40	; 0x28
    2372:	18ba      	adds	r2, r7, r2
    2374:	5cd3      	ldrb	r3, [r2, r3]
    2376:	1c18      	adds	r0, r3, #0
    2378:	4b5b      	ldr	r3, [pc, #364]	; (24e8 <tc_init+0x358>)
    237a:	4798      	blx	r3
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	789a      	ldrb	r2, [r3, #2]
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	799b      	ldrb	r3, [r3, #6]
    2384:	4313      	orrs	r3, r2
    2386:	b2db      	uxtb	r3, r3
    2388:	b29a      	uxth	r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	891b      	ldrh	r3, [r3, #8]
    238e:	4313      	orrs	r3, r2
    2390:	b299      	uxth	r1, r3
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	889a      	ldrh	r2, [r3, #4]
    2396:	2336      	movs	r3, #54	; 0x36
    2398:	18fb      	adds	r3, r7, r3
    239a:	430a      	orrs	r2, r1
    239c:	801a      	strh	r2, [r3, #0]
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	785b      	ldrb	r3, [r3, #1]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d008      	beq.n	23b8 <tc_init+0x228>
    23a6:	2336      	movs	r3, #54	; 0x36
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	2236      	movs	r2, #54	; 0x36
    23ac:	18ba      	adds	r2, r7, r2
    23ae:	8812      	ldrh	r2, [r2, #0]
    23b0:	2180      	movs	r1, #128	; 0x80
    23b2:	0109      	lsls	r1, r1, #4
    23b4:	430a      	orrs	r2, r1
    23b6:	801a      	strh	r2, [r3, #0]
    23b8:	46c0      	nop			; (mov r8, r8)
    23ba:	68fb      	ldr	r3, [r7, #12]
    23bc:	1c18      	adds	r0, r3, #0
    23be:	4b4b      	ldr	r3, [pc, #300]	; (24ec <tc_init+0x35c>)
    23c0:	4798      	blx	r3
    23c2:	1e03      	subs	r3, r0, #0
    23c4:	d1f9      	bne.n	23ba <tc_init+0x22a>
    23c6:	68bb      	ldr	r3, [r7, #8]
    23c8:	2236      	movs	r2, #54	; 0x36
    23ca:	18ba      	adds	r2, r7, r2
    23cc:	8812      	ldrh	r2, [r2, #0]
    23ce:	801a      	strh	r2, [r3, #0]
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	7b5b      	ldrb	r3, [r3, #13]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d003      	beq.n	23e0 <tc_init+0x250>
    23d8:	2335      	movs	r3, #53	; 0x35
    23da:	18fb      	adds	r3, r7, r3
    23dc:	2204      	movs	r2, #4
    23de:	701a      	strb	r2, [r3, #0]
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	7b9b      	ldrb	r3, [r3, #14]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d007      	beq.n	23f8 <tc_init+0x268>
    23e8:	2335      	movs	r3, #53	; 0x35
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	2235      	movs	r2, #53	; 0x35
    23ee:	18ba      	adds	r2, r7, r2
    23f0:	7812      	ldrb	r2, [r2, #0]
    23f2:	2101      	movs	r1, #1
    23f4:	430a      	orrs	r2, r1
    23f6:	701a      	strb	r2, [r3, #0]
    23f8:	46c0      	nop			; (mov r8, r8)
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	1c18      	adds	r0, r3, #0
    23fe:	4b3b      	ldr	r3, [pc, #236]	; (24ec <tc_init+0x35c>)
    2400:	4798      	blx	r3
    2402:	1e03      	subs	r3, r0, #0
    2404:	d1f9      	bne.n	23fa <tc_init+0x26a>
    2406:	68bb      	ldr	r3, [r7, #8]
    2408:	22ff      	movs	r2, #255	; 0xff
    240a:	711a      	strb	r2, [r3, #4]
    240c:	2335      	movs	r3, #53	; 0x35
    240e:	18fb      	adds	r3, r7, r3
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d00b      	beq.n	242e <tc_init+0x29e>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	1c18      	adds	r0, r3, #0
    241c:	4b33      	ldr	r3, [pc, #204]	; (24ec <tc_init+0x35c>)
    241e:	4798      	blx	r3
    2420:	1e03      	subs	r3, r0, #0
    2422:	d1f9      	bne.n	2418 <tc_init+0x288>
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2235      	movs	r2, #53	; 0x35
    2428:	18ba      	adds	r2, r7, r2
    242a:	7812      	ldrb	r2, [r2, #0]
    242c:	715a      	strb	r2, [r3, #5]
    242e:	2334      	movs	r3, #52	; 0x34
    2430:	18fb      	adds	r3, r7, r3
    2432:	687a      	ldr	r2, [r7, #4]
    2434:	7a92      	ldrb	r2, [r2, #10]
    2436:	701a      	strb	r2, [r3, #0]
    2438:	2332      	movs	r3, #50	; 0x32
    243a:	18fb      	adds	r3, r7, r3
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]
    2440:	e01c      	b.n	247c <tc_init+0x2ec>
    2442:	2332      	movs	r3, #50	; 0x32
    2444:	18fb      	adds	r3, r7, r3
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	687a      	ldr	r2, [r7, #4]
    244a:	18d3      	adds	r3, r2, r3
    244c:	7adb      	ldrb	r3, [r3, #11]
    244e:	2b00      	cmp	r3, #0
    2450:	d00d      	beq.n	246e <tc_init+0x2de>
    2452:	2332      	movs	r3, #50	; 0x32
    2454:	18fb      	adds	r3, r7, r3
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	2210      	movs	r2, #16
    245a:	409a      	lsls	r2, r3
    245c:	1c13      	adds	r3, r2, #0
    245e:	b2d9      	uxtb	r1, r3
    2460:	2334      	movs	r3, #52	; 0x34
    2462:	18fb      	adds	r3, r7, r3
    2464:	2234      	movs	r2, #52	; 0x34
    2466:	18ba      	adds	r2, r7, r2
    2468:	7812      	ldrb	r2, [r2, #0]
    246a:	430a      	orrs	r2, r1
    246c:	701a      	strb	r2, [r3, #0]
    246e:	2332      	movs	r3, #50	; 0x32
    2470:	18fb      	adds	r3, r7, r3
    2472:	781a      	ldrb	r2, [r3, #0]
    2474:	2332      	movs	r3, #50	; 0x32
    2476:	18fb      	adds	r3, r7, r3
    2478:	3201      	adds	r2, #1
    247a:	701a      	strb	r2, [r3, #0]
    247c:	2332      	movs	r3, #50	; 0x32
    247e:	18fb      	adds	r3, r7, r3
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	2b01      	cmp	r3, #1
    2484:	d9dd      	bls.n	2442 <tc_init+0x2b2>
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	68fb      	ldr	r3, [r7, #12]
    248a:	1c18      	adds	r0, r3, #0
    248c:	4b17      	ldr	r3, [pc, #92]	; (24ec <tc_init+0x35c>)
    248e:	4798      	blx	r3
    2490:	1e03      	subs	r3, r0, #0
    2492:	d1f9      	bne.n	2488 <tc_init+0x2f8>
    2494:	68bb      	ldr	r3, [r7, #8]
    2496:	2234      	movs	r2, #52	; 0x34
    2498:	18ba      	adds	r2, r7, r2
    249a:	7812      	ldrb	r2, [r2, #0]
    249c:	719a      	strb	r2, [r3, #6]
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	68fb      	ldr	r3, [r7, #12]
    24a2:	1c18      	adds	r0, r3, #0
    24a4:	4b11      	ldr	r3, [pc, #68]	; (24ec <tc_init+0x35c>)
    24a6:	4798      	blx	r3
    24a8:	1e03      	subs	r3, r0, #0
    24aa:	d1f9      	bne.n	24a0 <tc_init+0x310>
    24ac:	68fb      	ldr	r3, [r7, #12]
    24ae:	791b      	ldrb	r3, [r3, #4]
    24b0:	2b04      	cmp	r3, #4
    24b2:	d01d      	beq.n	24f0 <tc_init+0x360>
    24b4:	2b08      	cmp	r3, #8
    24b6:	d100      	bne.n	24ba <tc_init+0x32a>
    24b8:	e06f      	b.n	259a <tc_init+0x40a>
    24ba:	2b00      	cmp	r3, #0
    24bc:	d04a      	beq.n	2554 <tc_init+0x3c4>
    24be:	e08f      	b.n	25e0 <tc_init+0x450>
    24c0:	00002141 	.word	0x00002141
    24c4:	000044d8 	.word	0x000044d8
    24c8:	000042d9 	.word	0x000042d9
    24cc:	000044e0 	.word	0x000044e0
    24d0:	20000478 	.word	0x20000478
    24d4:	000020f1 	.word	0x000020f1
    24d8:	0000402d 	.word	0x0000402d
    24dc:	00002095 	.word	0x00002095
    24e0:	00002081 	.word	0x00002081
    24e4:	00003d41 	.word	0x00003d41
    24e8:	00003d85 	.word	0x00003d85
    24ec:	00002119 	.word	0x00002119
    24f0:	46c0      	nop			; (mov r8, r8)
    24f2:	68fb      	ldr	r3, [r7, #12]
    24f4:	1c18      	adds	r0, r3, #0
    24f6:	4b3d      	ldr	r3, [pc, #244]	; (25ec <tc_init+0x45c>)
    24f8:	4798      	blx	r3
    24fa:	1e03      	subs	r3, r0, #0
    24fc:	d1f9      	bne.n	24f2 <tc_init+0x362>
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	2228      	movs	r2, #40	; 0x28
    2502:	5c9a      	ldrb	r2, [r3, r2]
    2504:	68bb      	ldr	r3, [r7, #8]
    2506:	741a      	strb	r2, [r3, #16]
    2508:	46c0      	nop			; (mov r8, r8)
    250a:	68fb      	ldr	r3, [r7, #12]
    250c:	1c18      	adds	r0, r3, #0
    250e:	4b37      	ldr	r3, [pc, #220]	; (25ec <tc_init+0x45c>)
    2510:	4798      	blx	r3
    2512:	1e03      	subs	r3, r0, #0
    2514:	d1f9      	bne.n	250a <tc_init+0x37a>
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	2229      	movs	r2, #41	; 0x29
    251a:	5c9a      	ldrb	r2, [r3, r2]
    251c:	68bb      	ldr	r3, [r7, #8]
    251e:	751a      	strb	r2, [r3, #20]
    2520:	46c0      	nop			; (mov r8, r8)
    2522:	68fb      	ldr	r3, [r7, #12]
    2524:	1c18      	adds	r0, r3, #0
    2526:	4b31      	ldr	r3, [pc, #196]	; (25ec <tc_init+0x45c>)
    2528:	4798      	blx	r3
    252a:	1e03      	subs	r3, r0, #0
    252c:	d1f9      	bne.n	2522 <tc_init+0x392>
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	222a      	movs	r2, #42	; 0x2a
    2532:	5c9a      	ldrb	r2, [r3, r2]
    2534:	68bb      	ldr	r3, [r7, #8]
    2536:	761a      	strb	r2, [r3, #24]
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	1c18      	adds	r0, r3, #0
    253e:	4b2b      	ldr	r3, [pc, #172]	; (25ec <tc_init+0x45c>)
    2540:	4798      	blx	r3
    2542:	1e03      	subs	r3, r0, #0
    2544:	d1f9      	bne.n	253a <tc_init+0x3aa>
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	222b      	movs	r2, #43	; 0x2b
    254a:	5c9a      	ldrb	r2, [r3, r2]
    254c:	68bb      	ldr	r3, [r7, #8]
    254e:	765a      	strb	r2, [r3, #25]
    2550:	2300      	movs	r3, #0
    2552:	e046      	b.n	25e2 <tc_init+0x452>
    2554:	46c0      	nop			; (mov r8, r8)
    2556:	68fb      	ldr	r3, [r7, #12]
    2558:	1c18      	adds	r0, r3, #0
    255a:	4b24      	ldr	r3, [pc, #144]	; (25ec <tc_init+0x45c>)
    255c:	4798      	blx	r3
    255e:	1e03      	subs	r3, r0, #0
    2560:	d1f9      	bne.n	2556 <tc_init+0x3c6>
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2566:	68bb      	ldr	r3, [r7, #8]
    2568:	821a      	strh	r2, [r3, #16]
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	1c18      	adds	r0, r3, #0
    2570:	4b1e      	ldr	r3, [pc, #120]	; (25ec <tc_init+0x45c>)
    2572:	4798      	blx	r3
    2574:	1e03      	subs	r3, r0, #0
    2576:	d1f9      	bne.n	256c <tc_init+0x3dc>
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    257c:	68bb      	ldr	r3, [r7, #8]
    257e:	831a      	strh	r2, [r3, #24]
    2580:	46c0      	nop			; (mov r8, r8)
    2582:	68fb      	ldr	r3, [r7, #12]
    2584:	1c18      	adds	r0, r3, #0
    2586:	4b19      	ldr	r3, [pc, #100]	; (25ec <tc_init+0x45c>)
    2588:	4798      	blx	r3
    258a:	1e03      	subs	r3, r0, #0
    258c:	d1f9      	bne.n	2582 <tc_init+0x3f2>
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    2592:	68bb      	ldr	r3, [r7, #8]
    2594:	835a      	strh	r2, [r3, #26]
    2596:	2300      	movs	r3, #0
    2598:	e023      	b.n	25e2 <tc_init+0x452>
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	68fb      	ldr	r3, [r7, #12]
    259e:	1c18      	adds	r0, r3, #0
    25a0:	4b12      	ldr	r3, [pc, #72]	; (25ec <tc_init+0x45c>)
    25a2:	4798      	blx	r3
    25a4:	1e03      	subs	r3, r0, #0
    25a6:	d1f9      	bne.n	259c <tc_init+0x40c>
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25ac:	68bb      	ldr	r3, [r7, #8]
    25ae:	611a      	str	r2, [r3, #16]
    25b0:	46c0      	nop			; (mov r8, r8)
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	1c18      	adds	r0, r3, #0
    25b6:	4b0d      	ldr	r3, [pc, #52]	; (25ec <tc_init+0x45c>)
    25b8:	4798      	blx	r3
    25ba:	1e03      	subs	r3, r0, #0
    25bc:	d1f9      	bne.n	25b2 <tc_init+0x422>
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c2:	68bb      	ldr	r3, [r7, #8]
    25c4:	619a      	str	r2, [r3, #24]
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	1c18      	adds	r0, r3, #0
    25cc:	4b07      	ldr	r3, [pc, #28]	; (25ec <tc_init+0x45c>)
    25ce:	4798      	blx	r3
    25d0:	1e03      	subs	r3, r0, #0
    25d2:	d1f9      	bne.n	25c8 <tc_init+0x438>
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    25d8:	68bb      	ldr	r3, [r7, #8]
    25da:	61da      	str	r2, [r3, #28]
    25dc:	2300      	movs	r3, #0
    25de:	e000      	b.n	25e2 <tc_init+0x452>
    25e0:	2317      	movs	r3, #23
    25e2:	1c18      	adds	r0, r3, #0
    25e4:	46bd      	mov	sp, r7
    25e6:	b00f      	add	sp, #60	; 0x3c
    25e8:	bd90      	pop	{r4, r7, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	00002119 	.word	0x00002119

000025f0 <cpu_irq_enter_critical>:
    25f0:	b580      	push	{r7, lr}
    25f2:	b082      	sub	sp, #8
    25f4:	af00      	add	r7, sp, #0
    25f6:	4b0f      	ldr	r3, [pc, #60]	; (2634 <cpu_irq_enter_critical+0x44>)
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d112      	bne.n	2624 <cpu_irq_enter_critical+0x34>
    25fe:	f3ef 8310 	mrs	r3, PRIMASK
    2602:	607b      	str	r3, [r7, #4]
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	2b00      	cmp	r3, #0
    2608:	d109      	bne.n	261e <cpu_irq_enter_critical+0x2e>
    260a:	b672      	cpsid	i
    260c:	f3bf 8f5f 	dmb	sy
    2610:	4b09      	ldr	r3, [pc, #36]	; (2638 <cpu_irq_enter_critical+0x48>)
    2612:	2200      	movs	r2, #0
    2614:	701a      	strb	r2, [r3, #0]
    2616:	4b09      	ldr	r3, [pc, #36]	; (263c <cpu_irq_enter_critical+0x4c>)
    2618:	2201      	movs	r2, #1
    261a:	701a      	strb	r2, [r3, #0]
    261c:	e002      	b.n	2624 <cpu_irq_enter_critical+0x34>
    261e:	4b07      	ldr	r3, [pc, #28]	; (263c <cpu_irq_enter_critical+0x4c>)
    2620:	2200      	movs	r2, #0
    2622:	701a      	strb	r2, [r3, #0]
    2624:	4b03      	ldr	r3, [pc, #12]	; (2634 <cpu_irq_enter_critical+0x44>)
    2626:	681b      	ldr	r3, [r3, #0]
    2628:	1c5a      	adds	r2, r3, #1
    262a:	4b02      	ldr	r3, [pc, #8]	; (2634 <cpu_irq_enter_critical+0x44>)
    262c:	601a      	str	r2, [r3, #0]
    262e:	46bd      	mov	sp, r7
    2630:	b002      	add	sp, #8
    2632:	bd80      	pop	{r7, pc}
    2634:	20000044 	.word	0x20000044
    2638:	20000008 	.word	0x20000008
    263c:	20000048 	.word	0x20000048

00002640 <cpu_irq_leave_critical>:
    2640:	b580      	push	{r7, lr}
    2642:	af00      	add	r7, sp, #0
    2644:	4b0a      	ldr	r3, [pc, #40]	; (2670 <cpu_irq_leave_critical+0x30>)
    2646:	681b      	ldr	r3, [r3, #0]
    2648:	1e5a      	subs	r2, r3, #1
    264a:	4b09      	ldr	r3, [pc, #36]	; (2670 <cpu_irq_leave_critical+0x30>)
    264c:	601a      	str	r2, [r3, #0]
    264e:	4b08      	ldr	r3, [pc, #32]	; (2670 <cpu_irq_leave_critical+0x30>)
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d10a      	bne.n	266c <cpu_irq_leave_critical+0x2c>
    2656:	4b07      	ldr	r3, [pc, #28]	; (2674 <cpu_irq_leave_critical+0x34>)
    2658:	781b      	ldrb	r3, [r3, #0]
    265a:	b2db      	uxtb	r3, r3
    265c:	2b00      	cmp	r3, #0
    265e:	d005      	beq.n	266c <cpu_irq_leave_critical+0x2c>
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <cpu_irq_leave_critical+0x38>)
    2662:	2201      	movs	r2, #1
    2664:	701a      	strb	r2, [r3, #0]
    2666:	f3bf 8f5f 	dmb	sy
    266a:	b662      	cpsie	i
    266c:	46bd      	mov	sp, r7
    266e:	bd80      	pop	{r7, pc}
    2670:	20000044 	.word	0x20000044
    2674:	20000048 	.word	0x20000048
    2678:	20000008 	.word	0x20000008

0000267c <system_pinmux_get_config_defaults>:
    267c:	b580      	push	{r7, lr}
    267e:	b082      	sub	sp, #8
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	2280      	movs	r2, #128	; 0x80
    2688:	701a      	strb	r2, [r3, #0]
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	2200      	movs	r2, #0
    268e:	705a      	strb	r2, [r3, #1]
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	2201      	movs	r2, #1
    2694:	709a      	strb	r2, [r3, #2]
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	2200      	movs	r2, #0
    269a:	70da      	strb	r2, [r3, #3]
    269c:	46bd      	mov	sp, r7
    269e:	b002      	add	sp, #8
    26a0:	bd80      	pop	{r7, pc}
    26a2:	46c0      	nop			; (mov r8, r8)

000026a4 <port_pin_set_config>:
    26a4:	b580      	push	{r7, lr}
    26a6:	b084      	sub	sp, #16
    26a8:	af00      	add	r7, sp, #0
    26aa:	1c02      	adds	r2, r0, #0
    26ac:	6039      	str	r1, [r7, #0]
    26ae:	1dfb      	adds	r3, r7, #7
    26b0:	701a      	strb	r2, [r3, #0]
    26b2:	230c      	movs	r3, #12
    26b4:	18fb      	adds	r3, r7, r3
    26b6:	1c18      	adds	r0, r3, #0
    26b8:	4b0f      	ldr	r3, [pc, #60]	; (26f8 <port_pin_set_config+0x54>)
    26ba:	4798      	blx	r3
    26bc:	230c      	movs	r3, #12
    26be:	18fb      	adds	r3, r7, r3
    26c0:	2280      	movs	r2, #128	; 0x80
    26c2:	701a      	strb	r2, [r3, #0]
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	781a      	ldrb	r2, [r3, #0]
    26c8:	230c      	movs	r3, #12
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	705a      	strb	r2, [r3, #1]
    26ce:	683b      	ldr	r3, [r7, #0]
    26d0:	785a      	ldrb	r2, [r3, #1]
    26d2:	230c      	movs	r3, #12
    26d4:	18fb      	adds	r3, r7, r3
    26d6:	709a      	strb	r2, [r3, #2]
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	789a      	ldrb	r2, [r3, #2]
    26dc:	230c      	movs	r3, #12
    26de:	18fb      	adds	r3, r7, r3
    26e0:	70da      	strb	r2, [r3, #3]
    26e2:	1dfb      	adds	r3, r7, #7
    26e4:	781a      	ldrb	r2, [r3, #0]
    26e6:	230c      	movs	r3, #12
    26e8:	18fb      	adds	r3, r7, r3
    26ea:	1c10      	adds	r0, r2, #0
    26ec:	1c19      	adds	r1, r3, #0
    26ee:	4b03      	ldr	r3, [pc, #12]	; (26fc <port_pin_set_config+0x58>)
    26f0:	4798      	blx	r3
    26f2:	46bd      	mov	sp, r7
    26f4:	b004      	add	sp, #16
    26f6:	bd80      	pop	{r7, pc}
    26f8:	0000267d 	.word	0x0000267d
    26fc:	0000402d 	.word	0x0000402d

00002700 <system_gclk_chan_get_config_defaults>:
    2700:	b580      	push	{r7, lr}
    2702:	b082      	sub	sp, #8
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	2200      	movs	r2, #0
    270c:	701a      	strb	r2, [r3, #0]
    270e:	46bd      	mov	sp, r7
    2710:	b002      	add	sp, #8
    2712:	bd80      	pop	{r7, pc}

00002714 <long_division>:
    2714:	b5f0      	push	{r4, r5, r6, r7, lr}
    2716:	b08d      	sub	sp, #52	; 0x34
    2718:	af00      	add	r7, sp, #0
    271a:	60b8      	str	r0, [r7, #8]
    271c:	60f9      	str	r1, [r7, #12]
    271e:	603a      	str	r2, [r7, #0]
    2720:	607b      	str	r3, [r7, #4]
    2722:	2300      	movs	r3, #0
    2724:	2400      	movs	r4, #0
    2726:	623b      	str	r3, [r7, #32]
    2728:	627c      	str	r4, [r7, #36]	; 0x24
    272a:	2300      	movs	r3, #0
    272c:	2400      	movs	r4, #0
    272e:	61bb      	str	r3, [r7, #24]
    2730:	61fc      	str	r4, [r7, #28]
    2732:	233f      	movs	r3, #63	; 0x3f
    2734:	62fb      	str	r3, [r7, #44]	; 0x2c
    2736:	e053      	b.n	27e0 <long_division+0xcc>
    2738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    273a:	3b20      	subs	r3, #32
    273c:	2b00      	cmp	r3, #0
    273e:	db04      	blt.n	274a <long_division+0x36>
    2740:	2201      	movs	r2, #1
    2742:	409a      	lsls	r2, r3
    2744:	1c13      	adds	r3, r2, #0
    2746:	617b      	str	r3, [r7, #20]
    2748:	e00b      	b.n	2762 <long_division+0x4e>
    274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    274c:	2220      	movs	r2, #32
    274e:	1ad3      	subs	r3, r2, r3
    2750:	2201      	movs	r2, #1
    2752:	40da      	lsrs	r2, r3
    2754:	1c13      	adds	r3, r2, #0
    2756:	2100      	movs	r1, #0
    2758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    275a:	4091      	lsls	r1, r2
    275c:	1c0a      	adds	r2, r1, #0
    275e:	4313      	orrs	r3, r2
    2760:	617b      	str	r3, [r7, #20]
    2762:	2201      	movs	r2, #1
    2764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2766:	409a      	lsls	r2, r3
    2768:	1c13      	adds	r3, r2, #0
    276a:	613b      	str	r3, [r7, #16]
    276c:	69bb      	ldr	r3, [r7, #24]
    276e:	69fc      	ldr	r4, [r7, #28]
    2770:	18db      	adds	r3, r3, r3
    2772:	4164      	adcs	r4, r4
    2774:	61bb      	str	r3, [r7, #24]
    2776:	61fc      	str	r4, [r7, #28]
    2778:	68bb      	ldr	r3, [r7, #8]
    277a:	693a      	ldr	r2, [r7, #16]
    277c:	401a      	ands	r2, r3
    277e:	1c15      	adds	r5, r2, #0
    2780:	68fb      	ldr	r3, [r7, #12]
    2782:	697a      	ldr	r2, [r7, #20]
    2784:	401a      	ands	r2, r3
    2786:	1c16      	adds	r6, r2, #0
    2788:	1c2b      	adds	r3, r5, #0
    278a:	4333      	orrs	r3, r6
    278c:	d007      	beq.n	279e <long_division+0x8a>
    278e:	69bb      	ldr	r3, [r7, #24]
    2790:	2201      	movs	r2, #1
    2792:	4313      	orrs	r3, r2
    2794:	61bb      	str	r3, [r7, #24]
    2796:	69fb      	ldr	r3, [r7, #28]
    2798:	2200      	movs	r2, #0
    279a:	4313      	orrs	r3, r2
    279c:	61fb      	str	r3, [r7, #28]
    279e:	687a      	ldr	r2, [r7, #4]
    27a0:	69fb      	ldr	r3, [r7, #28]
    27a2:	429a      	cmp	r2, r3
    27a4:	d819      	bhi.n	27da <long_division+0xc6>
    27a6:	687a      	ldr	r2, [r7, #4]
    27a8:	69fb      	ldr	r3, [r7, #28]
    27aa:	429a      	cmp	r2, r3
    27ac:	d103      	bne.n	27b6 <long_division+0xa2>
    27ae:	683a      	ldr	r2, [r7, #0]
    27b0:	69bb      	ldr	r3, [r7, #24]
    27b2:	429a      	cmp	r2, r3
    27b4:	d811      	bhi.n	27da <long_division+0xc6>
    27b6:	69b9      	ldr	r1, [r7, #24]
    27b8:	69fa      	ldr	r2, [r7, #28]
    27ba:	683b      	ldr	r3, [r7, #0]
    27bc:	687c      	ldr	r4, [r7, #4]
    27be:	1ac9      	subs	r1, r1, r3
    27c0:	41a2      	sbcs	r2, r4
    27c2:	1c0b      	adds	r3, r1, #0
    27c4:	1c14      	adds	r4, r2, #0
    27c6:	61bb      	str	r3, [r7, #24]
    27c8:	61fc      	str	r4, [r7, #28]
    27ca:	6a3a      	ldr	r2, [r7, #32]
    27cc:	693b      	ldr	r3, [r7, #16]
    27ce:	4313      	orrs	r3, r2
    27d0:	623b      	str	r3, [r7, #32]
    27d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    27d4:	697b      	ldr	r3, [r7, #20]
    27d6:	4313      	orrs	r3, r2
    27d8:	627b      	str	r3, [r7, #36]	; 0x24
    27da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27dc:	3b01      	subs	r3, #1
    27de:	62fb      	str	r3, [r7, #44]	; 0x2c
    27e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27e2:	2b00      	cmp	r3, #0
    27e4:	daa8      	bge.n	2738 <long_division+0x24>
    27e6:	6a3b      	ldr	r3, [r7, #32]
    27e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    27ea:	1c18      	adds	r0, r3, #0
    27ec:	1c21      	adds	r1, r4, #0
    27ee:	46bd      	mov	sp, r7
    27f0:	b00d      	add	sp, #52	; 0x34
    27f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000027f4 <_sercom_get_sync_baud_val>:
    27f4:	b580      	push	{r7, lr}
    27f6:	b086      	sub	sp, #24
    27f8:	af00      	add	r7, sp, #0
    27fa:	60f8      	str	r0, [r7, #12]
    27fc:	60b9      	str	r1, [r7, #8]
    27fe:	607a      	str	r2, [r7, #4]
    2800:	2316      	movs	r3, #22
    2802:	18fb      	adds	r3, r7, r3
    2804:	2200      	movs	r2, #0
    2806:	801a      	strh	r2, [r3, #0]
    2808:	68bb      	ldr	r3, [r7, #8]
    280a:	613b      	str	r3, [r7, #16]
    280c:	68bb      	ldr	r3, [r7, #8]
    280e:	085a      	lsrs	r2, r3, #1
    2810:	68fb      	ldr	r3, [r7, #12]
    2812:	429a      	cmp	r2, r3
    2814:	d201      	bcs.n	281a <_sercom_get_sync_baud_val+0x26>
    2816:	2340      	movs	r3, #64	; 0x40
    2818:	e026      	b.n	2868 <_sercom_get_sync_baud_val+0x74>
    281a:	68bb      	ldr	r3, [r7, #8]
    281c:	085b      	lsrs	r3, r3, #1
    281e:	613b      	str	r3, [r7, #16]
    2820:	e00a      	b.n	2838 <_sercom_get_sync_baud_val+0x44>
    2822:	693a      	ldr	r2, [r7, #16]
    2824:	68fb      	ldr	r3, [r7, #12]
    2826:	1ad3      	subs	r3, r2, r3
    2828:	613b      	str	r3, [r7, #16]
    282a:	2316      	movs	r3, #22
    282c:	18fb      	adds	r3, r7, r3
    282e:	881a      	ldrh	r2, [r3, #0]
    2830:	2316      	movs	r3, #22
    2832:	18fb      	adds	r3, r7, r3
    2834:	3201      	adds	r2, #1
    2836:	801a      	strh	r2, [r3, #0]
    2838:	693a      	ldr	r2, [r7, #16]
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	429a      	cmp	r2, r3
    283e:	d2f0      	bcs.n	2822 <_sercom_get_sync_baud_val+0x2e>
    2840:	2316      	movs	r3, #22
    2842:	18fb      	adds	r3, r7, r3
    2844:	2216      	movs	r2, #22
    2846:	18ba      	adds	r2, r7, r2
    2848:	8812      	ldrh	r2, [r2, #0]
    284a:	3a01      	subs	r2, #1
    284c:	801a      	strh	r2, [r3, #0]
    284e:	2316      	movs	r3, #22
    2850:	18fb      	adds	r3, r7, r3
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	2bff      	cmp	r3, #255	; 0xff
    2856:	d901      	bls.n	285c <_sercom_get_sync_baud_val+0x68>
    2858:	2340      	movs	r3, #64	; 0x40
    285a:	e005      	b.n	2868 <_sercom_get_sync_baud_val+0x74>
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	2216      	movs	r2, #22
    2860:	18ba      	adds	r2, r7, r2
    2862:	8812      	ldrh	r2, [r2, #0]
    2864:	801a      	strh	r2, [r3, #0]
    2866:	2300      	movs	r3, #0
    2868:	1c18      	adds	r0, r3, #0
    286a:	46bd      	mov	sp, r7
    286c:	b006      	add	sp, #24
    286e:	bd80      	pop	{r7, pc}

00002870 <_sercom_get_async_baud_val>:
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	b09d      	sub	sp, #116	; 0x74
    2874:	af00      	add	r7, sp, #0
    2876:	63f8      	str	r0, [r7, #60]	; 0x3c
    2878:	63b9      	str	r1, [r7, #56]	; 0x38
    287a:	637a      	str	r2, [r7, #52]	; 0x34
    287c:	2233      	movs	r2, #51	; 0x33
    287e:	18ba      	adds	r2, r7, r2
    2880:	7013      	strb	r3, [r2, #0]
    2882:	2300      	movs	r3, #0
    2884:	2400      	movs	r4, #0
    2886:	65bb      	str	r3, [r7, #88]	; 0x58
    2888:	65fc      	str	r4, [r7, #92]	; 0x5c
    288a:	2300      	movs	r3, #0
    288c:	2400      	movs	r4, #0
    288e:	653b      	str	r3, [r7, #80]	; 0x50
    2890:	657c      	str	r4, [r7, #84]	; 0x54
    2892:	2300      	movs	r3, #0
    2894:	2400      	movs	r4, #0
    2896:	66bb      	str	r3, [r7, #104]	; 0x68
    2898:	66fc      	str	r4, [r7, #108]	; 0x6c
    289a:	2300      	movs	r3, #0
    289c:	663b      	str	r3, [r7, #96]	; 0x60
    289e:	2358      	movs	r3, #88	; 0x58
    28a0:	2230      	movs	r2, #48	; 0x30
    28a2:	4694      	mov	ip, r2
    28a4:	44bc      	add	ip, r7
    28a6:	4463      	add	r3, ip
    28a8:	781a      	ldrb	r2, [r3, #0]
    28aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28ac:	435a      	muls	r2, r3
    28ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28b0:	429a      	cmp	r2, r3
    28b2:	d901      	bls.n	28b8 <_sercom_get_async_baud_val+0x48>
    28b4:	2340      	movs	r3, #64	; 0x40
    28b6:	e0c9      	b.n	2a4c <_sercom_get_async_baud_val+0x1dc>
    28b8:	2333      	movs	r3, #51	; 0x33
    28ba:	18fb      	adds	r3, r7, r3
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	2b00      	cmp	r3, #0
    28c0:	d13f      	bne.n	2942 <_sercom_get_async_baud_val+0xd2>
    28c2:	2358      	movs	r3, #88	; 0x58
    28c4:	2230      	movs	r2, #48	; 0x30
    28c6:	4694      	mov	ip, r2
    28c8:	44bc      	add	ip, r7
    28ca:	4463      	add	r3, ip
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	b2db      	uxtb	r3, r3
    28d0:	613b      	str	r3, [r7, #16]
    28d2:	2300      	movs	r3, #0
    28d4:	617b      	str	r3, [r7, #20]
    28d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28d8:	60bb      	str	r3, [r7, #8]
    28da:	2300      	movs	r3, #0
    28dc:	60fb      	str	r3, [r7, #12]
    28de:	4c5d      	ldr	r4, [pc, #372]	; (2a54 <_sercom_get_async_baud_val+0x1e4>)
    28e0:	6938      	ldr	r0, [r7, #16]
    28e2:	6979      	ldr	r1, [r7, #20]
    28e4:	68ba      	ldr	r2, [r7, #8]
    28e6:	68fb      	ldr	r3, [r7, #12]
    28e8:	47a0      	blx	r4
    28ea:	1c03      	adds	r3, r0, #0
    28ec:	1c0c      	adds	r4, r1, #0
    28ee:	001b      	movs	r3, r3
    28f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    28f2:	2300      	movs	r3, #0
    28f4:	64bb      	str	r3, [r7, #72]	; 0x48
    28f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28f8:	603b      	str	r3, [r7, #0]
    28fa:	2300      	movs	r3, #0
    28fc:	607b      	str	r3, [r7, #4]
    28fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2900:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    2902:	1c18      	adds	r0, r3, #0
    2904:	1c21      	adds	r1, r4, #0
    2906:	683a      	ldr	r2, [r7, #0]
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	4c53      	ldr	r4, [pc, #332]	; (2a58 <_sercom_get_async_baud_val+0x1e8>)
    290c:	47a0      	blx	r4
    290e:	1c03      	adds	r3, r0, #0
    2910:	1c0c      	adds	r4, r1, #0
    2912:	65bb      	str	r3, [r7, #88]	; 0x58
    2914:	65fc      	str	r4, [r7, #92]	; 0x5c
    2916:	2100      	movs	r1, #0
    2918:	2201      	movs	r2, #1
    291a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    291c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    291e:	1ac9      	subs	r1, r1, r3
    2920:	41a2      	sbcs	r2, r4
    2922:	1c0b      	adds	r3, r1, #0
    2924:	1c14      	adds	r4, r2, #0
    2926:	653b      	str	r3, [r7, #80]	; 0x50
    2928:	657c      	str	r4, [r7, #84]	; 0x54
    292a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    292c:	0c1b      	lsrs	r3, r3, #16
    292e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2930:	0416      	lsls	r6, r2, #16
    2932:	431e      	orrs	r6, r3
    2934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2936:	041d      	lsls	r5, r3, #16
    2938:	0033      	movs	r3, r6
    293a:	66bb      	str	r3, [r7, #104]	; 0x68
    293c:	2300      	movs	r3, #0
    293e:	66fb      	str	r3, [r7, #108]	; 0x6c
    2940:	e07e      	b.n	2a40 <_sercom_get_async_baud_val+0x1d0>
    2942:	2333      	movs	r3, #51	; 0x33
    2944:	18fb      	adds	r3, r7, r3
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	2b01      	cmp	r3, #1
    294a:	d000      	beq.n	294e <_sercom_get_async_baud_val+0xde>
    294c:	e078      	b.n	2a40 <_sercom_get_async_baud_val+0x1d0>
    294e:	2337      	movs	r3, #55	; 0x37
    2950:	2230      	movs	r2, #48	; 0x30
    2952:	4694      	mov	ip, r2
    2954:	44bc      	add	ip, r7
    2956:	4463      	add	r3, ip
    2958:	2200      	movs	r2, #0
    295a:	701a      	strb	r2, [r3, #0]
    295c:	e051      	b.n	2a02 <_sercom_get_async_baud_val+0x192>
    295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2960:	62bb      	str	r3, [r7, #40]	; 0x28
    2962:	2300      	movs	r3, #0
    2964:	62fb      	str	r3, [r7, #44]	; 0x2c
    2966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    2968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    296a:	1c03      	adds	r3, r0, #0
    296c:	0f5b      	lsrs	r3, r3, #29
    296e:	1c0a      	adds	r2, r1, #0
    2970:	00d2      	lsls	r2, r2, #3
    2972:	4313      	orrs	r3, r2
    2974:	64fb      	str	r3, [r7, #76]	; 0x4c
    2976:	1c03      	adds	r3, r0, #0
    2978:	00db      	lsls	r3, r3, #3
    297a:	64bb      	str	r3, [r7, #72]	; 0x48
    297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    297e:	623b      	str	r3, [r7, #32]
    2980:	2300      	movs	r3, #0
    2982:	627b      	str	r3, [r7, #36]	; 0x24
    2984:	2358      	movs	r3, #88	; 0x58
    2986:	2230      	movs	r2, #48	; 0x30
    2988:	4694      	mov	ip, r2
    298a:	44bc      	add	ip, r7
    298c:	4463      	add	r3, ip
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	b2db      	uxtb	r3, r3
    2992:	61bb      	str	r3, [r7, #24]
    2994:	2300      	movs	r3, #0
    2996:	61fb      	str	r3, [r7, #28]
    2998:	4c2e      	ldr	r4, [pc, #184]	; (2a54 <_sercom_get_async_baud_val+0x1e4>)
    299a:	6a38      	ldr	r0, [r7, #32]
    299c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    299e:	69ba      	ldr	r2, [r7, #24]
    29a0:	69fb      	ldr	r3, [r7, #28]
    29a2:	47a0      	blx	r4
    29a4:	1c03      	adds	r3, r0, #0
    29a6:	1c0c      	adds	r4, r1, #0
    29a8:	643b      	str	r3, [r7, #64]	; 0x40
    29aa:	647c      	str	r4, [r7, #68]	; 0x44
    29ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    29ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    29b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    29b2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    29b4:	1c08      	adds	r0, r1, #0
    29b6:	1c11      	adds	r1, r2, #0
    29b8:	1c1a      	adds	r2, r3, #0
    29ba:	1c23      	adds	r3, r4, #0
    29bc:	4c26      	ldr	r4, [pc, #152]	; (2a58 <_sercom_get_async_baud_val+0x1e8>)
    29be:	47a0      	blx	r4
    29c0:	1c03      	adds	r3, r0, #0
    29c2:	1c0c      	adds	r4, r1, #0
    29c4:	663b      	str	r3, [r7, #96]	; 0x60
    29c6:	2337      	movs	r3, #55	; 0x37
    29c8:	2230      	movs	r2, #48	; 0x30
    29ca:	4694      	mov	ip, r2
    29cc:	44bc      	add	ip, r7
    29ce:	4463      	add	r3, ip
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    29d4:	1ad3      	subs	r3, r2, r3
    29d6:	663b      	str	r3, [r7, #96]	; 0x60
    29d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    29da:	08db      	lsrs	r3, r3, #3
    29dc:	663b      	str	r3, [r7, #96]	; 0x60
    29de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    29e0:	4a1e      	ldr	r2, [pc, #120]	; (2a5c <_sercom_get_async_baud_val+0x1ec>)
    29e2:	4293      	cmp	r3, r2
    29e4:	d800      	bhi.n	29e8 <_sercom_get_async_baud_val+0x178>
    29e6:	e014      	b.n	2a12 <_sercom_get_async_baud_val+0x1a2>
    29e8:	2337      	movs	r3, #55	; 0x37
    29ea:	2230      	movs	r2, #48	; 0x30
    29ec:	4694      	mov	ip, r2
    29ee:	44bc      	add	ip, r7
    29f0:	4463      	add	r3, ip
    29f2:	781a      	ldrb	r2, [r3, #0]
    29f4:	2337      	movs	r3, #55	; 0x37
    29f6:	2130      	movs	r1, #48	; 0x30
    29f8:	468c      	mov	ip, r1
    29fa:	44bc      	add	ip, r7
    29fc:	4463      	add	r3, ip
    29fe:	3201      	adds	r2, #1
    2a00:	701a      	strb	r2, [r3, #0]
    2a02:	2337      	movs	r3, #55	; 0x37
    2a04:	2230      	movs	r2, #48	; 0x30
    2a06:	4694      	mov	ip, r2
    2a08:	44bc      	add	ip, r7
    2a0a:	4463      	add	r3, ip
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	2b07      	cmp	r3, #7
    2a10:	d9a5      	bls.n	295e <_sercom_get_async_baud_val+0xee>
    2a12:	2337      	movs	r3, #55	; 0x37
    2a14:	2230      	movs	r2, #48	; 0x30
    2a16:	4694      	mov	ip, r2
    2a18:	44bc      	add	ip, r7
    2a1a:	4463      	add	r3, ip
    2a1c:	781b      	ldrb	r3, [r3, #0]
    2a1e:	2b08      	cmp	r3, #8
    2a20:	d101      	bne.n	2a26 <_sercom_get_async_baud_val+0x1b6>
    2a22:	2340      	movs	r3, #64	; 0x40
    2a24:	e012      	b.n	2a4c <_sercom_get_async_baud_val+0x1dc>
    2a26:	2337      	movs	r3, #55	; 0x37
    2a28:	2230      	movs	r2, #48	; 0x30
    2a2a:	4694      	mov	ip, r2
    2a2c:	44bc      	add	ip, r7
    2a2e:	4463      	add	r3, ip
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	035b      	lsls	r3, r3, #13
    2a34:	1c1a      	adds	r2, r3, #0
    2a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2a38:	4313      	orrs	r3, r2
    2a3a:	66bb      	str	r3, [r7, #104]	; 0x68
    2a3c:	2300      	movs	r3, #0
    2a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    2a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2a42:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    2a44:	b29a      	uxth	r2, r3
    2a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2a48:	801a      	strh	r2, [r3, #0]
    2a4a:	2300      	movs	r3, #0
    2a4c:	1c18      	adds	r0, r3, #0
    2a4e:	46bd      	mov	sp, r7
    2a50:	b01d      	add	sp, #116	; 0x74
    2a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a54:	00004239 	.word	0x00004239
    2a58:	00002715 	.word	0x00002715
    2a5c:	00001fff 	.word	0x00001fff

00002a60 <sercom_set_gclk_generator>:
    2a60:	b580      	push	{r7, lr}
    2a62:	b084      	sub	sp, #16
    2a64:	af00      	add	r7, sp, #0
    2a66:	1c02      	adds	r2, r0, #0
    2a68:	1dfb      	adds	r3, r7, #7
    2a6a:	701a      	strb	r2, [r3, #0]
    2a6c:	1dbb      	adds	r3, r7, #6
    2a6e:	1c0a      	adds	r2, r1, #0
    2a70:	701a      	strb	r2, [r3, #0]
    2a72:	4b1a      	ldr	r3, [pc, #104]	; (2adc <sercom_set_gclk_generator+0x7c>)
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	2201      	movs	r2, #1
    2a78:	4053      	eors	r3, r2
    2a7a:	b2db      	uxtb	r3, r3
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d103      	bne.n	2a88 <sercom_set_gclk_generator+0x28>
    2a80:	1dbb      	adds	r3, r7, #6
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	2b00      	cmp	r3, #0
    2a86:	d01b      	beq.n	2ac0 <sercom_set_gclk_generator+0x60>
    2a88:	230c      	movs	r3, #12
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	1c18      	adds	r0, r3, #0
    2a8e:	4b14      	ldr	r3, [pc, #80]	; (2ae0 <sercom_set_gclk_generator+0x80>)
    2a90:	4798      	blx	r3
    2a92:	230c      	movs	r3, #12
    2a94:	18fb      	adds	r3, r7, r3
    2a96:	1dfa      	adds	r2, r7, #7
    2a98:	7812      	ldrb	r2, [r2, #0]
    2a9a:	701a      	strb	r2, [r3, #0]
    2a9c:	230c      	movs	r3, #12
    2a9e:	18fb      	adds	r3, r7, r3
    2aa0:	200c      	movs	r0, #12
    2aa2:	1c19      	adds	r1, r3, #0
    2aa4:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <sercom_set_gclk_generator+0x84>)
    2aa6:	4798      	blx	r3
    2aa8:	200c      	movs	r0, #12
    2aaa:	4b0f      	ldr	r3, [pc, #60]	; (2ae8 <sercom_set_gclk_generator+0x88>)
    2aac:	4798      	blx	r3
    2aae:	4b0b      	ldr	r3, [pc, #44]	; (2adc <sercom_set_gclk_generator+0x7c>)
    2ab0:	1dfa      	adds	r2, r7, #7
    2ab2:	7812      	ldrb	r2, [r2, #0]
    2ab4:	705a      	strb	r2, [r3, #1]
    2ab6:	4b09      	ldr	r3, [pc, #36]	; (2adc <sercom_set_gclk_generator+0x7c>)
    2ab8:	2201      	movs	r2, #1
    2aba:	701a      	strb	r2, [r3, #0]
    2abc:	2300      	movs	r3, #0
    2abe:	e008      	b.n	2ad2 <sercom_set_gclk_generator+0x72>
    2ac0:	4b06      	ldr	r3, [pc, #24]	; (2adc <sercom_set_gclk_generator+0x7c>)
    2ac2:	785b      	ldrb	r3, [r3, #1]
    2ac4:	1dfa      	adds	r2, r7, #7
    2ac6:	7812      	ldrb	r2, [r2, #0]
    2ac8:	429a      	cmp	r2, r3
    2aca:	d101      	bne.n	2ad0 <sercom_set_gclk_generator+0x70>
    2acc:	2300      	movs	r3, #0
    2ace:	e000      	b.n	2ad2 <sercom_set_gclk_generator+0x72>
    2ad0:	231d      	movs	r3, #29
    2ad2:	1c18      	adds	r0, r3, #0
    2ad4:	46bd      	mov	sp, r7
    2ad6:	b004      	add	sp, #16
    2ad8:	bd80      	pop	{r7, pc}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	2000004c 	.word	0x2000004c
    2ae0:	00002701 	.word	0x00002701
    2ae4:	00003d41 	.word	0x00003d41
    2ae8:	00003d85 	.word	0x00003d85

00002aec <_sercom_get_default_pad>:
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
    2af4:	1c0a      	adds	r2, r1, #0
    2af6:	1cfb      	adds	r3, r7, #3
    2af8:	701a      	strb	r2, [r3, #0]
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	4a4d      	ldr	r2, [pc, #308]	; (2c34 <_sercom_get_default_pad+0x148>)
    2afe:	4293      	cmp	r3, r2
    2b00:	d03f      	beq.n	2b82 <_sercom_get_default_pad+0x96>
    2b02:	4a4c      	ldr	r2, [pc, #304]	; (2c34 <_sercom_get_default_pad+0x148>)
    2b04:	4293      	cmp	r3, r2
    2b06:	d806      	bhi.n	2b16 <_sercom_get_default_pad+0x2a>
    2b08:	4a4b      	ldr	r2, [pc, #300]	; (2c38 <_sercom_get_default_pad+0x14c>)
    2b0a:	4293      	cmp	r3, r2
    2b0c:	d00f      	beq.n	2b2e <_sercom_get_default_pad+0x42>
    2b0e:	4a4b      	ldr	r2, [pc, #300]	; (2c3c <_sercom_get_default_pad+0x150>)
    2b10:	4293      	cmp	r3, r2
    2b12:	d021      	beq.n	2b58 <_sercom_get_default_pad+0x6c>
    2b14:	e089      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b16:	4a4a      	ldr	r2, [pc, #296]	; (2c40 <_sercom_get_default_pad+0x154>)
    2b18:	4293      	cmp	r3, r2
    2b1a:	d100      	bne.n	2b1e <_sercom_get_default_pad+0x32>
    2b1c:	e05b      	b.n	2bd6 <_sercom_get_default_pad+0xea>
    2b1e:	4a49      	ldr	r2, [pc, #292]	; (2c44 <_sercom_get_default_pad+0x158>)
    2b20:	4293      	cmp	r3, r2
    2b22:	d100      	bne.n	2b26 <_sercom_get_default_pad+0x3a>
    2b24:	e06c      	b.n	2c00 <_sercom_get_default_pad+0x114>
    2b26:	4a48      	ldr	r2, [pc, #288]	; (2c48 <_sercom_get_default_pad+0x15c>)
    2b28:	4293      	cmp	r3, r2
    2b2a:	d03f      	beq.n	2bac <_sercom_get_default_pad+0xc0>
    2b2c:	e07d      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b2e:	1cfb      	adds	r3, r7, #3
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	2b01      	cmp	r3, #1
    2b34:	d00a      	beq.n	2b4c <_sercom_get_default_pad+0x60>
    2b36:	dc02      	bgt.n	2b3e <_sercom_get_default_pad+0x52>
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d005      	beq.n	2b48 <_sercom_get_default_pad+0x5c>
    2b3c:	e075      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b3e:	2b02      	cmp	r3, #2
    2b40:	d006      	beq.n	2b50 <_sercom_get_default_pad+0x64>
    2b42:	2b03      	cmp	r3, #3
    2b44:	d006      	beq.n	2b54 <_sercom_get_default_pad+0x68>
    2b46:	e070      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b48:	4b40      	ldr	r3, [pc, #256]	; (2c4c <_sercom_get_default_pad+0x160>)
    2b4a:	e06f      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b4c:	4b40      	ldr	r3, [pc, #256]	; (2c50 <_sercom_get_default_pad+0x164>)
    2b4e:	e06d      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b50:	4b40      	ldr	r3, [pc, #256]	; (2c54 <_sercom_get_default_pad+0x168>)
    2b52:	e06b      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b54:	4b40      	ldr	r3, [pc, #256]	; (2c58 <_sercom_get_default_pad+0x16c>)
    2b56:	e069      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b58:	1cfb      	adds	r3, r7, #3
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	2b01      	cmp	r3, #1
    2b5e:	d00a      	beq.n	2b76 <_sercom_get_default_pad+0x8a>
    2b60:	dc02      	bgt.n	2b68 <_sercom_get_default_pad+0x7c>
    2b62:	2b00      	cmp	r3, #0
    2b64:	d005      	beq.n	2b72 <_sercom_get_default_pad+0x86>
    2b66:	e060      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b68:	2b02      	cmp	r3, #2
    2b6a:	d006      	beq.n	2b7a <_sercom_get_default_pad+0x8e>
    2b6c:	2b03      	cmp	r3, #3
    2b6e:	d006      	beq.n	2b7e <_sercom_get_default_pad+0x92>
    2b70:	e05b      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b72:	2303      	movs	r3, #3
    2b74:	e05a      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b76:	4b39      	ldr	r3, [pc, #228]	; (2c5c <_sercom_get_default_pad+0x170>)
    2b78:	e058      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b7a:	4b39      	ldr	r3, [pc, #228]	; (2c60 <_sercom_get_default_pad+0x174>)
    2b7c:	e056      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b7e:	4b39      	ldr	r3, [pc, #228]	; (2c64 <_sercom_get_default_pad+0x178>)
    2b80:	e054      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2b82:	1cfb      	adds	r3, r7, #3
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	2b01      	cmp	r3, #1
    2b88:	d00a      	beq.n	2ba0 <_sercom_get_default_pad+0xb4>
    2b8a:	dc02      	bgt.n	2b92 <_sercom_get_default_pad+0xa6>
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d005      	beq.n	2b9c <_sercom_get_default_pad+0xb0>
    2b90:	e04b      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b92:	2b02      	cmp	r3, #2
    2b94:	d006      	beq.n	2ba4 <_sercom_get_default_pad+0xb8>
    2b96:	2b03      	cmp	r3, #3
    2b98:	d006      	beq.n	2ba8 <_sercom_get_default_pad+0xbc>
    2b9a:	e046      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2b9c:	4b32      	ldr	r3, [pc, #200]	; (2c68 <_sercom_get_default_pad+0x17c>)
    2b9e:	e045      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2ba0:	4b32      	ldr	r3, [pc, #200]	; (2c6c <_sercom_get_default_pad+0x180>)
    2ba2:	e043      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2ba4:	4b32      	ldr	r3, [pc, #200]	; (2c70 <_sercom_get_default_pad+0x184>)
    2ba6:	e041      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2ba8:	4b32      	ldr	r3, [pc, #200]	; (2c74 <_sercom_get_default_pad+0x188>)
    2baa:	e03f      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bac:	1cfb      	adds	r3, r7, #3
    2bae:	781b      	ldrb	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d00a      	beq.n	2bca <_sercom_get_default_pad+0xde>
    2bb4:	dc02      	bgt.n	2bbc <_sercom_get_default_pad+0xd0>
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d005      	beq.n	2bc6 <_sercom_get_default_pad+0xda>
    2bba:	e036      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2bbc:	2b02      	cmp	r3, #2
    2bbe:	d006      	beq.n	2bce <_sercom_get_default_pad+0xe2>
    2bc0:	2b03      	cmp	r3, #3
    2bc2:	d006      	beq.n	2bd2 <_sercom_get_default_pad+0xe6>
    2bc4:	e031      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2bc6:	4b2c      	ldr	r3, [pc, #176]	; (2c78 <_sercom_get_default_pad+0x18c>)
    2bc8:	e030      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bca:	4b2c      	ldr	r3, [pc, #176]	; (2c7c <_sercom_get_default_pad+0x190>)
    2bcc:	e02e      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bce:	4b2c      	ldr	r3, [pc, #176]	; (2c80 <_sercom_get_default_pad+0x194>)
    2bd0:	e02c      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bd2:	4b2c      	ldr	r3, [pc, #176]	; (2c84 <_sercom_get_default_pad+0x198>)
    2bd4:	e02a      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bd6:	1cfb      	adds	r3, r7, #3
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	2b01      	cmp	r3, #1
    2bdc:	d00a      	beq.n	2bf4 <_sercom_get_default_pad+0x108>
    2bde:	dc02      	bgt.n	2be6 <_sercom_get_default_pad+0xfa>
    2be0:	2b00      	cmp	r3, #0
    2be2:	d005      	beq.n	2bf0 <_sercom_get_default_pad+0x104>
    2be4:	e021      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2be6:	2b02      	cmp	r3, #2
    2be8:	d006      	beq.n	2bf8 <_sercom_get_default_pad+0x10c>
    2bea:	2b03      	cmp	r3, #3
    2bec:	d006      	beq.n	2bfc <_sercom_get_default_pad+0x110>
    2bee:	e01c      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2bf0:	4b25      	ldr	r3, [pc, #148]	; (2c88 <_sercom_get_default_pad+0x19c>)
    2bf2:	e01b      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bf4:	4b25      	ldr	r3, [pc, #148]	; (2c8c <_sercom_get_default_pad+0x1a0>)
    2bf6:	e019      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bf8:	4b25      	ldr	r3, [pc, #148]	; (2c90 <_sercom_get_default_pad+0x1a4>)
    2bfa:	e017      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2bfc:	4b25      	ldr	r3, [pc, #148]	; (2c94 <_sercom_get_default_pad+0x1a8>)
    2bfe:	e015      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2c00:	1cfb      	adds	r3, r7, #3
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	2b01      	cmp	r3, #1
    2c06:	d00a      	beq.n	2c1e <_sercom_get_default_pad+0x132>
    2c08:	dc02      	bgt.n	2c10 <_sercom_get_default_pad+0x124>
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d005      	beq.n	2c1a <_sercom_get_default_pad+0x12e>
    2c0e:	e00c      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2c10:	2b02      	cmp	r3, #2
    2c12:	d006      	beq.n	2c22 <_sercom_get_default_pad+0x136>
    2c14:	2b03      	cmp	r3, #3
    2c16:	d006      	beq.n	2c26 <_sercom_get_default_pad+0x13a>
    2c18:	e007      	b.n	2c2a <_sercom_get_default_pad+0x13e>
    2c1a:	4b1f      	ldr	r3, [pc, #124]	; (2c98 <_sercom_get_default_pad+0x1ac>)
    2c1c:	e006      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2c1e:	4b1f      	ldr	r3, [pc, #124]	; (2c9c <_sercom_get_default_pad+0x1b0>)
    2c20:	e004      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2c22:	4b1f      	ldr	r3, [pc, #124]	; (2ca0 <_sercom_get_default_pad+0x1b4>)
    2c24:	e002      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2c26:	4b1f      	ldr	r3, [pc, #124]	; (2ca4 <_sercom_get_default_pad+0x1b8>)
    2c28:	e000      	b.n	2c2c <_sercom_get_default_pad+0x140>
    2c2a:	2300      	movs	r3, #0
    2c2c:	1c18      	adds	r0, r3, #0
    2c2e:	46bd      	mov	sp, r7
    2c30:	b002      	add	sp, #8
    2c32:	bd80      	pop	{r7, pc}
    2c34:	42001000 	.word	0x42001000
    2c38:	42000800 	.word	0x42000800
    2c3c:	42000c00 	.word	0x42000c00
    2c40:	42001800 	.word	0x42001800
    2c44:	42001c00 	.word	0x42001c00
    2c48:	42001400 	.word	0x42001400
    2c4c:	00040003 	.word	0x00040003
    2c50:	00050003 	.word	0x00050003
    2c54:	00060003 	.word	0x00060003
    2c58:	00070003 	.word	0x00070003
    2c5c:	00010003 	.word	0x00010003
    2c60:	001e0003 	.word	0x001e0003
    2c64:	001f0003 	.word	0x001f0003
    2c68:	00080003 	.word	0x00080003
    2c6c:	00090003 	.word	0x00090003
    2c70:	000a0003 	.word	0x000a0003
    2c74:	000b0003 	.word	0x000b0003
    2c78:	00100003 	.word	0x00100003
    2c7c:	00110003 	.word	0x00110003
    2c80:	00120003 	.word	0x00120003
    2c84:	00130003 	.word	0x00130003
    2c88:	000c0003 	.word	0x000c0003
    2c8c:	000d0003 	.word	0x000d0003
    2c90:	000e0003 	.word	0x000e0003
    2c94:	000f0003 	.word	0x000f0003
    2c98:	00160003 	.word	0x00160003
    2c9c:	00170003 	.word	0x00170003
    2ca0:	00180003 	.word	0x00180003
    2ca4:	00190003 	.word	0x00190003

00002ca8 <_sercom_get_sercom_inst_index>:
    2ca8:	b590      	push	{r4, r7, lr}
    2caa:	b08b      	sub	sp, #44	; 0x2c
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
    2cb0:	230c      	movs	r3, #12
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	4a0e      	ldr	r2, [pc, #56]	; (2cf0 <_sercom_get_sercom_inst_index+0x48>)
    2cb6:	ca13      	ldmia	r2!, {r0, r1, r4}
    2cb8:	c313      	stmia	r3!, {r0, r1, r4}
    2cba:	ca13      	ldmia	r2!, {r0, r1, r4}
    2cbc:	c313      	stmia	r3!, {r0, r1, r4}
    2cbe:	2300      	movs	r3, #0
    2cc0:	627b      	str	r3, [r7, #36]	; 0x24
    2cc2:	e00d      	b.n	2ce0 <_sercom_get_sercom_inst_index+0x38>
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	220c      	movs	r2, #12
    2cc8:	18ba      	adds	r2, r7, r2
    2cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2ccc:	0089      	lsls	r1, r1, #2
    2cce:	588a      	ldr	r2, [r1, r2]
    2cd0:	4293      	cmp	r3, r2
    2cd2:	d102      	bne.n	2cda <_sercom_get_sercom_inst_index+0x32>
    2cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cd6:	b2db      	uxtb	r3, r3
    2cd8:	e006      	b.n	2ce8 <_sercom_get_sercom_inst_index+0x40>
    2cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cdc:	3301      	adds	r3, #1
    2cde:	627b      	str	r3, [r7, #36]	; 0x24
    2ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce2:	2b05      	cmp	r3, #5
    2ce4:	d9ee      	bls.n	2cc4 <_sercom_get_sercom_inst_index+0x1c>
    2ce6:	2300      	movs	r3, #0
    2ce8:	1c18      	adds	r0, r3, #0
    2cea:	46bd      	mov	sp, r7
    2cec:	b00b      	add	sp, #44	; 0x2c
    2cee:	bd90      	pop	{r4, r7, pc}
    2cf0:	000044f0 	.word	0x000044f0

00002cf4 <system_gclk_chan_get_config_defaults>:
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	6078      	str	r0, [r7, #4]
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	2200      	movs	r2, #0
    2d00:	701a      	strb	r2, [r3, #0]
    2d02:	46bd      	mov	sp, r7
    2d04:	b002      	add	sp, #8
    2d06:	bd80      	pop	{r7, pc}

00002d08 <system_apb_clock_set_mask>:
    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	1c02      	adds	r2, r0, #0
    2d10:	6039      	str	r1, [r7, #0]
    2d12:	1dfb      	adds	r3, r7, #7
    2d14:	701a      	strb	r2, [r3, #0]
    2d16:	1dfb      	adds	r3, r7, #7
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	2b01      	cmp	r3, #1
    2d1c:	d00a      	beq.n	2d34 <system_apb_clock_set_mask+0x2c>
    2d1e:	2b02      	cmp	r3, #2
    2d20:	d00f      	beq.n	2d42 <system_apb_clock_set_mask+0x3a>
    2d22:	2b00      	cmp	r3, #0
    2d24:	d114      	bne.n	2d50 <system_apb_clock_set_mask+0x48>
    2d26:	4b0e      	ldr	r3, [pc, #56]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d28:	4a0d      	ldr	r2, [pc, #52]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d2a:	6991      	ldr	r1, [r2, #24]
    2d2c:	683a      	ldr	r2, [r7, #0]
    2d2e:	430a      	orrs	r2, r1
    2d30:	619a      	str	r2, [r3, #24]
    2d32:	e00f      	b.n	2d54 <system_apb_clock_set_mask+0x4c>
    2d34:	4b0a      	ldr	r3, [pc, #40]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d36:	4a0a      	ldr	r2, [pc, #40]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d38:	69d1      	ldr	r1, [r2, #28]
    2d3a:	683a      	ldr	r2, [r7, #0]
    2d3c:	430a      	orrs	r2, r1
    2d3e:	61da      	str	r2, [r3, #28]
    2d40:	e008      	b.n	2d54 <system_apb_clock_set_mask+0x4c>
    2d42:	4b07      	ldr	r3, [pc, #28]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d44:	4a06      	ldr	r2, [pc, #24]	; (2d60 <system_apb_clock_set_mask+0x58>)
    2d46:	6a11      	ldr	r1, [r2, #32]
    2d48:	683a      	ldr	r2, [r7, #0]
    2d4a:	430a      	orrs	r2, r1
    2d4c:	621a      	str	r2, [r3, #32]
    2d4e:	e001      	b.n	2d54 <system_apb_clock_set_mask+0x4c>
    2d50:	2317      	movs	r3, #23
    2d52:	e000      	b.n	2d56 <system_apb_clock_set_mask+0x4e>
    2d54:	2300      	movs	r3, #0
    2d56:	1c18      	adds	r0, r3, #0
    2d58:	46bd      	mov	sp, r7
    2d5a:	b002      	add	sp, #8
    2d5c:	bd80      	pop	{r7, pc}
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	40000400 	.word	0x40000400

00002d64 <system_pinmux_get_config_defaults>:
    2d64:	b580      	push	{r7, lr}
    2d66:	b082      	sub	sp, #8
    2d68:	af00      	add	r7, sp, #0
    2d6a:	6078      	str	r0, [r7, #4]
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	2280      	movs	r2, #128	; 0x80
    2d70:	701a      	strb	r2, [r3, #0]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	2200      	movs	r2, #0
    2d76:	705a      	strb	r2, [r3, #1]
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	2201      	movs	r2, #1
    2d7c:	709a      	strb	r2, [r3, #2]
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	2200      	movs	r2, #0
    2d82:	70da      	strb	r2, [r3, #3]
    2d84:	46bd      	mov	sp, r7
    2d86:	b002      	add	sp, #8
    2d88:	bd80      	pop	{r7, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)

00002d8c <system_is_debugger_present>:
    2d8c:	b580      	push	{r7, lr}
    2d8e:	af00      	add	r7, sp, #0
    2d90:	4b05      	ldr	r3, [pc, #20]	; (2da8 <system_is_debugger_present+0x1c>)
    2d92:	789b      	ldrb	r3, [r3, #2]
    2d94:	b2db      	uxtb	r3, r3
    2d96:	1c1a      	adds	r2, r3, #0
    2d98:	2302      	movs	r3, #2
    2d9a:	4013      	ands	r3, r2
    2d9c:	1e5a      	subs	r2, r3, #1
    2d9e:	4193      	sbcs	r3, r2
    2da0:	b2db      	uxtb	r3, r3
    2da2:	1c18      	adds	r0, r3, #0
    2da4:	46bd      	mov	sp, r7
    2da6:	bd80      	pop	{r7, pc}
    2da8:	41002000 	.word	0x41002000

00002dac <usart_is_syncing>:
    2dac:	b580      	push	{r7, lr}
    2dae:	b084      	sub	sp, #16
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	60fb      	str	r3, [r7, #12]
    2dba:	68fb      	ldr	r3, [r7, #12]
    2dbc:	8a1b      	ldrh	r3, [r3, #16]
    2dbe:	b29b      	uxth	r3, r3
    2dc0:	1c1a      	adds	r2, r3, #0
    2dc2:	2380      	movs	r3, #128	; 0x80
    2dc4:	021b      	lsls	r3, r3, #8
    2dc6:	4013      	ands	r3, r2
    2dc8:	1e5a      	subs	r2, r3, #1
    2dca:	4193      	sbcs	r3, r2
    2dcc:	b2db      	uxtb	r3, r3
    2dce:	1c18      	adds	r0, r3, #0
    2dd0:	46bd      	mov	sp, r7
    2dd2:	b004      	add	sp, #16
    2dd4:	bd80      	pop	{r7, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)

00002dd8 <_usart_wait_for_sync>:
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	46c0      	nop			; (mov r8, r8)
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	1c18      	adds	r0, r3, #0
    2de6:	4b03      	ldr	r3, [pc, #12]	; (2df4 <_usart_wait_for_sync+0x1c>)
    2de8:	4798      	blx	r3
    2dea:	1e03      	subs	r3, r0, #0
    2dec:	d1f9      	bne.n	2de2 <_usart_wait_for_sync+0xa>
    2dee:	46bd      	mov	sp, r7
    2df0:	b002      	add	sp, #8
    2df2:	bd80      	pop	{r7, pc}
    2df4:	00002dad 	.word	0x00002dad

00002df8 <_usart_set_config>:
    2df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfa:	b08d      	sub	sp, #52	; 0x34
    2dfc:	af02      	add	r7, sp, #8
    2dfe:	6078      	str	r0, [r7, #4]
    2e00:	6039      	str	r1, [r7, #0]
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	61bb      	str	r3, [r7, #24]
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	1c18      	adds	r0, r3, #0
    2e0e:	4b6e      	ldr	r3, [pc, #440]	; (2fc8 <_usart_set_config+0x1d0>)
    2e10:	4798      	blx	r3
    2e12:	1c03      	adds	r3, r0, #0
    2e14:	617b      	str	r3, [r7, #20]
    2e16:	697b      	ldr	r3, [r7, #20]
    2e18:	330d      	adds	r3, #13
    2e1a:	613b      	str	r3, [r7, #16]
    2e1c:	2300      	movs	r3, #0
    2e1e:	627b      	str	r3, [r7, #36]	; 0x24
    2e20:	2300      	movs	r3, #0
    2e22:	623b      	str	r3, [r7, #32]
    2e24:	230c      	movs	r3, #12
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	2200      	movs	r2, #0
    2e2a:	801a      	strh	r2, [r3, #0]
    2e2c:	230f      	movs	r3, #15
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	2200      	movs	r2, #0
    2e32:	701a      	strb	r2, [r3, #0]
    2e34:	230e      	movs	r3, #14
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	2210      	movs	r2, #16
    2e3a:	701a      	strb	r2, [r3, #0]
    2e3c:	683b      	ldr	r3, [r7, #0]
    2e3e:	681a      	ldr	r2, [r3, #0]
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	68db      	ldr	r3, [r3, #12]
    2e44:	4313      	orrs	r3, r2
    2e46:	683a      	ldr	r2, [r7, #0]
    2e48:	7d92      	ldrb	r2, [r2, #22]
    2e4a:	0752      	lsls	r2, r2, #29
    2e4c:	4313      	orrs	r3, r2
    2e4e:	627b      	str	r3, [r7, #36]	; 0x24
    2e50:	231f      	movs	r3, #31
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	2200      	movs	r2, #0
    2e56:	701a      	strb	r2, [r3, #0]
    2e58:	683b      	ldr	r3, [r7, #0]
    2e5a:	685b      	ldr	r3, [r3, #4]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d01f      	beq.n	2ea0 <_usart_set_config+0xa8>
    2e60:	2280      	movs	r2, #128	; 0x80
    2e62:	0552      	lsls	r2, r2, #21
    2e64:	4293      	cmp	r3, r2
    2e66:	d14e      	bne.n	2f06 <_usart_set_config+0x10e>
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	7ddb      	ldrb	r3, [r3, #23]
    2e6c:	2201      	movs	r2, #1
    2e6e:	4053      	eors	r3, r2
    2e70:	b2db      	uxtb	r3, r3
    2e72:	2b00      	cmp	r3, #0
    2e74:	d013      	beq.n	2e9e <_usart_set_config+0xa6>
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	691d      	ldr	r5, [r3, #16]
    2e7a:	693b      	ldr	r3, [r7, #16]
    2e7c:	b2db      	uxtb	r3, r3
    2e7e:	1c18      	adds	r0, r3, #0
    2e80:	4b52      	ldr	r3, [pc, #328]	; (2fcc <_usart_set_config+0x1d4>)
    2e82:	4798      	blx	r3
    2e84:	1c02      	adds	r2, r0, #0
    2e86:	231f      	movs	r3, #31
    2e88:	18fc      	adds	r4, r7, r3
    2e8a:	230c      	movs	r3, #12
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	1c28      	adds	r0, r5, #0
    2e90:	1c11      	adds	r1, r2, #0
    2e92:	1c1a      	adds	r2, r3, #0
    2e94:	4b4e      	ldr	r3, [pc, #312]	; (2fd0 <_usart_set_config+0x1d8>)
    2e96:	4798      	blx	r3
    2e98:	1c03      	adds	r3, r0, #0
    2e9a:	7023      	strb	r3, [r4, #0]
    2e9c:	e033      	b.n	2f06 <_usart_set_config+0x10e>
    2e9e:	e032      	b.n	2f06 <_usart_set_config+0x10e>
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	7ddb      	ldrb	r3, [r3, #23]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d014      	beq.n	2ed2 <_usart_set_config+0xda>
    2ea8:	683b      	ldr	r3, [r7, #0]
    2eaa:	6918      	ldr	r0, [r3, #16]
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	6999      	ldr	r1, [r3, #24]
    2eb0:	231f      	movs	r3, #31
    2eb2:	18fc      	adds	r4, r7, r3
    2eb4:	230c      	movs	r3, #12
    2eb6:	18fa      	adds	r2, r7, r3
    2eb8:	230f      	movs	r3, #15
    2eba:	18fb      	adds	r3, r7, r3
    2ebc:	781d      	ldrb	r5, [r3, #0]
    2ebe:	230e      	movs	r3, #14
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	781b      	ldrb	r3, [r3, #0]
    2ec4:	9300      	str	r3, [sp, #0]
    2ec6:	1c2b      	adds	r3, r5, #0
    2ec8:	4d42      	ldr	r5, [pc, #264]	; (2fd4 <_usart_set_config+0x1dc>)
    2eca:	47a8      	blx	r5
    2ecc:	1c03      	adds	r3, r0, #0
    2ece:	7023      	strb	r3, [r4, #0]
    2ed0:	e018      	b.n	2f04 <_usart_set_config+0x10c>
    2ed2:	683b      	ldr	r3, [r7, #0]
    2ed4:	691e      	ldr	r6, [r3, #16]
    2ed6:	693b      	ldr	r3, [r7, #16]
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	1c18      	adds	r0, r3, #0
    2edc:	4b3b      	ldr	r3, [pc, #236]	; (2fcc <_usart_set_config+0x1d4>)
    2ede:	4798      	blx	r3
    2ee0:	1c01      	adds	r1, r0, #0
    2ee2:	231f      	movs	r3, #31
    2ee4:	18fc      	adds	r4, r7, r3
    2ee6:	230c      	movs	r3, #12
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	230f      	movs	r3, #15
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	781d      	ldrb	r5, [r3, #0]
    2ef0:	230e      	movs	r3, #14
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	9300      	str	r3, [sp, #0]
    2ef8:	1c30      	adds	r0, r6, #0
    2efa:	1c2b      	adds	r3, r5, #0
    2efc:	4d35      	ldr	r5, [pc, #212]	; (2fd4 <_usart_set_config+0x1dc>)
    2efe:	47a8      	blx	r5
    2f00:	1c03      	adds	r3, r0, #0
    2f02:	7023      	strb	r3, [r4, #0]
    2f04:	46c0      	nop			; (mov r8, r8)
    2f06:	231f      	movs	r3, #31
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d003      	beq.n	2f18 <_usart_set_config+0x120>
    2f10:	231f      	movs	r3, #31
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	e052      	b.n	2fbe <_usart_set_config+0x1c6>
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	1c18      	adds	r0, r3, #0
    2f1c:	4b2e      	ldr	r3, [pc, #184]	; (2fd8 <_usart_set_config+0x1e0>)
    2f1e:	4798      	blx	r3
    2f20:	230c      	movs	r3, #12
    2f22:	18fb      	adds	r3, r7, r3
    2f24:	881a      	ldrh	r2, [r3, #0]
    2f26:	69bb      	ldr	r3, [r7, #24]
    2f28:	815a      	strh	r2, [r3, #10]
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	685b      	ldr	r3, [r3, #4]
    2f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f30:	4313      	orrs	r3, r2
    2f32:	627b      	str	r3, [r7, #36]	; 0x24
    2f34:	683b      	ldr	r3, [r7, #0]
    2f36:	7ddb      	ldrb	r3, [r3, #23]
    2f38:	2201      	movs	r2, #1
    2f3a:	4053      	eors	r3, r2
    2f3c:	b2db      	uxtb	r3, r3
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d003      	beq.n	2f4a <_usart_set_config+0x152>
    2f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f44:	2204      	movs	r2, #4
    2f46:	4313      	orrs	r3, r2
    2f48:	627b      	str	r3, [r7, #36]	; 0x24
    2f4a:	683b      	ldr	r3, [r7, #0]
    2f4c:	7a9a      	ldrb	r2, [r3, #10]
    2f4e:	683b      	ldr	r3, [r7, #0]
    2f50:	7adb      	ldrb	r3, [r3, #11]
    2f52:	4313      	orrs	r3, r2
    2f54:	b2db      	uxtb	r3, r3
    2f56:	1c1a      	adds	r2, r3, #0
    2f58:	683b      	ldr	r3, [r7, #0]
    2f5a:	7d1b      	ldrb	r3, [r3, #20]
    2f5c:	045b      	lsls	r3, r3, #17
    2f5e:	4313      	orrs	r3, r2
    2f60:	683a      	ldr	r2, [r7, #0]
    2f62:	7d52      	ldrb	r2, [r2, #21]
    2f64:	0412      	lsls	r2, r2, #16
    2f66:	4313      	orrs	r3, r2
    2f68:	623b      	str	r3, [r7, #32]
    2f6a:	683b      	ldr	r3, [r7, #0]
    2f6c:	891b      	ldrh	r3, [r3, #8]
    2f6e:	2bff      	cmp	r3, #255	; 0xff
    2f70:	d00a      	beq.n	2f88 <_usart_set_config+0x190>
    2f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f74:	2280      	movs	r2, #128	; 0x80
    2f76:	0452      	lsls	r2, r2, #17
    2f78:	4313      	orrs	r3, r2
    2f7a:	627b      	str	r3, [r7, #36]	; 0x24
    2f7c:	683b      	ldr	r3, [r7, #0]
    2f7e:	891b      	ldrh	r3, [r3, #8]
    2f80:	1c1a      	adds	r2, r3, #0
    2f82:	6a3b      	ldr	r3, [r7, #32]
    2f84:	4313      	orrs	r3, r2
    2f86:	623b      	str	r3, [r7, #32]
    2f88:	683b      	ldr	r3, [r7, #0]
    2f8a:	7f1b      	ldrb	r3, [r3, #28]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d103      	bne.n	2f98 <_usart_set_config+0x1a0>
    2f90:	4b12      	ldr	r3, [pc, #72]	; (2fdc <_usart_set_config+0x1e4>)
    2f92:	4798      	blx	r3
    2f94:	1e03      	subs	r3, r0, #0
    2f96:	d003      	beq.n	2fa0 <_usart_set_config+0x1a8>
    2f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f9a:	2280      	movs	r2, #128	; 0x80
    2f9c:	4313      	orrs	r3, r2
    2f9e:	627b      	str	r3, [r7, #36]	; 0x24
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	1c18      	adds	r0, r3, #0
    2fa4:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <_usart_set_config+0x1e0>)
    2fa6:	4798      	blx	r3
    2fa8:	69bb      	ldr	r3, [r7, #24]
    2faa:	6a3a      	ldr	r2, [r7, #32]
    2fac:	605a      	str	r2, [r3, #4]
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	1c18      	adds	r0, r3, #0
    2fb2:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <_usart_set_config+0x1e0>)
    2fb4:	4798      	blx	r3
    2fb6:	69bb      	ldr	r3, [r7, #24]
    2fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2fba:	601a      	str	r2, [r3, #0]
    2fbc:	2300      	movs	r3, #0
    2fbe:	1c18      	adds	r0, r3, #0
    2fc0:	46bd      	mov	sp, r7
    2fc2:	b00b      	add	sp, #44	; 0x2c
    2fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00002ca9 	.word	0x00002ca9
    2fcc:	00003e65 	.word	0x00003e65
    2fd0:	000027f5 	.word	0x000027f5
    2fd4:	00002871 	.word	0x00002871
    2fd8:	00002dd9 	.word	0x00002dd9
    2fdc:	00002d8d 	.word	0x00002d8d

00002fe0 <usart_init>:
    2fe0:	b590      	push	{r4, r7, lr}
    2fe2:	b093      	sub	sp, #76	; 0x4c
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	60f8      	str	r0, [r7, #12]
    2fe8:	60b9      	str	r1, [r7, #8]
    2fea:	607a      	str	r2, [r7, #4]
    2fec:	233b      	movs	r3, #59	; 0x3b
    2fee:	18fb      	adds	r3, r7, r3
    2ff0:	2200      	movs	r2, #0
    2ff2:	701a      	strb	r2, [r3, #0]
    2ff4:	68fb      	ldr	r3, [r7, #12]
    2ff6:	68ba      	ldr	r2, [r7, #8]
    2ff8:	601a      	str	r2, [r3, #0]
    2ffa:	68fb      	ldr	r3, [r7, #12]
    2ffc:	681b      	ldr	r3, [r3, #0]
    2ffe:	637b      	str	r3, [r7, #52]	; 0x34
    3000:	68fb      	ldr	r3, [r7, #12]
    3002:	681b      	ldr	r3, [r3, #0]
    3004:	1c18      	adds	r0, r3, #0
    3006:	4b7f      	ldr	r3, [pc, #508]	; (3204 <usart_init+0x224>)
    3008:	4798      	blx	r3
    300a:	1c03      	adds	r3, r0, #0
    300c:	633b      	str	r3, [r7, #48]	; 0x30
    300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3010:	3302      	adds	r3, #2
    3012:	62fb      	str	r3, [r7, #44]	; 0x2c
    3014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3016:	330d      	adds	r3, #13
    3018:	62bb      	str	r3, [r7, #40]	; 0x28
    301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	2201      	movs	r2, #1
    3020:	4013      	ands	r3, r2
    3022:	d001      	beq.n	3028 <usart_init+0x48>
    3024:	2305      	movs	r3, #5
    3026:	e0e8      	b.n	31fa <usart_init+0x21a>
    3028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    302a:	681b      	ldr	r3, [r3, #0]
    302c:	2202      	movs	r2, #2
    302e:	4013      	ands	r3, r2
    3030:	d001      	beq.n	3036 <usart_init+0x56>
    3032:	231c      	movs	r3, #28
    3034:	e0e1      	b.n	31fa <usart_init+0x21a>
    3036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3038:	2201      	movs	r2, #1
    303a:	409a      	lsls	r2, r3
    303c:	1c13      	adds	r3, r2, #0
    303e:	2002      	movs	r0, #2
    3040:	1c19      	adds	r1, r3, #0
    3042:	4b71      	ldr	r3, [pc, #452]	; (3208 <usart_init+0x228>)
    3044:	4798      	blx	r3
    3046:	2324      	movs	r3, #36	; 0x24
    3048:	18fb      	adds	r3, r7, r3
    304a:	1c18      	adds	r0, r3, #0
    304c:	4b6f      	ldr	r3, [pc, #444]	; (320c <usart_init+0x22c>)
    304e:	4798      	blx	r3
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	7f5a      	ldrb	r2, [r3, #29]
    3054:	2324      	movs	r3, #36	; 0x24
    3056:	18fb      	adds	r3, r7, r3
    3058:	701a      	strb	r2, [r3, #0]
    305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    305c:	b2da      	uxtb	r2, r3
    305e:	2324      	movs	r3, #36	; 0x24
    3060:	18fb      	adds	r3, r7, r3
    3062:	1c10      	adds	r0, r2, #0
    3064:	1c19      	adds	r1, r3, #0
    3066:	4b6a      	ldr	r3, [pc, #424]	; (3210 <usart_init+0x230>)
    3068:	4798      	blx	r3
    306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    306c:	b2db      	uxtb	r3, r3
    306e:	1c18      	adds	r0, r3, #0
    3070:	4b68      	ldr	r3, [pc, #416]	; (3214 <usart_init+0x234>)
    3072:	4798      	blx	r3
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	7f5b      	ldrb	r3, [r3, #29]
    3078:	1c18      	adds	r0, r3, #0
    307a:	2100      	movs	r1, #0
    307c:	4b66      	ldr	r3, [pc, #408]	; (3218 <usart_init+0x238>)
    307e:	4798      	blx	r3
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	7ada      	ldrb	r2, [r3, #11]
    3084:	68fb      	ldr	r3, [r7, #12]
    3086:	715a      	strb	r2, [r3, #5]
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	7d1a      	ldrb	r2, [r3, #20]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	719a      	strb	r2, [r3, #6]
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	7d5a      	ldrb	r2, [r3, #21]
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	71da      	strb	r2, [r3, #7]
    3098:	233b      	movs	r3, #59	; 0x3b
    309a:	18fc      	adds	r4, r7, r3
    309c:	68fa      	ldr	r2, [r7, #12]
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	1c10      	adds	r0, r2, #0
    30a2:	1c19      	adds	r1, r3, #0
    30a4:	4b5d      	ldr	r3, [pc, #372]	; (321c <usart_init+0x23c>)
    30a6:	4798      	blx	r3
    30a8:	1c03      	adds	r3, r0, #0
    30aa:	7023      	strb	r3, [r4, #0]
    30ac:	233b      	movs	r3, #59	; 0x3b
    30ae:	18fb      	adds	r3, r7, r3
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d003      	beq.n	30be <usart_init+0xde>
    30b6:	233b      	movs	r3, #59	; 0x3b
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	781b      	ldrb	r3, [r3, #0]
    30bc:	e09d      	b.n	31fa <usart_init+0x21a>
    30be:	2320      	movs	r3, #32
    30c0:	18fb      	adds	r3, r7, r3
    30c2:	1c18      	adds	r0, r3, #0
    30c4:	4b56      	ldr	r3, [pc, #344]	; (3220 <usart_init+0x240>)
    30c6:	4798      	blx	r3
    30c8:	2320      	movs	r3, #32
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	2200      	movs	r2, #0
    30ce:	705a      	strb	r2, [r3, #1]
    30d0:	2320      	movs	r3, #32
    30d2:	18fb      	adds	r3, r7, r3
    30d4:	2200      	movs	r2, #0
    30d6:	709a      	strb	r2, [r3, #2]
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	6a1a      	ldr	r2, [r3, #32]
    30dc:	2310      	movs	r3, #16
    30de:	18fb      	adds	r3, r7, r3
    30e0:	601a      	str	r2, [r3, #0]
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    30e6:	2310      	movs	r3, #16
    30e8:	18fb      	adds	r3, r7, r3
    30ea:	605a      	str	r2, [r3, #4]
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30f0:	2310      	movs	r3, #16
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	609a      	str	r2, [r3, #8]
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30fa:	2310      	movs	r3, #16
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	60da      	str	r2, [r3, #12]
    3100:	2347      	movs	r3, #71	; 0x47
    3102:	18fb      	adds	r3, r7, r3
    3104:	2200      	movs	r2, #0
    3106:	701a      	strb	r2, [r3, #0]
    3108:	e02c      	b.n	3164 <usart_init+0x184>
    310a:	2347      	movs	r3, #71	; 0x47
    310c:	18fb      	adds	r3, r7, r3
    310e:	781a      	ldrb	r2, [r3, #0]
    3110:	2310      	movs	r3, #16
    3112:	18fb      	adds	r3, r7, r3
    3114:	0092      	lsls	r2, r2, #2
    3116:	58d3      	ldr	r3, [r2, r3]
    3118:	643b      	str	r3, [r7, #64]	; 0x40
    311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    311c:	2b00      	cmp	r3, #0
    311e:	d109      	bne.n	3134 <usart_init+0x154>
    3120:	68ba      	ldr	r2, [r7, #8]
    3122:	2347      	movs	r3, #71	; 0x47
    3124:	18fb      	adds	r3, r7, r3
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	1c10      	adds	r0, r2, #0
    312a:	1c19      	adds	r1, r3, #0
    312c:	4b3d      	ldr	r3, [pc, #244]	; (3224 <usart_init+0x244>)
    312e:	4798      	blx	r3
    3130:	1c03      	adds	r3, r0, #0
    3132:	643b      	str	r3, [r7, #64]	; 0x40
    3134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3136:	3301      	adds	r3, #1
    3138:	d00d      	beq.n	3156 <usart_init+0x176>
    313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    313c:	b2da      	uxtb	r2, r3
    313e:	2320      	movs	r3, #32
    3140:	18fb      	adds	r3, r7, r3
    3142:	701a      	strb	r2, [r3, #0]
    3144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3146:	0c1b      	lsrs	r3, r3, #16
    3148:	b2da      	uxtb	r2, r3
    314a:	2320      	movs	r3, #32
    314c:	18fb      	adds	r3, r7, r3
    314e:	1c10      	adds	r0, r2, #0
    3150:	1c19      	adds	r1, r3, #0
    3152:	4b35      	ldr	r3, [pc, #212]	; (3228 <usart_init+0x248>)
    3154:	4798      	blx	r3
    3156:	2347      	movs	r3, #71	; 0x47
    3158:	18fb      	adds	r3, r7, r3
    315a:	781a      	ldrb	r2, [r3, #0]
    315c:	2347      	movs	r3, #71	; 0x47
    315e:	18fb      	adds	r3, r7, r3
    3160:	3201      	adds	r2, #1
    3162:	701a      	strb	r2, [r3, #0]
    3164:	2347      	movs	r3, #71	; 0x47
    3166:	18fb      	adds	r3, r7, r3
    3168:	781b      	ldrb	r3, [r3, #0]
    316a:	2b03      	cmp	r3, #3
    316c:	d9cd      	bls.n	310a <usart_init+0x12a>
    316e:	2300      	movs	r3, #0
    3170:	63fb      	str	r3, [r7, #60]	; 0x3c
    3172:	e008      	b.n	3186 <usart_init+0x1a6>
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3178:	3202      	adds	r2, #2
    317a:	0092      	lsls	r2, r2, #2
    317c:	2100      	movs	r1, #0
    317e:	50d1      	str	r1, [r2, r3]
    3180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3182:	3301      	adds	r3, #1
    3184:	63fb      	str	r3, [r7, #60]	; 0x3c
    3186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3188:	2b02      	cmp	r3, #2
    318a:	d9f3      	bls.n	3174 <usart_init+0x194>
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	2200      	movs	r2, #0
    3190:	619a      	str	r2, [r3, #24]
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	2200      	movs	r2, #0
    3196:	615a      	str	r2, [r3, #20]
    3198:	68fb      	ldr	r3, [r7, #12]
    319a:	2200      	movs	r2, #0
    319c:	83da      	strh	r2, [r3, #30]
    319e:	68fb      	ldr	r3, [r7, #12]
    31a0:	2200      	movs	r2, #0
    31a2:	839a      	strh	r2, [r3, #28]
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	2220      	movs	r2, #32
    31a8:	2100      	movs	r1, #0
    31aa:	5499      	strb	r1, [r3, r2]
    31ac:	68fb      	ldr	r3, [r7, #12]
    31ae:	2221      	movs	r2, #33	; 0x21
    31b0:	2100      	movs	r1, #0
    31b2:	5499      	strb	r1, [r3, r2]
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	2222      	movs	r2, #34	; 0x22
    31b8:	2100      	movs	r1, #0
    31ba:	5499      	strb	r1, [r3, r2]
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	2223      	movs	r2, #35	; 0x23
    31c0:	2100      	movs	r1, #0
    31c2:	5499      	strb	r1, [r3, r2]
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	681b      	ldr	r3, [r3, #0]
    31c8:	2227      	movs	r2, #39	; 0x27
    31ca:	18bc      	adds	r4, r7, r2
    31cc:	1c18      	adds	r0, r3, #0
    31ce:	4b0d      	ldr	r3, [pc, #52]	; (3204 <usart_init+0x224>)
    31d0:	4798      	blx	r3
    31d2:	1c03      	adds	r3, r0, #0
    31d4:	7023      	strb	r3, [r4, #0]
    31d6:	2327      	movs	r3, #39	; 0x27
    31d8:	18fb      	adds	r3, r7, r3
    31da:	781a      	ldrb	r2, [r3, #0]
    31dc:	4b13      	ldr	r3, [pc, #76]	; (322c <usart_init+0x24c>)
    31de:	1c10      	adds	r0, r2, #0
    31e0:	1c19      	adds	r1, r3, #0
    31e2:	4b13      	ldr	r3, [pc, #76]	; (3230 <usart_init+0x250>)
    31e4:	4798      	blx	r3
    31e6:	2327      	movs	r3, #39	; 0x27
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781a      	ldrb	r2, [r3, #0]
    31ec:	4b11      	ldr	r3, [pc, #68]	; (3234 <usart_init+0x254>)
    31ee:	0092      	lsls	r2, r2, #2
    31f0:	68f9      	ldr	r1, [r7, #12]
    31f2:	50d1      	str	r1, [r2, r3]
    31f4:	233b      	movs	r3, #59	; 0x3b
    31f6:	18fb      	adds	r3, r7, r3
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	1c18      	adds	r0, r3, #0
    31fc:	46bd      	mov	sp, r7
    31fe:	b013      	add	sp, #76	; 0x4c
    3200:	bd90      	pop	{r4, r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00002ca9 	.word	0x00002ca9
    3208:	00002d09 	.word	0x00002d09
    320c:	00002cf5 	.word	0x00002cf5
    3210:	00003d41 	.word	0x00003d41
    3214:	00003d85 	.word	0x00003d85
    3218:	00002a61 	.word	0x00002a61
    321c:	00002df9 	.word	0x00002df9
    3220:	00002d65 	.word	0x00002d65
    3224:	00002aed 	.word	0x00002aed
    3228:	0000402d 	.word	0x0000402d
    322c:	00000ded 	.word	0x00000ded
    3230:	000019d5 	.word	0x000019d5
    3234:	20000368 	.word	0x20000368

00003238 <usart_write_wait>:
    3238:	b580      	push	{r7, lr}
    323a:	b084      	sub	sp, #16
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
    3240:	1c0a      	adds	r2, r1, #0
    3242:	1cbb      	adds	r3, r7, #2
    3244:	801a      	strh	r2, [r3, #0]
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	681b      	ldr	r3, [r3, #0]
    324a:	60fb      	str	r3, [r7, #12]
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	79db      	ldrb	r3, [r3, #7]
    3250:	2201      	movs	r2, #1
    3252:	4053      	eors	r3, r2
    3254:	b2db      	uxtb	r3, r3
    3256:	2b00      	cmp	r3, #0
    3258:	d001      	beq.n	325e <usart_write_wait+0x26>
    325a:	231c      	movs	r3, #28
    325c:	e017      	b.n	328e <usart_write_wait+0x56>
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	8bdb      	ldrh	r3, [r3, #30]
    3262:	b29b      	uxth	r3, r3
    3264:	2b00      	cmp	r3, #0
    3266:	d001      	beq.n	326c <usart_write_wait+0x34>
    3268:	2305      	movs	r3, #5
    326a:	e010      	b.n	328e <usart_write_wait+0x56>
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	1c18      	adds	r0, r3, #0
    3270:	4b09      	ldr	r3, [pc, #36]	; (3298 <usart_write_wait+0x60>)
    3272:	4798      	blx	r3
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	1cba      	adds	r2, r7, #2
    3278:	8812      	ldrh	r2, [r2, #0]
    327a:	831a      	strh	r2, [r3, #24]
    327c:	46c0      	nop			; (mov r8, r8)
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	7b9b      	ldrb	r3, [r3, #14]
    3282:	b2db      	uxtb	r3, r3
    3284:	1c1a      	adds	r2, r3, #0
    3286:	2302      	movs	r3, #2
    3288:	4013      	ands	r3, r2
    328a:	d0f8      	beq.n	327e <usart_write_wait+0x46>
    328c:	2300      	movs	r3, #0
    328e:	1c18      	adds	r0, r3, #0
    3290:	46bd      	mov	sp, r7
    3292:	b004      	add	sp, #16
    3294:	bd80      	pop	{r7, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	00002dd9 	.word	0x00002dd9

0000329c <usart_write_buffer_wait>:
    329c:	b580      	push	{r7, lr}
    329e:	b08a      	sub	sp, #40	; 0x28
    32a0:	af00      	add	r7, sp, #0
    32a2:	60f8      	str	r0, [r7, #12]
    32a4:	60b9      	str	r1, [r7, #8]
    32a6:	1dbb      	adds	r3, r7, #6
    32a8:	801a      	strh	r2, [r3, #0]
    32aa:	1dbb      	adds	r3, r7, #6
    32ac:	881b      	ldrh	r3, [r3, #0]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d101      	bne.n	32b6 <usart_write_buffer_wait+0x1a>
    32b2:	2317      	movs	r3, #23
    32b4:	e07b      	b.n	33ae <usart_write_buffer_wait+0x112>
    32b6:	68fb      	ldr	r3, [r7, #12]
    32b8:	79db      	ldrb	r3, [r3, #7]
    32ba:	2201      	movs	r2, #1
    32bc:	4053      	eors	r3, r2
    32be:	b2db      	uxtb	r3, r3
    32c0:	2b00      	cmp	r3, #0
    32c2:	d001      	beq.n	32c8 <usart_write_buffer_wait+0x2c>
    32c4:	231c      	movs	r3, #28
    32c6:	e072      	b.n	33ae <usart_write_buffer_wait+0x112>
    32c8:	68fb      	ldr	r3, [r7, #12]
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	617b      	str	r3, [r7, #20]
    32ce:	68fb      	ldr	r3, [r7, #12]
    32d0:	1c18      	adds	r0, r3, #0
    32d2:	4b39      	ldr	r3, [pc, #228]	; (33b8 <usart_write_buffer_wait+0x11c>)
    32d4:	4798      	blx	r3
    32d6:	2326      	movs	r3, #38	; 0x26
    32d8:	18fb      	adds	r3, r7, r3
    32da:	2200      	movs	r2, #0
    32dc:	801a      	strh	r2, [r3, #0]
    32de:	e046      	b.n	336e <usart_write_buffer_wait+0xd2>
    32e0:	2300      	movs	r3, #0
    32e2:	623b      	str	r3, [r7, #32]
    32e4:	e010      	b.n	3308 <usart_write_buffer_wait+0x6c>
    32e6:	697b      	ldr	r3, [r7, #20]
    32e8:	7b9b      	ldrb	r3, [r3, #14]
    32ea:	b2db      	uxtb	r3, r3
    32ec:	1c1a      	adds	r2, r3, #0
    32ee:	2301      	movs	r3, #1
    32f0:	4013      	ands	r3, r2
    32f2:	d000      	beq.n	32f6 <usart_write_buffer_wait+0x5a>
    32f4:	e00c      	b.n	3310 <usart_write_buffer_wait+0x74>
    32f6:	6a3b      	ldr	r3, [r7, #32]
    32f8:	4a30      	ldr	r2, [pc, #192]	; (33bc <usart_write_buffer_wait+0x120>)
    32fa:	4293      	cmp	r3, r2
    32fc:	d101      	bne.n	3302 <usart_write_buffer_wait+0x66>
    32fe:	2312      	movs	r3, #18
    3300:	e055      	b.n	33ae <usart_write_buffer_wait+0x112>
    3302:	6a3b      	ldr	r3, [r7, #32]
    3304:	3301      	adds	r3, #1
    3306:	623b      	str	r3, [r7, #32]
    3308:	6a3b      	ldr	r3, [r7, #32]
    330a:	4a2c      	ldr	r2, [pc, #176]	; (33bc <usart_write_buffer_wait+0x120>)
    330c:	4293      	cmp	r3, r2
    330e:	d9ea      	bls.n	32e6 <usart_write_buffer_wait+0x4a>
    3310:	2326      	movs	r3, #38	; 0x26
    3312:	18fb      	adds	r3, r7, r3
    3314:	881b      	ldrh	r3, [r3, #0]
    3316:	2226      	movs	r2, #38	; 0x26
    3318:	18ba      	adds	r2, r7, r2
    331a:	1c59      	adds	r1, r3, #1
    331c:	8011      	strh	r1, [r2, #0]
    331e:	1c1a      	adds	r2, r3, #0
    3320:	68bb      	ldr	r3, [r7, #8]
    3322:	189b      	adds	r3, r3, r2
    3324:	781a      	ldrb	r2, [r3, #0]
    3326:	231e      	movs	r3, #30
    3328:	18fb      	adds	r3, r7, r3
    332a:	801a      	strh	r2, [r3, #0]
    332c:	68fb      	ldr	r3, [r7, #12]
    332e:	795b      	ldrb	r3, [r3, #5]
    3330:	2b01      	cmp	r3, #1
    3332:	d114      	bne.n	335e <usart_write_buffer_wait+0xc2>
    3334:	2326      	movs	r3, #38	; 0x26
    3336:	18fb      	adds	r3, r7, r3
    3338:	881b      	ldrh	r3, [r3, #0]
    333a:	2226      	movs	r2, #38	; 0x26
    333c:	18ba      	adds	r2, r7, r2
    333e:	1c59      	adds	r1, r3, #1
    3340:	8011      	strh	r1, [r2, #0]
    3342:	1c1a      	adds	r2, r3, #0
    3344:	68bb      	ldr	r3, [r7, #8]
    3346:	189b      	adds	r3, r3, r2
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	021b      	lsls	r3, r3, #8
    334c:	b29a      	uxth	r2, r3
    334e:	231e      	movs	r3, #30
    3350:	18fb      	adds	r3, r7, r3
    3352:	881b      	ldrh	r3, [r3, #0]
    3354:	4313      	orrs	r3, r2
    3356:	b29a      	uxth	r2, r3
    3358:	231e      	movs	r3, #30
    335a:	18fb      	adds	r3, r7, r3
    335c:	801a      	strh	r2, [r3, #0]
    335e:	68fa      	ldr	r2, [r7, #12]
    3360:	231e      	movs	r3, #30
    3362:	18fb      	adds	r3, r7, r3
    3364:	881b      	ldrh	r3, [r3, #0]
    3366:	1c10      	adds	r0, r2, #0
    3368:	1c19      	adds	r1, r3, #0
    336a:	4b15      	ldr	r3, [pc, #84]	; (33c0 <usart_write_buffer_wait+0x124>)
    336c:	4798      	blx	r3
    336e:	1dbb      	adds	r3, r7, #6
    3370:	881b      	ldrh	r3, [r3, #0]
    3372:	1dba      	adds	r2, r7, #6
    3374:	1e59      	subs	r1, r3, #1
    3376:	8011      	strh	r1, [r2, #0]
    3378:	2b00      	cmp	r3, #0
    337a:	d1b1      	bne.n	32e0 <usart_write_buffer_wait+0x44>
    337c:	2300      	movs	r3, #0
    337e:	61bb      	str	r3, [r7, #24]
    3380:	e010      	b.n	33a4 <usart_write_buffer_wait+0x108>
    3382:	697b      	ldr	r3, [r7, #20]
    3384:	7b9b      	ldrb	r3, [r3, #14]
    3386:	b2db      	uxtb	r3, r3
    3388:	1c1a      	adds	r2, r3, #0
    338a:	2302      	movs	r3, #2
    338c:	4013      	ands	r3, r2
    338e:	d000      	beq.n	3392 <usart_write_buffer_wait+0xf6>
    3390:	e00c      	b.n	33ac <usart_write_buffer_wait+0x110>
    3392:	69bb      	ldr	r3, [r7, #24]
    3394:	4a09      	ldr	r2, [pc, #36]	; (33bc <usart_write_buffer_wait+0x120>)
    3396:	4293      	cmp	r3, r2
    3398:	d101      	bne.n	339e <usart_write_buffer_wait+0x102>
    339a:	2312      	movs	r3, #18
    339c:	e007      	b.n	33ae <usart_write_buffer_wait+0x112>
    339e:	69bb      	ldr	r3, [r7, #24]
    33a0:	3301      	adds	r3, #1
    33a2:	61bb      	str	r3, [r7, #24]
    33a4:	69bb      	ldr	r3, [r7, #24]
    33a6:	4a05      	ldr	r2, [pc, #20]	; (33bc <usart_write_buffer_wait+0x120>)
    33a8:	4293      	cmp	r3, r2
    33aa:	d9ea      	bls.n	3382 <usart_write_buffer_wait+0xe6>
    33ac:	2300      	movs	r3, #0
    33ae:	1c18      	adds	r0, r3, #0
    33b0:	46bd      	mov	sp, r7
    33b2:	b00a      	add	sp, #40	; 0x28
    33b4:	bd80      	pop	{r7, pc}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	00002dd9 	.word	0x00002dd9
    33bc:	0000ffff 	.word	0x0000ffff
    33c0:	00003239 	.word	0x00003239

000033c4 <system_gclk_gen_get_config_defaults>:
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	2201      	movs	r2, #1
    33d0:	605a      	str	r2, [r3, #4]
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	2200      	movs	r2, #0
    33d6:	705a      	strb	r2, [r3, #1]
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	2206      	movs	r2, #6
    33dc:	701a      	strb	r2, [r3, #0]
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	2200      	movs	r2, #0
    33e2:	721a      	strb	r2, [r3, #8]
    33e4:	687b      	ldr	r3, [r7, #4]
    33e6:	2200      	movs	r2, #0
    33e8:	725a      	strb	r2, [r3, #9]
    33ea:	46bd      	mov	sp, r7
    33ec:	b002      	add	sp, #8
    33ee:	bd80      	pop	{r7, pc}

000033f0 <system_clock_source_xosc_get_config_defaults>:
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	2200      	movs	r2, #0
    33fc:	701a      	strb	r2, [r3, #0]
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	220e      	movs	r2, #14
    3402:	705a      	strb	r2, [r3, #1]
    3404:	687b      	ldr	r3, [r7, #4]
    3406:	2201      	movs	r2, #1
    3408:	709a      	strb	r2, [r3, #2]
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	4a05      	ldr	r2, [pc, #20]	; (3424 <system_clock_source_xosc_get_config_defaults+0x34>)
    340e:	605a      	str	r2, [r3, #4]
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	2200      	movs	r2, #0
    3414:	721a      	strb	r2, [r3, #8]
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	2201      	movs	r2, #1
    341a:	725a      	strb	r2, [r3, #9]
    341c:	46bd      	mov	sp, r7
    341e:	b002      	add	sp, #8
    3420:	bd80      	pop	{r7, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	00b71b00 	.word	0x00b71b00

00003428 <system_clock_source_osc8m_get_config_defaults>:
    3428:	b580      	push	{r7, lr}
    342a:	b082      	sub	sp, #8
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	687b      	ldr	r3, [r7, #4]
    3432:	2203      	movs	r2, #3
    3434:	701a      	strb	r2, [r3, #0]
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	2200      	movs	r2, #0
    343a:	705a      	strb	r2, [r3, #1]
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	2201      	movs	r2, #1
    3440:	709a      	strb	r2, [r3, #2]
    3442:	46bd      	mov	sp, r7
    3444:	b002      	add	sp, #8
    3446:	bd80      	pop	{r7, pc}

00003448 <system_cpu_clock_set_divider>:
    3448:	b580      	push	{r7, lr}
    344a:	b082      	sub	sp, #8
    344c:	af00      	add	r7, sp, #0
    344e:	1c02      	adds	r2, r0, #0
    3450:	1dfb      	adds	r3, r7, #7
    3452:	701a      	strb	r2, [r3, #0]
    3454:	4a03      	ldr	r2, [pc, #12]	; (3464 <system_cpu_clock_set_divider+0x1c>)
    3456:	1dfb      	adds	r3, r7, #7
    3458:	781b      	ldrb	r3, [r3, #0]
    345a:	7213      	strb	r3, [r2, #8]
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	40000400 	.word	0x40000400

00003468 <system_apb_clock_set_divider>:
    3468:	b580      	push	{r7, lr}
    346a:	b082      	sub	sp, #8
    346c:	af00      	add	r7, sp, #0
    346e:	1c02      	adds	r2, r0, #0
    3470:	1dfb      	adds	r3, r7, #7
    3472:	701a      	strb	r2, [r3, #0]
    3474:	1dbb      	adds	r3, r7, #6
    3476:	1c0a      	adds	r2, r1, #0
    3478:	701a      	strb	r2, [r3, #0]
    347a:	1dfb      	adds	r3, r7, #7
    347c:	781b      	ldrb	r3, [r3, #0]
    347e:	2b01      	cmp	r3, #1
    3480:	d008      	beq.n	3494 <system_apb_clock_set_divider+0x2c>
    3482:	2b02      	cmp	r3, #2
    3484:	d00b      	beq.n	349e <system_apb_clock_set_divider+0x36>
    3486:	2b00      	cmp	r3, #0
    3488:	d10e      	bne.n	34a8 <system_apb_clock_set_divider+0x40>
    348a:	4a0b      	ldr	r2, [pc, #44]	; (34b8 <system_apb_clock_set_divider+0x50>)
    348c:	1dbb      	adds	r3, r7, #6
    348e:	781b      	ldrb	r3, [r3, #0]
    3490:	7253      	strb	r3, [r2, #9]
    3492:	e00b      	b.n	34ac <system_apb_clock_set_divider+0x44>
    3494:	4a08      	ldr	r2, [pc, #32]	; (34b8 <system_apb_clock_set_divider+0x50>)
    3496:	1dbb      	adds	r3, r7, #6
    3498:	781b      	ldrb	r3, [r3, #0]
    349a:	7293      	strb	r3, [r2, #10]
    349c:	e006      	b.n	34ac <system_apb_clock_set_divider+0x44>
    349e:	4a06      	ldr	r2, [pc, #24]	; (34b8 <system_apb_clock_set_divider+0x50>)
    34a0:	1dbb      	adds	r3, r7, #6
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	72d3      	strb	r3, [r2, #11]
    34a6:	e001      	b.n	34ac <system_apb_clock_set_divider+0x44>
    34a8:	2317      	movs	r3, #23
    34aa:	e000      	b.n	34ae <system_apb_clock_set_divider+0x46>
    34ac:	2300      	movs	r3, #0
    34ae:	1c18      	adds	r0, r3, #0
    34b0:	46bd      	mov	sp, r7
    34b2:	b002      	add	sp, #8
    34b4:	bd80      	pop	{r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	40000400 	.word	0x40000400

000034bc <system_flash_set_waitstates>:
    34bc:	b580      	push	{r7, lr}
    34be:	b082      	sub	sp, #8
    34c0:	af00      	add	r7, sp, #0
    34c2:	1c02      	adds	r2, r0, #0
    34c4:	1dfb      	adds	r3, r7, #7
    34c6:	701a      	strb	r2, [r3, #0]
    34c8:	4b08      	ldr	r3, [pc, #32]	; (34ec <system_flash_set_waitstates+0x30>)
    34ca:	1dfa      	adds	r2, r7, #7
    34cc:	7812      	ldrb	r2, [r2, #0]
    34ce:	210f      	movs	r1, #15
    34d0:	400a      	ands	r2, r1
    34d2:	b2d2      	uxtb	r2, r2
    34d4:	210f      	movs	r1, #15
    34d6:	400a      	ands	r2, r1
    34d8:	0052      	lsls	r2, r2, #1
    34da:	6859      	ldr	r1, [r3, #4]
    34dc:	201e      	movs	r0, #30
    34de:	4381      	bics	r1, r0
    34e0:	430a      	orrs	r2, r1
    34e2:	605a      	str	r2, [r3, #4]
    34e4:	46bd      	mov	sp, r7
    34e6:	b002      	add	sp, #8
    34e8:	bd80      	pop	{r7, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	41004000 	.word	0x41004000

000034f0 <_system_dfll_wait_for_sync>:
    34f0:	b580      	push	{r7, lr}
    34f2:	af00      	add	r7, sp, #0
    34f4:	46c0      	nop			; (mov r8, r8)
    34f6:	4b03      	ldr	r3, [pc, #12]	; (3504 <_system_dfll_wait_for_sync+0x14>)
    34f8:	68db      	ldr	r3, [r3, #12]
    34fa:	2210      	movs	r2, #16
    34fc:	4013      	ands	r3, r2
    34fe:	d0fa      	beq.n	34f6 <_system_dfll_wait_for_sync+0x6>
    3500:	46bd      	mov	sp, r7
    3502:	bd80      	pop	{r7, pc}
    3504:	40000800 	.word	0x40000800

00003508 <_system_clock_source_dfll_set_config_errata_9905>:
    3508:	b580      	push	{r7, lr}
    350a:	af00      	add	r7, sp, #0
    350c:	4a0c      	ldr	r2, [pc, #48]	; (3540 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    350e:	4b0d      	ldr	r3, [pc, #52]	; (3544 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	b29b      	uxth	r3, r3
    3514:	2180      	movs	r1, #128	; 0x80
    3516:	438b      	bics	r3, r1
    3518:	b29b      	uxth	r3, r3
    351a:	8493      	strh	r3, [r2, #36]	; 0x24
    351c:	4b0a      	ldr	r3, [pc, #40]	; (3548 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    351e:	4798      	blx	r3
    3520:	4a07      	ldr	r2, [pc, #28]	; (3540 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3522:	4b08      	ldr	r3, [pc, #32]	; (3544 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3524:	689b      	ldr	r3, [r3, #8]
    3526:	62d3      	str	r3, [r2, #44]	; 0x2c
    3528:	4a05      	ldr	r2, [pc, #20]	; (3540 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    352a:	4b06      	ldr	r3, [pc, #24]	; (3544 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    352c:	685b      	ldr	r3, [r3, #4]
    352e:	6293      	str	r3, [r2, #40]	; 0x28
    3530:	4a03      	ldr	r2, [pc, #12]	; (3540 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3532:	4b04      	ldr	r3, [pc, #16]	; (3544 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	b29b      	uxth	r3, r3
    3538:	8493      	strh	r3, [r2, #36]	; 0x24
    353a:	46bd      	mov	sp, r7
    353c:	bd80      	pop	{r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	40000800 	.word	0x40000800
    3544:	20000050 	.word	0x20000050
    3548:	000034f1 	.word	0x000034f1

0000354c <system_clock_source_get_hz>:
    354c:	b580      	push	{r7, lr}
    354e:	b082      	sub	sp, #8
    3550:	af00      	add	r7, sp, #0
    3552:	1c02      	adds	r2, r0, #0
    3554:	1dfb      	adds	r3, r7, #7
    3556:	701a      	strb	r2, [r3, #0]
    3558:	1dfb      	adds	r3, r7, #7
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	2b07      	cmp	r3, #7
    355e:	d835      	bhi.n	35cc <system_clock_source_get_hz+0x80>
    3560:	009a      	lsls	r2, r3, #2
    3562:	4b1d      	ldr	r3, [pc, #116]	; (35d8 <system_clock_source_get_hz+0x8c>)
    3564:	18d3      	adds	r3, r2, r3
    3566:	681b      	ldr	r3, [r3, #0]
    3568:	469f      	mov	pc, r3
    356a:	4b1c      	ldr	r3, [pc, #112]	; (35dc <system_clock_source_get_hz+0x90>)
    356c:	68db      	ldr	r3, [r3, #12]
    356e:	e02e      	b.n	35ce <system_clock_source_get_hz+0x82>
    3570:	4b1b      	ldr	r3, [pc, #108]	; (35e0 <system_clock_source_get_hz+0x94>)
    3572:	6a1b      	ldr	r3, [r3, #32]
    3574:	0a1b      	lsrs	r3, r3, #8
    3576:	1c1a      	adds	r2, r3, #0
    3578:	2303      	movs	r3, #3
    357a:	4013      	ands	r3, r2
    357c:	b2db      	uxtb	r3, r3
    357e:	1c1a      	adds	r2, r3, #0
    3580:	4b18      	ldr	r3, [pc, #96]	; (35e4 <system_clock_source_get_hz+0x98>)
    3582:	40d3      	lsrs	r3, r2
    3584:	e023      	b.n	35ce <system_clock_source_get_hz+0x82>
    3586:	2380      	movs	r3, #128	; 0x80
    3588:	021b      	lsls	r3, r3, #8
    358a:	e020      	b.n	35ce <system_clock_source_get_hz+0x82>
    358c:	2380      	movs	r3, #128	; 0x80
    358e:	021b      	lsls	r3, r3, #8
    3590:	e01d      	b.n	35ce <system_clock_source_get_hz+0x82>
    3592:	4b12      	ldr	r3, [pc, #72]	; (35dc <system_clock_source_get_hz+0x90>)
    3594:	691b      	ldr	r3, [r3, #16]
    3596:	e01a      	b.n	35ce <system_clock_source_get_hz+0x82>
    3598:	4b10      	ldr	r3, [pc, #64]	; (35dc <system_clock_source_get_hz+0x90>)
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	2202      	movs	r2, #2
    359e:	4013      	ands	r3, r2
    35a0:	d101      	bne.n	35a6 <system_clock_source_get_hz+0x5a>
    35a2:	2300      	movs	r3, #0
    35a4:	e013      	b.n	35ce <system_clock_source_get_hz+0x82>
    35a6:	4b10      	ldr	r3, [pc, #64]	; (35e8 <system_clock_source_get_hz+0x9c>)
    35a8:	4798      	blx	r3
    35aa:	4b0c      	ldr	r3, [pc, #48]	; (35dc <system_clock_source_get_hz+0x90>)
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	2204      	movs	r2, #4
    35b0:	4013      	ands	r3, r2
    35b2:	d009      	beq.n	35c8 <system_clock_source_get_hz+0x7c>
    35b4:	2000      	movs	r0, #0
    35b6:	4b0d      	ldr	r3, [pc, #52]	; (35ec <system_clock_source_get_hz+0xa0>)
    35b8:	4798      	blx	r3
    35ba:	1c02      	adds	r2, r0, #0
    35bc:	4b07      	ldr	r3, [pc, #28]	; (35dc <system_clock_source_get_hz+0x90>)
    35be:	689b      	ldr	r3, [r3, #8]
    35c0:	041b      	lsls	r3, r3, #16
    35c2:	0c1b      	lsrs	r3, r3, #16
    35c4:	4353      	muls	r3, r2
    35c6:	e002      	b.n	35ce <system_clock_source_get_hz+0x82>
    35c8:	4b09      	ldr	r3, [pc, #36]	; (35f0 <system_clock_source_get_hz+0xa4>)
    35ca:	e000      	b.n	35ce <system_clock_source_get_hz+0x82>
    35cc:	2300      	movs	r3, #0
    35ce:	1c18      	adds	r0, r3, #0
    35d0:	46bd      	mov	sp, r7
    35d2:	b002      	add	sp, #8
    35d4:	bd80      	pop	{r7, pc}
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	00004508 	.word	0x00004508
    35dc:	20000050 	.word	0x20000050
    35e0:	40000800 	.word	0x40000800
    35e4:	007a1200 	.word	0x007a1200
    35e8:	000034f1 	.word	0x000034f1
    35ec:	00003e65 	.word	0x00003e65
    35f0:	02dc6c00 	.word	0x02dc6c00

000035f4 <system_clock_source_osc8m_set_config>:
    35f4:	b580      	push	{r7, lr}
    35f6:	b084      	sub	sp, #16
    35f8:	af00      	add	r7, sp, #0
    35fa:	6078      	str	r0, [r7, #4]
    35fc:	4b1a      	ldr	r3, [pc, #104]	; (3668 <system_clock_source_osc8m_set_config+0x74>)
    35fe:	6a1b      	ldr	r3, [r3, #32]
    3600:	60fb      	str	r3, [r7, #12]
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	781b      	ldrb	r3, [r3, #0]
    3606:	1c1a      	adds	r2, r3, #0
    3608:	2303      	movs	r3, #3
    360a:	4013      	ands	r3, r2
    360c:	b2da      	uxtb	r2, r3
    360e:	230d      	movs	r3, #13
    3610:	18fb      	adds	r3, r7, r3
    3612:	2103      	movs	r1, #3
    3614:	400a      	ands	r2, r1
    3616:	1c10      	adds	r0, r2, #0
    3618:	781a      	ldrb	r2, [r3, #0]
    361a:	2103      	movs	r1, #3
    361c:	438a      	bics	r2, r1
    361e:	1c11      	adds	r1, r2, #0
    3620:	1c02      	adds	r2, r0, #0
    3622:	430a      	orrs	r2, r1
    3624:	701a      	strb	r2, [r3, #0]
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	789a      	ldrb	r2, [r3, #2]
    362a:	230c      	movs	r3, #12
    362c:	18fb      	adds	r3, r7, r3
    362e:	01d0      	lsls	r0, r2, #7
    3630:	781a      	ldrb	r2, [r3, #0]
    3632:	217f      	movs	r1, #127	; 0x7f
    3634:	400a      	ands	r2, r1
    3636:	1c11      	adds	r1, r2, #0
    3638:	1c02      	adds	r2, r0, #0
    363a:	430a      	orrs	r2, r1
    363c:	701a      	strb	r2, [r3, #0]
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	785a      	ldrb	r2, [r3, #1]
    3642:	230c      	movs	r3, #12
    3644:	18fb      	adds	r3, r7, r3
    3646:	2101      	movs	r1, #1
    3648:	400a      	ands	r2, r1
    364a:	0190      	lsls	r0, r2, #6
    364c:	781a      	ldrb	r2, [r3, #0]
    364e:	2140      	movs	r1, #64	; 0x40
    3650:	438a      	bics	r2, r1
    3652:	1c11      	adds	r1, r2, #0
    3654:	1c02      	adds	r2, r0, #0
    3656:	430a      	orrs	r2, r1
    3658:	701a      	strb	r2, [r3, #0]
    365a:	4b03      	ldr	r3, [pc, #12]	; (3668 <system_clock_source_osc8m_set_config+0x74>)
    365c:	68fa      	ldr	r2, [r7, #12]
    365e:	621a      	str	r2, [r3, #32]
    3660:	46bd      	mov	sp, r7
    3662:	b004      	add	sp, #16
    3664:	bd80      	pop	{r7, pc}
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	40000800 	.word	0x40000800

0000366c <system_clock_source_xosc_set_config>:
    366c:	b580      	push	{r7, lr}
    366e:	b084      	sub	sp, #16
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
    3674:	4a53      	ldr	r2, [pc, #332]	; (37c4 <system_clock_source_xosc_set_config+0x158>)
    3676:	230c      	movs	r3, #12
    3678:	18fb      	adds	r3, r7, r3
    367a:	8a12      	ldrh	r2, [r2, #16]
    367c:	801a      	strh	r2, [r3, #0]
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	785b      	ldrb	r3, [r3, #1]
    3682:	1c1a      	adds	r2, r3, #0
    3684:	230f      	movs	r3, #15
    3686:	4013      	ands	r3, r2
    3688:	b2da      	uxtb	r2, r3
    368a:	230c      	movs	r3, #12
    368c:	18fb      	adds	r3, r7, r3
    368e:	0110      	lsls	r0, r2, #4
    3690:	785a      	ldrb	r2, [r3, #1]
    3692:	210f      	movs	r1, #15
    3694:	400a      	ands	r2, r1
    3696:	1c11      	adds	r1, r2, #0
    3698:	1c02      	adds	r2, r0, #0
    369a:	430a      	orrs	r2, r1
    369c:	705a      	strb	r2, [r3, #1]
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	781b      	ldrb	r3, [r3, #0]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d106      	bne.n	36b4 <system_clock_source_xosc_set_config+0x48>
    36a6:	230c      	movs	r3, #12
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	781a      	ldrb	r2, [r3, #0]
    36ac:	2104      	movs	r1, #4
    36ae:	430a      	orrs	r2, r1
    36b0:	701a      	strb	r2, [r3, #0]
    36b2:	e005      	b.n	36c0 <system_clock_source_xosc_set_config+0x54>
    36b4:	230c      	movs	r3, #12
    36b6:	18fb      	adds	r3, r7, r3
    36b8:	781a      	ldrb	r2, [r3, #0]
    36ba:	2104      	movs	r1, #4
    36bc:	438a      	bics	r2, r1
    36be:	701a      	strb	r2, [r3, #0]
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	789a      	ldrb	r2, [r3, #2]
    36c4:	230c      	movs	r3, #12
    36c6:	18fb      	adds	r3, r7, r3
    36c8:	2101      	movs	r1, #1
    36ca:	400a      	ands	r2, r1
    36cc:	00d0      	lsls	r0, r2, #3
    36ce:	785a      	ldrb	r2, [r3, #1]
    36d0:	2108      	movs	r1, #8
    36d2:	438a      	bics	r2, r1
    36d4:	1c11      	adds	r1, r2, #0
    36d6:	1c02      	adds	r2, r0, #0
    36d8:	430a      	orrs	r2, r1
    36da:	705a      	strb	r2, [r3, #1]
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	789b      	ldrb	r3, [r3, #2]
    36e0:	2201      	movs	r2, #1
    36e2:	4053      	eors	r3, r2
    36e4:	b2db      	uxtb	r3, r3
    36e6:	2b00      	cmp	r3, #0
    36e8:	d046      	beq.n	3778 <system_clock_source_xosc_set_config+0x10c>
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	685b      	ldr	r3, [r3, #4]
    36ee:	4a36      	ldr	r2, [pc, #216]	; (37c8 <system_clock_source_xosc_set_config+0x15c>)
    36f0:	4293      	cmp	r3, r2
    36f2:	d806      	bhi.n	3702 <system_clock_source_xosc_set_config+0x96>
    36f4:	230c      	movs	r3, #12
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	785a      	ldrb	r2, [r3, #1]
    36fa:	2107      	movs	r1, #7
    36fc:	438a      	bics	r2, r1
    36fe:	705a      	strb	r2, [r3, #1]
    3700:	e03a      	b.n	3778 <system_clock_source_xosc_set_config+0x10c>
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	685b      	ldr	r3, [r3, #4]
    3706:	4a31      	ldr	r2, [pc, #196]	; (37cc <system_clock_source_xosc_set_config+0x160>)
    3708:	4293      	cmp	r3, r2
    370a:	d809      	bhi.n	3720 <system_clock_source_xosc_set_config+0xb4>
    370c:	230c      	movs	r3, #12
    370e:	18fb      	adds	r3, r7, r3
    3710:	785a      	ldrb	r2, [r3, #1]
    3712:	2107      	movs	r1, #7
    3714:	438a      	bics	r2, r1
    3716:	1c11      	adds	r1, r2, #0
    3718:	2201      	movs	r2, #1
    371a:	430a      	orrs	r2, r1
    371c:	705a      	strb	r2, [r3, #1]
    371e:	e02b      	b.n	3778 <system_clock_source_xosc_set_config+0x10c>
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	685b      	ldr	r3, [r3, #4]
    3724:	4a2a      	ldr	r2, [pc, #168]	; (37d0 <system_clock_source_xosc_set_config+0x164>)
    3726:	4293      	cmp	r3, r2
    3728:	d809      	bhi.n	373e <system_clock_source_xosc_set_config+0xd2>
    372a:	230c      	movs	r3, #12
    372c:	18fb      	adds	r3, r7, r3
    372e:	785a      	ldrb	r2, [r3, #1]
    3730:	2107      	movs	r1, #7
    3732:	438a      	bics	r2, r1
    3734:	1c11      	adds	r1, r2, #0
    3736:	2202      	movs	r2, #2
    3738:	430a      	orrs	r2, r1
    373a:	705a      	strb	r2, [r3, #1]
    373c:	e01c      	b.n	3778 <system_clock_source_xosc_set_config+0x10c>
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	685b      	ldr	r3, [r3, #4]
    3742:	4a24      	ldr	r2, [pc, #144]	; (37d4 <system_clock_source_xosc_set_config+0x168>)
    3744:	4293      	cmp	r3, r2
    3746:	d809      	bhi.n	375c <system_clock_source_xosc_set_config+0xf0>
    3748:	230c      	movs	r3, #12
    374a:	18fb      	adds	r3, r7, r3
    374c:	785a      	ldrb	r2, [r3, #1]
    374e:	2107      	movs	r1, #7
    3750:	438a      	bics	r2, r1
    3752:	1c11      	adds	r1, r2, #0
    3754:	2203      	movs	r2, #3
    3756:	430a      	orrs	r2, r1
    3758:	705a      	strb	r2, [r3, #1]
    375a:	e00d      	b.n	3778 <system_clock_source_xosc_set_config+0x10c>
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	685b      	ldr	r3, [r3, #4]
    3760:	4a1d      	ldr	r2, [pc, #116]	; (37d8 <system_clock_source_xosc_set_config+0x16c>)
    3762:	4293      	cmp	r3, r2
    3764:	d808      	bhi.n	3778 <system_clock_source_xosc_set_config+0x10c>
    3766:	230c      	movs	r3, #12
    3768:	18fb      	adds	r3, r7, r3
    376a:	785a      	ldrb	r2, [r3, #1]
    376c:	2107      	movs	r1, #7
    376e:	438a      	bics	r2, r1
    3770:	1c11      	adds	r1, r2, #0
    3772:	2204      	movs	r2, #4
    3774:	430a      	orrs	r2, r1
    3776:	705a      	strb	r2, [r3, #1]
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	7a5a      	ldrb	r2, [r3, #9]
    377c:	230c      	movs	r3, #12
    377e:	18fb      	adds	r3, r7, r3
    3780:	01d0      	lsls	r0, r2, #7
    3782:	781a      	ldrb	r2, [r3, #0]
    3784:	217f      	movs	r1, #127	; 0x7f
    3786:	400a      	ands	r2, r1
    3788:	1c11      	adds	r1, r2, #0
    378a:	1c02      	adds	r2, r0, #0
    378c:	430a      	orrs	r2, r1
    378e:	701a      	strb	r2, [r3, #0]
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	7a1a      	ldrb	r2, [r3, #8]
    3794:	230c      	movs	r3, #12
    3796:	18fb      	adds	r3, r7, r3
    3798:	2101      	movs	r1, #1
    379a:	400a      	ands	r2, r1
    379c:	0190      	lsls	r0, r2, #6
    379e:	781a      	ldrb	r2, [r3, #0]
    37a0:	2140      	movs	r1, #64	; 0x40
    37a2:	438a      	bics	r2, r1
    37a4:	1c11      	adds	r1, r2, #0
    37a6:	1c02      	adds	r2, r0, #0
    37a8:	430a      	orrs	r2, r1
    37aa:	701a      	strb	r2, [r3, #0]
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	685a      	ldr	r2, [r3, #4]
    37b0:	4b0a      	ldr	r3, [pc, #40]	; (37dc <system_clock_source_xosc_set_config+0x170>)
    37b2:	60da      	str	r2, [r3, #12]
    37b4:	4a03      	ldr	r2, [pc, #12]	; (37c4 <system_clock_source_xosc_set_config+0x158>)
    37b6:	230c      	movs	r3, #12
    37b8:	18fb      	adds	r3, r7, r3
    37ba:	881b      	ldrh	r3, [r3, #0]
    37bc:	8213      	strh	r3, [r2, #16]
    37be:	46bd      	mov	sp, r7
    37c0:	b004      	add	sp, #16
    37c2:	bd80      	pop	{r7, pc}
    37c4:	40000800 	.word	0x40000800
    37c8:	001e8480 	.word	0x001e8480
    37cc:	003d0900 	.word	0x003d0900
    37d0:	007a1200 	.word	0x007a1200
    37d4:	00f42400 	.word	0x00f42400
    37d8:	01c9c380 	.word	0x01c9c380
    37dc:	20000050 	.word	0x20000050

000037e0 <system_clock_source_enable>:
    37e0:	b580      	push	{r7, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	af00      	add	r7, sp, #0
    37e6:	1c02      	adds	r2, r0, #0
    37e8:	1dfb      	adds	r3, r7, #7
    37ea:	701a      	strb	r2, [r3, #0]
    37ec:	1dfb      	adds	r3, r7, #7
    37ee:	781b      	ldrb	r3, [r3, #0]
    37f0:	2b07      	cmp	r3, #7
    37f2:	d830      	bhi.n	3856 <system_clock_source_enable+0x76>
    37f4:	009a      	lsls	r2, r3, #2
    37f6:	4b1b      	ldr	r3, [pc, #108]	; (3864 <system_clock_source_enable+0x84>)
    37f8:	18d3      	adds	r3, r2, r3
    37fa:	681b      	ldr	r3, [r3, #0]
    37fc:	469f      	mov	pc, r3
    37fe:	4b1a      	ldr	r3, [pc, #104]	; (3868 <system_clock_source_enable+0x88>)
    3800:	4a19      	ldr	r2, [pc, #100]	; (3868 <system_clock_source_enable+0x88>)
    3802:	6a12      	ldr	r2, [r2, #32]
    3804:	2102      	movs	r1, #2
    3806:	430a      	orrs	r2, r1
    3808:	621a      	str	r2, [r3, #32]
    380a:	2300      	movs	r3, #0
    380c:	e026      	b.n	385c <system_clock_source_enable+0x7c>
    380e:	4b16      	ldr	r3, [pc, #88]	; (3868 <system_clock_source_enable+0x88>)
    3810:	4a15      	ldr	r2, [pc, #84]	; (3868 <system_clock_source_enable+0x88>)
    3812:	6992      	ldr	r2, [r2, #24]
    3814:	2102      	movs	r1, #2
    3816:	430a      	orrs	r2, r1
    3818:	619a      	str	r2, [r3, #24]
    381a:	e01e      	b.n	385a <system_clock_source_enable+0x7a>
    381c:	4a12      	ldr	r2, [pc, #72]	; (3868 <system_clock_source_enable+0x88>)
    381e:	4b12      	ldr	r3, [pc, #72]	; (3868 <system_clock_source_enable+0x88>)
    3820:	8a1b      	ldrh	r3, [r3, #16]
    3822:	b29b      	uxth	r3, r3
    3824:	2102      	movs	r1, #2
    3826:	430b      	orrs	r3, r1
    3828:	b29b      	uxth	r3, r3
    382a:	8213      	strh	r3, [r2, #16]
    382c:	e015      	b.n	385a <system_clock_source_enable+0x7a>
    382e:	4a0e      	ldr	r2, [pc, #56]	; (3868 <system_clock_source_enable+0x88>)
    3830:	4b0d      	ldr	r3, [pc, #52]	; (3868 <system_clock_source_enable+0x88>)
    3832:	8a9b      	ldrh	r3, [r3, #20]
    3834:	b29b      	uxth	r3, r3
    3836:	2102      	movs	r1, #2
    3838:	430b      	orrs	r3, r1
    383a:	b29b      	uxth	r3, r3
    383c:	8293      	strh	r3, [r2, #20]
    383e:	e00c      	b.n	385a <system_clock_source_enable+0x7a>
    3840:	4b0a      	ldr	r3, [pc, #40]	; (386c <system_clock_source_enable+0x8c>)
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	2202      	movs	r2, #2
    3846:	431a      	orrs	r2, r3
    3848:	4b08      	ldr	r3, [pc, #32]	; (386c <system_clock_source_enable+0x8c>)
    384a:	601a      	str	r2, [r3, #0]
    384c:	4b08      	ldr	r3, [pc, #32]	; (3870 <system_clock_source_enable+0x90>)
    384e:	4798      	blx	r3
    3850:	e003      	b.n	385a <system_clock_source_enable+0x7a>
    3852:	2300      	movs	r3, #0
    3854:	e002      	b.n	385c <system_clock_source_enable+0x7c>
    3856:	2317      	movs	r3, #23
    3858:	e000      	b.n	385c <system_clock_source_enable+0x7c>
    385a:	2300      	movs	r3, #0
    385c:	1c18      	adds	r0, r3, #0
    385e:	46bd      	mov	sp, r7
    3860:	b002      	add	sp, #8
    3862:	bd80      	pop	{r7, pc}
    3864:	00004528 	.word	0x00004528
    3868:	40000800 	.word	0x40000800
    386c:	20000050 	.word	0x20000050
    3870:	00003509 	.word	0x00003509

00003874 <_switch_peripheral_gclk>:
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	1c3b      	adds	r3, r7, #0
    387c:	2202      	movs	r2, #2
    387e:	701a      	strb	r2, [r3, #0]
    3880:	2300      	movs	r3, #0
    3882:	607b      	str	r3, [r7, #4]
    3884:	e009      	b.n	389a <_switch_peripheral_gclk+0x26>
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	b2da      	uxtb	r2, r3
    388a:	1c3b      	adds	r3, r7, #0
    388c:	1c10      	adds	r0, r2, #0
    388e:	1c19      	adds	r1, r3, #0
    3890:	4b05      	ldr	r3, [pc, #20]	; (38a8 <_switch_peripheral_gclk+0x34>)
    3892:	4798      	blx	r3
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	3301      	adds	r3, #1
    3898:	607b      	str	r3, [r7, #4]
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	2b1b      	cmp	r3, #27
    389e:	d9f2      	bls.n	3886 <_switch_peripheral_gclk+0x12>
    38a0:	46bd      	mov	sp, r7
    38a2:	b002      	add	sp, #8
    38a4:	bd80      	pop	{r7, pc}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	00003d41 	.word	0x00003d41

000038ac <system_clock_init>:
    38ac:	b580      	push	{r7, lr}
    38ae:	b0a0      	sub	sp, #128	; 0x80
    38b0:	af00      	add	r7, sp, #0
    38b2:	4b48      	ldr	r3, [pc, #288]	; (39d4 <system_clock_init+0x128>)
    38b4:	22c2      	movs	r2, #194	; 0xc2
    38b6:	00d2      	lsls	r2, r2, #3
    38b8:	609a      	str	r2, [r3, #8]
    38ba:	2000      	movs	r0, #0
    38bc:	4b46      	ldr	r3, [pc, #280]	; (39d8 <system_clock_init+0x12c>)
    38be:	4798      	blx	r3
    38c0:	4b46      	ldr	r3, [pc, #280]	; (39dc <system_clock_init+0x130>)
    38c2:	4798      	blx	r3
    38c4:	2374      	movs	r3, #116	; 0x74
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	1c18      	adds	r0, r3, #0
    38ca:	4b45      	ldr	r3, [pc, #276]	; (39e0 <system_clock_init+0x134>)
    38cc:	4798      	blx	r3
    38ce:	2374      	movs	r3, #116	; 0x74
    38d0:	18fb      	adds	r3, r7, r3
    38d2:	2200      	movs	r2, #0
    38d4:	701a      	strb	r2, [r3, #0]
    38d6:	2374      	movs	r3, #116	; 0x74
    38d8:	18fb      	adds	r3, r7, r3
    38da:	220f      	movs	r2, #15
    38dc:	705a      	strb	r2, [r3, #1]
    38de:	2374      	movs	r3, #116	; 0x74
    38e0:	18fb      	adds	r3, r7, r3
    38e2:	2201      	movs	r2, #1
    38e4:	709a      	strb	r2, [r3, #2]
    38e6:	2374      	movs	r3, #116	; 0x74
    38e8:	18fb      	adds	r3, r7, r3
    38ea:	4a3e      	ldr	r2, [pc, #248]	; (39e4 <system_clock_init+0x138>)
    38ec:	605a      	str	r2, [r3, #4]
    38ee:	2374      	movs	r3, #116	; 0x74
    38f0:	18fb      	adds	r3, r7, r3
    38f2:	2201      	movs	r2, #1
    38f4:	725a      	strb	r2, [r3, #9]
    38f6:	2374      	movs	r3, #116	; 0x74
    38f8:	18fb      	adds	r3, r7, r3
    38fa:	2200      	movs	r2, #0
    38fc:	721a      	strb	r2, [r3, #8]
    38fe:	2374      	movs	r3, #116	; 0x74
    3900:	18fb      	adds	r3, r7, r3
    3902:	1c18      	adds	r0, r3, #0
    3904:	4b38      	ldr	r3, [pc, #224]	; (39e8 <system_clock_init+0x13c>)
    3906:	4798      	blx	r3
    3908:	2000      	movs	r0, #0
    390a:	4b38      	ldr	r3, [pc, #224]	; (39ec <system_clock_init+0x140>)
    390c:	4798      	blx	r3
    390e:	2370      	movs	r3, #112	; 0x70
    3910:	18fb      	adds	r3, r7, r3
    3912:	1c18      	adds	r0, r3, #0
    3914:	4b36      	ldr	r3, [pc, #216]	; (39f0 <system_clock_init+0x144>)
    3916:	4798      	blx	r3
    3918:	2370      	movs	r3, #112	; 0x70
    391a:	18fb      	adds	r3, r7, r3
    391c:	2200      	movs	r2, #0
    391e:	701a      	strb	r2, [r3, #0]
    3920:	2370      	movs	r3, #112	; 0x70
    3922:	18fb      	adds	r3, r7, r3
    3924:	2201      	movs	r2, #1
    3926:	709a      	strb	r2, [r3, #2]
    3928:	2370      	movs	r3, #112	; 0x70
    392a:	18fb      	adds	r3, r7, r3
    392c:	2200      	movs	r2, #0
    392e:	705a      	strb	r2, [r3, #1]
    3930:	2370      	movs	r3, #112	; 0x70
    3932:	18fb      	adds	r3, r7, r3
    3934:	1c18      	adds	r0, r3, #0
    3936:	4b2f      	ldr	r3, [pc, #188]	; (39f4 <system_clock_init+0x148>)
    3938:	4798      	blx	r3
    393a:	2006      	movs	r0, #6
    393c:	4b2b      	ldr	r3, [pc, #172]	; (39ec <system_clock_init+0x140>)
    393e:	4798      	blx	r3
    3940:	4b2d      	ldr	r3, [pc, #180]	; (39f8 <system_clock_init+0x14c>)
    3942:	4798      	blx	r3
    3944:	2358      	movs	r3, #88	; 0x58
    3946:	18fb      	adds	r3, r7, r3
    3948:	1c18      	adds	r0, r3, #0
    394a:	4b2c      	ldr	r3, [pc, #176]	; (39fc <system_clock_init+0x150>)
    394c:	4798      	blx	r3
    394e:	2358      	movs	r3, #88	; 0x58
    3950:	18fb      	adds	r3, r7, r3
    3952:	2200      	movs	r2, #0
    3954:	701a      	strb	r2, [r3, #0]
    3956:	2358      	movs	r3, #88	; 0x58
    3958:	18fb      	adds	r3, r7, r3
    395a:	2201      	movs	r2, #1
    395c:	605a      	str	r2, [r3, #4]
    395e:	2358      	movs	r3, #88	; 0x58
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	721a      	strb	r2, [r3, #8]
    3966:	2358      	movs	r3, #88	; 0x58
    3968:	18fb      	adds	r3, r7, r3
    396a:	2200      	movs	r2, #0
    396c:	725a      	strb	r2, [r3, #9]
    396e:	2358      	movs	r3, #88	; 0x58
    3970:	18fb      	adds	r3, r7, r3
    3972:	2001      	movs	r0, #1
    3974:	1c19      	adds	r1, r3, #0
    3976:	4b22      	ldr	r3, [pc, #136]	; (3a00 <system_clock_init+0x154>)
    3978:	4798      	blx	r3
    397a:	2001      	movs	r0, #1
    397c:	4b21      	ldr	r3, [pc, #132]	; (3a04 <system_clock_init+0x158>)
    397e:	4798      	blx	r3
    3980:	2000      	movs	r0, #0
    3982:	4b21      	ldr	r3, [pc, #132]	; (3a08 <system_clock_init+0x15c>)
    3984:	4798      	blx	r3
    3986:	2000      	movs	r0, #0
    3988:	2100      	movs	r1, #0
    398a:	4b20      	ldr	r3, [pc, #128]	; (3a0c <system_clock_init+0x160>)
    398c:	4798      	blx	r3
    398e:	2001      	movs	r0, #1
    3990:	2100      	movs	r1, #0
    3992:	4b1e      	ldr	r3, [pc, #120]	; (3a0c <system_clock_init+0x160>)
    3994:	4798      	blx	r3
    3996:	2002      	movs	r0, #2
    3998:	2100      	movs	r1, #0
    399a:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <system_clock_init+0x160>)
    399c:	4798      	blx	r3
    399e:	1d3b      	adds	r3, r7, #4
    39a0:	1c18      	adds	r0, r3, #0
    39a2:	4b16      	ldr	r3, [pc, #88]	; (39fc <system_clock_init+0x150>)
    39a4:	4798      	blx	r3
    39a6:	1d3b      	adds	r3, r7, #4
    39a8:	2206      	movs	r2, #6
    39aa:	701a      	strb	r2, [r3, #0]
    39ac:	1d3b      	adds	r3, r7, #4
    39ae:	2201      	movs	r2, #1
    39b0:	605a      	str	r2, [r3, #4]
    39b2:	1d3b      	adds	r3, r7, #4
    39b4:	2200      	movs	r2, #0
    39b6:	721a      	strb	r2, [r3, #8]
    39b8:	1d3b      	adds	r3, r7, #4
    39ba:	2200      	movs	r2, #0
    39bc:	725a      	strb	r2, [r3, #9]
    39be:	1d3b      	adds	r3, r7, #4
    39c0:	2000      	movs	r0, #0
    39c2:	1c19      	adds	r1, r3, #0
    39c4:	4b0e      	ldr	r3, [pc, #56]	; (3a00 <system_clock_init+0x154>)
    39c6:	4798      	blx	r3
    39c8:	2000      	movs	r0, #0
    39ca:	4b0e      	ldr	r3, [pc, #56]	; (3a04 <system_clock_init+0x158>)
    39cc:	4798      	blx	r3
    39ce:	46bd      	mov	sp, r7
    39d0:	b020      	add	sp, #128	; 0x80
    39d2:	bd80      	pop	{r7, pc}
    39d4:	40000800 	.word	0x40000800
    39d8:	000034bd 	.word	0x000034bd
    39dc:	00003875 	.word	0x00003875
    39e0:	000033f1 	.word	0x000033f1
    39e4:	00b71b00 	.word	0x00b71b00
    39e8:	0000366d 	.word	0x0000366d
    39ec:	000037e1 	.word	0x000037e1
    39f0:	00003429 	.word	0x00003429
    39f4:	000035f5 	.word	0x000035f5
    39f8:	00003ab1 	.word	0x00003ab1
    39fc:	000033c5 	.word	0x000033c5
    3a00:	00003ae1 	.word	0x00003ae1
    3a04:	00003c01 	.word	0x00003c01
    3a08:	00003449 	.word	0x00003449
    3a0c:	00003469 	.word	0x00003469

00003a10 <system_apb_clock_set_mask>:
    3a10:	b580      	push	{r7, lr}
    3a12:	b082      	sub	sp, #8
    3a14:	af00      	add	r7, sp, #0
    3a16:	1c02      	adds	r2, r0, #0
    3a18:	6039      	str	r1, [r7, #0]
    3a1a:	1dfb      	adds	r3, r7, #7
    3a1c:	701a      	strb	r2, [r3, #0]
    3a1e:	1dfb      	adds	r3, r7, #7
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2b01      	cmp	r3, #1
    3a24:	d00a      	beq.n	3a3c <system_apb_clock_set_mask+0x2c>
    3a26:	2b02      	cmp	r3, #2
    3a28:	d00f      	beq.n	3a4a <system_apb_clock_set_mask+0x3a>
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d114      	bne.n	3a58 <system_apb_clock_set_mask+0x48>
    3a2e:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a30:	4a0d      	ldr	r2, [pc, #52]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a32:	6991      	ldr	r1, [r2, #24]
    3a34:	683a      	ldr	r2, [r7, #0]
    3a36:	430a      	orrs	r2, r1
    3a38:	619a      	str	r2, [r3, #24]
    3a3a:	e00f      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
    3a3c:	4b0a      	ldr	r3, [pc, #40]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a3e:	4a0a      	ldr	r2, [pc, #40]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a40:	69d1      	ldr	r1, [r2, #28]
    3a42:	683a      	ldr	r2, [r7, #0]
    3a44:	430a      	orrs	r2, r1
    3a46:	61da      	str	r2, [r3, #28]
    3a48:	e008      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
    3a4a:	4b07      	ldr	r3, [pc, #28]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a4c:	4a06      	ldr	r2, [pc, #24]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a4e:	6a11      	ldr	r1, [r2, #32]
    3a50:	683a      	ldr	r2, [r7, #0]
    3a52:	430a      	orrs	r2, r1
    3a54:	621a      	str	r2, [r3, #32]
    3a56:	e001      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
    3a58:	2317      	movs	r3, #23
    3a5a:	e000      	b.n	3a5e <system_apb_clock_set_mask+0x4e>
    3a5c:	2300      	movs	r3, #0
    3a5e:	1c18      	adds	r0, r3, #0
    3a60:	46bd      	mov	sp, r7
    3a62:	b002      	add	sp, #8
    3a64:	bd80      	pop	{r7, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	40000400 	.word	0x40000400

00003a6c <system_interrupt_enter_critical_section>:
    3a6c:	b580      	push	{r7, lr}
    3a6e:	af00      	add	r7, sp, #0
    3a70:	4b01      	ldr	r3, [pc, #4]	; (3a78 <system_interrupt_enter_critical_section+0xc>)
    3a72:	4798      	blx	r3
    3a74:	46bd      	mov	sp, r7
    3a76:	bd80      	pop	{r7, pc}
    3a78:	000025f1 	.word	0x000025f1

00003a7c <system_interrupt_leave_critical_section>:
    3a7c:	b580      	push	{r7, lr}
    3a7e:	af00      	add	r7, sp, #0
    3a80:	4b01      	ldr	r3, [pc, #4]	; (3a88 <system_interrupt_leave_critical_section+0xc>)
    3a82:	4798      	blx	r3
    3a84:	46bd      	mov	sp, r7
    3a86:	bd80      	pop	{r7, pc}
    3a88:	00002641 	.word	0x00002641

00003a8c <system_gclk_is_syncing>:
    3a8c:	b580      	push	{r7, lr}
    3a8e:	af00      	add	r7, sp, #0
    3a90:	4b06      	ldr	r3, [pc, #24]	; (3aac <system_gclk_is_syncing+0x20>)
    3a92:	785b      	ldrb	r3, [r3, #1]
    3a94:	b2db      	uxtb	r3, r3
    3a96:	b2db      	uxtb	r3, r3
    3a98:	b25b      	sxtb	r3, r3
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	da01      	bge.n	3aa2 <system_gclk_is_syncing+0x16>
    3a9e:	2301      	movs	r3, #1
    3aa0:	e000      	b.n	3aa4 <system_gclk_is_syncing+0x18>
    3aa2:	2300      	movs	r3, #0
    3aa4:	1c18      	adds	r0, r3, #0
    3aa6:	46bd      	mov	sp, r7
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	40000c00 	.word	0x40000c00

00003ab0 <system_gclk_init>:
    3ab0:	b580      	push	{r7, lr}
    3ab2:	af00      	add	r7, sp, #0
    3ab4:	2000      	movs	r0, #0
    3ab6:	2108      	movs	r1, #8
    3ab8:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <system_gclk_init+0x28>)
    3aba:	4798      	blx	r3
    3abc:	4b07      	ldr	r3, [pc, #28]	; (3adc <system_gclk_init+0x2c>)
    3abe:	2201      	movs	r2, #1
    3ac0:	701a      	strb	r2, [r3, #0]
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	4b05      	ldr	r3, [pc, #20]	; (3adc <system_gclk_init+0x2c>)
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	b2db      	uxtb	r3, r3
    3aca:	1c1a      	adds	r2, r3, #0
    3acc:	2301      	movs	r3, #1
    3ace:	4013      	ands	r3, r2
    3ad0:	d1f8      	bne.n	3ac4 <system_gclk_init+0x14>
    3ad2:	46bd      	mov	sp, r7
    3ad4:	bd80      	pop	{r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	00003a11 	.word	0x00003a11
    3adc:	40000c00 	.word	0x40000c00

00003ae0 <system_gclk_gen_set_config>:
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b086      	sub	sp, #24
    3ae4:	af00      	add	r7, sp, #0
    3ae6:	1c02      	adds	r2, r0, #0
    3ae8:	6039      	str	r1, [r7, #0]
    3aea:	1dfb      	adds	r3, r7, #7
    3aec:	701a      	strb	r2, [r3, #0]
    3aee:	1dfb      	adds	r3, r7, #7
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	617b      	str	r3, [r7, #20]
    3af4:	1dfb      	adds	r3, r7, #7
    3af6:	781b      	ldrb	r3, [r3, #0]
    3af8:	613b      	str	r3, [r7, #16]
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	781b      	ldrb	r3, [r3, #0]
    3afe:	021b      	lsls	r3, r3, #8
    3b00:	1c1a      	adds	r2, r3, #0
    3b02:	697b      	ldr	r3, [r7, #20]
    3b04:	4313      	orrs	r3, r2
    3b06:	617b      	str	r3, [r7, #20]
    3b08:	683b      	ldr	r3, [r7, #0]
    3b0a:	785b      	ldrb	r3, [r3, #1]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d004      	beq.n	3b1a <system_gclk_gen_set_config+0x3a>
    3b10:	697b      	ldr	r3, [r7, #20]
    3b12:	2280      	movs	r2, #128	; 0x80
    3b14:	02d2      	lsls	r2, r2, #11
    3b16:	4313      	orrs	r3, r2
    3b18:	617b      	str	r3, [r7, #20]
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	7a5b      	ldrb	r3, [r3, #9]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d004      	beq.n	3b2c <system_gclk_gen_set_config+0x4c>
    3b22:	697b      	ldr	r3, [r7, #20]
    3b24:	2280      	movs	r2, #128	; 0x80
    3b26:	0312      	lsls	r2, r2, #12
    3b28:	4313      	orrs	r3, r2
    3b2a:	617b      	str	r3, [r7, #20]
    3b2c:	683b      	ldr	r3, [r7, #0]
    3b2e:	685b      	ldr	r3, [r3, #4]
    3b30:	2b01      	cmp	r3, #1
    3b32:	d92c      	bls.n	3b8e <system_gclk_gen_set_config+0xae>
    3b34:	683b      	ldr	r3, [r7, #0]
    3b36:	685a      	ldr	r2, [r3, #4]
    3b38:	683b      	ldr	r3, [r7, #0]
    3b3a:	685b      	ldr	r3, [r3, #4]
    3b3c:	3b01      	subs	r3, #1
    3b3e:	4013      	ands	r3, r2
    3b40:	d11a      	bne.n	3b78 <system_gclk_gen_set_config+0x98>
    3b42:	2300      	movs	r3, #0
    3b44:	60fb      	str	r3, [r7, #12]
    3b46:	2302      	movs	r3, #2
    3b48:	60bb      	str	r3, [r7, #8]
    3b4a:	e005      	b.n	3b58 <system_gclk_gen_set_config+0x78>
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	3301      	adds	r3, #1
    3b50:	60fb      	str	r3, [r7, #12]
    3b52:	68bb      	ldr	r3, [r7, #8]
    3b54:	005b      	lsls	r3, r3, #1
    3b56:	60bb      	str	r3, [r7, #8]
    3b58:	683b      	ldr	r3, [r7, #0]
    3b5a:	685a      	ldr	r2, [r3, #4]
    3b5c:	68bb      	ldr	r3, [r7, #8]
    3b5e:	429a      	cmp	r2, r3
    3b60:	d8f4      	bhi.n	3b4c <system_gclk_gen_set_config+0x6c>
    3b62:	68fb      	ldr	r3, [r7, #12]
    3b64:	021b      	lsls	r3, r3, #8
    3b66:	693a      	ldr	r2, [r7, #16]
    3b68:	4313      	orrs	r3, r2
    3b6a:	613b      	str	r3, [r7, #16]
    3b6c:	697b      	ldr	r3, [r7, #20]
    3b6e:	2280      	movs	r2, #128	; 0x80
    3b70:	0352      	lsls	r2, r2, #13
    3b72:	4313      	orrs	r3, r2
    3b74:	617b      	str	r3, [r7, #20]
    3b76:	e00a      	b.n	3b8e <system_gclk_gen_set_config+0xae>
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	685b      	ldr	r3, [r3, #4]
    3b7c:	021b      	lsls	r3, r3, #8
    3b7e:	693a      	ldr	r2, [r7, #16]
    3b80:	4313      	orrs	r3, r2
    3b82:	613b      	str	r3, [r7, #16]
    3b84:	697b      	ldr	r3, [r7, #20]
    3b86:	2280      	movs	r2, #128	; 0x80
    3b88:	0292      	lsls	r2, r2, #10
    3b8a:	4313      	orrs	r3, r2
    3b8c:	617b      	str	r3, [r7, #20]
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	7a1b      	ldrb	r3, [r3, #8]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d004      	beq.n	3ba0 <system_gclk_gen_set_config+0xc0>
    3b96:	697b      	ldr	r3, [r7, #20]
    3b98:	2280      	movs	r2, #128	; 0x80
    3b9a:	0392      	lsls	r2, r2, #14
    3b9c:	4313      	orrs	r3, r2
    3b9e:	617b      	str	r3, [r7, #20]
    3ba0:	46c0      	nop			; (mov r8, r8)
    3ba2:	4b12      	ldr	r3, [pc, #72]	; (3bec <system_gclk_gen_set_config+0x10c>)
    3ba4:	4798      	blx	r3
    3ba6:	1e03      	subs	r3, r0, #0
    3ba8:	d1fb      	bne.n	3ba2 <system_gclk_gen_set_config+0xc2>
    3baa:	4b11      	ldr	r3, [pc, #68]	; (3bf0 <system_gclk_gen_set_config+0x110>)
    3bac:	4798      	blx	r3
    3bae:	4a11      	ldr	r2, [pc, #68]	; (3bf4 <system_gclk_gen_set_config+0x114>)
    3bb0:	1dfb      	adds	r3, r7, #7
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	7013      	strb	r3, [r2, #0]
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	4b0c      	ldr	r3, [pc, #48]	; (3bec <system_gclk_gen_set_config+0x10c>)
    3bba:	4798      	blx	r3
    3bbc:	1e03      	subs	r3, r0, #0
    3bbe:	d1fb      	bne.n	3bb8 <system_gclk_gen_set_config+0xd8>
    3bc0:	4b0d      	ldr	r3, [pc, #52]	; (3bf8 <system_gclk_gen_set_config+0x118>)
    3bc2:	693a      	ldr	r2, [r7, #16]
    3bc4:	609a      	str	r2, [r3, #8]
    3bc6:	46c0      	nop			; (mov r8, r8)
    3bc8:	4b08      	ldr	r3, [pc, #32]	; (3bec <system_gclk_gen_set_config+0x10c>)
    3bca:	4798      	blx	r3
    3bcc:	1e03      	subs	r3, r0, #0
    3bce:	d1fb      	bne.n	3bc8 <system_gclk_gen_set_config+0xe8>
    3bd0:	4b09      	ldr	r3, [pc, #36]	; (3bf8 <system_gclk_gen_set_config+0x118>)
    3bd2:	4a09      	ldr	r2, [pc, #36]	; (3bf8 <system_gclk_gen_set_config+0x118>)
    3bd4:	6851      	ldr	r1, [r2, #4]
    3bd6:	2280      	movs	r2, #128	; 0x80
    3bd8:	0252      	lsls	r2, r2, #9
    3bda:	4011      	ands	r1, r2
    3bdc:	697a      	ldr	r2, [r7, #20]
    3bde:	430a      	orrs	r2, r1
    3be0:	605a      	str	r2, [r3, #4]
    3be2:	4b06      	ldr	r3, [pc, #24]	; (3bfc <system_gclk_gen_set_config+0x11c>)
    3be4:	4798      	blx	r3
    3be6:	46bd      	mov	sp, r7
    3be8:	b006      	add	sp, #24
    3bea:	bd80      	pop	{r7, pc}
    3bec:	00003a8d 	.word	0x00003a8d
    3bf0:	00003a6d 	.word	0x00003a6d
    3bf4:	40000c08 	.word	0x40000c08
    3bf8:	40000c00 	.word	0x40000c00
    3bfc:	00003a7d 	.word	0x00003a7d

00003c00 <system_gclk_gen_enable>:
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	1c02      	adds	r2, r0, #0
    3c08:	1dfb      	adds	r3, r7, #7
    3c0a:	701a      	strb	r2, [r3, #0]
    3c0c:	46c0      	nop			; (mov r8, r8)
    3c0e:	4b0d      	ldr	r3, [pc, #52]	; (3c44 <system_gclk_gen_enable+0x44>)
    3c10:	4798      	blx	r3
    3c12:	1e03      	subs	r3, r0, #0
    3c14:	d1fb      	bne.n	3c0e <system_gclk_gen_enable+0xe>
    3c16:	4b0c      	ldr	r3, [pc, #48]	; (3c48 <system_gclk_gen_enable+0x48>)
    3c18:	4798      	blx	r3
    3c1a:	4a0c      	ldr	r2, [pc, #48]	; (3c4c <system_gclk_gen_enable+0x4c>)
    3c1c:	1dfb      	adds	r3, r7, #7
    3c1e:	781b      	ldrb	r3, [r3, #0]
    3c20:	7013      	strb	r3, [r2, #0]
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	4b07      	ldr	r3, [pc, #28]	; (3c44 <system_gclk_gen_enable+0x44>)
    3c26:	4798      	blx	r3
    3c28:	1e03      	subs	r3, r0, #0
    3c2a:	d1fb      	bne.n	3c24 <system_gclk_gen_enable+0x24>
    3c2c:	4b08      	ldr	r3, [pc, #32]	; (3c50 <system_gclk_gen_enable+0x50>)
    3c2e:	4a08      	ldr	r2, [pc, #32]	; (3c50 <system_gclk_gen_enable+0x50>)
    3c30:	6852      	ldr	r2, [r2, #4]
    3c32:	2180      	movs	r1, #128	; 0x80
    3c34:	0249      	lsls	r1, r1, #9
    3c36:	430a      	orrs	r2, r1
    3c38:	605a      	str	r2, [r3, #4]
    3c3a:	4b06      	ldr	r3, [pc, #24]	; (3c54 <system_gclk_gen_enable+0x54>)
    3c3c:	4798      	blx	r3
    3c3e:	46bd      	mov	sp, r7
    3c40:	b002      	add	sp, #8
    3c42:	bd80      	pop	{r7, pc}
    3c44:	00003a8d 	.word	0x00003a8d
    3c48:	00003a6d 	.word	0x00003a6d
    3c4c:	40000c04 	.word	0x40000c04
    3c50:	40000c00 	.word	0x40000c00
    3c54:	00003a7d 	.word	0x00003a7d

00003c58 <system_gclk_gen_get_hz>:
    3c58:	b580      	push	{r7, lr}
    3c5a:	b086      	sub	sp, #24
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	1c02      	adds	r2, r0, #0
    3c60:	1dfb      	adds	r3, r7, #7
    3c62:	701a      	strb	r2, [r3, #0]
    3c64:	46c0      	nop			; (mov r8, r8)
    3c66:	4b2e      	ldr	r3, [pc, #184]	; (3d20 <system_gclk_gen_get_hz+0xc8>)
    3c68:	4798      	blx	r3
    3c6a:	1e03      	subs	r3, r0, #0
    3c6c:	d1fb      	bne.n	3c66 <system_gclk_gen_get_hz+0xe>
    3c6e:	4b2d      	ldr	r3, [pc, #180]	; (3d24 <system_gclk_gen_get_hz+0xcc>)
    3c70:	4798      	blx	r3
    3c72:	4a2d      	ldr	r2, [pc, #180]	; (3d28 <system_gclk_gen_get_hz+0xd0>)
    3c74:	1dfb      	adds	r3, r7, #7
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	7013      	strb	r3, [r2, #0]
    3c7a:	46c0      	nop			; (mov r8, r8)
    3c7c:	4b28      	ldr	r3, [pc, #160]	; (3d20 <system_gclk_gen_get_hz+0xc8>)
    3c7e:	4798      	blx	r3
    3c80:	1e03      	subs	r3, r0, #0
    3c82:	d1fb      	bne.n	3c7c <system_gclk_gen_get_hz+0x24>
    3c84:	4b29      	ldr	r3, [pc, #164]	; (3d2c <system_gclk_gen_get_hz+0xd4>)
    3c86:	685b      	ldr	r3, [r3, #4]
    3c88:	0a1b      	lsrs	r3, r3, #8
    3c8a:	1c1a      	adds	r2, r3, #0
    3c8c:	231f      	movs	r3, #31
    3c8e:	4013      	ands	r3, r2
    3c90:	b2db      	uxtb	r3, r3
    3c92:	1c18      	adds	r0, r3, #0
    3c94:	4b26      	ldr	r3, [pc, #152]	; (3d30 <system_gclk_gen_get_hz+0xd8>)
    3c96:	4798      	blx	r3
    3c98:	1c03      	adds	r3, r0, #0
    3c9a:	617b      	str	r3, [r7, #20]
    3c9c:	4a22      	ldr	r2, [pc, #136]	; (3d28 <system_gclk_gen_get_hz+0xd0>)
    3c9e:	1dfb      	adds	r3, r7, #7
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	7013      	strb	r3, [r2, #0]
    3ca4:	4b21      	ldr	r3, [pc, #132]	; (3d2c <system_gclk_gen_get_hz+0xd4>)
    3ca6:	685b      	ldr	r3, [r3, #4]
    3ca8:	0d1b      	lsrs	r3, r3, #20
    3caa:	1c1a      	adds	r2, r3, #0
    3cac:	2301      	movs	r3, #1
    3cae:	4013      	ands	r3, r2
    3cb0:	b2da      	uxtb	r2, r3
    3cb2:	2313      	movs	r3, #19
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	701a      	strb	r2, [r3, #0]
    3cb8:	4a1e      	ldr	r2, [pc, #120]	; (3d34 <system_gclk_gen_get_hz+0xdc>)
    3cba:	1dfb      	adds	r3, r7, #7
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	7013      	strb	r3, [r2, #0]
    3cc0:	46c0      	nop			; (mov r8, r8)
    3cc2:	4b17      	ldr	r3, [pc, #92]	; (3d20 <system_gclk_gen_get_hz+0xc8>)
    3cc4:	4798      	blx	r3
    3cc6:	1e03      	subs	r3, r0, #0
    3cc8:	d1fb      	bne.n	3cc2 <system_gclk_gen_get_hz+0x6a>
    3cca:	4b18      	ldr	r3, [pc, #96]	; (3d2c <system_gclk_gen_get_hz+0xd4>)
    3ccc:	689b      	ldr	r3, [r3, #8]
    3cce:	0a1b      	lsrs	r3, r3, #8
    3cd0:	1c1a      	adds	r2, r3, #0
    3cd2:	2300      	movs	r3, #0
    3cd4:	439a      	bics	r2, r3
    3cd6:	1c13      	adds	r3, r2, #0
    3cd8:	b29b      	uxth	r3, r3
    3cda:	60fb      	str	r3, [r7, #12]
    3cdc:	4b16      	ldr	r3, [pc, #88]	; (3d38 <system_gclk_gen_get_hz+0xe0>)
    3cde:	4798      	blx	r3
    3ce0:	2313      	movs	r3, #19
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d109      	bne.n	3cfe <system_gclk_gen_get_hz+0xa6>
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	2b01      	cmp	r3, #1
    3cee:	d906      	bls.n	3cfe <system_gclk_gen_get_hz+0xa6>
    3cf0:	4b12      	ldr	r3, [pc, #72]	; (3d3c <system_gclk_gen_get_hz+0xe4>)
    3cf2:	6978      	ldr	r0, [r7, #20]
    3cf4:	68f9      	ldr	r1, [r7, #12]
    3cf6:	4798      	blx	r3
    3cf8:	1c03      	adds	r3, r0, #0
    3cfa:	617b      	str	r3, [r7, #20]
    3cfc:	e00a      	b.n	3d14 <system_gclk_gen_get_hz+0xbc>
    3cfe:	2313      	movs	r3, #19
    3d00:	18fb      	adds	r3, r7, r3
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	2b00      	cmp	r3, #0
    3d06:	d005      	beq.n	3d14 <system_gclk_gen_get_hz+0xbc>
    3d08:	68fb      	ldr	r3, [r7, #12]
    3d0a:	3301      	adds	r3, #1
    3d0c:	1c1a      	adds	r2, r3, #0
    3d0e:	697b      	ldr	r3, [r7, #20]
    3d10:	40d3      	lsrs	r3, r2
    3d12:	617b      	str	r3, [r7, #20]
    3d14:	697b      	ldr	r3, [r7, #20]
    3d16:	1c18      	adds	r0, r3, #0
    3d18:	46bd      	mov	sp, r7
    3d1a:	b006      	add	sp, #24
    3d1c:	bd80      	pop	{r7, pc}
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	00003a8d 	.word	0x00003a8d
    3d24:	00003a6d 	.word	0x00003a6d
    3d28:	40000c04 	.word	0x40000c04
    3d2c:	40000c00 	.word	0x40000c00
    3d30:	0000354d 	.word	0x0000354d
    3d34:	40000c08 	.word	0x40000c08
    3d38:	00003a7d 	.word	0x00003a7d
    3d3c:	00004115 	.word	0x00004115

00003d40 <system_gclk_chan_set_config>:
    3d40:	b580      	push	{r7, lr}
    3d42:	b084      	sub	sp, #16
    3d44:	af00      	add	r7, sp, #0
    3d46:	1c02      	adds	r2, r0, #0
    3d48:	6039      	str	r1, [r7, #0]
    3d4a:	1dfb      	adds	r3, r7, #7
    3d4c:	701a      	strb	r2, [r3, #0]
    3d4e:	1dfb      	adds	r3, r7, #7
    3d50:	781b      	ldrb	r3, [r3, #0]
    3d52:	60fb      	str	r3, [r7, #12]
    3d54:	683b      	ldr	r3, [r7, #0]
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	021b      	lsls	r3, r3, #8
    3d5a:	1c1a      	adds	r2, r3, #0
    3d5c:	68fb      	ldr	r3, [r7, #12]
    3d5e:	4313      	orrs	r3, r2
    3d60:	60fb      	str	r3, [r7, #12]
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	1c18      	adds	r0, r3, #0
    3d68:	4b04      	ldr	r3, [pc, #16]	; (3d7c <system_gclk_chan_set_config+0x3c>)
    3d6a:	4798      	blx	r3
    3d6c:	4b04      	ldr	r3, [pc, #16]	; (3d80 <system_gclk_chan_set_config+0x40>)
    3d6e:	68fa      	ldr	r2, [r7, #12]
    3d70:	b292      	uxth	r2, r2
    3d72:	805a      	strh	r2, [r3, #2]
    3d74:	46bd      	mov	sp, r7
    3d76:	b004      	add	sp, #16
    3d78:	bd80      	pop	{r7, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	00003dc9 	.word	0x00003dc9
    3d80:	40000c00 	.word	0x40000c00

00003d84 <system_gclk_chan_enable>:
    3d84:	b580      	push	{r7, lr}
    3d86:	b082      	sub	sp, #8
    3d88:	af00      	add	r7, sp, #0
    3d8a:	1c02      	adds	r2, r0, #0
    3d8c:	1dfb      	adds	r3, r7, #7
    3d8e:	701a      	strb	r2, [r3, #0]
    3d90:	4b09      	ldr	r3, [pc, #36]	; (3db8 <system_gclk_chan_enable+0x34>)
    3d92:	4798      	blx	r3
    3d94:	4a09      	ldr	r2, [pc, #36]	; (3dbc <system_gclk_chan_enable+0x38>)
    3d96:	1dfb      	adds	r3, r7, #7
    3d98:	781b      	ldrb	r3, [r3, #0]
    3d9a:	7013      	strb	r3, [r2, #0]
    3d9c:	4908      	ldr	r1, [pc, #32]	; (3dc0 <system_gclk_chan_enable+0x3c>)
    3d9e:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <system_gclk_chan_enable+0x3c>)
    3da0:	885b      	ldrh	r3, [r3, #2]
    3da2:	b29b      	uxth	r3, r3
    3da4:	2280      	movs	r2, #128	; 0x80
    3da6:	01d2      	lsls	r2, r2, #7
    3da8:	4313      	orrs	r3, r2
    3daa:	b29b      	uxth	r3, r3
    3dac:	804b      	strh	r3, [r1, #2]
    3dae:	4b05      	ldr	r3, [pc, #20]	; (3dc4 <system_gclk_chan_enable+0x40>)
    3db0:	4798      	blx	r3
    3db2:	46bd      	mov	sp, r7
    3db4:	b002      	add	sp, #8
    3db6:	bd80      	pop	{r7, pc}
    3db8:	00003a6d 	.word	0x00003a6d
    3dbc:	40000c02 	.word	0x40000c02
    3dc0:	40000c00 	.word	0x40000c00
    3dc4:	00003a7d 	.word	0x00003a7d

00003dc8 <system_gclk_chan_disable>:
    3dc8:	b580      	push	{r7, lr}
    3dca:	b084      	sub	sp, #16
    3dcc:	af00      	add	r7, sp, #0
    3dce:	1c02      	adds	r2, r0, #0
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	701a      	strb	r2, [r3, #0]
    3dd4:	4b1d      	ldr	r3, [pc, #116]	; (3e4c <system_gclk_chan_disable+0x84>)
    3dd6:	4798      	blx	r3
    3dd8:	4a1d      	ldr	r2, [pc, #116]	; (3e50 <system_gclk_chan_disable+0x88>)
    3dda:	1dfb      	adds	r3, r7, #7
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	7013      	strb	r3, [r2, #0]
    3de0:	4b1c      	ldr	r3, [pc, #112]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3de2:	885b      	ldrh	r3, [r3, #2]
    3de4:	b29b      	uxth	r3, r3
    3de6:	0a1b      	lsrs	r3, r3, #8
    3de8:	1c1a      	adds	r2, r3, #0
    3dea:	230f      	movs	r3, #15
    3dec:	4013      	ands	r3, r2
    3dee:	b2db      	uxtb	r3, r3
    3df0:	60fb      	str	r3, [r7, #12]
    3df2:	4b18      	ldr	r3, [pc, #96]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3df4:	885a      	ldrh	r2, [r3, #2]
    3df6:	4918      	ldr	r1, [pc, #96]	; (3e58 <system_gclk_chan_disable+0x90>)
    3df8:	400a      	ands	r2, r1
    3dfa:	805a      	strh	r2, [r3, #2]
    3dfc:	4a15      	ldr	r2, [pc, #84]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3dfe:	4b15      	ldr	r3, [pc, #84]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3e00:	885b      	ldrh	r3, [r3, #2]
    3e02:	b29b      	uxth	r3, r3
    3e04:	4915      	ldr	r1, [pc, #84]	; (3e5c <system_gclk_chan_disable+0x94>)
    3e06:	400b      	ands	r3, r1
    3e08:	b29b      	uxth	r3, r3
    3e0a:	8053      	strh	r3, [r2, #2]
    3e0c:	46c0      	nop			; (mov r8, r8)
    3e0e:	4b11      	ldr	r3, [pc, #68]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3e10:	885b      	ldrh	r3, [r3, #2]
    3e12:	b29b      	uxth	r3, r3
    3e14:	1c1a      	adds	r2, r3, #0
    3e16:	2380      	movs	r3, #128	; 0x80
    3e18:	01db      	lsls	r3, r3, #7
    3e1a:	4013      	ands	r3, r2
    3e1c:	d1f7      	bne.n	3e0e <system_gclk_chan_disable+0x46>
    3e1e:	4b0d      	ldr	r3, [pc, #52]	; (3e54 <system_gclk_chan_disable+0x8c>)
    3e20:	68fa      	ldr	r2, [r7, #12]
    3e22:	b2d2      	uxtb	r2, r2
    3e24:	1c11      	adds	r1, r2, #0
    3e26:	220f      	movs	r2, #15
    3e28:	400a      	ands	r2, r1
    3e2a:	b2d2      	uxtb	r2, r2
    3e2c:	1c11      	adds	r1, r2, #0
    3e2e:	220f      	movs	r2, #15
    3e30:	400a      	ands	r2, r1
    3e32:	0210      	lsls	r0, r2, #8
    3e34:	885a      	ldrh	r2, [r3, #2]
    3e36:	4908      	ldr	r1, [pc, #32]	; (3e58 <system_gclk_chan_disable+0x90>)
    3e38:	400a      	ands	r2, r1
    3e3a:	1c11      	adds	r1, r2, #0
    3e3c:	1c02      	adds	r2, r0, #0
    3e3e:	430a      	orrs	r2, r1
    3e40:	805a      	strh	r2, [r3, #2]
    3e42:	4b07      	ldr	r3, [pc, #28]	; (3e60 <system_gclk_chan_disable+0x98>)
    3e44:	4798      	blx	r3
    3e46:	46bd      	mov	sp, r7
    3e48:	b004      	add	sp, #16
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	00003a6d 	.word	0x00003a6d
    3e50:	40000c02 	.word	0x40000c02
    3e54:	40000c00 	.word	0x40000c00
    3e58:	fffff0ff 	.word	0xfffff0ff
    3e5c:	ffffbfff 	.word	0xffffbfff
    3e60:	00003a7d 	.word	0x00003a7d

00003e64 <system_gclk_chan_get_hz>:
    3e64:	b580      	push	{r7, lr}
    3e66:	b084      	sub	sp, #16
    3e68:	af00      	add	r7, sp, #0
    3e6a:	1c02      	adds	r2, r0, #0
    3e6c:	1dfb      	adds	r3, r7, #7
    3e6e:	701a      	strb	r2, [r3, #0]
    3e70:	4b0e      	ldr	r3, [pc, #56]	; (3eac <system_gclk_chan_get_hz+0x48>)
    3e72:	4798      	blx	r3
    3e74:	4a0e      	ldr	r2, [pc, #56]	; (3eb0 <system_gclk_chan_get_hz+0x4c>)
    3e76:	1dfb      	adds	r3, r7, #7
    3e78:	781b      	ldrb	r3, [r3, #0]
    3e7a:	7013      	strb	r3, [r2, #0]
    3e7c:	4b0d      	ldr	r3, [pc, #52]	; (3eb4 <system_gclk_chan_get_hz+0x50>)
    3e7e:	885b      	ldrh	r3, [r3, #2]
    3e80:	b29b      	uxth	r3, r3
    3e82:	0a1b      	lsrs	r3, r3, #8
    3e84:	1c1a      	adds	r2, r3, #0
    3e86:	230f      	movs	r3, #15
    3e88:	4013      	ands	r3, r2
    3e8a:	b2da      	uxtb	r2, r3
    3e8c:	230f      	movs	r3, #15
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	701a      	strb	r2, [r3, #0]
    3e92:	4b09      	ldr	r3, [pc, #36]	; (3eb8 <system_gclk_chan_get_hz+0x54>)
    3e94:	4798      	blx	r3
    3e96:	230f      	movs	r3, #15
    3e98:	18fb      	adds	r3, r7, r3
    3e9a:	781b      	ldrb	r3, [r3, #0]
    3e9c:	1c18      	adds	r0, r3, #0
    3e9e:	4b07      	ldr	r3, [pc, #28]	; (3ebc <system_gclk_chan_get_hz+0x58>)
    3ea0:	4798      	blx	r3
    3ea2:	1c03      	adds	r3, r0, #0
    3ea4:	1c18      	adds	r0, r3, #0
    3ea6:	46bd      	mov	sp, r7
    3ea8:	b004      	add	sp, #16
    3eaa:	bd80      	pop	{r7, pc}
    3eac:	00003a6d 	.word	0x00003a6d
    3eb0:	40000c02 	.word	0x40000c02
    3eb4:	40000c00 	.word	0x40000c00
    3eb8:	00003a7d 	.word	0x00003a7d
    3ebc:	00003c59 	.word	0x00003c59

00003ec0 <system_pinmux_get_group_from_gpio_pin>:
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	1c02      	adds	r2, r0, #0
    3ec8:	1dfb      	adds	r3, r7, #7
    3eca:	701a      	strb	r2, [r3, #0]
    3ecc:	230f      	movs	r3, #15
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	1dfa      	adds	r2, r7, #7
    3ed2:	7812      	ldrb	r2, [r2, #0]
    3ed4:	09d2      	lsrs	r2, r2, #7
    3ed6:	701a      	strb	r2, [r3, #0]
    3ed8:	230e      	movs	r3, #14
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	1dfa      	adds	r2, r7, #7
    3ede:	7812      	ldrb	r2, [r2, #0]
    3ee0:	0952      	lsrs	r2, r2, #5
    3ee2:	701a      	strb	r2, [r3, #0]
    3ee4:	4b0d      	ldr	r3, [pc, #52]	; (3f1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ee6:	60bb      	str	r3, [r7, #8]
    3ee8:	230f      	movs	r3, #15
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d10f      	bne.n	3f12 <system_pinmux_get_group_from_gpio_pin+0x52>
    3ef2:	230f      	movs	r3, #15
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	009b      	lsls	r3, r3, #2
    3efa:	2210      	movs	r2, #16
    3efc:	4694      	mov	ip, r2
    3efe:	44bc      	add	ip, r7
    3f00:	4463      	add	r3, ip
    3f02:	3b08      	subs	r3, #8
    3f04:	681a      	ldr	r2, [r3, #0]
    3f06:	230e      	movs	r3, #14
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	781b      	ldrb	r3, [r3, #0]
    3f0c:	01db      	lsls	r3, r3, #7
    3f0e:	18d3      	adds	r3, r2, r3
    3f10:	e000      	b.n	3f14 <system_pinmux_get_group_from_gpio_pin+0x54>
    3f12:	2300      	movs	r3, #0
    3f14:	1c18      	adds	r0, r3, #0
    3f16:	46bd      	mov	sp, r7
    3f18:	b004      	add	sp, #16
    3f1a:	bd80      	pop	{r7, pc}
    3f1c:	41004400 	.word	0x41004400

00003f20 <_system_pinmux_config>:
    3f20:	b580      	push	{r7, lr}
    3f22:	b088      	sub	sp, #32
    3f24:	af00      	add	r7, sp, #0
    3f26:	60f8      	str	r0, [r7, #12]
    3f28:	60b9      	str	r1, [r7, #8]
    3f2a:	607a      	str	r2, [r7, #4]
    3f2c:	2300      	movs	r3, #0
    3f2e:	61fb      	str	r3, [r7, #28]
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	78db      	ldrb	r3, [r3, #3]
    3f34:	2201      	movs	r2, #1
    3f36:	4053      	eors	r3, r2
    3f38:	b2db      	uxtb	r3, r3
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d035      	beq.n	3faa <_system_pinmux_config+0x8a>
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	781b      	ldrb	r3, [r3, #0]
    3f42:	2b80      	cmp	r3, #128	; 0x80
    3f44:	d00b      	beq.n	3f5e <_system_pinmux_config+0x3e>
    3f46:	69fb      	ldr	r3, [r7, #28]
    3f48:	2280      	movs	r2, #128	; 0x80
    3f4a:	0252      	lsls	r2, r2, #9
    3f4c:	4313      	orrs	r3, r2
    3f4e:	61fb      	str	r3, [r7, #28]
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	061b      	lsls	r3, r3, #24
    3f56:	1c1a      	adds	r2, r3, #0
    3f58:	69fb      	ldr	r3, [r7, #28]
    3f5a:	4313      	orrs	r3, r2
    3f5c:	61fb      	str	r3, [r7, #28]
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	785b      	ldrb	r3, [r3, #1]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d003      	beq.n	3f6e <_system_pinmux_config+0x4e>
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	785b      	ldrb	r3, [r3, #1]
    3f6a:	2b02      	cmp	r3, #2
    3f6c:	d110      	bne.n	3f90 <_system_pinmux_config+0x70>
    3f6e:	69fb      	ldr	r3, [r7, #28]
    3f70:	2280      	movs	r2, #128	; 0x80
    3f72:	0292      	lsls	r2, r2, #10
    3f74:	4313      	orrs	r3, r2
    3f76:	61fb      	str	r3, [r7, #28]
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	789b      	ldrb	r3, [r3, #2]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d004      	beq.n	3f8a <_system_pinmux_config+0x6a>
    3f80:	69fb      	ldr	r3, [r7, #28]
    3f82:	2280      	movs	r2, #128	; 0x80
    3f84:	02d2      	lsls	r2, r2, #11
    3f86:	4313      	orrs	r3, r2
    3f88:	61fb      	str	r3, [r7, #28]
    3f8a:	68fb      	ldr	r3, [r7, #12]
    3f8c:	68ba      	ldr	r2, [r7, #8]
    3f8e:	605a      	str	r2, [r3, #4]
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	785b      	ldrb	r3, [r3, #1]
    3f94:	2b01      	cmp	r3, #1
    3f96:	d003      	beq.n	3fa0 <_system_pinmux_config+0x80>
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	785b      	ldrb	r3, [r3, #1]
    3f9c:	2b02      	cmp	r3, #2
    3f9e:	d107      	bne.n	3fb0 <_system_pinmux_config+0x90>
    3fa0:	69fb      	ldr	r3, [r7, #28]
    3fa2:	4a21      	ldr	r2, [pc, #132]	; (4028 <_system_pinmux_config+0x108>)
    3fa4:	4013      	ands	r3, r2
    3fa6:	61fb      	str	r3, [r7, #28]
    3fa8:	e002      	b.n	3fb0 <_system_pinmux_config+0x90>
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	68ba      	ldr	r2, [r7, #8]
    3fae:	605a      	str	r2, [r3, #4]
    3fb0:	68bb      	ldr	r3, [r7, #8]
    3fb2:	041b      	lsls	r3, r3, #16
    3fb4:	0c1b      	lsrs	r3, r3, #16
    3fb6:	61bb      	str	r3, [r7, #24]
    3fb8:	68bb      	ldr	r3, [r7, #8]
    3fba:	0c1b      	lsrs	r3, r3, #16
    3fbc:	617b      	str	r3, [r7, #20]
    3fbe:	69ba      	ldr	r2, [r7, #24]
    3fc0:	69fb      	ldr	r3, [r7, #28]
    3fc2:	4313      	orrs	r3, r2
    3fc4:	22a0      	movs	r2, #160	; 0xa0
    3fc6:	05d2      	lsls	r2, r2, #23
    3fc8:	431a      	orrs	r2, r3
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	629a      	str	r2, [r3, #40]	; 0x28
    3fce:	697a      	ldr	r2, [r7, #20]
    3fd0:	69fb      	ldr	r3, [r7, #28]
    3fd2:	4313      	orrs	r3, r2
    3fd4:	22d0      	movs	r2, #208	; 0xd0
    3fd6:	0612      	lsls	r2, r2, #24
    3fd8:	431a      	orrs	r2, r3
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	629a      	str	r2, [r3, #40]	; 0x28
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	78db      	ldrb	r3, [r3, #3]
    3fe2:	2201      	movs	r2, #1
    3fe4:	4053      	eors	r3, r2
    3fe6:	b2db      	uxtb	r3, r3
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d01a      	beq.n	4022 <_system_pinmux_config+0x102>
    3fec:	69fa      	ldr	r2, [r7, #28]
    3fee:	2380      	movs	r3, #128	; 0x80
    3ff0:	02db      	lsls	r3, r3, #11
    3ff2:	4013      	ands	r3, r2
    3ff4:	d00a      	beq.n	400c <_system_pinmux_config+0xec>
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	789b      	ldrb	r3, [r3, #2]
    3ffa:	2b01      	cmp	r3, #1
    3ffc:	d103      	bne.n	4006 <_system_pinmux_config+0xe6>
    3ffe:	68fb      	ldr	r3, [r7, #12]
    4000:	68ba      	ldr	r2, [r7, #8]
    4002:	619a      	str	r2, [r3, #24]
    4004:	e002      	b.n	400c <_system_pinmux_config+0xec>
    4006:	68fb      	ldr	r3, [r7, #12]
    4008:	68ba      	ldr	r2, [r7, #8]
    400a:	615a      	str	r2, [r3, #20]
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	785b      	ldrb	r3, [r3, #1]
    4010:	2b01      	cmp	r3, #1
    4012:	d003      	beq.n	401c <_system_pinmux_config+0xfc>
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	785b      	ldrb	r3, [r3, #1]
    4018:	2b02      	cmp	r3, #2
    401a:	d102      	bne.n	4022 <_system_pinmux_config+0x102>
    401c:	68fb      	ldr	r3, [r7, #12]
    401e:	68ba      	ldr	r2, [r7, #8]
    4020:	609a      	str	r2, [r3, #8]
    4022:	46bd      	mov	sp, r7
    4024:	b008      	add	sp, #32
    4026:	bd80      	pop	{r7, pc}
    4028:	fffbffff 	.word	0xfffbffff

0000402c <system_pinmux_pin_set_config>:
    402c:	b580      	push	{r7, lr}
    402e:	b084      	sub	sp, #16
    4030:	af00      	add	r7, sp, #0
    4032:	1c02      	adds	r2, r0, #0
    4034:	6039      	str	r1, [r7, #0]
    4036:	1dfb      	adds	r3, r7, #7
    4038:	701a      	strb	r2, [r3, #0]
    403a:	1dfb      	adds	r3, r7, #7
    403c:	781b      	ldrb	r3, [r3, #0]
    403e:	1c18      	adds	r0, r3, #0
    4040:	4b0b      	ldr	r3, [pc, #44]	; (4070 <system_pinmux_pin_set_config+0x44>)
    4042:	4798      	blx	r3
    4044:	1c03      	adds	r3, r0, #0
    4046:	60fb      	str	r3, [r7, #12]
    4048:	1dfb      	adds	r3, r7, #7
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	221f      	movs	r2, #31
    404e:	4013      	ands	r3, r2
    4050:	2201      	movs	r2, #1
    4052:	409a      	lsls	r2, r3
    4054:	1c13      	adds	r3, r2, #0
    4056:	60bb      	str	r3, [r7, #8]
    4058:	68f9      	ldr	r1, [r7, #12]
    405a:	68ba      	ldr	r2, [r7, #8]
    405c:	683b      	ldr	r3, [r7, #0]
    405e:	1c08      	adds	r0, r1, #0
    4060:	1c11      	adds	r1, r2, #0
    4062:	1c1a      	adds	r2, r3, #0
    4064:	4b03      	ldr	r3, [pc, #12]	; (4074 <system_pinmux_pin_set_config+0x48>)
    4066:	4798      	blx	r3
    4068:	46bd      	mov	sp, r7
    406a:	b004      	add	sp, #16
    406c:	bd80      	pop	{r7, pc}
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	00003ec1 	.word	0x00003ec1
    4074:	00003f21 	.word	0x00003f21

00004078 <Reset_Handler>:
    4078:	b580      	push	{r7, lr}
    407a:	b082      	sub	sp, #8
    407c:	af00      	add	r7, sp, #0
    407e:	4b19      	ldr	r3, [pc, #100]	; (40e4 <Reset_Handler+0x6c>)
    4080:	607b      	str	r3, [r7, #4]
    4082:	4b19      	ldr	r3, [pc, #100]	; (40e8 <Reset_Handler+0x70>)
    4084:	603b      	str	r3, [r7, #0]
    4086:	687a      	ldr	r2, [r7, #4]
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	429a      	cmp	r2, r3
    408c:	d00c      	beq.n	40a8 <Reset_Handler+0x30>
    408e:	e007      	b.n	40a0 <Reset_Handler+0x28>
    4090:	683b      	ldr	r3, [r7, #0]
    4092:	1d1a      	adds	r2, r3, #4
    4094:	603a      	str	r2, [r7, #0]
    4096:	687a      	ldr	r2, [r7, #4]
    4098:	1d11      	adds	r1, r2, #4
    409a:	6079      	str	r1, [r7, #4]
    409c:	6812      	ldr	r2, [r2, #0]
    409e:	601a      	str	r2, [r3, #0]
    40a0:	683a      	ldr	r2, [r7, #0]
    40a2:	4b12      	ldr	r3, [pc, #72]	; (40ec <Reset_Handler+0x74>)
    40a4:	429a      	cmp	r2, r3
    40a6:	d3f3      	bcc.n	4090 <Reset_Handler+0x18>
    40a8:	4b11      	ldr	r3, [pc, #68]	; (40f0 <Reset_Handler+0x78>)
    40aa:	603b      	str	r3, [r7, #0]
    40ac:	e004      	b.n	40b8 <Reset_Handler+0x40>
    40ae:	683b      	ldr	r3, [r7, #0]
    40b0:	1d1a      	adds	r2, r3, #4
    40b2:	603a      	str	r2, [r7, #0]
    40b4:	2200      	movs	r2, #0
    40b6:	601a      	str	r2, [r3, #0]
    40b8:	683a      	ldr	r2, [r7, #0]
    40ba:	4b0e      	ldr	r3, [pc, #56]	; (40f4 <Reset_Handler+0x7c>)
    40bc:	429a      	cmp	r2, r3
    40be:	d3f6      	bcc.n	40ae <Reset_Handler+0x36>
    40c0:	4b0d      	ldr	r3, [pc, #52]	; (40f8 <Reset_Handler+0x80>)
    40c2:	607b      	str	r3, [r7, #4]
    40c4:	4b0d      	ldr	r3, [pc, #52]	; (40fc <Reset_Handler+0x84>)
    40c6:	687a      	ldr	r2, [r7, #4]
    40c8:	21ff      	movs	r1, #255	; 0xff
    40ca:	438a      	bics	r2, r1
    40cc:	609a      	str	r2, [r3, #8]
    40ce:	4b0c      	ldr	r3, [pc, #48]	; (4100 <Reset_Handler+0x88>)
    40d0:	685a      	ldr	r2, [r3, #4]
    40d2:	2180      	movs	r1, #128	; 0x80
    40d4:	430a      	orrs	r2, r1
    40d6:	605a      	str	r2, [r3, #4]
    40d8:	4b0a      	ldr	r3, [pc, #40]	; (4104 <Reset_Handler+0x8c>)
    40da:	4798      	blx	r3
    40dc:	4b0a      	ldr	r3, [pc, #40]	; (4108 <Reset_Handler+0x90>)
    40de:	4798      	blx	r3
    40e0:	e7fe      	b.n	40e0 <Reset_Handler+0x68>
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	00004568 	.word	0x00004568
    40e8:	20000000 	.word	0x20000000
    40ec:	2000000c 	.word	0x2000000c
    40f0:	2000000c 	.word	0x2000000c
    40f4:	20000498 	.word	0x20000498
    40f8:	00000000 	.word	0x00000000
    40fc:	e000ed00 	.word	0xe000ed00
    4100:	41004000 	.word	0x41004000
    4104:	0000428d 	.word	0x0000428d
    4108:	00001c8d 	.word	0x00001c8d

0000410c <Dummy_Handler>:
    410c:	b580      	push	{r7, lr}
    410e:	af00      	add	r7, sp, #0
    4110:	e7fe      	b.n	4110 <Dummy_Handler+0x4>
    4112:	46c0      	nop			; (mov r8, r8)

00004114 <__aeabi_uidiv>:
    4114:	2200      	movs	r2, #0
    4116:	0843      	lsrs	r3, r0, #1
    4118:	428b      	cmp	r3, r1
    411a:	d374      	bcc.n	4206 <__aeabi_uidiv+0xf2>
    411c:	0903      	lsrs	r3, r0, #4
    411e:	428b      	cmp	r3, r1
    4120:	d35f      	bcc.n	41e2 <__aeabi_uidiv+0xce>
    4122:	0a03      	lsrs	r3, r0, #8
    4124:	428b      	cmp	r3, r1
    4126:	d344      	bcc.n	41b2 <__aeabi_uidiv+0x9e>
    4128:	0b03      	lsrs	r3, r0, #12
    412a:	428b      	cmp	r3, r1
    412c:	d328      	bcc.n	4180 <__aeabi_uidiv+0x6c>
    412e:	0c03      	lsrs	r3, r0, #16
    4130:	428b      	cmp	r3, r1
    4132:	d30d      	bcc.n	4150 <__aeabi_uidiv+0x3c>
    4134:	22ff      	movs	r2, #255	; 0xff
    4136:	0209      	lsls	r1, r1, #8
    4138:	ba12      	rev	r2, r2
    413a:	0c03      	lsrs	r3, r0, #16
    413c:	428b      	cmp	r3, r1
    413e:	d302      	bcc.n	4146 <__aeabi_uidiv+0x32>
    4140:	1212      	asrs	r2, r2, #8
    4142:	0209      	lsls	r1, r1, #8
    4144:	d065      	beq.n	4212 <__aeabi_uidiv+0xfe>
    4146:	0b03      	lsrs	r3, r0, #12
    4148:	428b      	cmp	r3, r1
    414a:	d319      	bcc.n	4180 <__aeabi_uidiv+0x6c>
    414c:	e000      	b.n	4150 <__aeabi_uidiv+0x3c>
    414e:	0a09      	lsrs	r1, r1, #8
    4150:	0bc3      	lsrs	r3, r0, #15
    4152:	428b      	cmp	r3, r1
    4154:	d301      	bcc.n	415a <__aeabi_uidiv+0x46>
    4156:	03cb      	lsls	r3, r1, #15
    4158:	1ac0      	subs	r0, r0, r3
    415a:	4152      	adcs	r2, r2
    415c:	0b83      	lsrs	r3, r0, #14
    415e:	428b      	cmp	r3, r1
    4160:	d301      	bcc.n	4166 <__aeabi_uidiv+0x52>
    4162:	038b      	lsls	r3, r1, #14
    4164:	1ac0      	subs	r0, r0, r3
    4166:	4152      	adcs	r2, r2
    4168:	0b43      	lsrs	r3, r0, #13
    416a:	428b      	cmp	r3, r1
    416c:	d301      	bcc.n	4172 <__aeabi_uidiv+0x5e>
    416e:	034b      	lsls	r3, r1, #13
    4170:	1ac0      	subs	r0, r0, r3
    4172:	4152      	adcs	r2, r2
    4174:	0b03      	lsrs	r3, r0, #12
    4176:	428b      	cmp	r3, r1
    4178:	d301      	bcc.n	417e <__aeabi_uidiv+0x6a>
    417a:	030b      	lsls	r3, r1, #12
    417c:	1ac0      	subs	r0, r0, r3
    417e:	4152      	adcs	r2, r2
    4180:	0ac3      	lsrs	r3, r0, #11
    4182:	428b      	cmp	r3, r1
    4184:	d301      	bcc.n	418a <__aeabi_uidiv+0x76>
    4186:	02cb      	lsls	r3, r1, #11
    4188:	1ac0      	subs	r0, r0, r3
    418a:	4152      	adcs	r2, r2
    418c:	0a83      	lsrs	r3, r0, #10
    418e:	428b      	cmp	r3, r1
    4190:	d301      	bcc.n	4196 <__aeabi_uidiv+0x82>
    4192:	028b      	lsls	r3, r1, #10
    4194:	1ac0      	subs	r0, r0, r3
    4196:	4152      	adcs	r2, r2
    4198:	0a43      	lsrs	r3, r0, #9
    419a:	428b      	cmp	r3, r1
    419c:	d301      	bcc.n	41a2 <__aeabi_uidiv+0x8e>
    419e:	024b      	lsls	r3, r1, #9
    41a0:	1ac0      	subs	r0, r0, r3
    41a2:	4152      	adcs	r2, r2
    41a4:	0a03      	lsrs	r3, r0, #8
    41a6:	428b      	cmp	r3, r1
    41a8:	d301      	bcc.n	41ae <__aeabi_uidiv+0x9a>
    41aa:	020b      	lsls	r3, r1, #8
    41ac:	1ac0      	subs	r0, r0, r3
    41ae:	4152      	adcs	r2, r2
    41b0:	d2cd      	bcs.n	414e <__aeabi_uidiv+0x3a>
    41b2:	09c3      	lsrs	r3, r0, #7
    41b4:	428b      	cmp	r3, r1
    41b6:	d301      	bcc.n	41bc <__aeabi_uidiv+0xa8>
    41b8:	01cb      	lsls	r3, r1, #7
    41ba:	1ac0      	subs	r0, r0, r3
    41bc:	4152      	adcs	r2, r2
    41be:	0983      	lsrs	r3, r0, #6
    41c0:	428b      	cmp	r3, r1
    41c2:	d301      	bcc.n	41c8 <__aeabi_uidiv+0xb4>
    41c4:	018b      	lsls	r3, r1, #6
    41c6:	1ac0      	subs	r0, r0, r3
    41c8:	4152      	adcs	r2, r2
    41ca:	0943      	lsrs	r3, r0, #5
    41cc:	428b      	cmp	r3, r1
    41ce:	d301      	bcc.n	41d4 <__aeabi_uidiv+0xc0>
    41d0:	014b      	lsls	r3, r1, #5
    41d2:	1ac0      	subs	r0, r0, r3
    41d4:	4152      	adcs	r2, r2
    41d6:	0903      	lsrs	r3, r0, #4
    41d8:	428b      	cmp	r3, r1
    41da:	d301      	bcc.n	41e0 <__aeabi_uidiv+0xcc>
    41dc:	010b      	lsls	r3, r1, #4
    41de:	1ac0      	subs	r0, r0, r3
    41e0:	4152      	adcs	r2, r2
    41e2:	08c3      	lsrs	r3, r0, #3
    41e4:	428b      	cmp	r3, r1
    41e6:	d301      	bcc.n	41ec <__aeabi_uidiv+0xd8>
    41e8:	00cb      	lsls	r3, r1, #3
    41ea:	1ac0      	subs	r0, r0, r3
    41ec:	4152      	adcs	r2, r2
    41ee:	0883      	lsrs	r3, r0, #2
    41f0:	428b      	cmp	r3, r1
    41f2:	d301      	bcc.n	41f8 <__aeabi_uidiv+0xe4>
    41f4:	008b      	lsls	r3, r1, #2
    41f6:	1ac0      	subs	r0, r0, r3
    41f8:	4152      	adcs	r2, r2
    41fa:	0843      	lsrs	r3, r0, #1
    41fc:	428b      	cmp	r3, r1
    41fe:	d301      	bcc.n	4204 <__aeabi_uidiv+0xf0>
    4200:	004b      	lsls	r3, r1, #1
    4202:	1ac0      	subs	r0, r0, r3
    4204:	4152      	adcs	r2, r2
    4206:	1a41      	subs	r1, r0, r1
    4208:	d200      	bcs.n	420c <__aeabi_uidiv+0xf8>
    420a:	4601      	mov	r1, r0
    420c:	4152      	adcs	r2, r2
    420e:	4610      	mov	r0, r2
    4210:	4770      	bx	lr
    4212:	e7ff      	b.n	4214 <__aeabi_uidiv+0x100>
    4214:	b501      	push	{r0, lr}
    4216:	2000      	movs	r0, #0
    4218:	f000 f80c 	bl	4234 <__aeabi_idiv0>
    421c:	bd02      	pop	{r1, pc}
    421e:	46c0      	nop			; (mov r8, r8)

00004220 <__aeabi_uidivmod>:
    4220:	2900      	cmp	r1, #0
    4222:	d0f7      	beq.n	4214 <__aeabi_uidiv+0x100>
    4224:	b503      	push	{r0, r1, lr}
    4226:	f7ff ff75 	bl	4114 <__aeabi_uidiv>
    422a:	bc0e      	pop	{r1, r2, r3}
    422c:	4342      	muls	r2, r0
    422e:	1a89      	subs	r1, r1, r2
    4230:	4718      	bx	r3
    4232:	46c0      	nop			; (mov r8, r8)

00004234 <__aeabi_idiv0>:
    4234:	4770      	bx	lr
    4236:	46c0      	nop			; (mov r8, r8)

00004238 <__aeabi_lmul>:
    4238:	b5f0      	push	{r4, r5, r6, r7, lr}
    423a:	464f      	mov	r7, r9
    423c:	4646      	mov	r6, r8
    423e:	0405      	lsls	r5, r0, #16
    4240:	0c2d      	lsrs	r5, r5, #16
    4242:	1c2c      	adds	r4, r5, #0
    4244:	b4c0      	push	{r6, r7}
    4246:	0417      	lsls	r7, r2, #16
    4248:	0c16      	lsrs	r6, r2, #16
    424a:	0c3f      	lsrs	r7, r7, #16
    424c:	4699      	mov	r9, r3
    424e:	0c03      	lsrs	r3, r0, #16
    4250:	437c      	muls	r4, r7
    4252:	4375      	muls	r5, r6
    4254:	435f      	muls	r7, r3
    4256:	4373      	muls	r3, r6
    4258:	197d      	adds	r5, r7, r5
    425a:	0c26      	lsrs	r6, r4, #16
    425c:	19ad      	adds	r5, r5, r6
    425e:	469c      	mov	ip, r3
    4260:	42af      	cmp	r7, r5
    4262:	d903      	bls.n	426c <__aeabi_lmul+0x34>
    4264:	2380      	movs	r3, #128	; 0x80
    4266:	025b      	lsls	r3, r3, #9
    4268:	4698      	mov	r8, r3
    426a:	44c4      	add	ip, r8
    426c:	464b      	mov	r3, r9
    426e:	4351      	muls	r1, r2
    4270:	4343      	muls	r3, r0
    4272:	0424      	lsls	r4, r4, #16
    4274:	0c2e      	lsrs	r6, r5, #16
    4276:	0c24      	lsrs	r4, r4, #16
    4278:	042d      	lsls	r5, r5, #16
    427a:	4466      	add	r6, ip
    427c:	192c      	adds	r4, r5, r4
    427e:	1859      	adds	r1, r3, r1
    4280:	1989      	adds	r1, r1, r6
    4282:	1c20      	adds	r0, r4, #0
    4284:	bc0c      	pop	{r2, r3}
    4286:	4690      	mov	r8, r2
    4288:	4699      	mov	r9, r3
    428a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000428c <__libc_init_array>:
    428c:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <__libc_init_array+0x3c>)
    428e:	b570      	push	{r4, r5, r6, lr}
    4290:	2500      	movs	r5, #0
    4292:	1c1e      	adds	r6, r3, #0
    4294:	4c0d      	ldr	r4, [pc, #52]	; (42cc <__libc_init_array+0x40>)
    4296:	1ae4      	subs	r4, r4, r3
    4298:	10a4      	asrs	r4, r4, #2
    429a:	42a5      	cmp	r5, r4
    429c:	d004      	beq.n	42a8 <__libc_init_array+0x1c>
    429e:	00ab      	lsls	r3, r5, #2
    42a0:	58f3      	ldr	r3, [r6, r3]
    42a2:	4798      	blx	r3
    42a4:	3501      	adds	r5, #1
    42a6:	e7f8      	b.n	429a <__libc_init_array+0xe>
    42a8:	f000 f94e 	bl	4548 <_init>
    42ac:	4b08      	ldr	r3, [pc, #32]	; (42d0 <__libc_init_array+0x44>)
    42ae:	2500      	movs	r5, #0
    42b0:	1c1e      	adds	r6, r3, #0
    42b2:	4c08      	ldr	r4, [pc, #32]	; (42d4 <__libc_init_array+0x48>)
    42b4:	1ae4      	subs	r4, r4, r3
    42b6:	10a4      	asrs	r4, r4, #2
    42b8:	42a5      	cmp	r5, r4
    42ba:	d004      	beq.n	42c6 <__libc_init_array+0x3a>
    42bc:	00ab      	lsls	r3, r5, #2
    42be:	58f3      	ldr	r3, [r6, r3]
    42c0:	4798      	blx	r3
    42c2:	3501      	adds	r5, #1
    42c4:	e7f8      	b.n	42b8 <__libc_init_array+0x2c>
    42c6:	bd70      	pop	{r4, r5, r6, pc}
    42c8:	00004554 	.word	0x00004554
    42cc:	00004554 	.word	0x00004554
    42d0:	00004554 	.word	0x00004554
    42d4:	00004558 	.word	0x00004558

000042d8 <memcpy>:
    42d8:	2300      	movs	r3, #0
    42da:	b510      	push	{r4, lr}
    42dc:	4293      	cmp	r3, r2
    42de:	d003      	beq.n	42e8 <memcpy+0x10>
    42e0:	5ccc      	ldrb	r4, [r1, r3]
    42e2:	54c4      	strb	r4, [r0, r3]
    42e4:	3301      	adds	r3, #1
    42e6:	e7f9      	b.n	42dc <memcpy+0x4>
    42e8:	bd10      	pop	{r4, pc}

000042ea <memmem>:
    42ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42ec:	1c04      	adds	r4, r0, #0
    42ee:	2b00      	cmp	r3, #0
    42f0:	d013      	beq.n	431a <memmem+0x30>
    42f2:	1c1d      	adds	r5, r3, #0
    42f4:	1c0f      	adds	r7, r1, #0
    42f6:	1c0e      	adds	r6, r1, #0
    42f8:	9201      	str	r2, [sp, #4]
    42fa:	9000      	str	r0, [sp, #0]
    42fc:	9b00      	ldr	r3, [sp, #0]
    42fe:	1bbc      	subs	r4, r7, r6
    4300:	191c      	adds	r4, r3, r4
    4302:	42b5      	cmp	r5, r6
    4304:	d808      	bhi.n	4318 <memmem+0x2e>
    4306:	1c20      	adds	r0, r4, #0
    4308:	9901      	ldr	r1, [sp, #4]
    430a:	1c2a      	adds	r2, r5, #0
    430c:	f000 f81b 	bl	4346 <memcmp>
    4310:	2800      	cmp	r0, #0
    4312:	d002      	beq.n	431a <memmem+0x30>
    4314:	3e01      	subs	r6, #1
    4316:	e7f1      	b.n	42fc <memmem+0x12>
    4318:	2400      	movs	r4, #0
    431a:	1c20      	adds	r0, r4, #0
    431c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000431e <strcat>:
    431e:	1c02      	adds	r2, r0, #0
    4320:	b510      	push	{r4, lr}
    4322:	7813      	ldrb	r3, [r2, #0]
    4324:	2b00      	cmp	r3, #0
    4326:	d001      	beq.n	432c <strcat+0xe>
    4328:	3201      	adds	r2, #1
    432a:	e7fa      	b.n	4322 <strcat+0x4>
    432c:	5ccc      	ldrb	r4, [r1, r3]
    432e:	54d4      	strb	r4, [r2, r3]
    4330:	3301      	adds	r3, #1
    4332:	2c00      	cmp	r4, #0
    4334:	d1fa      	bne.n	432c <strcat+0xe>
    4336:	bd10      	pop	{r4, pc}

00004338 <strlen>:
    4338:	2300      	movs	r3, #0
    433a:	5cc2      	ldrb	r2, [r0, r3]
    433c:	3301      	adds	r3, #1
    433e:	2a00      	cmp	r2, #0
    4340:	d1fb      	bne.n	433a <strlen+0x2>
    4342:	1e58      	subs	r0, r3, #1
    4344:	4770      	bx	lr

00004346 <memcmp>:
    4346:	b530      	push	{r4, r5, lr}
    4348:	2400      	movs	r4, #0
    434a:	4294      	cmp	r4, r2
    434c:	d008      	beq.n	4360 <memcmp+0x1a>
    434e:	5d03      	ldrb	r3, [r0, r4]
    4350:	1c65      	adds	r5, r4, #1
    4352:	5d0c      	ldrb	r4, [r1, r4]
    4354:	42a3      	cmp	r3, r4
    4356:	d001      	beq.n	435c <memcmp+0x16>
    4358:	1b18      	subs	r0, r3, r4
    435a:	e002      	b.n	4362 <memcmp+0x1c>
    435c:	1c2c      	adds	r4, r5, #0
    435e:	e7f4      	b.n	434a <memcmp+0x4>
    4360:	2000      	movs	r0, #0
    4362:	bd30      	pop	{r4, r5, pc}
    4364:	0a0d7461 	.word	0x0a0d7461
    4368:	00000000 	.word	0x00000000
    436c:	002b2b2b 	.word	0x002b2b2b
    4370:	0a0d7461 	.word	0x0a0d7461
    4374:	75716e69 	.word	0x75716e69
    4378:	20797269 	.word	0x20797269
    437c:	616e2035 	.word	0x616e2035
    4380:	0a0d656d 	.word	0x0a0d656d
    4384:	00000000 	.word	0x00000000
    4388:	4c534941 	.word	0x4c534941
    438c:	32305656 	.word	0x32305656
    4390:	00000000 	.word	0x00000000
    4394:	20746573 	.word	0x20746573
    4398:	70207462 	.word	0x70207462
    439c:	0d726961 	.word	0x0d726961
    43a0:	0000000a 	.word	0x0000000a
    43a4:	20544553 	.word	0x20544553
    43a8:	50205442 	.word	0x50205442
    43ac:	00524941 	.word	0x00524941
    43b0:	0a0d7461 	.word	0x0a0d7461
    43b4:	0a0d7461 	.word	0x0a0d7461
    43b8:	00000000 	.word	0x00000000
    43bc:	0a0d4b4f 	.word	0x0a0d4b4f
    43c0:	00000000 	.word	0x00000000
    43c4:	61700a0d 	.word	0x61700a0d
    43c8:	00207269 	.word	0x00207269
    43cc:	00000a0d 	.word	0x00000a0d
    43d0:	00004b4f 	.word	0x00004b4f
    43d4:	0a0d7461 	.word	0x0a0d7461
    43d8:	20544553 	.word	0x20544553
    43dc:	544e4f43 	.word	0x544e4f43
    43e0:	204c4f52 	.word	0x204c4f52
    43e4:	4f545541 	.word	0x4f545541
    43e8:	4c4c4143 	.word	0x4c4c4143
    43ec:	00000a0d 	.word	0x00000a0d
    43f0:	0a0d7461 	.word	0x0a0d7461
    43f4:	20746573 	.word	0x20746573
    43f8:	70207462 	.word	0x70207462
    43fc:	20726961 	.word	0x20726961
    4400:	00000000 	.word	0x00000000
    4404:	0a0d7461 	.word	0x0a0d7461
    4408:	0d746573 	.word	0x0d746573
    440c:	0000000a 	.word	0x0000000a
    4410:	414d4941 	.word	0x414d4941
    4414:	32305653 	.word	0x32305653
    4418:	00000000 	.word	0x00000000
    441c:	65730a0d 	.word	0x65730a0d
    4420:	74622074 	.word	0x74622074
    4424:	6c6f7220 	.word	0x6c6f7220
    4428:	20302065 	.word	0x20302065
    442c:	30312046 	.word	0x30312046
    4430:	0a0d3030 	.word	0x0a0d3030
    4434:	00000000 	.word	0x00000000
    4438:	65730a0d 	.word	0x65730a0d
    443c:	6f632074 	.word	0x6f632074
    4440:	6f72746e 	.word	0x6f72746e
    4444:	6463206c 	.word	0x6463206c
    4448:	20303220 	.word	0x20303220
    444c:	30382032 	.word	0x30382032
    4450:	00000a0d 	.word	0x00000a0d
    4454:	0a0d7461 	.word	0x0a0d7461
    4458:	0a0d7461 	.word	0x0a0d7461
    445c:	20746573 	.word	0x20746573
    4460:	6e207462 	.word	0x6e207462
    4464:	20656d61 	.word	0x20656d61
    4468:	00000000 	.word	0x00000000
    446c:	0a090807 	.word	0x0a090807
    4470:	00000c0b 	.word	0x00000c0b
    4474:	65730a0d 	.word	0x65730a0d
    4478:	6f632074 	.word	0x6f632074
    447c:	6f72746e 	.word	0x6f72746e
    4480:	7561206c 	.word	0x7561206c
    4484:	61636f74 	.word	0x61636f74
    4488:	31206c6c 	.word	0x31206c6c
    448c:	20313031 	.word	0x20313031
    4490:	30303035 	.word	0x30303035
    4494:	63667220 	.word	0x63667220
    4498:	0d6d6d6f 	.word	0x0d6d6d6f
    449c:	0000000a 	.word	0x0000000a
    44a0:	00001d0c 	.word	0x00001d0c
    44a4:	00001d1c 	.word	0x00001d1c
    44a8:	00001d34 	.word	0x00001d34
    44ac:	00001d54 	.word	0x00001d54
    44b0:	00001dc0 	.word	0x00001dc0
    44b4:	00001d88 	.word	0x00001d88
    44b8:	42002000 	.word	0x42002000
    44bc:	42002400 	.word	0x42002400
    44c0:	42002800 	.word	0x42002800
    44c4:	42002c00 	.word	0x42002c00
    44c8:	42003000 	.word	0x42003000
    44cc:	42003400 	.word	0x42003400
    44d0:	42003800 	.word	0x42003800
    44d4:	42003c00 	.word	0x42003c00
    44d8:	14141313 	.word	0x14141313
    44dc:	16161515 	.word	0x16161515
    44e0:	02000100 	.word	0x02000100
    44e4:	08000400 	.word	0x08000400
    44e8:	20001000 	.word	0x20001000
    44ec:	80004000 	.word	0x80004000
    44f0:	42000800 	.word	0x42000800
    44f4:	42000c00 	.word	0x42000c00
    44f8:	42001000 	.word	0x42001000
    44fc:	42001400 	.word	0x42001400
    4500:	42001800 	.word	0x42001800
    4504:	42001c00 	.word	0x42001c00
    4508:	0000356a 	.word	0x0000356a
    450c:	000035cc 	.word	0x000035cc
    4510:	000035cc 	.word	0x000035cc
    4514:	0000358c 	.word	0x0000358c
    4518:	00003586 	.word	0x00003586
    451c:	00003592 	.word	0x00003592
    4520:	00003570 	.word	0x00003570
    4524:	00003598 	.word	0x00003598
    4528:	0000381c 	.word	0x0000381c
    452c:	00003856 	.word	0x00003856
    4530:	00003856 	.word	0x00003856
    4534:	00003852 	.word	0x00003852
    4538:	0000380e 	.word	0x0000380e
    453c:	0000382e 	.word	0x0000382e
    4540:	000037fe 	.word	0x000037fe
    4544:	00003840 	.word	0x00003840

00004548 <_init>:
    4548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    454e:	bc08      	pop	{r3}
    4550:	469e      	mov	lr, r3
    4552:	4770      	bx	lr

00004554 <__init_array_start>:
    4554:	000000cd 	.word	0x000000cd

00004558 <_fini>:
    4558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    455e:	bc08      	pop	{r3}
    4560:	469e      	mov	lr, r3
    4562:	4770      	bx	lr

00004564 <__fini_array_start>:
    4564:	000000a5 	.word	0x000000a5
