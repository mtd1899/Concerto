
MidiBT_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004040  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00004040  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000490  2000000c  0000404c  0001000c  2**2
                  ALLOC
  3 .stack        00002004  2000049c  000044dc  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b675  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b66  00000000  00000000  0002b704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002710  00000000  00000000  0002e26a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  0003097a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000660  00000000  00000000  000310fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012be0  00000000  00000000  0003175a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bff2  00000000  00000000  0004433a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005c189  00000000  00000000  0005032c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000192c  00000000  00000000  000ac4b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200024a0 	.word	0x200024a0
       4:	00003b45 	.word	0x00003b45
       8:	00003bd9 	.word	0x00003bd9
       c:	00003bd9 	.word	0x00003bd9
	...
      2c:	00003bd9 	.word	0x00003bd9
	...
      38:	00003bd9 	.word	0x00003bd9
      3c:	00003bd9 	.word	0x00003bd9
      40:	00003bd9 	.word	0x00003bd9
      44:	00003bd9 	.word	0x00003bd9
      48:	00003bd9 	.word	0x00003bd9
      4c:	00003bd9 	.word	0x00003bd9
      50:	00003bd9 	.word	0x00003bd9
      54:	00003bd9 	.word	0x00003bd9
      58:	00003bd9 	.word	0x00003bd9
      5c:	0000168d 	.word	0x0000168d
      60:	000016a1 	.word	0x000016a1
      64:	000016b5 	.word	0x000016b5
      68:	000016c9 	.word	0x000016c9
      6c:	000016dd 	.word	0x000016dd
      70:	000016f1 	.word	0x000016f1
      74:	000019f5 	.word	0x000019f5
      78:	00001a09 	.word	0x00001a09
      7c:	00001a1d 	.word	0x00001a1d
      80:	00001a31 	.word	0x00001a31
      84:	00001a45 	.word	0x00001a45
      88:	00001a59 	.word	0x00001a59
      8c:	00001a6d 	.word	0x00001a6d
      90:	00001a81 	.word	0x00001a81
      94:	00003bd9 	.word	0x00003bd9
      98:	00003bd9 	.word	0x00003bd9
      9c:	00003bd9 	.word	0x00003bd9
      a0:	00003bd9 	.word	0x00003bd9

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	00004040 	.word	0x00004040

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00004040 	.word	0x00004040
      f8:	20000010 	.word	0x20000010
      fc:	00004040 	.word	0x00004040
     100:	00000000 	.word	0x00000000

00000104 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     104:	b580      	push	{r7, lr}
     106:	b084      	sub	sp, #16
     108:	af00      	add	r7, sp, #0
     10a:	1c02      	adds	r2, r0, #0
     10c:	1dfb      	adds	r3, r7, #7
     10e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     110:	230f      	movs	r3, #15
     112:	18fb      	adds	r3, r7, r3
     114:	1dfa      	adds	r2, r7, #7
     116:	7812      	ldrb	r2, [r2, #0]
     118:	09d2      	lsrs	r2, r2, #7
     11a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     11c:	230e      	movs	r3, #14
     11e:	18fb      	adds	r3, r7, r3
     120:	1dfa      	adds	r2, r7, #7
     122:	7812      	ldrb	r2, [r2, #0]
     124:	0952      	lsrs	r2, r2, #5
     126:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     128:	4b0d      	ldr	r3, [pc, #52]	; (160 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     12a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10f      	bne.n	156 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     136:	230f      	movs	r3, #15
     138:	18fb      	adds	r3, r7, r3
     13a:	781b      	ldrb	r3, [r3, #0]
     13c:	009b      	lsls	r3, r3, #2
     13e:	2210      	movs	r2, #16
     140:	4694      	mov	ip, r2
     142:	44bc      	add	ip, r7
     144:	4463      	add	r3, ip
     146:	3b08      	subs	r3, #8
     148:	681a      	ldr	r2, [r3, #0]
     14a:	230e      	movs	r3, #14
     14c:	18fb      	adds	r3, r7, r3
     14e:	781b      	ldrb	r3, [r3, #0]
     150:	01db      	lsls	r3, r3, #7
     152:	18d3      	adds	r3, r2, r3
     154:	e000      	b.n	158 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     156:	2300      	movs	r3, #0
	}
}
     158:	1c18      	adds	r0, r3, #0
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}
     160:	41004400 	.word	0x41004400

00000164 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     164:	b580      	push	{r7, lr}
     166:	b082      	sub	sp, #8
     168:	af00      	add	r7, sp, #0
     16a:	1c02      	adds	r2, r0, #0
     16c:	1dfb      	adds	r3, r7, #7
     16e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     170:	1dfb      	adds	r3, r7, #7
     172:	781b      	ldrb	r3, [r3, #0]
     174:	1c18      	adds	r0, r3, #0
     176:	4b03      	ldr	r3, [pc, #12]	; (184 <port_get_group_from_gpio_pin+0x20>)
     178:	4798      	blx	r3
     17a:	1c03      	adds	r3, r0, #0
}
     17c:	1c18      	adds	r0, r3, #0
     17e:	46bd      	mov	sp, r7
     180:	b002      	add	sp, #8
     182:	bd80      	pop	{r7, pc}
     184:	00000105 	.word	0x00000105

00000188 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2200      	movs	r2, #0
     194:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2201      	movs	r2, #1
     19a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2200      	movs	r2, #0
     1a0:	709a      	strb	r2, [r3, #2]
}
     1a2:	46bd      	mov	sp, r7
     1a4:	b002      	add	sp, #8
     1a6:	bd80      	pop	{r7, pc}

000001a8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	1c02      	adds	r2, r0, #0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
     1b4:	1dbb      	adds	r3, r7, #6
     1b6:	1c0a      	adds	r2, r1, #0
     1b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ba:	1dfb      	adds	r3, r7, #7
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	1c18      	adds	r0, r3, #0
     1c0:	4b0c      	ldr	r3, [pc, #48]	; (1f4 <port_pin_set_output_level+0x4c>)
     1c2:	4798      	blx	r3
     1c4:	1c03      	adds	r3, r0, #0
     1c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1c8:	1dfb      	adds	r3, r7, #7
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	221f      	movs	r2, #31
     1ce:	4013      	ands	r3, r2
     1d0:	2201      	movs	r2, #1
     1d2:	409a      	lsls	r2, r3
     1d4:	1c13      	adds	r3, r2, #0
     1d6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1d8:	1dbb      	adds	r3, r7, #6
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	2b00      	cmp	r3, #0
     1de:	d003      	beq.n	1e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1e0:	68fb      	ldr	r3, [r7, #12]
     1e2:	68ba      	ldr	r2, [r7, #8]
     1e4:	619a      	str	r2, [r3, #24]
     1e6:	e002      	b.n	1ee <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	68ba      	ldr	r2, [r7, #8]
     1ec:	615a      	str	r2, [r3, #20]
	}
}
     1ee:	46bd      	mov	sp, r7
     1f0:	b004      	add	sp, #16
     1f2:	bd80      	pop	{r7, pc}
     1f4:	00000165 	.word	0x00000165

000001f8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     1fc:	4b03      	ldr	r3, [pc, #12]	; (20c <system_interrupt_enable_global+0x14>)
     1fe:	2201      	movs	r2, #1
     200:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     202:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     206:	b662      	cpsie	i
}
     208:	46bd      	mov	sp, r7
     20a:	bd80      	pop	{r7, pc}
     20c:	20000008 	.word	0x20000008

00000210 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     210:	b580      	push	{r7, lr}
     212:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     214:	b672      	cpsid	i
     216:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     21a:	4b02      	ldr	r3, [pc, #8]	; (224 <system_interrupt_disable_global+0x14>)
     21c:	2200      	movs	r2, #0
     21e:	701a      	strb	r2, [r3, #0]
}
     220:	46bd      	mov	sp, r7
     222:	bd80      	pop	{r7, pc}
     224:	20000008 	.word	0x20000008

00000228 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     228:	b580      	push	{r7, lr}
     22a:	b084      	sub	sp, #16
     22c:	af00      	add	r7, sp, #0
     22e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     230:	687b      	ldr	r3, [r7, #4]
     232:	681b      	ldr	r3, [r3, #0]
     234:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     236:	68fb      	ldr	r3, [r7, #12]
     238:	8a1b      	ldrh	r3, [r3, #16]
     23a:	b29b      	uxth	r3, r3
     23c:	1c1a      	adds	r2, r3, #0
     23e:	2380      	movs	r3, #128	; 0x80
     240:	021b      	lsls	r3, r3, #8
     242:	4013      	ands	r3, r2
     244:	1e5a      	subs	r2, r3, #1
     246:	4193      	sbcs	r3, r2
     248:	b2db      	uxtb	r3, r3
#endif
}
     24a:	1c18      	adds	r0, r3, #0
     24c:	46bd      	mov	sp, r7
     24e:	b004      	add	sp, #16
     250:	bd80      	pop	{r7, pc}
     252:	46c0      	nop			; (mov r8, r8)

00000254 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     254:	b580      	push	{r7, lr}
     256:	b082      	sub	sp, #8
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	687b      	ldr	r3, [r7, #4]
     260:	1c18      	adds	r0, r3, #0
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <_usart_wait_for_sync+0x1c>)
     264:	4798      	blx	r3
     266:	1e03      	subs	r3, r0, #0
     268:	d1f9      	bne.n	25e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     26a:	46bd      	mov	sp, r7
     26c:	b002      	add	sp, #8
     26e:	bd80      	pop	{r7, pc}
     270:	00000229 	.word	0x00000229

00000274 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
     27a:	6078      	str	r0, [r7, #4]
     27c:	1c0a      	adds	r2, r1, #0
     27e:	1cfb      	adds	r3, r7, #3
     280:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     282:	687b      	ldr	r3, [r7, #4]
     284:	2221      	movs	r2, #33	; 0x21
     286:	5c9b      	ldrb	r3, [r3, r2]
     288:	b2d9      	uxtb	r1, r3
     28a:	1cfb      	adds	r3, r7, #3
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	2201      	movs	r2, #1
     290:	409a      	lsls	r2, r3
     292:	1c13      	adds	r3, r2, #0
     294:	b2db      	uxtb	r3, r3
     296:	1c0a      	adds	r2, r1, #0
     298:	4313      	orrs	r3, r2
     29a:	b2db      	uxtb	r3, r3
     29c:	b2d9      	uxtb	r1, r3
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2221      	movs	r2, #33	; 0x21
     2a2:	5499      	strb	r1, [r3, r2]

}
     2a4:	46bd      	mov	sp, r7
     2a6:	b002      	add	sp, #8
     2a8:	bd80      	pop	{r7, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <reset_BT>:

volatile uint8_t rx_buffer_SERCOM4[MAX_RX_BUFFER_LENGTH],rx_buffer_SERCOM5[MAX_RX_BUFFER_LENGTH];

// Reset BT module
void reset_BT(void)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(Reset_BT_PIN,0);
     2b0:	2010      	movs	r0, #16
     2b2:	2100      	movs	r1, #0
     2b4:	4b0d      	ldr	r3, [pc, #52]	; (2ec <reset_BT+0x40>)
     2b6:	4798      	blx	r3

	msCounter=10;
     2b8:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <reset_BT+0x44>)
     2ba:	220a      	movs	r2, #10
     2bc:	601a      	str	r2, [r3, #0]
	while (msCounter){}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	4b0b      	ldr	r3, [pc, #44]	; (2f0 <reset_BT+0x44>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d1fb      	bne.n	2c0 <reset_BT+0x14>

	port_pin_set_output_level(Reset_BT_PIN,1);
     2c8:	2010      	movs	r0, #16
     2ca:	2101      	movs	r1, #1
     2cc:	4b07      	ldr	r3, [pc, #28]	; (2ec <reset_BT+0x40>)
     2ce:	4798      	blx	r3
	port_pin_set_output_level(Green_LED_PIN,1);
     2d0:	2007      	movs	r0, #7
     2d2:	2101      	movs	r1, #1
     2d4:	4b05      	ldr	r3, [pc, #20]	; (2ec <reset_BT+0x40>)
     2d6:	4798      	blx	r3
	
	msCounter=50;
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <reset_BT+0x44>)
     2da:	2232      	movs	r2, #50	; 0x32
     2dc:	601a      	str	r2, [r3, #0]
	while (msCounter){}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b03      	ldr	r3, [pc, #12]	; (2f0 <reset_BT+0x44>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	2b00      	cmp	r3, #0
     2e6:	d1fb      	bne.n	2e0 <reset_BT+0x34>
}
     2e8:	46bd      	mov	sp, r7
     2ea:	bd80      	pop	{r7, pc}
     2ec:	000001a9 	.word	0x000001a9
     2f0:	20000348 	.word	0x20000348

000002f4 <usart_read_callback_SERCOM4>:
	
	  
extern bool in_SSP_mode;
//extern uint32_t usartTimeout;
void usart_read_callback_SERCOM4(struct usart_module *const usart_module)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
	uint8_t received_data = *(usart_module->rx_buffer_ptr);
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	695a      	ldr	r2, [r3, #20]
     300:	230f      	movs	r3, #15
     302:	18fb      	adds	r3, r7, r3
     304:	7812      	ldrb	r2, [r2, #0]
     306:	701a      	strb	r2, [r3, #0]
	if (in_SSP_mode)						// write only if in_SSP_mode
     308:	4b10      	ldr	r3, [pc, #64]	; (34c <usart_read_callback_SERCOM4+0x58>)
     30a:	781b      	ldrb	r3, [r3, #0]
     30c:	2b00      	cmp	r3, #0
     30e:	d01a      	beq.n	346 <usart_read_callback_SERCOM4+0x52>
	{
//		usartTimeout = 0;									// reset it - data moving
		system_interrupt_disable_global();
     310:	4b0f      	ldr	r3, [pc, #60]	; (350 <usart_read_callback_SERCOM4+0x5c>)
     312:	4798      	blx	r3
		if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = received_data;
     314:	4b0f      	ldr	r3, [pc, #60]	; (354 <usart_read_callback_SERCOM4+0x60>)
     316:	4a10      	ldr	r2, [pc, #64]	; (358 <usart_read_callback_SERCOM4+0x64>)
     318:	5c9b      	ldrb	r3, [r3, r2]
     31a:	3301      	adds	r3, #1
     31c:	4a0d      	ldr	r2, [pc, #52]	; (354 <usart_read_callback_SERCOM4+0x60>)
     31e:	490f      	ldr	r1, [pc, #60]	; (35c <usart_read_callback_SERCOM4+0x68>)
     320:	5c52      	ldrb	r2, [r2, r1]
     322:	4293      	cmp	r3, r2
     324:	d00d      	beq.n	342 <usart_read_callback_SERCOM4+0x4e>
     326:	4b0b      	ldr	r3, [pc, #44]	; (354 <usart_read_callback_SERCOM4+0x60>)
     328:	4a0b      	ldr	r2, [pc, #44]	; (358 <usart_read_callback_SERCOM4+0x64>)
     32a:	5c9b      	ldrb	r3, [r3, r2]
     32c:	1c5a      	adds	r2, r3, #1
     32e:	b2d0      	uxtb	r0, r2
     330:	4a08      	ldr	r2, [pc, #32]	; (354 <usart_read_callback_SERCOM4+0x60>)
     332:	4909      	ldr	r1, [pc, #36]	; (358 <usart_read_callback_SERCOM4+0x64>)
     334:	5450      	strb	r0, [r2, r1]
     336:	1c19      	adds	r1, r3, #0
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <usart_read_callback_SERCOM4+0x60>)
     33a:	220f      	movs	r2, #15
     33c:	18ba      	adds	r2, r7, r2
     33e:	7812      	ldrb	r2, [r2, #0]
     340:	545a      	strb	r2, [r3, r1]
		system_interrupt_enable_global();
     342:	4b07      	ldr	r3, [pc, #28]	; (360 <usart_read_callback_SERCOM4+0x6c>)
     344:	4798      	blx	r3
	}
}
     346:	46bd      	mov	sp, r7
     348:	b004      	add	sp, #16
     34a:	bd80      	pop	{r7, pc}
     34c:	200003d1 	.word	0x200003d1
     350:	00000211 	.word	0x00000211
     354:	200000c0 	.word	0x200000c0
     358:	00000202 	.word	0x00000202
     35c:	00000203 	.word	0x00000203
     360:	000001f9 	.word	0x000001f9

00000364 <usart_write_callback_SERCOM5>:

void usart_write_callback_SERCOM5(struct usart_module *const usart_module)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
//	port_pin_toggle_output_level(LED_0_PIN);
}
     36c:	46bd      	mov	sp, r7
     36e:	b002      	add	sp, #8
     370:	bd80      	pop	{r7, pc}
     372:	46c0      	nop			; (mov r8, r8)

00000374 <usart_read_callback_SERCOM5>:

void usart_read_callback_SERCOM5(struct usart_module *const usart_module)
{
     374:	b580      	push	{r7, lr}
     376:	b084      	sub	sp, #16
     378:	af00      	add	r7, sp, #0
     37a:	6078      	str	r0, [r7, #4]
	uint8_t received_data = *(usart_module->rx_buffer_ptr);
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	695a      	ldr	r2, [r3, #20]
     380:	230f      	movs	r3, #15
     382:	18fb      	adds	r3, r7, r3
     384:	7812      	ldrb	r2, [r2, #0]
     386:	701a      	strb	r2, [r3, #0]
	system_interrupt_disable_global();
     388:	4b12      	ldr	r3, [pc, #72]	; (3d4 <usart_read_callback_SERCOM5+0x60>)
     38a:	4798      	blx	r3
	if ((serialQ.bt_in + 1) != serialQ.bt_out) serialQ.blueToothToMidi[serialQ.bt_in++] = received_data;
     38c:	4a12      	ldr	r2, [pc, #72]	; (3d8 <usart_read_callback_SERCOM5+0x64>)
     38e:	2380      	movs	r3, #128	; 0x80
     390:	009b      	lsls	r3, r3, #2
     392:	5cd3      	ldrb	r3, [r2, r3]
     394:	3301      	adds	r3, #1
     396:	4a10      	ldr	r2, [pc, #64]	; (3d8 <usart_read_callback_SERCOM5+0x64>)
     398:	4910      	ldr	r1, [pc, #64]	; (3dc <usart_read_callback_SERCOM5+0x68>)
     39a:	5c52      	ldrb	r2, [r2, r1]
     39c:	4293      	cmp	r3, r2
     39e:	d013      	beq.n	3c8 <usart_read_callback_SERCOM5+0x54>
     3a0:	4a0d      	ldr	r2, [pc, #52]	; (3d8 <usart_read_callback_SERCOM5+0x64>)
     3a2:	2380      	movs	r3, #128	; 0x80
     3a4:	009b      	lsls	r3, r3, #2
     3a6:	5cd3      	ldrb	r3, [r2, r3]
     3a8:	1c5a      	adds	r2, r3, #1
     3aa:	b2d0      	uxtb	r0, r2
     3ac:	490a      	ldr	r1, [pc, #40]	; (3d8 <usart_read_callback_SERCOM5+0x64>)
     3ae:	2280      	movs	r2, #128	; 0x80
     3b0:	0092      	lsls	r2, r2, #2
     3b2:	5488      	strb	r0, [r1, r2]
     3b4:	1c19      	adds	r1, r3, #0
     3b6:	4a08      	ldr	r2, [pc, #32]	; (3d8 <usart_read_callback_SERCOM5+0x64>)
     3b8:	2380      	movs	r3, #128	; 0x80
     3ba:	005b      	lsls	r3, r3, #1
     3bc:	1852      	adds	r2, r2, r1
     3be:	18d3      	adds	r3, r2, r3
     3c0:	220f      	movs	r2, #15
     3c2:	18ba      	adds	r2, r7, r2
     3c4:	7812      	ldrb	r2, [r2, #0]
     3c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enable_global();
     3c8:	4b05      	ldr	r3, [pc, #20]	; (3e0 <usart_read_callback_SERCOM5+0x6c>)
     3ca:	4798      	blx	r3
}
     3cc:	46bd      	mov	sp, r7
     3ce:	b004      	add	sp, #16
     3d0:	bd80      	pop	{r7, pc}
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	00000211 	.word	0x00000211
     3d8:	200000c0 	.word	0x200000c0
     3dc:	00000201 	.word	0x00000201
     3e0:	000001f9 	.word	0x000001f9

000003e4 <usart_write_callback_SERCOM4>:

void usart_write_callback_SERCOM4(struct usart_module *const usart_module)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
//	port_pin_toggle_output_level(LED_0_PIN);
}
     3ec:	46bd      	mov	sp, r7
     3ee:	b002      	add	sp, #8
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)

000003f4 <configure_usart_callbacks>:

//! [setup]


void configure_usart_callbacks(void)
{
     3f4:	b580      	push	{r7, lr}
     3f6:	af00      	add	r7, sp, #0
	//! [setup_register_callbacks]
	usart_register_callback(&ext3_SERCOM5, usart_write_callback_SERCOM5, USART_CALLBACK_BUFFER_TRANSMITTED);
     3f8:	4a18      	ldr	r2, [pc, #96]	; (45c <configure_usart_callbacks+0x68>)
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <configure_usart_callbacks+0x6c>)
     3fc:	1c10      	adds	r0, r2, #0
     3fe:	1c19      	adds	r1, r3, #0
     400:	2200      	movs	r2, #0
     402:	4b18      	ldr	r3, [pc, #96]	; (464 <configure_usart_callbacks+0x70>)
     404:	4798      	blx	r3
	usart_register_callback(&ext3_SERCOM5,usart_read_callback_SERCOM5, USART_CALLBACK_BUFFER_RECEIVED);
     406:	4a15      	ldr	r2, [pc, #84]	; (45c <configure_usart_callbacks+0x68>)
     408:	4b17      	ldr	r3, [pc, #92]	; (468 <configure_usart_callbacks+0x74>)
     40a:	1c10      	adds	r0, r2, #0
     40c:	1c19      	adds	r1, r3, #0
     40e:	2201      	movs	r2, #1
     410:	4b14      	ldr	r3, [pc, #80]	; (464 <configure_usart_callbacks+0x70>)
     412:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&ext3_SERCOM5, USART_CALLBACK_BUFFER_TRANSMITTED);
     414:	4b11      	ldr	r3, [pc, #68]	; (45c <configure_usart_callbacks+0x68>)
     416:	1c18      	adds	r0, r3, #0
     418:	2100      	movs	r1, #0
     41a:	4b14      	ldr	r3, [pc, #80]	; (46c <configure_usart_callbacks+0x78>)
     41c:	4798      	blx	r3
	usart_enable_callback(&ext3_SERCOM5, USART_CALLBACK_BUFFER_RECEIVED);
     41e:	4b0f      	ldr	r3, [pc, #60]	; (45c <configure_usart_callbacks+0x68>)
     420:	1c18      	adds	r0, r3, #0
     422:	2101      	movs	r1, #1
     424:	4b11      	ldr	r3, [pc, #68]	; (46c <configure_usart_callbacks+0x78>)
     426:	4798      	blx	r3
	//! [setup_enable_callbacks]

	//! [setup_register_callbacks]
	usart_register_callback(&ext3_SERCOM4, usart_write_callback_SERCOM4, USART_CALLBACK_BUFFER_TRANSMITTED);
     428:	4a11      	ldr	r2, [pc, #68]	; (470 <configure_usart_callbacks+0x7c>)
     42a:	4b12      	ldr	r3, [pc, #72]	; (474 <configure_usart_callbacks+0x80>)
     42c:	1c10      	adds	r0, r2, #0
     42e:	1c19      	adds	r1, r3, #0
     430:	2200      	movs	r2, #0
     432:	4b0c      	ldr	r3, [pc, #48]	; (464 <configure_usart_callbacks+0x70>)
     434:	4798      	blx	r3
	usart_register_callback(&ext3_SERCOM4,usart_read_callback_SERCOM4, USART_CALLBACK_BUFFER_RECEIVED);
     436:	4a0e      	ldr	r2, [pc, #56]	; (470 <configure_usart_callbacks+0x7c>)
     438:	4b0f      	ldr	r3, [pc, #60]	; (478 <configure_usart_callbacks+0x84>)
     43a:	1c10      	adds	r0, r2, #0
     43c:	1c19      	adds	r1, r3, #0
     43e:	2201      	movs	r2, #1
     440:	4b08      	ldr	r3, [pc, #32]	; (464 <configure_usart_callbacks+0x70>)
     442:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&ext3_SERCOM4, USART_CALLBACK_BUFFER_TRANSMITTED);
     444:	4b0a      	ldr	r3, [pc, #40]	; (470 <configure_usart_callbacks+0x7c>)
     446:	1c18      	adds	r0, r3, #0
     448:	2100      	movs	r1, #0
     44a:	4b08      	ldr	r3, [pc, #32]	; (46c <configure_usart_callbacks+0x78>)
     44c:	4798      	blx	r3
	usart_enable_callback(&ext3_SERCOM4, USART_CALLBACK_BUFFER_RECEIVED);
     44e:	4b08      	ldr	r3, [pc, #32]	; (470 <configure_usart_callbacks+0x7c>)
     450:	1c18      	adds	r0, r3, #0
     452:	2101      	movs	r1, #1
     454:	4b05      	ldr	r3, [pc, #20]	; (46c <configure_usart_callbacks+0x78>)
     456:	4798      	blx	r3
	//! [setup_enable_callbacks]

}
     458:	46bd      	mov	sp, r7
     45a:	bd80      	pop	{r7, pc}
     45c:	20000074 	.word	0x20000074
     460:	00000365 	.word	0x00000365
     464:	00000d15 	.word	0x00000d15
     468:	00000375 	.word	0x00000375
     46c:	00000275 	.word	0x00000275
     470:	20000098 	.word	0x20000098
     474:	000003e5 	.word	0x000003e5
     478:	000002f5 	.word	0x000002f5

0000047c <init>:
//! [setup]



void init(void) 
{
     47c:	b580      	push	{r7, lr}
     47e:	b084      	sub	sp, #16
     480:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     482:	230c      	movs	r3, #12
     484:	18fb      	adds	r3, r7, r3
     486:	1c18      	adds	r0, r3, #0
     488:	4b42      	ldr	r3, [pc, #264]	; (594 <init+0x118>)
     48a:	4798      	blx	r3

	system_clock_init();
     48c:	4b42      	ldr	r3, [pc, #264]	; (598 <init+0x11c>)
     48e:	4798      	blx	r3
	
	/* Configure outputs, set high */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     490:	230c      	movs	r3, #12
     492:	18fb      	adds	r3, r7, r3
     494:	2201      	movs	r2, #1
     496:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(Red_LED_PIN, &pin_conf);
     498:	230c      	movs	r3, #12
     49a:	18fb      	adds	r3, r7, r3
     49c:	2005      	movs	r0, #5
     49e:	1c19      	adds	r1, r3, #0
     4a0:	4b3e      	ldr	r3, [pc, #248]	; (59c <init+0x120>)
     4a2:	4798      	blx	r3
	port_pin_set_output_level(Red_LED_PIN, 1);
     4a4:	2005      	movs	r0, #5
     4a6:	2101      	movs	r1, #1
     4a8:	4b3d      	ldr	r3, [pc, #244]	; (5a0 <init+0x124>)
     4aa:	4798      	blx	r3
	port_pin_set_config(Yellow_LED_PIN, &pin_conf);
     4ac:	230c      	movs	r3, #12
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	2006      	movs	r0, #6
     4b2:	1c19      	adds	r1, r3, #0
     4b4:	4b39      	ldr	r3, [pc, #228]	; (59c <init+0x120>)
     4b6:	4798      	blx	r3
	port_pin_set_output_level(Yellow_LED_PIN, 1);
     4b8:	2006      	movs	r0, #6
     4ba:	2101      	movs	r1, #1
     4bc:	4b38      	ldr	r3, [pc, #224]	; (5a0 <init+0x124>)
     4be:	4798      	blx	r3
	port_pin_set_config(Green_LED_PIN, &pin_conf);
     4c0:	230c      	movs	r3, #12
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	2007      	movs	r0, #7
     4c6:	1c19      	adds	r1, r3, #0
     4c8:	4b34      	ldr	r3, [pc, #208]	; (59c <init+0x120>)
     4ca:	4798      	blx	r3
	port_pin_set_output_level(Green_LED_PIN, 1);
     4cc:	2007      	movs	r0, #7
     4ce:	2101      	movs	r1, #1
     4d0:	4b33      	ldr	r3, [pc, #204]	; (5a0 <init+0x124>)
     4d2:	4798      	blx	r3
	port_pin_set_config(Reset_BT_PIN, &pin_conf);
     4d4:	230c      	movs	r3, #12
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	2010      	movs	r0, #16
     4da:	1c19      	adds	r1, r3, #0
     4dc:	4b2f      	ldr	r3, [pc, #188]	; (59c <init+0x120>)
     4de:	4798      	blx	r3
	port_pin_set_output_level(Reset_BT_PIN, 1);	
     4e0:	2010      	movs	r0, #16
     4e2:	2101      	movs	r1, #1
     4e4:	4b2e      	ldr	r3, [pc, #184]	; (5a0 <init+0x124>)
     4e6:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4e8:	230c      	movs	r3, #12
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	2200      	movs	r2, #0
     4ee:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;			
     4f0:	230c      	movs	r3, #12
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	2201      	movs	r2, #1
     4f6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(UNPAIR_PUSH_BUTTON, &pin_conf);
     4f8:	230c      	movs	r3, #12
     4fa:	18fb      	adds	r3, r7, r3
     4fc:	2004      	movs	r0, #4
     4fe:	1c19      	adds	r1, r3, #0
     500:	4b26      	ldr	r3, [pc, #152]	; (59c <init+0x120>)
     502:	4798      	blx	r3
	port_pin_set_config(WT41_CARRIER_DETECT_PIN, &pin_conf);
     504:	230c      	movs	r3, #12
     506:	18fb      	adds	r3, r7, r3
     508:	2017      	movs	r0, #23
     50a:	1c19      	adds	r1, r3, #0
     50c:	4b23      	ldr	r3, [pc, #140]	; (59c <init+0x120>)
     50e:	4798      	blx	r3
	


	configure_tc4();
     510:	4b24      	ldr	r3, [pc, #144]	; (5a4 <init+0x128>)
     512:	4798      	blx	r3
	configure_tc4_callbacks();	
     514:	4b24      	ldr	r3, [pc, #144]	; (5a8 <init+0x12c>)
     516:	4798      	blx	r3
	

	configure_usart_SERCOM5();
     518:	4b24      	ldr	r3, [pc, #144]	; (5ac <init+0x130>)
     51a:	4798      	blx	r3
	configure_usart_SERCOM4();
     51c:	4b24      	ldr	r3, [pc, #144]	; (5b0 <init+0x134>)
     51e:	4798      	blx	r3
	init_serial_buffers();
     520:	4b24      	ldr	r3, [pc, #144]	; (5b4 <init+0x138>)
     522:	4798      	blx	r3

	
	configure_usart_callbacks();
     524:	4b24      	ldr	r3, [pc, #144]	; (5b8 <init+0x13c>)
     526:	4798      	blx	r3
		

	ext3_SERCOM5.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX	
     528:	4b24      	ldr	r3, [pc, #144]	; (5bc <init+0x140>)
     52a:	681b      	ldr	r3, [r3, #0]
     52c:	2202      	movs	r2, #2
     52e:	731a      	strb	r2, [r3, #12]
	ext3_SERCOM4.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX
     530:	4b23      	ldr	r3, [pc, #140]	; (5c0 <init+0x144>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	2202      	movs	r2, #2
     536:	731a      	strb	r2, [r3, #12]
	system_interrupt_enable_global();
     538:	4b22      	ldr	r3, [pc, #136]	; (5c4 <init+0x148>)
     53a:	4798      	blx	r3

	usart_read_buffer_job(&ext3_SERCOM5,(uint8_t *)rx_buffer_SERCOM5, MAX_RX_BUFFER_LENGTH);
     53c:	4a1f      	ldr	r2, [pc, #124]	; (5bc <init+0x140>)
     53e:	4b22      	ldr	r3, [pc, #136]	; (5c8 <init+0x14c>)
     540:	1c10      	adds	r0, r2, #0
     542:	1c19      	adds	r1, r3, #0
     544:	2201      	movs	r2, #1
     546:	4b21      	ldr	r3, [pc, #132]	; (5cc <init+0x150>)
     548:	4798      	blx	r3
	usart_read_buffer_job(&ext3_SERCOM4,(uint8_t *)rx_buffer_SERCOM4, MAX_RX_BUFFER_LENGTH);
     54a:	4a1d      	ldr	r2, [pc, #116]	; (5c0 <init+0x144>)
     54c:	4b20      	ldr	r3, [pc, #128]	; (5d0 <init+0x154>)
     54e:	1c10      	adds	r0, r2, #0
     550:	1c19      	adds	r1, r3, #0
     552:	2201      	movs	r2, #1
     554:	4b1d      	ldr	r3, [pc, #116]	; (5cc <init+0x150>)
     556:	4798      	blx	r3
	
	wait_10msSec(20);	// wait .2 sec above to complete
     558:	2014      	movs	r0, #20
     55a:	4b1e      	ldr	r3, [pc, #120]	; (5d4 <init+0x158>)
     55c:	4798      	blx	r3

// prime the pump
	uint8_t string[] = "at\r\n";
     55e:	1d3b      	adds	r3, r7, #4
     560:	4a1d      	ldr	r2, [pc, #116]	; (5d8 <init+0x15c>)
     562:	6811      	ldr	r1, [r2, #0]
     564:	6019      	str	r1, [r3, #0]
     566:	7912      	ldrb	r2, [r2, #4]
     568:	711a      	strb	r2, [r3, #4]
	usart_write_buffer_wait(&ext3_SERCOM5, string, sizeof(string));
     56a:	4a14      	ldr	r2, [pc, #80]	; (5bc <init+0x140>)
     56c:	1d3b      	adds	r3, r7, #4
     56e:	1c10      	adds	r0, r2, #0
     570:	1c19      	adds	r1, r3, #0
     572:	2205      	movs	r2, #5
     574:	4b19      	ldr	r3, [pc, #100]	; (5dc <init+0x160>)
     576:	4798      	blx	r3
	usart_write_buffer_wait(&ext3_SERCOM4, string, sizeof(string));
     578:	4a11      	ldr	r2, [pc, #68]	; (5c0 <init+0x144>)
     57a:	1d3b      	adds	r3, r7, #4
     57c:	1c10      	adds	r0, r2, #0
     57e:	1c19      	adds	r1, r3, #0
     580:	2205      	movs	r2, #5
     582:	4b16      	ldr	r3, [pc, #88]	; (5dc <init+0x160>)
     584:	4798      	blx	r3

	wait_10msSec(20);	// wait .2 sec above to be sent
     586:	2014      	movs	r0, #20
     588:	4b12      	ldr	r3, [pc, #72]	; (5d4 <init+0x158>)
     58a:	4798      	blx	r3
}
     58c:	46bd      	mov	sp, r7
     58e:	b004      	add	sp, #16
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00000189 	.word	0x00000189
     598:	00003379 	.word	0x00003379
     59c:	00002171 	.word	0x00002171
     5a0:	000001a9 	.word	0x000001a9
     5a4:	0000152d 	.word	0x0000152d
     5a8:	00001589 	.word	0x00001589
     5ac:	000007f9 	.word	0x000007f9
     5b0:	00000779 	.word	0x00000779
     5b4:	000008ad 	.word	0x000008ad
     5b8:	000003f5 	.word	0x000003f5
     5bc:	20000074 	.word	0x20000074
     5c0:	20000098 	.word	0x20000098
     5c4:	000001f9 	.word	0x000001f9
     5c8:	20000068 	.word	0x20000068
     5cc:	00000d59 	.word	0x00000d59
     5d0:	20000064 	.word	0x20000064
     5d4:	000014cd 	.word	0x000014cd
     5d8:	00003e30 	.word	0x00003e30
     5dc:	00002d69 	.word	0x00002d69

000005e0 <usart_write_SERCOM>:

//enum status_code usart_write_wait(struct usart_module *const module,	const uint16_t tx_data)
enum status_code usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data);

enum status_code usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b084      	sub	sp, #16
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
     5e8:	1c0a      	adds	r2, r1, #0
     5ea:	1cfb      	adds	r3, r7, #3
     5ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	60fb      	str	r3, [r7, #12]

	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC))return STATUS_BUSY;
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	7b9b      	ldrb	r3, [r3, #14]
     5f8:	b2db      	uxtb	r3, r3
     5fa:	1c1a      	adds	r2, r3, #0
     5fc:	2302      	movs	r3, #2
     5fe:	4013      	ands	r3, r2
     600:	d101      	bne.n	606 <usart_write_SERCOM+0x26>
     602:	2305      	movs	r3, #5
     604:	e012      	b.n	62c <usart_write_SERCOM+0x4c>

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     606:	687b      	ldr	r3, [r7, #4]
     608:	79db      	ldrb	r3, [r3, #7]
     60a:	2201      	movs	r2, #1
     60c:	4053      	eors	r3, r2
     60e:	b2db      	uxtb	r3, r3
     610:	2b00      	cmp	r3, #0
     612:	d001      	beq.n	618 <usart_write_SERCOM+0x38>
		return STATUS_ERR_DENIED;
     614:	231c      	movs	r3, #28
     616:	e009      	b.n	62c <usart_write_SERCOM+0x4c>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     618:	687b      	ldr	r3, [r7, #4]
     61a:	1c18      	adds	r0, r3, #0
     61c:	4b05      	ldr	r3, [pc, #20]	; (634 <usart_write_SERCOM+0x54>)
     61e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     620:	1cfb      	adds	r3, r7, #3
     622:	781b      	ldrb	r3, [r3, #0]
     624:	b29a      	uxth	r2, r3
     626:	68fb      	ldr	r3, [r7, #12]
     628:	831a      	strh	r2, [r3, #24]

	return STATUS_OK; 
     62a:	2300      	movs	r3, #0

}
     62c:	1c18      	adds	r0, r3, #0
     62e:	46bd      	mov	sp, r7
     630:	b004      	add	sp, #16
     632:	bd80      	pop	{r7, pc}
     634:	00000255 	.word	0x00000255

00000638 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     638:	b580      	push	{r7, lr}
     63a:	b082      	sub	sp, #8
     63c:	af00      	add	r7, sp, #0
     63e:	1c02      	adds	r2, r0, #0
     640:	1dfb      	adds	r3, r7, #7
     642:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <system_interrupt_enable+0x28>)
     646:	1dfa      	adds	r2, r7, #7
     648:	7812      	ldrb	r2, [r2, #0]
     64a:	1c11      	adds	r1, r2, #0
     64c:	221f      	movs	r2, #31
     64e:	400a      	ands	r2, r1
     650:	2101      	movs	r1, #1
     652:	4091      	lsls	r1, r2
     654:	1c0a      	adds	r2, r1, #0
     656:	601a      	str	r2, [r3, #0]
}
     658:	46bd      	mov	sp, r7
     65a:	b002      	add	sp, #8
     65c:	bd80      	pop	{r7, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	e000e100 	.word	0xe000e100

00000664 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     672:	68fb      	ldr	r3, [r7, #12]
     674:	8a1b      	ldrh	r3, [r3, #16]
     676:	b29b      	uxth	r3, r3
     678:	1c1a      	adds	r2, r3, #0
     67a:	2380      	movs	r3, #128	; 0x80
     67c:	021b      	lsls	r3, r3, #8
     67e:	4013      	ands	r3, r2
     680:	1e5a      	subs	r2, r3, #1
     682:	4193      	sbcs	r3, r2
     684:	b2db      	uxtb	r3, r3
#endif
}
     686:	1c18      	adds	r0, r3, #0
     688:	46bd      	mov	sp, r7
     68a:	b004      	add	sp, #16
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)

00000690 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     698:	46c0      	nop			; (mov r8, r8)
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	1c18      	adds	r0, r3, #0
     69e:	4b03      	ldr	r3, [pc, #12]	; (6ac <_usart_wait_for_sync+0x1c>)
     6a0:	4798      	blx	r3
     6a2:	1e03      	subs	r3, r0, #0
     6a4:	d1f9      	bne.n	69a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     6a6:	46bd      	mov	sp, r7
     6a8:	b002      	add	sp, #8
     6aa:	bd80      	pop	{r7, pc}
     6ac:	00000665 	.word	0x00000665

000006b0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	2280      	movs	r2, #128	; 0x80
     6bc:	05d2      	lsls	r2, r2, #23
     6be:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	2200      	movs	r2, #0
     6c4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	22ff      	movs	r2, #255	; 0xff
     6ca:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	2200      	movs	r2, #0
     6d0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	2200      	movs	r2, #0
     6d6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	2296      	movs	r2, #150	; 0x96
     6dc:	0192      	lsls	r2, r2, #6
     6de:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	2201      	movs	r2, #1
     6e4:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	2201      	movs	r2, #1
     6ea:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2200      	movs	r2, #0
     6f0:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	2200      	movs	r2, #0
     6f6:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	2200      	movs	r2, #0
     6fc:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	2288      	movs	r2, #136	; 0x88
     702:	0352      	lsls	r2, r2, #13
     704:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     706:	687b      	ldr	r3, [r7, #4]
     708:	2200      	movs	r2, #0
     70a:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	2200      	movs	r2, #0
     710:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     712:	687b      	ldr	r3, [r7, #4]
     714:	2200      	movs	r2, #0
     716:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     718:	687b      	ldr	r3, [r7, #4]
     71a:	2200      	movs	r2, #0
     71c:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	2200      	movs	r2, #0
     722:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
     724:	687b      	ldr	r3, [r7, #4]
     726:	2200      	movs	r2, #0
     728:	62da      	str	r2, [r3, #44]	; 0x2c
	config->receive_pulse_length                        = 19;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
#endif
}
     72a:	46bd      	mov	sp, r7
     72c:	b002      	add	sp, #8
     72e:	bd80      	pop	{r7, pc}

00000730 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     730:	b580      	push	{r7, lr}
     732:	b084      	sub	sp, #16
     734:	af00      	add	r7, sp, #0
     736:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     738:	687b      	ldr	r3, [r7, #4]
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     73e:	687b      	ldr	r3, [r7, #4]
     740:	681b      	ldr	r3, [r3, #0]
     742:	1c18      	adds	r0, r3, #0
     744:	4b09      	ldr	r3, [pc, #36]	; (76c <usart_enable+0x3c>)
     746:	4798      	blx	r3
     748:	1c03      	adds	r3, r0, #0
     74a:	1c18      	adds	r0, r3, #0
     74c:	4b08      	ldr	r3, [pc, #32]	; (770 <usart_enable+0x40>)
     74e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     750:	687b      	ldr	r3, [r7, #4]
     752:	1c18      	adds	r0, r3, #0
     754:	4b07      	ldr	r3, [pc, #28]	; (774 <usart_enable+0x44>)
     756:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	2202      	movs	r2, #2
     75e:	431a      	orrs	r2, r3
     760:	68fb      	ldr	r3, [r7, #12]
     762:	601a      	str	r2, [r3, #0]
}
     764:	46bd      	mov	sp, r7
     766:	b004      	add	sp, #16
     768:	bd80      	pop	{r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00001639 	.word	0x00001639
     770:	00000639 	.word	0x00000639
     774:	00000691 	.word	0x00000691

00000778 <configure_usart_SERCOM4>:
//! [setup_enable]
}
*/
//! [setup]
void configure_usart_SERCOM4(void)
{
     778:	b580      	push	{r7, lr}
     77a:	b08c      	sub	sp, #48	; 0x30
     77c:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
     77e:	1c3b      	adds	r3, r7, #0
     780:	1c18      	adds	r0, r3, #0
     782:	4b15      	ldr	r3, [pc, #84]	; (7d8 <configure_usart_SERCOM4+0x60>)
     784:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 31200;  // midi
     786:	1c3b      	adds	r3, r7, #0
     788:	4a14      	ldr	r2, [pc, #80]	; (7dc <configure_usart_SERCOM4+0x64>)
     78a:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_1;
     78c:	1c3b      	adds	r3, r7, #0
     78e:	2201      	movs	r2, #1
     790:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     792:	1c3b      	adds	r3, r7, #0
     794:	22c4      	movs	r2, #196	; 0xc4
     796:	0392      	lsls	r2, r2, #14
     798:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;  // unused
     79a:	1c3b      	adds	r3, r7, #0
     79c:	2201      	movs	r2, #1
     79e:	4252      	negs	r2, r2
     7a0:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;  // unused
     7a2:	1c3b      	adds	r3, r7, #0
     7a4:	2201      	movs	r2, #1
     7a6:	4252      	negs	r2, r2
     7a8:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     7aa:	1c3b      	adds	r3, r7, #0
     7ac:	4a0c      	ldr	r2, [pc, #48]	; (7e0 <configure_usart_SERCOM4+0x68>)
     7ae:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;	
     7b0:	1c3b      	adds	r3, r7, #0
     7b2:	4a0c      	ldr	r2, [pc, #48]	; (7e4 <configure_usart_SERCOM4+0x6c>)
     7b4:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&ext3_SERCOM4,
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	4a0b      	ldr	r2, [pc, #44]	; (7e8 <configure_usart_SERCOM4+0x70>)
     7ba:	490c      	ldr	r1, [pc, #48]	; (7ec <configure_usart_SERCOM4+0x74>)
     7bc:	1c3b      	adds	r3, r7, #0
     7be:	1c10      	adds	r0, r2, #0
     7c0:	1c1a      	adds	r2, r3, #0
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <configure_usart_SERCOM4+0x78>)
     7c4:	4798      	blx	r3
     7c6:	1e03      	subs	r3, r0, #0
     7c8:	d1f6      	bne.n	7b8 <configure_usart_SERCOM4+0x40>
	SERCOM4, &config_usart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&ext3_SERCOM4);
     7ca:	4b07      	ldr	r3, [pc, #28]	; (7e8 <configure_usart_SERCOM4+0x70>)
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	4b09      	ldr	r3, [pc, #36]	; (7f4 <configure_usart_SERCOM4+0x7c>)
     7d0:	4798      	blx	r3
	//! [setup_enable]
}
     7d2:	46bd      	mov	sp, r7
     7d4:	b00c      	add	sp, #48	; 0x30
     7d6:	bd80      	pop	{r7, pc}
     7d8:	000006b1 	.word	0x000006b1
     7dc:	000079e0 	.word	0x000079e0
     7e0:	002a0003 	.word	0x002a0003
     7e4:	002b0003 	.word	0x002b0003
     7e8:	20000098 	.word	0x20000098
     7ec:	42001800 	.word	0x42001800
     7f0:	00002aad 	.word	0x00002aad
     7f4:	00000731 	.word	0x00000731

000007f8 <configure_usart_SERCOM5>:
//! [setup]
void configure_usart_SERCOM5(void)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b08c      	sub	sp, #48	; 0x30
     7fc:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
     7fe:	1c3b      	adds	r3, r7, #0
     800:	1c18      	adds	r0, r3, #0
     802:	4b15      	ldr	r3, [pc, #84]	; (858 <configure_usart_SERCOM5+0x60>)
     804:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 115200;
     806:	1c3b      	adds	r3, r7, #0
     808:	22e1      	movs	r2, #225	; 0xe1
     80a:	0252      	lsls	r2, r2, #9
     80c:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_1; 
     80e:	1c3b      	adds	r3, r7, #0
     810:	2201      	movs	r2, #1
     812:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1; // USART_RX_3_TX_2_XCK_3; //USART_RX_1_TX_0_XCK_1
     814:	1c3b      	adds	r3, r7, #0
     816:	2280      	movs	r2, #128	; 0x80
     818:	0352      	lsls	r2, r2, #13
     81a:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PB16C_SERCOM5_PAD0;  // TX
     81c:	1c3b      	adds	r3, r7, #0
     81e:	4a0f      	ldr	r2, [pc, #60]	; (85c <configure_usart_SERCOM5+0x64>)
     820:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_PB17C_SERCOM5_PAD1;  // RX
     822:	1c3b      	adds	r3, r7, #0
     824:	4a0e      	ldr	r2, [pc, #56]	; (860 <configure_usart_SERCOM5+0x68>)
     826:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// UNUSED
     828:	1c3b      	adds	r3, r7, #0
     82a:	4a0e      	ldr	r2, [pc, #56]	; (864 <configure_usart_SERCOM5+0x6c>)
     82c:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// UNUSED
     82e:	1c3b      	adds	r3, r7, #0
     830:	4a0d      	ldr	r2, [pc, #52]	; (868 <configure_usart_SERCOM5+0x70>)
     832:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&ext3_SERCOM5, SERCOM5, &config_usart) != STATUS_OK) {
     834:	46c0      	nop			; (mov r8, r8)
     836:	4a0d      	ldr	r2, [pc, #52]	; (86c <configure_usart_SERCOM5+0x74>)
     838:	490d      	ldr	r1, [pc, #52]	; (870 <configure_usart_SERCOM5+0x78>)
     83a:	1c3b      	adds	r3, r7, #0
     83c:	1c10      	adds	r0, r2, #0
     83e:	1c1a      	adds	r2, r3, #0
     840:	4b0c      	ldr	r3, [pc, #48]	; (874 <configure_usart_SERCOM5+0x7c>)
     842:	4798      	blx	r3
     844:	1e03      	subs	r3, r0, #0
     846:	d1f6      	bne.n	836 <configure_usart_SERCOM5+0x3e>
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&ext3_SERCOM5);
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <configure_usart_SERCOM5+0x74>)
     84a:	1c18      	adds	r0, r3, #0
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <configure_usart_SERCOM5+0x80>)
     84e:	4798      	blx	r3
	//! [setup_enable]
}
     850:	46bd      	mov	sp, r7
     852:	b00c      	add	sp, #48	; 0x30
     854:	bd80      	pop	{r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	000006b1 	.word	0x000006b1
     85c:	00300002 	.word	0x00300002
     860:	00310002 	.word	0x00310002
     864:	00360003 	.word	0x00360003
     868:	00370003 	.word	0x00370003
     86c:	20000074 	.word	0x20000074
     870:	42001c00 	.word	0x42001c00
     874:	00002aad 	.word	0x00002aad
     878:	00000731 	.word	0x00000731

0000087c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     87c:	b580      	push	{r7, lr}
     87e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <system_interrupt_enable_global+0x14>)
     882:	2201      	movs	r2, #1
     884:	701a      	strb	r2, [r3, #0]
     886:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     88a:	b662      	cpsie	i
}
     88c:	46bd      	mov	sp, r7
     88e:	bd80      	pop	{r7, pc}
     890:	20000008 	.word	0x20000008

00000894 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     894:	b580      	push	{r7, lr}
     896:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     898:	b672      	cpsid	i
     89a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     89e:	4b02      	ldr	r3, [pc, #8]	; (8a8 <system_interrupt_disable_global+0x14>)
     8a0:	2200      	movs	r2, #0
     8a2:	701a      	strb	r2, [r3, #0]
}
     8a4:	46bd      	mov	sp, r7
     8a6:	bd80      	pop	{r7, pc}
     8a8:	20000008 	.word	0x20000008

000008ac <init_serial_buffers>:

struct bufferDef serialQ;
char lastBT;

struct bufferDef *init_serial_buffers(void)
{	uint16_t i;
     8ac:	b580      	push	{r7, lr}
     8ae:	b082      	sub	sp, #8
     8b0:	af00      	add	r7, sp, #0
	for (i=0; i<255; i++)
     8b2:	1dbb      	adds	r3, r7, #6
     8b4:	2200      	movs	r2, #0
     8b6:	801a      	strh	r2, [r3, #0]
     8b8:	e014      	b.n	8e4 <init_serial_buffers+0x38>
	{
		serialQ.blueToothToMidi[i] = serialQ.midiToBlueTooth[i] = 0; 
     8ba:	1dbb      	adds	r3, r7, #6
     8bc:	881a      	ldrh	r2, [r3, #0]
     8be:	1dbb      	adds	r3, r7, #6
     8c0:	881b      	ldrh	r3, [r3, #0]
     8c2:	4915      	ldr	r1, [pc, #84]	; (918 <init_serial_buffers+0x6c>)
     8c4:	2000      	movs	r0, #0
     8c6:	54c8      	strb	r0, [r1, r3]
     8c8:	4913      	ldr	r1, [pc, #76]	; (918 <init_serial_buffers+0x6c>)
     8ca:	5cc8      	ldrb	r0, [r1, r3]
     8cc:	4912      	ldr	r1, [pc, #72]	; (918 <init_serial_buffers+0x6c>)
     8ce:	2380      	movs	r3, #128	; 0x80
     8d0:	005b      	lsls	r3, r3, #1
     8d2:	188a      	adds	r2, r1, r2
     8d4:	18d3      	adds	r3, r2, r3
     8d6:	1c02      	adds	r2, r0, #0
     8d8:	701a      	strb	r2, [r3, #0]
struct bufferDef serialQ;
char lastBT;

struct bufferDef *init_serial_buffers(void)
{	uint16_t i;
	for (i=0; i<255; i++)
     8da:	1dbb      	adds	r3, r7, #6
     8dc:	881a      	ldrh	r2, [r3, #0]
     8de:	1dbb      	adds	r3, r7, #6
     8e0:	3201      	adds	r2, #1
     8e2:	801a      	strh	r2, [r3, #0]
     8e4:	1dbb      	adds	r3, r7, #6
     8e6:	881b      	ldrh	r3, [r3, #0]
     8e8:	2bfe      	cmp	r3, #254	; 0xfe
     8ea:	d9e6      	bls.n	8ba <init_serial_buffers+0xe>
	{
		serialQ.blueToothToMidi[i] = serialQ.midiToBlueTooth[i] = 0; 
	}
	serialQ.bt_in = 0;
     8ec:	4a0a      	ldr	r2, [pc, #40]	; (918 <init_serial_buffers+0x6c>)
     8ee:	2380      	movs	r3, #128	; 0x80
     8f0:	009b      	lsls	r3, r3, #2
     8f2:	2100      	movs	r1, #0
     8f4:	54d1      	strb	r1, [r2, r3]
	serialQ.bt_out = 0;
     8f6:	4b08      	ldr	r3, [pc, #32]	; (918 <init_serial_buffers+0x6c>)
     8f8:	4a08      	ldr	r2, [pc, #32]	; (91c <init_serial_buffers+0x70>)
     8fa:	2100      	movs	r1, #0
     8fc:	5499      	strb	r1, [r3, r2]
	serialQ.midi_in = 0;
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <init_serial_buffers+0x6c>)
     900:	4a07      	ldr	r2, [pc, #28]	; (920 <init_serial_buffers+0x74>)
     902:	2100      	movs	r1, #0
     904:	5499      	strb	r1, [r3, r2]
	serialQ.midi_out = 0;
     906:	4b04      	ldr	r3, [pc, #16]	; (918 <init_serial_buffers+0x6c>)
     908:	4a06      	ldr	r2, [pc, #24]	; (924 <init_serial_buffers+0x78>)
     90a:	2100      	movs	r1, #0
     90c:	5499      	strb	r1, [r3, r2]
	return &serialQ;	
     90e:	4b02      	ldr	r3, [pc, #8]	; (918 <init_serial_buffers+0x6c>)
}
     910:	1c18      	adds	r0, r3, #0
     912:	46bd      	mov	sp, r7
     914:	b002      	add	sp, #8
     916:	bd80      	pop	{r7, pc}
     918:	200000c0 	.word	0x200000c0
     91c:	00000201 	.word	0x00000201
     920:	00000202 	.word	0x00000202
     924:	00000203 	.word	0x00000203

00000928 <midi_to_bt_loadQ>:
	if ((serialQ.bt_in + 1) != serialQ.bt_out) serialQ.blueToothToMidi[serialQ.bt_in++] = lastBT = data;
		else return STATUS_ERR_DENIED;
	return STATUS_OK;	
}
enum status_code midi_to_bt_loadQ (uint8_t data)
{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
     92e:	1c02      	adds	r2, r0, #0
     930:	1dfb      	adds	r3, r7, #7
     932:	701a      	strb	r2, [r3, #0]
	if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = data;
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <midi_to_bt_loadQ+0x48>)
     936:	4a0f      	ldr	r2, [pc, #60]	; (974 <midi_to_bt_loadQ+0x4c>)
     938:	5c9b      	ldrb	r3, [r3, r2]
     93a:	3301      	adds	r3, #1
     93c:	4a0c      	ldr	r2, [pc, #48]	; (970 <midi_to_bt_loadQ+0x48>)
     93e:	490e      	ldr	r1, [pc, #56]	; (978 <midi_to_bt_loadQ+0x50>)
     940:	5c52      	ldrb	r2, [r2, r1]
     942:	4293      	cmp	r3, r2
     944:	d00e      	beq.n	964 <midi_to_bt_loadQ+0x3c>
     946:	4b0a      	ldr	r3, [pc, #40]	; (970 <midi_to_bt_loadQ+0x48>)
     948:	4a0a      	ldr	r2, [pc, #40]	; (974 <midi_to_bt_loadQ+0x4c>)
     94a:	5c9b      	ldrb	r3, [r3, r2]
     94c:	1c5a      	adds	r2, r3, #1
     94e:	b2d0      	uxtb	r0, r2
     950:	4a07      	ldr	r2, [pc, #28]	; (970 <midi_to_bt_loadQ+0x48>)
     952:	4908      	ldr	r1, [pc, #32]	; (974 <midi_to_bt_loadQ+0x4c>)
     954:	5450      	strb	r0, [r2, r1]
     956:	1c19      	adds	r1, r3, #0
     958:	4b05      	ldr	r3, [pc, #20]	; (970 <midi_to_bt_loadQ+0x48>)
     95a:	1dfa      	adds	r2, r7, #7
     95c:	7812      	ldrb	r2, [r2, #0]
     95e:	545a      	strb	r2, [r3, r1]
		else return STATUS_ERR_DENIED;
	return STATUS_OK;
     960:	2300      	movs	r3, #0
     962:	e000      	b.n	966 <midi_to_bt_loadQ+0x3e>
	return STATUS_OK;	
}
enum status_code midi_to_bt_loadQ (uint8_t data)
{
	if ((serialQ.midi_in + 1) != serialQ.midi_out) serialQ.midiToBlueTooth[serialQ.midi_in++] = data;
		else return STATUS_ERR_DENIED;
     964:	231c      	movs	r3, #28
	return STATUS_OK;
}
     966:	1c18      	adds	r0, r3, #0
     968:	46bd      	mov	sp, r7
     96a:	b002      	add	sp, #8
     96c:	bd80      	pop	{r7, pc}
     96e:	46c0      	nop			; (mov r8, r8)
     970:	200000c0 	.word	0x200000c0
     974:	00000202 	.word	0x00000202
     978:	00000203 	.word	0x00000203

0000097c <load_iWrap_Cmd>:


void load_iWrap_Cmd( uint8_t *str)
{
     97c:	b580      	push	{r7, lr}
     97e:	b084      	sub	sp, #16
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
	uint8_t i;
	unsigned int len;
	len = strlen((const char*)str);
     984:	687b      	ldr	r3, [r7, #4]
     986:	1c18      	adds	r0, r3, #0
     988:	4b12      	ldr	r3, [pc, #72]	; (9d4 <load_iWrap_Cmd+0x58>)
     98a:	4798      	blx	r3
     98c:	1c03      	adds	r3, r0, #0
     98e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
     990:	230f      	movs	r3, #15
     992:	18fb      	adds	r3, r7, r3
     994:	2200      	movs	r2, #0
     996:	701a      	strb	r2, [r3, #0]
     998:	e012      	b.n	9c0 <load_iWrap_Cmd+0x44>
	{
		system_interrupt_disable_global();
     99a:	4b0f      	ldr	r3, [pc, #60]	; (9d8 <load_iWrap_Cmd+0x5c>)
     99c:	4798      	blx	r3
		midi_to_bt_loadQ(*str);
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	781b      	ldrb	r3, [r3, #0]
     9a2:	1c18      	adds	r0, r3, #0
     9a4:	4b0d      	ldr	r3, [pc, #52]	; (9dc <load_iWrap_Cmd+0x60>)
     9a6:	4798      	blx	r3
		system_interrupt_enable_global();
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <load_iWrap_Cmd+0x64>)
     9aa:	4798      	blx	r3
		str++;	
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	3301      	adds	r3, #1
     9b0:	607b      	str	r3, [r7, #4]
void load_iWrap_Cmd( uint8_t *str)
{
	uint8_t i;
	unsigned int len;
	len = strlen((const char*)str);
	for (i = 0; i < len; i++)
     9b2:	230f      	movs	r3, #15
     9b4:	18fb      	adds	r3, r7, r3
     9b6:	781a      	ldrb	r2, [r3, #0]
     9b8:	230f      	movs	r3, #15
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	3201      	adds	r2, #1
     9be:	701a      	strb	r2, [r3, #0]
     9c0:	230f      	movs	r3, #15
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	68bb      	ldr	r3, [r7, #8]
     9c8:	429a      	cmp	r2, r3
     9ca:	d3e6      	bcc.n	99a <load_iWrap_Cmd+0x1e>
		system_interrupt_disable_global();
		midi_to_bt_loadQ(*str);
		system_interrupt_enable_global();
		str++;	
	}
}
     9cc:	46bd      	mov	sp, r7
     9ce:	b004      	add	sp, #16
     9d0:	bd80      	pop	{r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	00003e05 	.word	0x00003e05
     9d8:	00000895 	.word	0x00000895
     9dc:	00000929 	.word	0x00000929
     9e0:	0000087d 	.word	0x0000087d

000009e4 <bt_to_midi_length>:
------------------------------------------------------------------------------*/

uint16_t blen, mlen;

uint8_t bt_to_midi_length (void)
{	uint16_t temp = 0;
     9e4:	b580      	push	{r7, lr}
     9e6:	b082      	sub	sp, #8
     9e8:	af00      	add	r7, sp, #0
     9ea:	1dbb      	adds	r3, r7, #6
     9ec:	2200      	movs	r2, #0
     9ee:	801a      	strh	r2, [r3, #0]
	if (serialQ.bt_in != serialQ.bt_out) 
     9f0:	4a1c      	ldr	r2, [pc, #112]	; (a64 <bt_to_midi_length+0x80>)
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	009b      	lsls	r3, r3, #2
     9f6:	5cd2      	ldrb	r2, [r2, r3]
     9f8:	4b1a      	ldr	r3, [pc, #104]	; (a64 <bt_to_midi_length+0x80>)
     9fa:	491b      	ldr	r1, [pc, #108]	; (a68 <bt_to_midi_length+0x84>)
     9fc:	5c5b      	ldrb	r3, [r3, r1]
     9fe:	429a      	cmp	r2, r3
     a00:	d024      	beq.n	a4c <bt_to_midi_length+0x68>
	{	if (serialQ.bt_in > serialQ.bt_out) 
     a02:	4a18      	ldr	r2, [pc, #96]	; (a64 <bt_to_midi_length+0x80>)
     a04:	2380      	movs	r3, #128	; 0x80
     a06:	009b      	lsls	r3, r3, #2
     a08:	5cd2      	ldrb	r2, [r2, r3]
     a0a:	4b16      	ldr	r3, [pc, #88]	; (a64 <bt_to_midi_length+0x80>)
     a0c:	4916      	ldr	r1, [pc, #88]	; (a68 <bt_to_midi_length+0x84>)
     a0e:	5c5b      	ldrb	r3, [r3, r1]
     a10:	429a      	cmp	r2, r3
     a12:	d90c      	bls.n	a2e <bt_to_midi_length+0x4a>
			temp = serialQ.bt_in - serialQ.bt_out;
     a14:	4a13      	ldr	r2, [pc, #76]	; (a64 <bt_to_midi_length+0x80>)
     a16:	2380      	movs	r3, #128	; 0x80
     a18:	009b      	lsls	r3, r3, #2
     a1a:	5cd3      	ldrb	r3, [r2, r3]
     a1c:	b299      	uxth	r1, r3
     a1e:	4b11      	ldr	r3, [pc, #68]	; (a64 <bt_to_midi_length+0x80>)
     a20:	4a11      	ldr	r2, [pc, #68]	; (a68 <bt_to_midi_length+0x84>)
     a22:	5c9b      	ldrb	r3, [r3, r2]
     a24:	b29a      	uxth	r2, r3
     a26:	1dbb      	adds	r3, r7, #6
     a28:	1a8a      	subs	r2, r1, r2
     a2a:	801a      	strh	r2, [r3, #0]
     a2c:	e00e      	b.n	a4c <bt_to_midi_length+0x68>
		else
		{
			temp = 256 - serialQ.bt_out + serialQ.bt_in;
     a2e:	4a0d      	ldr	r2, [pc, #52]	; (a64 <bt_to_midi_length+0x80>)
     a30:	2380      	movs	r3, #128	; 0x80
     a32:	009b      	lsls	r3, r3, #2
     a34:	5cd3      	ldrb	r3, [r2, r3]
     a36:	b29a      	uxth	r2, r3
     a38:	4b0a      	ldr	r3, [pc, #40]	; (a64 <bt_to_midi_length+0x80>)
     a3a:	490b      	ldr	r1, [pc, #44]	; (a68 <bt_to_midi_length+0x84>)
     a3c:	5c5b      	ldrb	r3, [r3, r1]
     a3e:	b29b      	uxth	r3, r3
     a40:	1ad3      	subs	r3, r2, r3
     a42:	b29a      	uxth	r2, r3
     a44:	1dbb      	adds	r3, r7, #6
     a46:	3201      	adds	r2, #1
     a48:	32ff      	adds	r2, #255	; 0xff
     a4a:	801a      	strh	r2, [r3, #0]
		}
	}
	blen = temp;
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <bt_to_midi_length+0x88>)
     a4e:	1dba      	adds	r2, r7, #6
     a50:	8812      	ldrh	r2, [r2, #0]
     a52:	801a      	strh	r2, [r3, #0]
	return (temp);
     a54:	1dbb      	adds	r3, r7, #6
     a56:	881b      	ldrh	r3, [r3, #0]
     a58:	b2db      	uxtb	r3, r3
}
     a5a:	1c18      	adds	r0, r3, #0
     a5c:	46bd      	mov	sp, r7
     a5e:	b002      	add	sp, #8
     a60:	bd80      	pop	{r7, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	200000c0 	.word	0x200000c0
     a68:	00000201 	.word	0x00000201
     a6c:	200002c8 	.word	0x200002c8

00000a70 <midi_to_bt_length>:
uint8_t midi_to_bt_length (void)
{	uint16_t temp =0;
     a70:	b580      	push	{r7, lr}
     a72:	b082      	sub	sp, #8
     a74:	af00      	add	r7, sp, #0
     a76:	1dbb      	adds	r3, r7, #6
     a78:	2200      	movs	r2, #0
     a7a:	801a      	strh	r2, [r3, #0]
	if (serialQ.midi_in != serialQ.midi_out) 
     a7c:	4b1a      	ldr	r3, [pc, #104]	; (ae8 <midi_to_bt_length+0x78>)
     a7e:	4a1b      	ldr	r2, [pc, #108]	; (aec <midi_to_bt_length+0x7c>)
     a80:	5c9a      	ldrb	r2, [r3, r2]
     a82:	4b19      	ldr	r3, [pc, #100]	; (ae8 <midi_to_bt_length+0x78>)
     a84:	491a      	ldr	r1, [pc, #104]	; (af0 <midi_to_bt_length+0x80>)
     a86:	5c5b      	ldrb	r3, [r3, r1]
     a88:	429a      	cmp	r2, r3
     a8a:	d021      	beq.n	ad0 <midi_to_bt_length+0x60>
	{
		if (serialQ.midi_in > serialQ.midi_out) 
     a8c:	4b16      	ldr	r3, [pc, #88]	; (ae8 <midi_to_bt_length+0x78>)
     a8e:	4a17      	ldr	r2, [pc, #92]	; (aec <midi_to_bt_length+0x7c>)
     a90:	5c9a      	ldrb	r2, [r3, r2]
     a92:	4b15      	ldr	r3, [pc, #84]	; (ae8 <midi_to_bt_length+0x78>)
     a94:	4916      	ldr	r1, [pc, #88]	; (af0 <midi_to_bt_length+0x80>)
     a96:	5c5b      	ldrb	r3, [r3, r1]
     a98:	429a      	cmp	r2, r3
     a9a:	d90b      	bls.n	ab4 <midi_to_bt_length+0x44>
			temp = serialQ.midi_in - serialQ.midi_out;
     a9c:	4b12      	ldr	r3, [pc, #72]	; (ae8 <midi_to_bt_length+0x78>)
     a9e:	4a13      	ldr	r2, [pc, #76]	; (aec <midi_to_bt_length+0x7c>)
     aa0:	5c9b      	ldrb	r3, [r3, r2]
     aa2:	b299      	uxth	r1, r3
     aa4:	4b10      	ldr	r3, [pc, #64]	; (ae8 <midi_to_bt_length+0x78>)
     aa6:	4a12      	ldr	r2, [pc, #72]	; (af0 <midi_to_bt_length+0x80>)
     aa8:	5c9b      	ldrb	r3, [r3, r2]
     aaa:	b29a      	uxth	r2, r3
     aac:	1dbb      	adds	r3, r7, #6
     aae:	1a8a      	subs	r2, r1, r2
     ab0:	801a      	strh	r2, [r3, #0]
     ab2:	e00d      	b.n	ad0 <midi_to_bt_length+0x60>
		else
		{
			temp = 256 - serialQ.midi_out + serialQ.midi_in;
     ab4:	4b0c      	ldr	r3, [pc, #48]	; (ae8 <midi_to_bt_length+0x78>)
     ab6:	4a0d      	ldr	r2, [pc, #52]	; (aec <midi_to_bt_length+0x7c>)
     ab8:	5c9b      	ldrb	r3, [r3, r2]
     aba:	b29a      	uxth	r2, r3
     abc:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <midi_to_bt_length+0x78>)
     abe:	490c      	ldr	r1, [pc, #48]	; (af0 <midi_to_bt_length+0x80>)
     ac0:	5c5b      	ldrb	r3, [r3, r1]
     ac2:	b29b      	uxth	r3, r3
     ac4:	1ad3      	subs	r3, r2, r3
     ac6:	b29a      	uxth	r2, r3
     ac8:	1dbb      	adds	r3, r7, #6
     aca:	3201      	adds	r2, #1
     acc:	32ff      	adds	r2, #255	; 0xff
     ace:	801a      	strh	r2, [r3, #0]
		}
	}
	mlen= temp;
     ad0:	4b08      	ldr	r3, [pc, #32]	; (af4 <midi_to_bt_length+0x84>)
     ad2:	1dba      	adds	r2, r7, #6
     ad4:	8812      	ldrh	r2, [r2, #0]
     ad6:	801a      	strh	r2, [r3, #0]
	return (temp);
     ad8:	1dbb      	adds	r3, r7, #6
     ada:	881b      	ldrh	r3, [r3, #0]
     adc:	b2db      	uxtb	r3, r3
}
     ade:	1c18      	adds	r0, r3, #0
     ae0:	46bd      	mov	sp, r7
     ae2:	b002      	add	sp, #8
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	200000c0 	.word	0x200000c0
     aec:	00000202 	.word	0x00000202
     af0:	00000203 	.word	0x00000203
     af4:	200002c6 	.word	0x200002c6

00000af8 <check_usarts>:
extern uint8_t sysState;
extern bool slave;


void check_usarts(void)
{	
     af8:	b590      	push	{r4, r7, lr}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
	uint32_t length, lenMax=0;
     afe:	2300      	movs	r3, #0
     b00:	60fb      	str	r3, [r7, #12]
	enum status_code status_code;	

/* write from the midi Q to the WT41

*/
	length = midi_to_bt_length();
     b02:	4b2b      	ldr	r3, [pc, #172]	; (bb0 <check_usarts+0xb8>)
     b04:	4798      	blx	r3
     b06:	1c03      	adds	r3, r0, #0
     b08:	60bb      	str	r3, [r7, #8]
	if (length > lenMax ) lenMax = length;
     b0a:	68ba      	ldr	r2, [r7, #8]
     b0c:	68fb      	ldr	r3, [r7, #12]
     b0e:	429a      	cmp	r2, r3
     b10:	d901      	bls.n	b16 <check_usarts+0x1e>
     b12:	68bb      	ldr	r3, [r7, #8]
     b14:	60fb      	str	r3, [r7, #12]
	if (length>0)	{
     b16:	68bb      	ldr	r3, [r7, #8]
     b18:	2b00      	cmp	r3, #0
     b1a:	d01d      	beq.n	b58 <check_usarts+0x60>
		tx_data = serialQ.midiToBlueTooth[serialQ.midi_out];
     b1c:	4b25      	ldr	r3, [pc, #148]	; (bb4 <check_usarts+0xbc>)
     b1e:	4a26      	ldr	r2, [pc, #152]	; (bb8 <check_usarts+0xc0>)
     b20:	5c9b      	ldrb	r3, [r3, r2]
     b22:	1c19      	adds	r1, r3, #0
     b24:	1dfb      	adds	r3, r7, #7
     b26:	4a23      	ldr	r2, [pc, #140]	; (bb4 <check_usarts+0xbc>)
     b28:	5c52      	ldrb	r2, [r2, r1]
     b2a:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_SERCOM(&ext3_SERCOM5, tx_data); //  mod12/31/15
     b2c:	1dbc      	adds	r4, r7, #6
     b2e:	4a23      	ldr	r2, [pc, #140]	; (bbc <check_usarts+0xc4>)
     b30:	1dfb      	adds	r3, r7, #7
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	1c10      	adds	r0, r2, #0
     b36:	1c19      	adds	r1, r3, #0
     b38:	4b21      	ldr	r3, [pc, #132]	; (bc0 <check_usarts+0xc8>)
     b3a:	4798      	blx	r3
     b3c:	1c03      	adds	r3, r0, #0
     b3e:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK)
     b40:	1dbb      	adds	r3, r7, #6
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	2b00      	cmp	r3, #0
     b46:	d107      	bne.n	b58 <check_usarts+0x60>
		{
			serialQ.midi_out++;			// write ok, inc ptr
     b48:	4b1a      	ldr	r3, [pc, #104]	; (bb4 <check_usarts+0xbc>)
     b4a:	4a1b      	ldr	r2, [pc, #108]	; (bb8 <check_usarts+0xc0>)
     b4c:	5c9b      	ldrb	r3, [r3, r2]
     b4e:	3301      	adds	r3, #1
     b50:	b2d9      	uxtb	r1, r3
     b52:	4b18      	ldr	r3, [pc, #96]	; (bb4 <check_usarts+0xbc>)
     b54:	4a18      	ldr	r2, [pc, #96]	; (bb8 <check_usarts+0xc0>)
     b56:	5499      	strb	r1, [r3, r2]
		}
	}

	/* write from the WT41  Q to midi */
	length = bt_to_midi_length();
     b58:	4b1a      	ldr	r3, [pc, #104]	; (bc4 <check_usarts+0xcc>)
     b5a:	4798      	blx	r3
     b5c:	1c03      	adds	r3, r0, #0
     b5e:	60bb      	str	r3, [r7, #8]
	if (length>0)	{
     b60:	68bb      	ldr	r3, [r7, #8]
     b62:	2b00      	cmp	r3, #0
     b64:	d021      	beq.n	baa <check_usarts+0xb2>
		tx_data = serialQ.blueToothToMidi[serialQ.bt_out];
     b66:	4b13      	ldr	r3, [pc, #76]	; (bb4 <check_usarts+0xbc>)
     b68:	4a17      	ldr	r2, [pc, #92]	; (bc8 <check_usarts+0xd0>)
     b6a:	5c9b      	ldrb	r3, [r3, r2]
     b6c:	1c18      	adds	r0, r3, #0
     b6e:	1dfb      	adds	r3, r7, #7
     b70:	4910      	ldr	r1, [pc, #64]	; (bb4 <check_usarts+0xbc>)
     b72:	2280      	movs	r2, #128	; 0x80
     b74:	0052      	lsls	r2, r2, #1
     b76:	1809      	adds	r1, r1, r0
     b78:	188a      	adds	r2, r1, r2
     b7a:	7812      	ldrb	r2, [r2, #0]
     b7c:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_SERCOM(&ext3_SERCOM4, tx_data); //  mod12/31/15
     b7e:	1dbc      	adds	r4, r7, #6
     b80:	4a12      	ldr	r2, [pc, #72]	; (bcc <check_usarts+0xd4>)
     b82:	1dfb      	adds	r3, r7, #7
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	1c10      	adds	r0, r2, #0
     b88:	1c19      	adds	r1, r3, #0
     b8a:	4b0d      	ldr	r3, [pc, #52]	; (bc0 <check_usarts+0xc8>)
     b8c:	4798      	blx	r3
     b8e:	1c03      	adds	r3, r0, #0
     b90:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK) {
     b92:	1dbb      	adds	r3, r7, #6
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	2b00      	cmp	r3, #0
     b98:	d107      	bne.n	baa <check_usarts+0xb2>
			serialQ.bt_out++;			// write ok, inc ptr
     b9a:	4b06      	ldr	r3, [pc, #24]	; (bb4 <check_usarts+0xbc>)
     b9c:	4a0a      	ldr	r2, [pc, #40]	; (bc8 <check_usarts+0xd0>)
     b9e:	5c9b      	ldrb	r3, [r3, r2]
     ba0:	3301      	adds	r3, #1
     ba2:	b2d9      	uxtb	r1, r3
     ba4:	4b03      	ldr	r3, [pc, #12]	; (bb4 <check_usarts+0xbc>)
     ba6:	4a08      	ldr	r2, [pc, #32]	; (bc8 <check_usarts+0xd0>)
     ba8:	5499      	strb	r1, [r3, r2]
		}
	}

}
     baa:	46bd      	mov	sp, r7
     bac:	b005      	add	sp, #20
     bae:	bd90      	pop	{r4, r7, pc}
     bb0:	00000a71 	.word	0x00000a71
     bb4:	200000c0 	.word	0x200000c0
     bb8:	00000203 	.word	0x00000203
     bbc:	20000074 	.word	0x20000074
     bc0:	000005e1 	.word	0x000005e1
     bc4:	000009e5 	.word	0x000009e5
     bc8:	00000201 	.word	0x00000201
     bcc:	20000098 	.word	0x20000098

00000bd0 <write_BT>:

void write_BT(void)
{
     bd0:	b590      	push	{r4, r7, lr}
     bd2:	b085      	sub	sp, #20
     bd4:	af00      	add	r7, sp, #0
	uint32_t length, lenMax=0;
     bd6:	2300      	movs	r3, #0
     bd8:	60fb      	str	r3, [r7, #12]
	uint8_t tx_data;
	enum status_code status_code;

	length = midi_to_bt_length();
     bda:	4b17      	ldr	r3, [pc, #92]	; (c38 <write_BT+0x68>)
     bdc:	4798      	blx	r3
     bde:	1c03      	adds	r3, r0, #0
     be0:	60bb      	str	r3, [r7, #8]
	if (length > lenMax ) lenMax = length;
     be2:	68ba      	ldr	r2, [r7, #8]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	429a      	cmp	r2, r3
     be8:	d901      	bls.n	bee <write_BT+0x1e>
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	60fb      	str	r3, [r7, #12]
	if (length>0)	{
     bee:	68bb      	ldr	r3, [r7, #8]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d01d      	beq.n	c30 <write_BT+0x60>
		tx_data = serialQ.midiToBlueTooth[serialQ.midi_out];
     bf4:	4b11      	ldr	r3, [pc, #68]	; (c3c <write_BT+0x6c>)
     bf6:	4a12      	ldr	r2, [pc, #72]	; (c40 <write_BT+0x70>)
     bf8:	5c9b      	ldrb	r3, [r3, r2]
     bfa:	1c19      	adds	r1, r3, #0
     bfc:	1dfb      	adds	r3, r7, #7
     bfe:	4a0f      	ldr	r2, [pc, #60]	; (c3c <write_BT+0x6c>)
     c00:	5c52      	ldrb	r2, [r2, r1]
     c02:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_SERCOM(&ext3_SERCOM5, tx_data); //  mod12/31/15
     c04:	1dbc      	adds	r4, r7, #6
     c06:	4a0f      	ldr	r2, [pc, #60]	; (c44 <write_BT+0x74>)
     c08:	1dfb      	adds	r3, r7, #7
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	1c10      	adds	r0, r2, #0
     c0e:	1c19      	adds	r1, r3, #0
     c10:	4b0d      	ldr	r3, [pc, #52]	; (c48 <write_BT+0x78>)
     c12:	4798      	blx	r3
     c14:	1c03      	adds	r3, r0, #0
     c16:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK)
     c18:	1dbb      	adds	r3, r7, #6
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d107      	bne.n	c30 <write_BT+0x60>
		{
			serialQ.midi_out++;			// write ok, inc ptr
     c20:	4b06      	ldr	r3, [pc, #24]	; (c3c <write_BT+0x6c>)
     c22:	4a07      	ldr	r2, [pc, #28]	; (c40 <write_BT+0x70>)
     c24:	5c9b      	ldrb	r3, [r3, r2]
     c26:	3301      	adds	r3, #1
     c28:	b2d9      	uxtb	r1, r3
     c2a:	4b04      	ldr	r3, [pc, #16]	; (c3c <write_BT+0x6c>)
     c2c:	4a04      	ldr	r2, [pc, #16]	; (c40 <write_BT+0x70>)
     c2e:	5499      	strb	r1, [r3, r2]
		}
	}

}
     c30:	46bd      	mov	sp, r7
     c32:	b005      	add	sp, #20
     c34:	bd90      	pop	{r4, r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00000a71 	.word	0x00000a71
     c3c:	200000c0 	.word	0x200000c0
     c40:	00000203 	.word	0x00000203
     c44:	20000074 	.word	0x20000074
     c48:	000005e1 	.word	0x000005e1

00000c4c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     c50:	4b01      	ldr	r3, [pc, #4]	; (c58 <system_interrupt_enter_critical_section+0xc>)
     c52:	4798      	blx	r3
}
     c54:	46bd      	mov	sp, r7
     c56:	bd80      	pop	{r7, pc}
     c58:	000020bd 	.word	0x000020bd

00000c5c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     c60:	4b01      	ldr	r3, [pc, #4]	; (c68 <system_interrupt_leave_critical_section+0xc>)
     c62:	4798      	blx	r3
}
     c64:	46bd      	mov	sp, r7
     c66:	bd80      	pop	{r7, pc}
     c68:	0000210d 	.word	0x0000210d

00000c6c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b084      	sub	sp, #16
     c70:	af00      	add	r7, sp, #0
     c72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	8a1b      	ldrh	r3, [r3, #16]
     c7e:	b29b      	uxth	r3, r3
     c80:	1c1a      	adds	r2, r3, #0
     c82:	2380      	movs	r3, #128	; 0x80
     c84:	021b      	lsls	r3, r3, #8
     c86:	4013      	ands	r3, r2
     c88:	1e5a      	subs	r2, r3, #1
     c8a:	4193      	sbcs	r3, r2
     c8c:	b2db      	uxtb	r3, r3
#endif
}
     c8e:	1c18      	adds	r0, r3, #0
     c90:	46bd      	mov	sp, r7
     c92:	b004      	add	sp, #16
     c94:	bd80      	pop	{r7, pc}
     c96:	46c0      	nop			; (mov r8, r8)

00000c98 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ca0:	46c0      	nop			; (mov r8, r8)
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	1c18      	adds	r0, r3, #0
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <_usart_wait_for_sync+0x1c>)
     ca8:	4798      	blx	r3
     caa:	1e03      	subs	r3, r0, #0
     cac:	d1f9      	bne.n	ca2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     cae:	46bd      	mov	sp, r7
     cb0:	b002      	add	sp, #8
     cb2:	bd80      	pop	{r7, pc}
     cb4:	00000c6d 	.word	0x00000c6d

00000cb8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b086      	sub	sp, #24
     cbc:	af00      	add	r7, sp, #0
     cbe:	60f8      	str	r0, [r7, #12]
     cc0:	60b9      	str	r1, [r7, #8]
     cc2:	1dbb      	adds	r3, r7, #6
     cc4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     cc6:	68fb      	ldr	r3, [r7, #12]
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
     ccc:	4b0f      	ldr	r3, [pc, #60]	; (d0c <_usart_read_buffer+0x54>)
     cce:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     cd0:	68fb      	ldr	r3, [r7, #12]
     cd2:	8b9b      	ldrh	r3, [r3, #28]
     cd4:	b29b      	uxth	r3, r3
     cd6:	2b00      	cmp	r3, #0
     cd8:	d003      	beq.n	ce2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
     cda:	4b0d      	ldr	r3, [pc, #52]	; (d10 <_usart_read_buffer+0x58>)
     cdc:	4798      	blx	r3
		return STATUS_BUSY;
     cde:	2305      	movs	r3, #5
     ce0:	e010      	b.n	d04 <_usart_read_buffer+0x4c>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	1dba      	adds	r2, r7, #6
     ce6:	8812      	ldrh	r2, [r2, #0]
     ce8:	839a      	strh	r2, [r3, #28]

	system_interrupt_leave_critical_section();
     cea:	4b09      	ldr	r3, [pc, #36]	; (d10 <_usart_read_buffer+0x58>)
     cec:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
     cee:	68fb      	ldr	r3, [r7, #12]
     cf0:	68ba      	ldr	r2, [r7, #8]
     cf2:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
     cf4:	68fb      	ldr	r3, [r7, #12]
     cf6:	2222      	movs	r2, #34	; 0x22
     cf8:	2105      	movs	r1, #5
     cfa:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     cfc:	697b      	ldr	r3, [r7, #20]
     cfe:	2204      	movs	r2, #4
     d00:	735a      	strb	r2, [r3, #13]
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     d02:	2300      	movs	r3, #0
}
     d04:	1c18      	adds	r0, r3, #0
     d06:	46bd      	mov	sp, r7
     d08:	b006      	add	sp, #24
     d0a:	bd80      	pop	{r7, pc}
     d0c:	00000c4d 	.word	0x00000c4d
     d10:	00000c5d 	.word	0x00000c5d

00000d14 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
     d14:	b580      	push	{r7, lr}
     d16:	b084      	sub	sp, #16
     d18:	af00      	add	r7, sp, #0
     d1a:	60f8      	str	r0, [r7, #12]
     d1c:	60b9      	str	r1, [r7, #8]
     d1e:	1dfb      	adds	r3, r7, #7
     d20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     d22:	1dfb      	adds	r3, r7, #7
     d24:	781a      	ldrb	r2, [r3, #0]
     d26:	68fb      	ldr	r3, [r7, #12]
     d28:	3202      	adds	r2, #2
     d2a:	0092      	lsls	r2, r2, #2
     d2c:	68b9      	ldr	r1, [r7, #8]
     d2e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	2220      	movs	r2, #32
     d34:	5c9b      	ldrb	r3, [r3, r2]
     d36:	b2d9      	uxtb	r1, r3
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2201      	movs	r2, #1
     d3e:	409a      	lsls	r2, r3
     d40:	1c13      	adds	r3, r2, #0
     d42:	b2db      	uxtb	r3, r3
     d44:	1c0a      	adds	r2, r1, #0
     d46:	4313      	orrs	r3, r2
     d48:	b2db      	uxtb	r3, r3
     d4a:	b2d9      	uxtb	r1, r3
     d4c:	68fb      	ldr	r3, [r7, #12]
     d4e:	2220      	movs	r2, #32
     d50:	5499      	strb	r1, [r3, r2]
}
     d52:	46bd      	mov	sp, r7
     d54:	b004      	add	sp, #16
     d56:	bd80      	pop	{r7, pc}

00000d58 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     d58:	b580      	push	{r7, lr}
     d5a:	b084      	sub	sp, #16
     d5c:	af00      	add	r7, sp, #0
     d5e:	60f8      	str	r0, [r7, #12]
     d60:	60b9      	str	r1, [r7, #8]
     d62:	1dbb      	adds	r3, r7, #6
     d64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     d66:	1dbb      	adds	r3, r7, #6
     d68:	881b      	ldrh	r3, [r3, #0]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d101      	bne.n	d72 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
     d6e:	2317      	movs	r3, #23
     d70:	e012      	b.n	d98 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	799b      	ldrb	r3, [r3, #6]
     d76:	2201      	movs	r2, #1
     d78:	4053      	eors	r3, r2
     d7a:	b2db      	uxtb	r3, r3
     d7c:	2b00      	cmp	r3, #0
     d7e:	d001      	beq.n	d84 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
     d80:	231c      	movs	r3, #28
     d82:	e009      	b.n	d98 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     d84:	68f9      	ldr	r1, [r7, #12]
     d86:	68ba      	ldr	r2, [r7, #8]
     d88:	1dbb      	adds	r3, r7, #6
     d8a:	881b      	ldrh	r3, [r3, #0]
     d8c:	1c08      	adds	r0, r1, #0
     d8e:	1c11      	adds	r1, r2, #0
     d90:	1c1a      	adds	r2, r3, #0
     d92:	4b03      	ldr	r3, [pc, #12]	; (da0 <usart_read_buffer_job+0x48>)
     d94:	4798      	blx	r3
     d96:	1c03      	adds	r3, r0, #0
}
     d98:	1c18      	adds	r0, r3, #0
     d9a:	46bd      	mov	sp, r7
     d9c:	b004      	add	sp, #16
     d9e:	bd80      	pop	{r7, pc}
     da0:	00000cb9 	.word	0x00000cb9

00000da4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     da4:	b580      	push	{r7, lr}
     da6:	b088      	sub	sp, #32
     da8:	af00      	add	r7, sp, #0
     daa:	1c02      	adds	r2, r0, #0
     dac:	1dfb      	adds	r3, r7, #7
     dae:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
     db0:	1dfb      	adds	r3, r7, #7
     db2:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     db4:	4b83      	ldr	r3, [pc, #524]	; (fc4 <_usart_interrupt_handler+0x220>)
     db6:	0092      	lsls	r2, r2, #2
     db8:	58d3      	ldr	r3, [r2, r3]
     dba:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     dbc:	69bb      	ldr	r3, [r7, #24]
     dbe:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
     dc0:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
     dc2:	69bb      	ldr	r3, [r7, #24]
     dc4:	1c18      	adds	r0, r3, #0
     dc6:	4b80      	ldr	r3, [pc, #512]	; (fc8 <_usart_interrupt_handler+0x224>)
     dc8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     dca:	697b      	ldr	r3, [r7, #20]
     dcc:	7b9b      	ldrb	r3, [r3, #14]
     dce:	b2da      	uxtb	r2, r3
     dd0:	2312      	movs	r3, #18
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
     dd6:	697b      	ldr	r3, [r7, #20]
     dd8:	7b5b      	ldrb	r3, [r3, #13]
     dda:	b2db      	uxtb	r3, r3
     ddc:	b29a      	uxth	r2, r3
     dde:	2312      	movs	r3, #18
     de0:	18fb      	adds	r3, r7, r3
     de2:	2112      	movs	r1, #18
     de4:	1879      	adds	r1, r7, r1
     de6:	8809      	ldrh	r1, [r1, #0]
     de8:	400a      	ands	r2, r1
     dea:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
     dec:	69bb      	ldr	r3, [r7, #24]
     dee:	2220      	movs	r2, #32
     df0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
     df2:	69ba      	ldr	r2, [r7, #24]
     df4:	2121      	movs	r1, #33	; 0x21
     df6:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     df8:	4013      	ands	r3, r2
     dfa:	b2da      	uxtb	r2, r3
     dfc:	2310      	movs	r3, #16
     dfe:	18fb      	adds	r3, r7, r3
     e00:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e02:	2312      	movs	r3, #18
     e04:	18fb      	adds	r3, r7, r3
     e06:	881b      	ldrh	r3, [r3, #0]
     e08:	2201      	movs	r2, #1
     e0a:	4013      	ands	r3, r2
     e0c:	d044      	beq.n	e98 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
     e0e:	69bb      	ldr	r3, [r7, #24]
     e10:	8bdb      	ldrh	r3, [r3, #30]
     e12:	b29b      	uxth	r3, r3
     e14:	2b00      	cmp	r3, #0
     e16:	d03c      	beq.n	e92 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e18:	69bb      	ldr	r3, [r7, #24]
     e1a:	699b      	ldr	r3, [r3, #24]
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	b2da      	uxtb	r2, r3
     e20:	231e      	movs	r3, #30
     e22:	18fb      	adds	r3, r7, r3
     e24:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e26:	69bb      	ldr	r3, [r7, #24]
     e28:	699b      	ldr	r3, [r3, #24]
     e2a:	1c5a      	adds	r2, r3, #1
     e2c:	69bb      	ldr	r3, [r7, #24]
     e2e:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e30:	69bb      	ldr	r3, [r7, #24]
     e32:	795b      	ldrb	r3, [r3, #5]
     e34:	2b01      	cmp	r3, #1
     e36:	d112      	bne.n	e5e <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e38:	69bb      	ldr	r3, [r7, #24]
     e3a:	699b      	ldr	r3, [r3, #24]
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	b2db      	uxtb	r3, r3
     e40:	021b      	lsls	r3, r3, #8
     e42:	b29a      	uxth	r2, r3
     e44:	231e      	movs	r3, #30
     e46:	18fb      	adds	r3, r7, r3
     e48:	881b      	ldrh	r3, [r3, #0]
     e4a:	4313      	orrs	r3, r2
     e4c:	b29a      	uxth	r2, r3
     e4e:	231e      	movs	r3, #30
     e50:	18fb      	adds	r3, r7, r3
     e52:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     e54:	69bb      	ldr	r3, [r7, #24]
     e56:	699b      	ldr	r3, [r3, #24]
     e58:	1c5a      	adds	r2, r3, #1
     e5a:	69bb      	ldr	r3, [r7, #24]
     e5c:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e5e:	231e      	movs	r3, #30
     e60:	18fb      	adds	r3, r7, r3
     e62:	881b      	ldrh	r3, [r3, #0]
     e64:	05db      	lsls	r3, r3, #23
     e66:	0ddb      	lsrs	r3, r3, #23
     e68:	b29a      	uxth	r2, r3
     e6a:	697b      	ldr	r3, [r7, #20]
     e6c:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     e6e:	69bb      	ldr	r3, [r7, #24]
     e70:	8bdb      	ldrh	r3, [r3, #30]
     e72:	b29b      	uxth	r3, r3
     e74:	3b01      	subs	r3, #1
     e76:	b29b      	uxth	r3, r3
     e78:	69ba      	ldr	r2, [r7, #24]
     e7a:	1c19      	adds	r1, r3, #0
     e7c:	83d1      	strh	r1, [r2, #30]
     e7e:	2b00      	cmp	r3, #0
     e80:	d106      	bne.n	e90 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e82:	697b      	ldr	r3, [r7, #20]
     e84:	2201      	movs	r2, #1
     e86:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e88:	697b      	ldr	r3, [r7, #20]
     e8a:	2202      	movs	r2, #2
     e8c:	735a      	strb	r2, [r3, #13]
     e8e:	e003      	b.n	e98 <_usart_interrupt_handler+0xf4>
     e90:	e002      	b.n	e98 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e92:	697b      	ldr	r3, [r7, #20]
     e94:	2201      	movs	r2, #1
     e96:	731a      	strb	r2, [r3, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e98:	2312      	movs	r3, #18
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	881b      	ldrh	r3, [r3, #0]
     e9e:	2202      	movs	r2, #2
     ea0:	4013      	ands	r3, r2
     ea2:	d011      	beq.n	ec8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ea4:	697b      	ldr	r3, [r7, #20]
     ea6:	2202      	movs	r2, #2
     ea8:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
     eaa:	69bb      	ldr	r3, [r7, #24]
     eac:	2223      	movs	r2, #35	; 0x23
     eae:	2100      	movs	r1, #0
     eb0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     eb2:	2310      	movs	r3, #16
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	881b      	ldrh	r3, [r3, #0]
     eb8:	2201      	movs	r2, #1
     eba:	4013      	ands	r3, r2
     ebc:	d004      	beq.n	ec8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ebe:	69bb      	ldr	r3, [r7, #24]
     ec0:	689b      	ldr	r3, [r3, #8]
     ec2:	69ba      	ldr	r2, [r7, #24]
     ec4:	1c10      	adds	r0, r2, #0
     ec6:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ec8:	2312      	movs	r3, #18
     eca:	18fb      	adds	r3, r7, r3
     ecc:	881b      	ldrh	r3, [r3, #0]
     ece:	2204      	movs	r2, #4
     ed0:	4013      	ands	r3, r2
     ed2:	d100      	bne.n	ed6 <_usart_interrupt_handler+0x132>
     ed4:	e073      	b.n	fbe <_usart_interrupt_handler+0x21a>

		if (module->remaining_rx_buffer_length) {
     ed6:	69bb      	ldr	r3, [r7, #24]
     ed8:	8b9b      	ldrh	r3, [r3, #28]
     eda:	b29b      	uxth	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d100      	bne.n	ee2 <_usart_interrupt_handler+0x13e>
     ee0:	e06a      	b.n	fb8 <_usart_interrupt_handler+0x214>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ee2:	697b      	ldr	r3, [r7, #20]
     ee4:	8a1b      	ldrh	r3, [r3, #16]
     ee6:	b29b      	uxth	r3, r3
     ee8:	b2da      	uxtb	r2, r3
     eea:	230f      	movs	r3, #15
     eec:	18fb      	adds	r3, r7, r3
     eee:	2107      	movs	r1, #7
     ef0:	400a      	ands	r2, r1
     ef2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ef4:	230f      	movs	r3, #15
     ef6:	18fb      	adds	r3, r7, r3
     ef8:	781b      	ldrb	r3, [r3, #0]
     efa:	2b00      	cmp	r3, #0
     efc:	d043      	beq.n	f86 <_usart_interrupt_handler+0x1e2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     efe:	230f      	movs	r3, #15
     f00:	18fb      	adds	r3, r7, r3
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	2202      	movs	r2, #2
     f06:	4013      	ands	r3, r2
     f08:	d00c      	beq.n	f24 <_usart_interrupt_handler+0x180>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     f0a:	69bb      	ldr	r3, [r7, #24]
     f0c:	2222      	movs	r2, #34	; 0x22
     f0e:	211a      	movs	r1, #26
     f10:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     f12:	697b      	ldr	r3, [r7, #20]
     f14:	8a1b      	ldrh	r3, [r3, #16]
     f16:	b29b      	uxth	r3, r3
     f18:	2202      	movs	r2, #2
     f1a:	4313      	orrs	r3, r2
     f1c:	b29a      	uxth	r2, r3
     f1e:	697b      	ldr	r3, [r7, #20]
     f20:	821a      	strh	r2, [r3, #16]
     f22:	e024      	b.n	f6e <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f24:	230f      	movs	r3, #15
     f26:	18fb      	adds	r3, r7, r3
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2204      	movs	r2, #4
     f2c:	4013      	ands	r3, r2
     f2e:	d00c      	beq.n	f4a <_usart_interrupt_handler+0x1a6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     f30:	69bb      	ldr	r3, [r7, #24]
     f32:	2222      	movs	r2, #34	; 0x22
     f34:	211e      	movs	r1, #30
     f36:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     f38:	697b      	ldr	r3, [r7, #20]
     f3a:	8a1b      	ldrh	r3, [r3, #16]
     f3c:	b29b      	uxth	r3, r3
     f3e:	2204      	movs	r2, #4
     f40:	4313      	orrs	r3, r2
     f42:	b29a      	uxth	r2, r3
     f44:	697b      	ldr	r3, [r7, #20]
     f46:	821a      	strh	r2, [r3, #16]
     f48:	e011      	b.n	f6e <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f4a:	230f      	movs	r3, #15
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	781b      	ldrb	r3, [r3, #0]
     f50:	2201      	movs	r2, #1
     f52:	4013      	ands	r3, r2
     f54:	d00b      	beq.n	f6e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     f56:	69bb      	ldr	r3, [r7, #24]
     f58:	2222      	movs	r2, #34	; 0x22
     f5a:	2113      	movs	r1, #19
     f5c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     f5e:	697b      	ldr	r3, [r7, #20]
     f60:	8a1b      	ldrh	r3, [r3, #16]
     f62:	b29b      	uxth	r3, r3
     f64:	2201      	movs	r2, #1
     f66:	4313      	orrs	r3, r2
     f68:	b29a      	uxth	r2, r3
     f6a:	697b      	ldr	r3, [r7, #20]
     f6c:	821a      	strh	r2, [r3, #16]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
     f6e:	2310      	movs	r3, #16
     f70:	18fb      	adds	r3, r7, r3
     f72:	881b      	ldrh	r3, [r3, #0]
     f74:	2204      	movs	r2, #4
     f76:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f78:	d021      	beq.n	fbe <_usart_interrupt_handler+0x21a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f7a:	69bb      	ldr	r3, [r7, #24]
     f7c:	691b      	ldr	r3, [r3, #16]
     f7e:	69ba      	ldr	r2, [r7, #24]
     f80:	1c10      	adds	r0, r2, #0
     f82:	4798      	blx	r3
     f84:	e01b      	b.n	fbe <_usart_interrupt_handler+0x21a>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint8_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f86:	697b      	ldr	r3, [r7, #20]
     f88:	8b1b      	ldrh	r3, [r3, #24]
     f8a:	b29a      	uxth	r2, r3
     f8c:	230e      	movs	r3, #14
     f8e:	18fb      	adds	r3, r7, r3
     f90:	701a      	strb	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f92:	69bb      	ldr	r3, [r7, #24]
     f94:	695b      	ldr	r3, [r3, #20]
     f96:	220e      	movs	r2, #14
     f98:	18ba      	adds	r2, r7, r2
     f9a:	7812      	ldrb	r2, [r2, #0]
     f9c:	701a      	strb	r2, [r3, #0]
					 // and set STATUS_OK 
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;
		 */
					// Run callback if registered and enabled
					if (callback_status & (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
     f9e:	2310      	movs	r3, #16
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	2202      	movs	r2, #2
     fa6:	4013      	ands	r3, r2
     fa8:	d005      	beq.n	fb6 <_usart_interrupt_handler+0x212>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     faa:	69bb      	ldr	r3, [r7, #24]
     fac:	68db      	ldr	r3, [r3, #12]
     fae:	69ba      	ldr	r2, [r7, #24]
     fb0:	1c10      	adds	r0, r2, #0
     fb2:	4798      	blx	r3
     fb4:	e003      	b.n	fbe <_usart_interrupt_handler+0x21a>
     fb6:	e002      	b.n	fbe <_usart_interrupt_handler+0x21a>
				

			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     fb8:	697b      	ldr	r3, [r7, #20]
     fba:	2204      	movs	r2, #4
     fbc:	731a      	strb	r2, [r3, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     fbe:	46bd      	mov	sp, r7
     fc0:	b008      	add	sp, #32
     fc2:	bd80      	pop	{r7, pc}
     fc4:	20000368 	.word	0x20000368
     fc8:	00000c99 	.word	0x00000c99

00000fcc <check_WT41_paired>:
}



enum status_code check_WT41_paired(void)
{// check if pair and get pair
     fcc:	b590      	push	{r4, r7, lr}
     fce:	b083      	sub	sp, #12
     fd0:	af00      	add	r7, sp, #0
	uint8_t *ptr;


	init_serial_buffers();
     fd2:	4b29      	ldr	r3, [pc, #164]	; (1078 <check_WT41_paired+0xac>)
     fd4:	4798      	blx	r3
	load_iWrap_Cmd( (uint8_t*) "set bt pair\r\n");
     fd6:	4b29      	ldr	r3, [pc, #164]	; (107c <check_WT41_paired+0xb0>)
     fd8:	1c18      	adds	r0, r3, #0
     fda:	4b29      	ldr	r3, [pc, #164]	; (1080 <check_WT41_paired+0xb4>)
     fdc:	4798      	blx	r3

	msCounter = 200;	// wait 2 sec
     fde:	4b29      	ldr	r3, [pc, #164]	; (1084 <check_WT41_paired+0xb8>)
     fe0:	22c8      	movs	r2, #200	; 0xc8
     fe2:	601a      	str	r2, [r3, #0]
	while (msCounter)	
     fe4:	e03c      	b.n	1060 <check_WT41_paired+0x94>
	{
		check_usarts();
     fe6:	4b28      	ldr	r3, [pc, #160]	; (1088 <check_WT41_paired+0xbc>)
     fe8:	4798      	blx	r3
		
		strcpy(cStr,"SET BT PAIR");
     fea:	4a28      	ldr	r2, [pc, #160]	; (108c <check_WT41_paired+0xc0>)
     fec:	4b28      	ldr	r3, [pc, #160]	; (1090 <check_WT41_paired+0xc4>)
     fee:	1c11      	adds	r1, r2, #0
     ff0:	1c1a      	adds	r2, r3, #0
     ff2:	230c      	movs	r3, #12
     ff4:	1c08      	adds	r0, r1, #0
     ff6:	1c11      	adds	r1, r2, #0
     ff8:	1c1a      	adds	r2, r3, #0
     ffa:	4b26      	ldr	r3, [pc, #152]	; (1094 <check_WT41_paired+0xc8>)
     ffc:	4798      	blx	r3
		ptr = memmem((char *)(serialQ.blueToothToMidi),100, cStr,strlen(cStr));
     ffe:	4b23      	ldr	r3, [pc, #140]	; (108c <check_WT41_paired+0xc0>)
    1000:	1c18      	adds	r0, r3, #0
    1002:	4b25      	ldr	r3, [pc, #148]	; (1098 <check_WT41_paired+0xcc>)
    1004:	4798      	blx	r3
    1006:	1c04      	adds	r4, r0, #0
    1008:	4a24      	ldr	r2, [pc, #144]	; (109c <check_WT41_paired+0xd0>)
    100a:	4b20      	ldr	r3, [pc, #128]	; (108c <check_WT41_paired+0xc0>)
    100c:	1c10      	adds	r0, r2, #0
    100e:	2164      	movs	r1, #100	; 0x64
    1010:	1c1a      	adds	r2, r3, #0
    1012:	1c23      	adds	r3, r4, #0
    1014:	4c22      	ldr	r4, [pc, #136]	; (10a0 <check_WT41_paired+0xd4>)
    1016:	47a0      	blx	r4
    1018:	1c03      	adds	r3, r0, #0
    101a:	607b      	str	r3, [r7, #4]

		if(ptr) {
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	2b00      	cmp	r3, #0
    1020:	d012      	beq.n	1048 <check_WT41_paired+0x7c>
				wait_10msSec(50);				// wait for pair addr
    1022:	2032      	movs	r0, #50	; 0x32
    1024:	4b1f      	ldr	r3, [pc, #124]	; (10a4 <check_WT41_paired+0xd8>)
    1026:	4798      	blx	r3
				memcpy(pair_addr,ptr+12,17);
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	330c      	adds	r3, #12
    102c:	4a1e      	ldr	r2, [pc, #120]	; (10a8 <check_WT41_paired+0xdc>)
    102e:	1c10      	adds	r0, r2, #0
    1030:	1c19      	adds	r1, r3, #0
    1032:	2211      	movs	r2, #17
    1034:	4b17      	ldr	r3, [pc, #92]	; (1094 <check_WT41_paired+0xc8>)
    1036:	4798      	blx	r3
				pair_addr[17] = 0;
    1038:	4b1b      	ldr	r3, [pc, #108]	; (10a8 <check_WT41_paired+0xdc>)
    103a:	2200      	movs	r2, #0
    103c:	745a      	strb	r2, [r3, #17]
				BTpaired = true;
    103e:	4b1b      	ldr	r3, [pc, #108]	; (10ac <check_WT41_paired+0xe0>)
    1040:	2201      	movs	r2, #1
    1042:	701a      	strb	r2, [r3, #0]

				return STATUS_OK;
    1044:	2300      	movs	r3, #0
    1046:	e013      	b.n	1070 <check_WT41_paired+0xa4>
			}

			else if (!msCounter)	// exit if timed out
    1048:	4b0e      	ldr	r3, [pc, #56]	; (1084 <check_WT41_paired+0xb8>)
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	2b00      	cmp	r3, #0
    104e:	d107      	bne.n	1060 <check_WT41_paired+0x94>
			{
				pair_addr[0]=0;
    1050:	4b15      	ldr	r3, [pc, #84]	; (10a8 <check_WT41_paired+0xdc>)
    1052:	2200      	movs	r2, #0
    1054:	701a      	strb	r2, [r3, #0]
				BTpaired = false;
    1056:	4b15      	ldr	r3, [pc, #84]	; (10ac <check_WT41_paired+0xe0>)
    1058:	2200      	movs	r2, #0
    105a:	701a      	strb	r2, [r3, #0]
				return STATUS_ERR_DENIED;
    105c:	231c      	movs	r3, #28
    105e:	e007      	b.n	1070 <check_WT41_paired+0xa4>

	init_serial_buffers();
	load_iWrap_Cmd( (uint8_t*) "set bt pair\r\n");

	msCounter = 200;	// wait 2 sec
	while (msCounter)	
    1060:	4b08      	ldr	r3, [pc, #32]	; (1084 <check_WT41_paired+0xb8>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d1be      	bne.n	fe6 <check_WT41_paired+0x1a>
				BTpaired = false;
				return STATUS_ERR_DENIED;
			}

	}
	BTpaired = false;
    1068:	4b10      	ldr	r3, [pc, #64]	; (10ac <check_WT41_paired+0xe0>)
    106a:	2200      	movs	r2, #0
    106c:	701a      	strb	r2, [r3, #0]
	return STATUS_ERR_DENIED;
    106e:	231c      	movs	r3, #28
}
    1070:	1c18      	adds	r0, r3, #0
    1072:	46bd      	mov	sp, r7
    1074:	b003      	add	sp, #12
    1076:	bd90      	pop	{r4, r7, pc}
    1078:	000008ad 	.word	0x000008ad
    107c:	00003e64 	.word	0x00003e64
    1080:	0000097d 	.word	0x0000097d
    1084:	20000348 	.word	0x20000348
    1088:	00000af9 	.word	0x00000af9
    108c:	200002cc 	.word	0x200002cc
    1090:	00003e74 	.word	0x00003e74
    1094:	00003da5 	.word	0x00003da5
    1098:	00003e05 	.word	0x00003e05
    109c:	200001c0 	.word	0x200001c0
    10a0:	00003db7 	.word	0x00003db7
    10a4:	000014cd 	.word	0x000014cd
    10a8:	20000330 	.word	0x20000330
    10ac:	20000389 	.word	0x20000389

000010b0 <unpair_WT41>:
}

void exit_SSP_WT41(void);

enum status_code unpair_WT41(void)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	af00      	add	r7, sp, #0
	// exit SSP mode   (if in it)
	pair_addr[0] == 0;
	
//	exit_SSP_WT41();

	check_WT41_paired();
    10b4:	4b22      	ldr	r3, [pc, #136]	; (1140 <unpair_WT41+0x90>)
    10b6:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    10b8:	4b22      	ldr	r3, [pc, #136]	; (1144 <unpair_WT41+0x94>)
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	2b00      	cmp	r3, #0
    10be:	d101      	bne.n	10c4 <unpair_WT41+0x14>
		return STATUS_OK;
    10c0:	2300      	movs	r3, #0
    10c2:	e03a      	b.n	113a <unpair_WT41+0x8a>
	
	cStr[0]=0;							
    10c4:	4b20      	ldr	r3, [pc, #128]	; (1148 <unpair_WT41+0x98>)
    10c6:	2200      	movs	r2, #0
    10c8:	701a      	strb	r2, [r3, #0]
	strcpy(cStr, "at\r\nset bt pair ");
    10ca:	4a1f      	ldr	r2, [pc, #124]	; (1148 <unpair_WT41+0x98>)
    10cc:	4b1f      	ldr	r3, [pc, #124]	; (114c <unpair_WT41+0x9c>)
    10ce:	1c11      	adds	r1, r2, #0
    10d0:	1c1a      	adds	r2, r3, #0
    10d2:	2311      	movs	r3, #17
    10d4:	1c08      	adds	r0, r1, #0
    10d6:	1c11      	adds	r1, r2, #0
    10d8:	1c1a      	adds	r2, r3, #0
    10da:	4b1d      	ldr	r3, [pc, #116]	; (1150 <unpair_WT41+0xa0>)
    10dc:	4798      	blx	r3
	strcat(cStr,pair_addr);
    10de:	4a1a      	ldr	r2, [pc, #104]	; (1148 <unpair_WT41+0x98>)
    10e0:	4b18      	ldr	r3, [pc, #96]	; (1144 <unpair_WT41+0x94>)
    10e2:	1c10      	adds	r0, r2, #0
    10e4:	1c19      	adds	r1, r3, #0
    10e6:	4b1b      	ldr	r3, [pc, #108]	; (1154 <unpair_WT41+0xa4>)
    10e8:	4798      	blx	r3
	strcat(cStr,"\r\n");
    10ea:	4b17      	ldr	r3, [pc, #92]	; (1148 <unpair_WT41+0x98>)
    10ec:	1c18      	adds	r0, r3, #0
    10ee:	4b1a      	ldr	r3, [pc, #104]	; (1158 <unpair_WT41+0xa8>)
    10f0:	4798      	blx	r3
    10f2:	1c03      	adds	r3, r0, #0
    10f4:	1c1a      	adds	r2, r3, #0
    10f6:	4b14      	ldr	r3, [pc, #80]	; (1148 <unpair_WT41+0x98>)
    10f8:	18d2      	adds	r2, r2, r3
    10fa:	4b18      	ldr	r3, [pc, #96]	; (115c <unpair_WT41+0xac>)
    10fc:	1c11      	adds	r1, r2, #0
    10fe:	1c1a      	adds	r2, r3, #0
    1100:	2303      	movs	r3, #3
    1102:	1c08      	adds	r0, r1, #0
    1104:	1c11      	adds	r1, r2, #0
    1106:	1c1a      	adds	r2, r3, #0
    1108:	4b11      	ldr	r3, [pc, #68]	; (1150 <unpair_WT41+0xa0>)
    110a:	4798      	blx	r3
	init_serial_buffers();
    110c:	4b14      	ldr	r3, [pc, #80]	; (1160 <unpair_WT41+0xb0>)
    110e:	4798      	blx	r3
	load_iWrap_Cmd( (uint8_t*) cStr);	// send command to remove pairing
    1110:	4b0d      	ldr	r3, [pc, #52]	; (1148 <unpair_WT41+0x98>)
    1112:	1c18      	adds	r0, r3, #0
    1114:	4b13      	ldr	r3, [pc, #76]	; (1164 <unpair_WT41+0xb4>)
    1116:	4798      	blx	r3
	
	wait_sec(1);
    1118:	2001      	movs	r0, #1
    111a:	4b13      	ldr	r3, [pc, #76]	; (1168 <unpair_WT41+0xb8>)
    111c:	4798      	blx	r3
	
	check_WT41_paired();
    111e:	4b08      	ldr	r3, [pc, #32]	; (1140 <unpair_WT41+0x90>)
    1120:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    1122:	4b08      	ldr	r3, [pc, #32]	; (1144 <unpair_WT41+0x94>)
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d104      	bne.n	1134 <unpair_WT41+0x84>
	{
		sysState = INQUIRY_STATE;
    112a:	4b10      	ldr	r3, [pc, #64]	; (116c <unpair_WT41+0xbc>)
    112c:	22f3      	movs	r2, #243	; 0xf3
    112e:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1130:	2300      	movs	r3, #0
    1132:	e002      	b.n	113a <unpair_WT41+0x8a>
	}
	else 
	{
		reset_BT();
    1134:	4b0e      	ldr	r3, [pc, #56]	; (1170 <unpair_WT41+0xc0>)
    1136:	4798      	blx	r3
		return STATUS_ERR_DENIED; 	
    1138:	231c      	movs	r3, #28
	}
}
    113a:	1c18      	adds	r0, r3, #0
    113c:	46bd      	mov	sp, r7
    113e:	bd80      	pop	{r7, pc}
    1140:	00000fcd 	.word	0x00000fcd
    1144:	20000330 	.word	0x20000330
    1148:	200002cc 	.word	0x200002cc
    114c:	00003ea4 	.word	0x00003ea4
    1150:	00003da5 	.word	0x00003da5
    1154:	00003deb 	.word	0x00003deb
    1158:	00003e05 	.word	0x00003e05
    115c:	00003e9c 	.word	0x00003e9c
    1160:	000008ad 	.word	0x000008ad
    1164:	0000097d 	.word	0x0000097d
    1168:	0000149d 	.word	0x0000149d
    116c:	20000479 	.word	0x20000479
    1170:	000002ad 	.word	0x000002ad

00001174 <BT_slave_init>:

	}
}

void BT_slave_init(void)
{	uint8_t *ptr;
    1174:	b590      	push	{r4, r7, lr}
    1176:	b083      	sub	sp, #12
    1178:	af00      	add	r7, sp, #0

// check if it's been initialized once

//	init_serial_buffers();
	load_iWrap_Cmd( "ok\r\nset\r\n");
    117a:	4b40      	ldr	r3, [pc, #256]	; (127c <BT_slave_init+0x108>)
    117c:	1c18      	adds	r0, r3, #0
    117e:	4b40      	ldr	r3, [pc, #256]	; (1280 <BT_slave_init+0x10c>)
    1180:	4798      	blx	r3
	
	msCounter = 1000;
    1182:	4b40      	ldr	r3, [pc, #256]	; (1284 <BT_slave_init+0x110>)
    1184:	22fa      	movs	r2, #250	; 0xfa
    1186:	0092      	lsls	r2, r2, #2
    1188:	601a      	str	r2, [r3, #0]
	
	while (msCounter)				// wait for OK
    118a:	e01e      	b.n	11ca <BT_slave_init+0x56>
	{
		write_BT();
    118c:	4b3e      	ldr	r3, [pc, #248]	; (1288 <BT_slave_init+0x114>)
    118e:	4798      	blx	r3
		strcpy(cStr,BT_NAME_SLAVE);
    1190:	4a3e      	ldr	r2, [pc, #248]	; (128c <BT_slave_init+0x118>)
    1192:	4b3f      	ldr	r3, [pc, #252]	; (1290 <BT_slave_init+0x11c>)
    1194:	1c11      	adds	r1, r2, #0
    1196:	1c1a      	adds	r2, r3, #0
    1198:	2309      	movs	r3, #9
    119a:	1c08      	adds	r0, r1, #0
    119c:	1c11      	adds	r1, r2, #0
    119e:	1c1a      	adds	r2, r3, #0
    11a0:	4b3c      	ldr	r3, [pc, #240]	; (1294 <BT_slave_init+0x120>)
    11a2:	4798      	blx	r3
		ptr = memmem((char *)(serialQ.blueToothToMidi),255, cStr,strlen(cStr));
    11a4:	4b39      	ldr	r3, [pc, #228]	; (128c <BT_slave_init+0x118>)
    11a6:	1c18      	adds	r0, r3, #0
    11a8:	4b3b      	ldr	r3, [pc, #236]	; (1298 <BT_slave_init+0x124>)
    11aa:	4798      	blx	r3
    11ac:	1c04      	adds	r4, r0, #0
    11ae:	4a3b      	ldr	r2, [pc, #236]	; (129c <BT_slave_init+0x128>)
    11b0:	4b36      	ldr	r3, [pc, #216]	; (128c <BT_slave_init+0x118>)
    11b2:	1c10      	adds	r0, r2, #0
    11b4:	21ff      	movs	r1, #255	; 0xff
    11b6:	1c1a      	adds	r2, r3, #0
    11b8:	1c23      	adds	r3, r4, #0
    11ba:	4c39      	ldr	r4, [pc, #228]	; (12a0 <BT_slave_init+0x12c>)
    11bc:	47a0      	blx	r4
    11be:	1c03      	adds	r3, r0, #0
    11c0:	607b      	str	r3, [r7, #4]
		if (ptr) break;
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d000      	beq.n	11ca <BT_slave_init+0x56>
    11c8:	e003      	b.n	11d2 <BT_slave_init+0x5e>
//	init_serial_buffers();
	load_iWrap_Cmd( "ok\r\nset\r\n");
	
	msCounter = 1000;
	
	while (msCounter)				// wait for OK
    11ca:	4b2e      	ldr	r3, [pc, #184]	; (1284 <BT_slave_init+0x110>)
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d1dc      	bne.n	118c <BT_slave_init+0x18>
		strcpy(cStr,BT_NAME_SLAVE);
		ptr = memmem((char *)(serialQ.blueToothToMidi),255, cStr,strlen(cStr));
		if (ptr) break;
	}

	if(ptr == NULL)   // initialize WT41
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d140      	bne.n	125a <BT_slave_init+0xe6>
	{
		load_iWrap_Cmd(WT41_SUPERVISORY_TIMEOUT);
    11d8:	4b32      	ldr	r3, [pc, #200]	; (12a4 <BT_slave_init+0x130>)
    11da:	1c18      	adds	r0, r3, #0
    11dc:	4b28      	ldr	r3, [pc, #160]	; (1280 <BT_slave_init+0x10c>)
    11de:	4798      	blx	r3
		wait_10msSec(5);
    11e0:	2005      	movs	r0, #5
    11e2:	4b31      	ldr	r3, [pc, #196]	; (12a8 <BT_slave_init+0x134>)
    11e4:	4798      	blx	r3
		load_iWrap_Cmd(WT41_CARRIER_DETECT_CMD);
    11e6:	4b31      	ldr	r3, [pc, #196]	; (12ac <BT_slave_init+0x138>)
    11e8:	1c18      	adds	r0, r3, #0
    11ea:	4b25      	ldr	r3, [pc, #148]	; (1280 <BT_slave_init+0x10c>)
    11ec:	4798      	blx	r3
/*
		wait_10msSec(5);
		load_iWrap_Cmd(WT41_AUTOCALL);*/
		wait_10msSec(5);
    11ee:	2005      	movs	r0, #5
    11f0:	4b2d      	ldr	r3, [pc, #180]	; (12a8 <BT_slave_init+0x134>)
    11f2:	4798      	blx	r3
		strcpy(cStr,"at\r\nat\r\nset bt name ");		// rename
    11f4:	4a25      	ldr	r2, [pc, #148]	; (128c <BT_slave_init+0x118>)
    11f6:	4b2e      	ldr	r3, [pc, #184]	; (12b0 <BT_slave_init+0x13c>)
    11f8:	1c11      	adds	r1, r2, #0
    11fa:	1c1a      	adds	r2, r3, #0
    11fc:	2315      	movs	r3, #21
    11fe:	1c08      	adds	r0, r1, #0
    1200:	1c11      	adds	r1, r2, #0
    1202:	1c1a      	adds	r2, r3, #0
    1204:	4b23      	ldr	r3, [pc, #140]	; (1294 <BT_slave_init+0x120>)
    1206:	4798      	blx	r3
		strcat(cStr,BT_NAME_SLAVE);
    1208:	4b20      	ldr	r3, [pc, #128]	; (128c <BT_slave_init+0x118>)
    120a:	1c18      	adds	r0, r3, #0
    120c:	4b22      	ldr	r3, [pc, #136]	; (1298 <BT_slave_init+0x124>)
    120e:	4798      	blx	r3
    1210:	1c03      	adds	r3, r0, #0
    1212:	1c1a      	adds	r2, r3, #0
    1214:	4b1d      	ldr	r3, [pc, #116]	; (128c <BT_slave_init+0x118>)
    1216:	18d2      	adds	r2, r2, r3
    1218:	4b1d      	ldr	r3, [pc, #116]	; (1290 <BT_slave_init+0x11c>)
    121a:	1c11      	adds	r1, r2, #0
    121c:	1c1a      	adds	r2, r3, #0
    121e:	2309      	movs	r3, #9
    1220:	1c08      	adds	r0, r1, #0
    1222:	1c11      	adds	r1, r2, #0
    1224:	1c1a      	adds	r2, r3, #0
    1226:	4b1b      	ldr	r3, [pc, #108]	; (1294 <BT_slave_init+0x120>)
    1228:	4798      	blx	r3
		strcat(cStr,"\r\n");
    122a:	4b18      	ldr	r3, [pc, #96]	; (128c <BT_slave_init+0x118>)
    122c:	1c18      	adds	r0, r3, #0
    122e:	4b1a      	ldr	r3, [pc, #104]	; (1298 <BT_slave_init+0x124>)
    1230:	4798      	blx	r3
    1232:	1c03      	adds	r3, r0, #0
    1234:	1c1a      	adds	r2, r3, #0
    1236:	4b15      	ldr	r3, [pc, #84]	; (128c <BT_slave_init+0x118>)
    1238:	18d2      	adds	r2, r2, r3
    123a:	4b1e      	ldr	r3, [pc, #120]	; (12b4 <BT_slave_init+0x140>)
    123c:	1c11      	adds	r1, r2, #0
    123e:	1c1a      	adds	r2, r3, #0
    1240:	2303      	movs	r3, #3
    1242:	1c08      	adds	r0, r1, #0
    1244:	1c11      	adds	r1, r2, #0
    1246:	1c1a      	adds	r2, r3, #0
    1248:	4b12      	ldr	r3, [pc, #72]	; (1294 <BT_slave_init+0x120>)
    124a:	4798      	blx	r3
		load_iWrap_Cmd((uint8_t*) cStr);
    124c:	4b0f      	ldr	r3, [pc, #60]	; (128c <BT_slave_init+0x118>)
    124e:	1c18      	adds	r0, r3, #0
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <BT_slave_init+0x10c>)
    1252:	4798      	blx	r3
		wait_10msSec(25);
    1254:	2019      	movs	r0, #25
    1256:	4b14      	ldr	r3, [pc, #80]	; (12a8 <BT_slave_init+0x134>)
    1258:	4798      	blx	r3
	}
	
	load_iWrap_Cmd( "\r\nset\r\n");			// test
    125a:	4b17      	ldr	r3, [pc, #92]	; (12b8 <BT_slave_init+0x144>)
    125c:	1c18      	adds	r0, r3, #0
    125e:	4b08      	ldr	r3, [pc, #32]	; (1280 <BT_slave_init+0x10c>)
    1260:	4798      	blx	r3

	msCounter = 200;
    1262:	4b08      	ldr	r3, [pc, #32]	; (1284 <BT_slave_init+0x110>)
    1264:	22c8      	movs	r2, #200	; 0xc8
    1266:	601a      	str	r2, [r3, #0]
	
	while (msCounter)				// wait for OK
    1268:	e001      	b.n	126e <BT_slave_init+0xfa>
	{
		write_BT();
    126a:	4b07      	ldr	r3, [pc, #28]	; (1288 <BT_slave_init+0x114>)
    126c:	4798      	blx	r3
	
	load_iWrap_Cmd( "\r\nset\r\n");			// test

	msCounter = 200;
	
	while (msCounter)				// wait for OK
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <BT_slave_init+0x110>)
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	2b00      	cmp	r3, #0
    1274:	d1f9      	bne.n	126a <BT_slave_init+0xf6>
	{
		write_BT();

	}
}
    1276:	46bd      	mov	sp, r7
    1278:	b003      	add	sp, #12
    127a:	bd90      	pop	{r4, r7, pc}
    127c:	00003eec 	.word	0x00003eec
    1280:	0000097d 	.word	0x0000097d
    1284:	20000348 	.word	0x20000348
    1288:	00000bd1 	.word	0x00000bd1
    128c:	200002cc 	.word	0x200002cc
    1290:	00003e50 	.word	0x00003e50
    1294:	00003da5 	.word	0x00003da5
    1298:	00003e05 	.word	0x00003e05
    129c:	200001c0 	.word	0x200001c0
    12a0:	00003db7 	.word	0x00003db7
    12a4:	00003f04 	.word	0x00003f04
    12a8:	000014cd 	.word	0x000014cd
    12ac:	00003f20 	.word	0x00003f20
    12b0:	00003f68 	.word	0x00003f68
    12b4:	00003e9c 	.word	0x00003e9c
    12b8:	00003f80 	.word	0x00003f80

000012bc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	1c02      	adds	r2, r0, #0
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12c8:	4b06      	ldr	r3, [pc, #24]	; (12e4 <system_interrupt_enable+0x28>)
    12ca:	1dfa      	adds	r2, r7, #7
    12cc:	7812      	ldrb	r2, [r2, #0]
    12ce:	1c11      	adds	r1, r2, #0
    12d0:	221f      	movs	r2, #31
    12d2:	400a      	ands	r2, r1
    12d4:	2101      	movs	r1, #1
    12d6:	4091      	lsls	r1, r2
    12d8:	1c0a      	adds	r2, r1, #0
    12da:	601a      	str	r2, [r3, #0]
}
    12dc:	46bd      	mov	sp, r7
    12de:	b002      	add	sp, #8
    12e0:	bd80      	pop	{r7, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	e000e100 	.word	0xe000e100

000012e8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	b084      	sub	sp, #16
    12ec:	af00      	add	r7, sp, #0
    12ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	60fb      	str	r3, [r7, #12]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	7bdb      	ldrb	r3, [r3, #15]
    12fa:	b2db      	uxtb	r3, r3
    12fc:	1c1a      	adds	r2, r3, #0
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	4013      	ands	r3, r2
    1302:	1e5a      	subs	r2, r3, #1
    1304:	4193      	sbcs	r3, r2
    1306:	b2db      	uxtb	r3, r3
#endif
}
    1308:	1c18      	adds	r0, r3, #0
    130a:	46bd      	mov	sp, r7
    130c:	b004      	add	sp, #16
    130e:	bd80      	pop	{r7, pc}

00001310 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1310:	b580      	push	{r7, lr}
    1312:	b082      	sub	sp, #8
    1314:	af00      	add	r7, sp, #0
    1316:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	2200      	movs	r2, #0
    131c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	2200      	movs	r2, #0
    1322:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	2200      	movs	r2, #0
    1328:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	2200      	movs	r2, #0
    132e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	2200      	movs	r2, #0
    1334:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	2200      	movs	r2, #0
    133a:	705a      	strb	r2, [r3, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    133c:	687b      	ldr	r3, [r7, #4]
    133e:	2200      	movs	r2, #0
    1340:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	2200      	movs	r2, #0
    1346:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	2200      	movs	r2, #0
    134c:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	2200      	movs	r2, #0
    1352:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	2200      	movs	r2, #0
    1358:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	2200      	movs	r2, #0
    135e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	2200      	movs	r2, #0
    136a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	2200      	movs	r2, #0
    1370:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	2200      	movs	r2, #0
    1376:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	2200      	movs	r2, #0
    137c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2200      	movs	r2, #0
    1382:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	2200      	movs	r2, #0
    1388:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	2200      	movs	r2, #0
    138e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    1390:	46bd      	mov	sp, r7
    1392:	b002      	add	sp, #8
    1394:	bd80      	pop	{r7, pc}
    1396:	46c0      	nop			; (mov r8, r8)

00001398 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    1398:	b580      	push	{r7, lr}
    139a:	b084      	sub	sp, #16
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	681b      	ldr	r3, [r3, #0]
    13a4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	1c18      	adds	r0, r3, #0
    13ac:	4b07      	ldr	r3, [pc, #28]	; (13cc <tc_enable+0x34>)
    13ae:	4798      	blx	r3
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	d1f9      	bne.n	13a8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	881b      	ldrh	r3, [r3, #0]
    13b8:	b29b      	uxth	r3, r3
    13ba:	2202      	movs	r2, #2
    13bc:	4313      	orrs	r3, r2
    13be:	b29a      	uxth	r2, r3
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	801a      	strh	r2, [r3, #0]
}
    13c4:	46bd      	mov	sp, r7
    13c6:	b004      	add	sp, #16
    13c8:	bd80      	pop	{r7, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	000012e9 	.word	0x000012e9

000013d0 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b082      	sub	sp, #8
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    13d8:	4a04      	ldr	r2, [pc, #16]	; (13ec <_tc_interrupt_get_interrupt_vector+0x1c>)
    13da:	687b      	ldr	r3, [r7, #4]
    13dc:	18d3      	adds	r3, r2, r3
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	b2db      	uxtb	r3, r3
    13e2:	b25b      	sxtb	r3, r3
}
    13e4:	1c18      	adds	r0, r3, #0
    13e6:	46bd      	mov	sp, r7
    13e8:	b002      	add	sp, #8
    13ea:	bd80      	pop	{r7, pc}
    13ec:	20000000 	.word	0x20000000

000013f0 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b082      	sub	sp, #8
    13f4:	af00      	add	r7, sp, #0
    13f6:	6078      	str	r0, [r7, #4]
    13f8:	1c0a      	adds	r2, r1, #0
    13fa:	1cfb      	adds	r3, r7, #3
    13fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	1c18      	adds	r0, r3, #0
    1404:	4b22      	ldr	r3, [pc, #136]	; (1490 <tc_enable_callback+0xa0>)
    1406:	4798      	blx	r3
    1408:	1c03      	adds	r3, r0, #0
    140a:	1c18      	adds	r0, r3, #0
    140c:	4b21      	ldr	r3, [pc, #132]	; (1494 <tc_enable_callback+0xa4>)
    140e:	4798      	blx	r3
    1410:	1c03      	adds	r3, r0, #0
    1412:	1c18      	adds	r0, r3, #0
    1414:	4b20      	ldr	r3, [pc, #128]	; (1498 <tc_enable_callback+0xa8>)
    1416:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1418:	1cfb      	adds	r3, r7, #3
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	2b02      	cmp	r3, #2
    141e:	d10b      	bne.n	1438 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	7e5b      	ldrb	r3, [r3, #25]
    1424:	2210      	movs	r2, #16
    1426:	4313      	orrs	r3, r2
    1428:	b2da      	uxtb	r2, r3
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	2210      	movs	r2, #16
    1434:	735a      	strb	r2, [r3, #13]
    1436:	e027      	b.n	1488 <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1438:	1cfb      	adds	r3, r7, #3
    143a:	781b      	ldrb	r3, [r3, #0]
    143c:	2b03      	cmp	r3, #3
    143e:	d10b      	bne.n	1458 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	7e5b      	ldrb	r3, [r3, #25]
    1444:	2220      	movs	r2, #32
    1446:	4313      	orrs	r3, r2
    1448:	b2da      	uxtb	r2, r3
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	681b      	ldr	r3, [r3, #0]
    1452:	2220      	movs	r2, #32
    1454:	735a      	strb	r2, [r3, #13]
    1456:	e017      	b.n	1488 <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	7e5b      	ldrb	r3, [r3, #25]
    145c:	b2d9      	uxtb	r1, r3
    145e:	1cfb      	adds	r3, r7, #3
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2201      	movs	r2, #1
    1464:	409a      	lsls	r2, r3
    1466:	1c13      	adds	r3, r2, #0
    1468:	b2db      	uxtb	r3, r3
    146a:	1c0a      	adds	r2, r1, #0
    146c:	4313      	orrs	r3, r2
    146e:	b2db      	uxtb	r3, r3
    1470:	b2da      	uxtb	r2, r3
    1472:	687b      	ldr	r3, [r7, #4]
    1474:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	1cfa      	adds	r2, r7, #3
    147c:	7812      	ldrb	r2, [r2, #0]
    147e:	2101      	movs	r1, #1
    1480:	4091      	lsls	r1, r2
    1482:	1c0a      	adds	r2, r1, #0
    1484:	b2d2      	uxtb	r2, r2
    1486:	735a      	strb	r2, [r3, #13]
	}
}
    1488:	46bd      	mov	sp, r7
    148a:	b002      	add	sp, #8
    148c:	bd80      	pop	{r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	00001c0d 	.word	0x00001c0d
    1494:	000013d1 	.word	0x000013d1
    1498:	000012bd 	.word	0x000012bd

0000149c <wait_sec>:

#define CONF_TC_MODULE TC4


void wait_sec(uint32_t wait)
{
    149c:	b580      	push	{r7, lr}
    149e:	b082      	sub	sp, #8
    14a0:	af00      	add	r7, sp, #0
    14a2:	6078      	str	r0, [r7, #4]
	msCounter = wait*100;
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	2264      	movs	r2, #100	; 0x64
    14a8:	435a      	muls	r2, r3
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <wait_sec+0x28>)
    14ac:	601a      	str	r2, [r3, #0]
	while (msCounter) check_usarts();
    14ae:	e001      	b.n	14b4 <wait_sec+0x18>
    14b0:	4b05      	ldr	r3, [pc, #20]	; (14c8 <wait_sec+0x2c>)
    14b2:	4798      	blx	r3
    14b4:	4b03      	ldr	r3, [pc, #12]	; (14c4 <wait_sec+0x28>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d1f9      	bne.n	14b0 <wait_sec+0x14>
}
    14bc:	46bd      	mov	sp, r7
    14be:	b002      	add	sp, #8
    14c0:	bd80      	pop	{r7, pc}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	20000348 	.word	0x20000348
    14c8:	00000af9 	.word	0x00000af9

000014cc <wait_10msSec>:

void wait_10msSec(uint32_t wait)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b082      	sub	sp, #8
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
	msCounter = wait;
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <wait_10msSec+0x24>)
    14d6:	687a      	ldr	r2, [r7, #4]
    14d8:	601a      	str	r2, [r3, #0]
	while (msCounter) check_usarts();
    14da:	e001      	b.n	14e0 <wait_10msSec+0x14>
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <wait_10msSec+0x28>)
    14de:	4798      	blx	r3
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <wait_10msSec+0x24>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d1f9      	bne.n	14dc <wait_10msSec+0x10>
}
    14e8:	46bd      	mov	sp, r7
    14ea:	b002      	add	sp, #8
    14ec:	bd80      	pop	{r7, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	20000348 	.word	0x20000348
    14f4:	00000af9 	.word	0x00000af9

000014f8 <tc_callback_to_toggle_led>:
extern char pair_addr[20];
extern bool in_SSP_mode;

void tc_callback_to_toggle_led(
		struct tc_module *const module_inst)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
    14fe:	6078      	str	r0, [r7, #4]
//	tc_callback_occurred = true;
//	port_pin_toggle_output_level(Yellow_LED_PIN);
	if (msCounter>0) msCounter--;
    1500:	4b08      	ldr	r3, [pc, #32]	; (1524 <tc_callback_to_toggle_led+0x2c>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	2b00      	cmp	r3, #0
    1506:	d004      	beq.n	1512 <tc_callback_to_toggle_led+0x1a>
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <tc_callback_to_toggle_led+0x2c>)
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	1e5a      	subs	r2, r3, #1
    150e:	4b05      	ldr	r3, [pc, #20]	; (1524 <tc_callback_to_toggle_led+0x2c>)
    1510:	601a      	str	r2, [r3, #0]
	//if(usartTimeout<SERIAL_COMM_QUITE) usartTimeout++;
	ledTimer++;
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <tc_callback_to_toggle_led+0x30>)
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	1c5a      	adds	r2, r3, #1
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <tc_callback_to_toggle_led+0x30>)
    151a:	601a      	str	r2, [r3, #0]

}
    151c:	46bd      	mov	sp, r7
    151e:	b002      	add	sp, #8
    1520:	bd80      	pop	{r7, pc}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	20000348 	.word	0x20000348
    1528:	20000344 	.word	0x20000344

0000152c <configure_tc4>:
//! [callback_funcs]

//! [setup]
void configure_tc4(void)
{
    152c:	b580      	push	{r7, lr}
    152e:	b08e      	sub	sp, #56	; 0x38
    1530:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    1532:	1d3b      	adds	r3, r7, #4
    1534:	1c18      	adds	r0, r3, #0
    1536:	4b0f      	ldr	r3, [pc, #60]	; (1574 <configure_tc4+0x48>)
    1538:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    153a:	1d3b      	adds	r3, r7, #4
    153c:	2204      	movs	r2, #4
    153e:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;			// 12M
    1540:	1d3b      	adds	r3, r7, #4
    1542:	2201      	movs	r2, #1
    1544:	701a      	strb	r2, [r3, #0]
	
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    1546:	1d3b      	adds	r3, r7, #4
    1548:	22e0      	movs	r2, #224	; 0xe0
    154a:	00d2      	lsls	r2, r2, #3
    154c:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 138;	  	// calculated from 12M and measured at 10ms with scope
    154e:	1d3b      	adds	r3, r7, #4
    1550:	2229      	movs	r2, #41	; 0x29
    1552:	218a      	movs	r1, #138	; 0x8a
    1554:	5499      	strb	r1, [r3, r2]

	//! [setup_set_config]
	tc_init(&tc_instance_tc4, CONF_TC_MODULE, &config_tc);
    1556:	4a08      	ldr	r2, [pc, #32]	; (1578 <configure_tc4+0x4c>)
    1558:	4908      	ldr	r1, [pc, #32]	; (157c <configure_tc4+0x50>)
    155a:	1d3b      	adds	r3, r7, #4
    155c:	1c10      	adds	r0, r2, #0
    155e:	1c1a      	adds	r2, r3, #0
    1560:	4b07      	ldr	r3, [pc, #28]	; (1580 <configure_tc4+0x54>)
    1562:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance_tc4);
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <configure_tc4+0x4c>)
    1566:	1c18      	adds	r0, r3, #0
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <configure_tc4+0x58>)
    156a:	4798      	blx	r3
	//! [setup_enable]
}
    156c:	46bd      	mov	sp, r7
    156e:	b00e      	add	sp, #56	; 0x38
    1570:	bd80      	pop	{r7, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00001311 	.word	0x00001311
    1578:	2000034c 	.word	0x2000034c
    157c:	42003000 	.word	0x42003000
    1580:	00001c5d 	.word	0x00001c5d
    1584:	00001399 	.word	0x00001399

00001588 <configure_tc4_callbacks>:

void configure_tc4_callbacks(void)
{
    1588:	b580      	push	{r7, lr}
    158a:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(&tc_instance_tc4, tc_callback_to_toggle_led,TC_CALLBACK_OVERFLOW);
    158c:	4a06      	ldr	r2, [pc, #24]	; (15a8 <configure_tc4_callbacks+0x20>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <configure_tc4_callbacks+0x24>)
    1590:	1c10      	adds	r0, r2, #0
    1592:	1c19      	adds	r1, r3, #0
    1594:	2200      	movs	r2, #0
    1596:	4b06      	ldr	r3, [pc, #24]	; (15b0 <configure_tc4_callbacks+0x28>)
    1598:	4798      	blx	r3

	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance_tc4, TC_CALLBACK_OVERFLOW);
    159a:	4b03      	ldr	r3, [pc, #12]	; (15a8 <configure_tc4_callbacks+0x20>)
    159c:	1c18      	adds	r0, r3, #0
    159e:	2100      	movs	r1, #0
    15a0:	4b04      	ldr	r3, [pc, #16]	; (15b4 <configure_tc4_callbacks+0x2c>)
    15a2:	4798      	blx	r3

}
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}
    15a8:	2000034c 	.word	0x2000034c
    15ac:	000014f9 	.word	0x000014f9
    15b0:	00001981 	.word	0x00001981
    15b4:	000013f1 	.word	0x000013f1

000015b8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	af00      	add	r7, sp, #0
    15be:	1c02      	adds	r2, r0, #0
    15c0:	1dfb      	adds	r3, r7, #7
    15c2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    15c4:	46bd      	mov	sp, r7
    15c6:	b002      	add	sp, #8
    15c8:	bd80      	pop	{r7, pc}
    15ca:	46c0      	nop			; (mov r8, r8)

000015cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    15cc:	b580      	push	{r7, lr}
    15ce:	b084      	sub	sp, #16
    15d0:	af00      	add	r7, sp, #0
    15d2:	1c02      	adds	r2, r0, #0
    15d4:	6039      	str	r1, [r7, #0]
    15d6:	1dfb      	adds	r3, r7, #7
    15d8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    15da:	4b13      	ldr	r3, [pc, #76]	; (1628 <_sercom_set_handler+0x5c>)
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	2201      	movs	r2, #1
    15e0:	4053      	eors	r3, r2
    15e2:	b2db      	uxtb	r3, r3
    15e4:	2b00      	cmp	r3, #0
    15e6:	d015      	beq.n	1614 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15e8:	2300      	movs	r3, #0
    15ea:	60fb      	str	r3, [r7, #12]
    15ec:	e00c      	b.n	1608 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15ee:	4b0f      	ldr	r3, [pc, #60]	; (162c <_sercom_set_handler+0x60>)
    15f0:	68fa      	ldr	r2, [r7, #12]
    15f2:	0092      	lsls	r2, r2, #2
    15f4:	490e      	ldr	r1, [pc, #56]	; (1630 <_sercom_set_handler+0x64>)
    15f6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    15f8:	4b0e      	ldr	r3, [pc, #56]	; (1634 <_sercom_set_handler+0x68>)
    15fa:	68fa      	ldr	r2, [r7, #12]
    15fc:	0092      	lsls	r2, r2, #2
    15fe:	2100      	movs	r1, #0
    1600:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	3301      	adds	r3, #1
    1606:	60fb      	str	r3, [r7, #12]
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	2b05      	cmp	r3, #5
    160c:	d9ef      	bls.n	15ee <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    160e:	4b06      	ldr	r3, [pc, #24]	; (1628 <_sercom_set_handler+0x5c>)
    1610:	2201      	movs	r2, #1
    1612:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1614:	1dfb      	adds	r3, r7, #7
    1616:	781a      	ldrb	r2, [r3, #0]
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <_sercom_set_handler+0x60>)
    161a:	0092      	lsls	r2, r2, #2
    161c:	6839      	ldr	r1, [r7, #0]
    161e:	50d1      	str	r1, [r2, r3]
}
    1620:	46bd      	mov	sp, r7
    1622:	b004      	add	sp, #16
    1624:	bd80      	pop	{r7, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	20000028 	.word	0x20000028
    162c:	2000002c 	.word	0x2000002c
    1630:	000015b9 	.word	0x000015b9
    1634:	20000368 	.word	0x20000368

00001638 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1638:	b590      	push	{r4, r7, lr}
    163a:	b085      	sub	sp, #20
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1640:	2308      	movs	r3, #8
    1642:	18fa      	adds	r2, r7, r3
    1644:	4b0e      	ldr	r3, [pc, #56]	; (1680 <_sercom_get_interrupt_vector+0x48>)
    1646:	1c11      	adds	r1, r2, #0
    1648:	1c1a      	adds	r2, r3, #0
    164a:	2306      	movs	r3, #6
    164c:	1c08      	adds	r0, r1, #0
    164e:	1c11      	adds	r1, r2, #0
    1650:	1c1a      	adds	r2, r3, #0
    1652:	4b0c      	ldr	r3, [pc, #48]	; (1684 <_sercom_get_interrupt_vector+0x4c>)
    1654:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1656:	230f      	movs	r3, #15
    1658:	18fc      	adds	r4, r7, r3
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	1c18      	adds	r0, r3, #0
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <_sercom_get_interrupt_vector+0x50>)
    1660:	4798      	blx	r3
    1662:	1c03      	adds	r3, r0, #0
    1664:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1666:	230f      	movs	r3, #15
    1668:	18fb      	adds	r3, r7, r3
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	2208      	movs	r2, #8
    166e:	18ba      	adds	r2, r7, r2
    1670:	5cd3      	ldrb	r3, [r2, r3]
    1672:	b2db      	uxtb	r3, r3
    1674:	b25b      	sxtb	r3, r3
}
    1676:	1c18      	adds	r0, r3, #0
    1678:	46bd      	mov	sp, r7
    167a:	b005      	add	sp, #20
    167c:	bd90      	pop	{r4, r7, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	00003f88 	.word	0x00003f88
    1684:	00003da5 	.word	0x00003da5
    1688:	00002775 	.word	0x00002775

0000168c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    168c:	b580      	push	{r7, lr}
    168e:	af00      	add	r7, sp, #0
    1690:	4b02      	ldr	r3, [pc, #8]	; (169c <SERCOM0_Handler+0x10>)
    1692:	681b      	ldr	r3, [r3, #0]
    1694:	2000      	movs	r0, #0
    1696:	4798      	blx	r3
    1698:	46bd      	mov	sp, r7
    169a:	bd80      	pop	{r7, pc}
    169c:	2000002c 	.word	0x2000002c

000016a0 <SERCOM1_Handler>:
    16a0:	b580      	push	{r7, lr}
    16a2:	af00      	add	r7, sp, #0
    16a4:	4b02      	ldr	r3, [pc, #8]	; (16b0 <SERCOM1_Handler+0x10>)
    16a6:	685b      	ldr	r3, [r3, #4]
    16a8:	2001      	movs	r0, #1
    16aa:	4798      	blx	r3
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}
    16b0:	2000002c 	.word	0x2000002c

000016b4 <SERCOM2_Handler>:
    16b4:	b580      	push	{r7, lr}
    16b6:	af00      	add	r7, sp, #0
    16b8:	4b02      	ldr	r3, [pc, #8]	; (16c4 <SERCOM2_Handler+0x10>)
    16ba:	689b      	ldr	r3, [r3, #8]
    16bc:	2002      	movs	r0, #2
    16be:	4798      	blx	r3
    16c0:	46bd      	mov	sp, r7
    16c2:	bd80      	pop	{r7, pc}
    16c4:	2000002c 	.word	0x2000002c

000016c8 <SERCOM3_Handler>:
    16c8:	b580      	push	{r7, lr}
    16ca:	af00      	add	r7, sp, #0
    16cc:	4b02      	ldr	r3, [pc, #8]	; (16d8 <SERCOM3_Handler+0x10>)
    16ce:	68db      	ldr	r3, [r3, #12]
    16d0:	2003      	movs	r0, #3
    16d2:	4798      	blx	r3
    16d4:	46bd      	mov	sp, r7
    16d6:	bd80      	pop	{r7, pc}
    16d8:	2000002c 	.word	0x2000002c

000016dc <SERCOM4_Handler>:
    16dc:	b580      	push	{r7, lr}
    16de:	af00      	add	r7, sp, #0
    16e0:	4b02      	ldr	r3, [pc, #8]	; (16ec <SERCOM4_Handler+0x10>)
    16e2:	691b      	ldr	r3, [r3, #16]
    16e4:	2004      	movs	r0, #4
    16e6:	4798      	blx	r3
    16e8:	46bd      	mov	sp, r7
    16ea:	bd80      	pop	{r7, pc}
    16ec:	2000002c 	.word	0x2000002c

000016f0 <SERCOM5_Handler>:
    16f0:	b580      	push	{r7, lr}
    16f2:	af00      	add	r7, sp, #0
    16f4:	4b02      	ldr	r3, [pc, #8]	; (1700 <SERCOM5_Handler+0x10>)
    16f6:	695b      	ldr	r3, [r3, #20]
    16f8:	2005      	movs	r0, #5
    16fa:	4798      	blx	r3
    16fc:	46bd      	mov	sp, r7
    16fe:	bd80      	pop	{r7, pc}
    1700:	2000002c 	.word	0x2000002c

00001704 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1704:	b580      	push	{r7, lr}
    1706:	b084      	sub	sp, #16
    1708:	af00      	add	r7, sp, #0
    170a:	1c02      	adds	r2, r0, #0
    170c:	1dfb      	adds	r3, r7, #7
    170e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1710:	230f      	movs	r3, #15
    1712:	18fb      	adds	r3, r7, r3
    1714:	1dfa      	adds	r2, r7, #7
    1716:	7812      	ldrb	r2, [r2, #0]
    1718:	09d2      	lsrs	r2, r2, #7
    171a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    171c:	230e      	movs	r3, #14
    171e:	18fb      	adds	r3, r7, r3
    1720:	1dfa      	adds	r2, r7, #7
    1722:	7812      	ldrb	r2, [r2, #0]
    1724:	0952      	lsrs	r2, r2, #5
    1726:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1728:	4b0d      	ldr	r3, [pc, #52]	; (1760 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    172a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    172c:	230f      	movs	r3, #15
    172e:	18fb      	adds	r3, r7, r3
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	2b00      	cmp	r3, #0
    1734:	d10f      	bne.n	1756 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1736:	230f      	movs	r3, #15
    1738:	18fb      	adds	r3, r7, r3
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	009b      	lsls	r3, r3, #2
    173e:	2210      	movs	r2, #16
    1740:	4694      	mov	ip, r2
    1742:	44bc      	add	ip, r7
    1744:	4463      	add	r3, ip
    1746:	3b08      	subs	r3, #8
    1748:	681a      	ldr	r2, [r3, #0]
    174a:	230e      	movs	r3, #14
    174c:	18fb      	adds	r3, r7, r3
    174e:	781b      	ldrb	r3, [r3, #0]
    1750:	01db      	lsls	r3, r3, #7
    1752:	18d3      	adds	r3, r2, r3
    1754:	e000      	b.n	1758 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1756:	2300      	movs	r3, #0
	}
}
    1758:	1c18      	adds	r0, r3, #0
    175a:	46bd      	mov	sp, r7
    175c:	b004      	add	sp, #16
    175e:	bd80      	pop	{r7, pc}
    1760:	41004400 	.word	0x41004400

00001764 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1764:	b580      	push	{r7, lr}
    1766:	b082      	sub	sp, #8
    1768:	af00      	add	r7, sp, #0
    176a:	1c02      	adds	r2, r0, #0
    176c:	1dfb      	adds	r3, r7, #7
    176e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1770:	1dfb      	adds	r3, r7, #7
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	1c18      	adds	r0, r3, #0
    1776:	4b03      	ldr	r3, [pc, #12]	; (1784 <port_get_group_from_gpio_pin+0x20>)
    1778:	4798      	blx	r3
    177a:	1c03      	adds	r3, r0, #0
}
    177c:	1c18      	adds	r0, r3, #0
    177e:	46bd      	mov	sp, r7
    1780:	b002      	add	sp, #8
    1782:	bd80      	pop	{r7, pc}
    1784:	00001705 	.word	0x00001705

00001788 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1788:	b580      	push	{r7, lr}
    178a:	b084      	sub	sp, #16
    178c:	af00      	add	r7, sp, #0
    178e:	1c02      	adds	r2, r0, #0
    1790:	1dfb      	adds	r3, r7, #7
    1792:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1794:	1dfb      	adds	r3, r7, #7
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	1c18      	adds	r0, r3, #0
    179a:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <port_pin_get_input_level+0x40>)
    179c:	4798      	blx	r3
    179e:	1c03      	adds	r3, r0, #0
    17a0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17a2:	1dfb      	adds	r3, r7, #7
    17a4:	781b      	ldrb	r3, [r3, #0]
    17a6:	221f      	movs	r2, #31
    17a8:	4013      	ands	r3, r2
    17aa:	2201      	movs	r2, #1
    17ac:	409a      	lsls	r2, r3
    17ae:	1c13      	adds	r3, r2, #0
    17b0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	6a1b      	ldr	r3, [r3, #32]
    17b6:	68ba      	ldr	r2, [r7, #8]
    17b8:	4013      	ands	r3, r2
    17ba:	1e5a      	subs	r2, r3, #1
    17bc:	4193      	sbcs	r3, r2
    17be:	b2db      	uxtb	r3, r3
}
    17c0:	1c18      	adds	r0, r3, #0
    17c2:	46bd      	mov	sp, r7
    17c4:	b004      	add	sp, #16
    17c6:	bd80      	pop	{r7, pc}
    17c8:	00001765 	.word	0x00001765

000017cc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b084      	sub	sp, #16
    17d0:	af00      	add	r7, sp, #0
    17d2:	1c02      	adds	r2, r0, #0
    17d4:	1dfb      	adds	r3, r7, #7
    17d6:	701a      	strb	r2, [r3, #0]
    17d8:	1dbb      	adds	r3, r7, #6
    17da:	1c0a      	adds	r2, r1, #0
    17dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    17de:	1dfb      	adds	r3, r7, #7
    17e0:	781b      	ldrb	r3, [r3, #0]
    17e2:	1c18      	adds	r0, r3, #0
    17e4:	4b0c      	ldr	r3, [pc, #48]	; (1818 <port_pin_set_output_level+0x4c>)
    17e6:	4798      	blx	r3
    17e8:	1c03      	adds	r3, r0, #0
    17ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17ec:	1dfb      	adds	r3, r7, #7
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	221f      	movs	r2, #31
    17f2:	4013      	ands	r3, r2
    17f4:	2201      	movs	r2, #1
    17f6:	409a      	lsls	r2, r3
    17f8:	1c13      	adds	r3, r2, #0
    17fa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    17fc:	1dbb      	adds	r3, r7, #6
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	2b00      	cmp	r3, #0
    1802:	d003      	beq.n	180c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1804:	68fb      	ldr	r3, [r7, #12]
    1806:	68ba      	ldr	r2, [r7, #8]
    1808:	619a      	str	r2, [r3, #24]
    180a:	e002      	b.n	1812 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	68ba      	ldr	r2, [r7, #8]
    1810:	615a      	str	r2, [r3, #20]
	}
}
    1812:	46bd      	mov	sp, r7
    1814:	b004      	add	sp, #16
    1816:	bd80      	pop	{r7, pc}
    1818:	00001765 	.word	0x00001765

0000181c <main>:
extern char cStr[];	
extern uint32_t msCounter,ledTimer;	
bool slave, in_SSP_mode, BTpaired;

int main(void)
{	
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0
	sysState = INIT_STATE;
    1820:	4b49      	ldr	r3, [pc, #292]	; (1948 <main+0x12c>)
    1822:	22f0      	movs	r2, #240	; 0xf0
    1824:	701a      	strb	r2, [r3, #0]
	init();
    1826:	4b49      	ldr	r3, [pc, #292]	; (194c <main+0x130>)
    1828:	4798      	blx	r3

	init_serial_buffers();
    182a:	4b49      	ldr	r3, [pc, #292]	; (1950 <main+0x134>)
    182c:	4798      	blx	r3
	reset_BT();
    182e:	4b49      	ldr	r3, [pc, #292]	; (1954 <main+0x138>)
    1830:	4798      	blx	r3
	
	BT_slave_init();
    1832:	4b49      	ldr	r3, [pc, #292]	; (1958 <main+0x13c>)
    1834:	4798      	blx	r3

	slave = true;
    1836:	4b49      	ldr	r3, [pc, #292]	; (195c <main+0x140>)
    1838:	2201      	movs	r2, #1
    183a:	701a      	strb	r2, [r3, #0]

	port_pin_set_output_level(Green_LED_PIN,1);				// leds off
    183c:	2007      	movs	r0, #7
    183e:	2101      	movs	r1, #1
    1840:	4b47      	ldr	r3, [pc, #284]	; (1960 <main+0x144>)
    1842:	4798      	blx	r3
	port_pin_set_output_level(Yellow_LED_PIN,1);
    1844:	2006      	movs	r0, #6
    1846:	2101      	movs	r1, #1
    1848:	4b45      	ldr	r3, [pc, #276]	; (1960 <main+0x144>)
    184a:	4798      	blx	r3
	port_pin_set_output_level(Red_LED_PIN,1);	
    184c:	2005      	movs	r0, #5
    184e:	2101      	movs	r1, #1
    1850:	4b43      	ldr	r3, [pc, #268]	; (1960 <main+0x144>)
    1852:	4798      	blx	r3

	while (1)  	  // master has taken control
	{


 		check_usarts();
    1854:	4b43      	ldr	r3, [pc, #268]	; (1964 <main+0x148>)
    1856:	4798      	blx	r3

		while (port_pin_get_input_level(UNPAIR_PUSH_BUTTON) == false)
    1858:	e016      	b.n	1888 <main+0x6c>
		{																 
			port_pin_set_output_level(Green_LED_PIN,0);	
    185a:	2007      	movs	r0, #7
    185c:	2100      	movs	r1, #0
    185e:	4b40      	ldr	r3, [pc, #256]	; (1960 <main+0x144>)
    1860:	4798      	blx	r3
			port_pin_set_output_level(Yellow_LED_PIN,0);
    1862:	2006      	movs	r0, #6
    1864:	2100      	movs	r1, #0
    1866:	4b3e      	ldr	r3, [pc, #248]	; (1960 <main+0x144>)
    1868:	4798      	blx	r3
			port_pin_set_output_level(Red_LED_PIN,0);
    186a:	2005      	movs	r0, #5
    186c:	2100      	movs	r1, #0
    186e:	4b3c      	ldr	r3, [pc, #240]	; (1960 <main+0x144>)
    1870:	4798      	blx	r3
			ckStatus = unpair_WT41();
    1872:	4b3d      	ldr	r3, [pc, #244]	; (1968 <main+0x14c>)
    1874:	4798      	blx	r3
    1876:	1c03      	adds	r3, r0, #0
    1878:	1c1a      	adds	r2, r3, #0
    187a:	4b3c      	ldr	r3, [pc, #240]	; (196c <main+0x150>)
    187c:	701a      	strb	r2, [r3, #0]
			if (ckStatus == STATUS_OK) 	break;
    187e:	4b3b      	ldr	r3, [pc, #236]	; (196c <main+0x150>)
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d100      	bne.n	1888 <main+0x6c>
    1886:	e009      	b.n	189c <main+0x80>
	{


 		check_usarts();

		while (port_pin_get_input_level(UNPAIR_PUSH_BUTTON) == false)
    1888:	2004      	movs	r0, #4
    188a:	4b39      	ldr	r3, [pc, #228]	; (1970 <main+0x154>)
    188c:	4798      	blx	r3
    188e:	1c03      	adds	r3, r0, #0
    1890:	1c1a      	adds	r2, r3, #0
    1892:	2301      	movs	r3, #1
    1894:	4053      	eors	r3, r2
    1896:	b2db      	uxtb	r3, r3
    1898:	2b00      	cmp	r3, #0
    189a:	d1de      	bne.n	185a <main+0x3e>
			port_pin_set_output_level(Red_LED_PIN,0);
			ckStatus = unpair_WT41();
			if (ckStatus == STATUS_OK) 	break;
		}

		if (port_pin_get_input_level(WT41_CARRIER_DETECT_PIN) == false)
    189c:	2017      	movs	r0, #23
    189e:	4b34      	ldr	r3, [pc, #208]	; (1970 <main+0x154>)
    18a0:	4798      	blx	r3
    18a2:	1c03      	adds	r3, r0, #0
    18a4:	1c1a      	adds	r2, r3, #0
    18a6:	2301      	movs	r3, #1
    18a8:	4053      	eors	r3, r2
    18aa:	b2db      	uxtb	r3, r3
    18ac:	2b00      	cmp	r3, #0
    18ae:	d033      	beq.n	1918 <main+0xfc>
		{	// NO CARRIER
			check_WT41_paired();
    18b0:	4b30      	ldr	r3, [pc, #192]	; (1974 <main+0x158>)
    18b2:	4798      	blx	r3
			if (BTpaired)												// flash yellow
    18b4:	4b30      	ldr	r3, [pc, #192]	; (1978 <main+0x15c>)
    18b6:	781b      	ldrb	r3, [r3, #0]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d016      	beq.n	18ea <main+0xce>
			{
				port_pin_set_output_level(Yellow_LED_PIN,0);
    18bc:	2006      	movs	r0, #6
    18be:	2100      	movs	r1, #0
    18c0:	4b27      	ldr	r3, [pc, #156]	; (1960 <main+0x144>)
    18c2:	4798      	blx	r3
				port_pin_set_output_level(Red_LED_PIN,1);
    18c4:	2005      	movs	r0, #5
    18c6:	2101      	movs	r1, #1
    18c8:	4b25      	ldr	r3, [pc, #148]	; (1960 <main+0x144>)
    18ca:	4798      	blx	r3
				port_pin_set_output_level(Green_LED_PIN,1);
    18cc:	2007      	movs	r0, #7
    18ce:	2101      	movs	r1, #1
    18d0:	4b23      	ldr	r3, [pc, #140]	; (1960 <main+0x144>)
    18d2:	4798      	blx	r3
				wait_10msSec(5);		  // check_usarts(); also called during wait
    18d4:	2005      	movs	r0, #5
    18d6:	4b29      	ldr	r3, [pc, #164]	; (197c <main+0x160>)
    18d8:	4798      	blx	r3
				port_pin_set_output_level(Yellow_LED_PIN,1);
    18da:	2006      	movs	r0, #6
    18dc:	2101      	movs	r1, #1
    18de:	4b20      	ldr	r3, [pc, #128]	; (1960 <main+0x144>)
    18e0:	4798      	blx	r3
				wait_10msSec(50);	 			
    18e2:	2032      	movs	r0, #50	; 0x32
    18e4:	4b25      	ldr	r3, [pc, #148]	; (197c <main+0x160>)
    18e6:	4798      	blx	r3
    18e8:	e02c      	b.n	1944 <main+0x128>
			
			}
			else														// flash red
			{
				port_pin_set_output_level(Yellow_LED_PIN,1);
    18ea:	2006      	movs	r0, #6
    18ec:	2101      	movs	r1, #1
    18ee:	4b1c      	ldr	r3, [pc, #112]	; (1960 <main+0x144>)
    18f0:	4798      	blx	r3
				port_pin_set_output_level(Red_LED_PIN,0);
    18f2:	2005      	movs	r0, #5
    18f4:	2100      	movs	r1, #0
    18f6:	4b1a      	ldr	r3, [pc, #104]	; (1960 <main+0x144>)
    18f8:	4798      	blx	r3
				port_pin_set_output_level(Green_LED_PIN,1);
    18fa:	2007      	movs	r0, #7
    18fc:	2101      	movs	r1, #1
    18fe:	4b18      	ldr	r3, [pc, #96]	; (1960 <main+0x144>)
    1900:	4798      	blx	r3
				wait_10msSec(5);		  // check_usarts(); also called during wait
    1902:	2005      	movs	r0, #5
    1904:	4b1d      	ldr	r3, [pc, #116]	; (197c <main+0x160>)
    1906:	4798      	blx	r3
				port_pin_set_output_level(Red_LED_PIN,1);
    1908:	2005      	movs	r0, #5
    190a:	2101      	movs	r1, #1
    190c:	4b14      	ldr	r3, [pc, #80]	; (1960 <main+0x144>)
    190e:	4798      	blx	r3
				wait_10msSec(50);	 			
    1910:	2032      	movs	r0, #50	; 0x32
    1912:	4b1a      	ldr	r3, [pc, #104]	; (197c <main+0x160>)
    1914:	4798      	blx	r3
    1916:	e79d      	b.n	1854 <main+0x38>
			}
		}
 		else			 // CARRIER DETECTED							// flash green led
 		{
			port_pin_set_output_level(Yellow_LED_PIN,1);
    1918:	2006      	movs	r0, #6
    191a:	2101      	movs	r1, #1
    191c:	4b10      	ldr	r3, [pc, #64]	; (1960 <main+0x144>)
    191e:	4798      	blx	r3
			port_pin_set_output_level(Red_LED_PIN,1);
    1920:	2005      	movs	r0, #5
    1922:	2101      	movs	r1, #1
    1924:	4b0e      	ldr	r3, [pc, #56]	; (1960 <main+0x144>)
    1926:	4798      	blx	r3
			port_pin_set_output_level(Green_LED_PIN,0);
    1928:	2007      	movs	r0, #7
    192a:	2100      	movs	r1, #0
    192c:	4b0c      	ldr	r3, [pc, #48]	; (1960 <main+0x144>)
    192e:	4798      	blx	r3
			wait_10msSec(5);		  // check_usarts(); also called during wait
    1930:	2005      	movs	r0, #5
    1932:	4b12      	ldr	r3, [pc, #72]	; (197c <main+0x160>)
    1934:	4798      	blx	r3
			port_pin_set_output_level(Green_LED_PIN,1);
    1936:	2007      	movs	r0, #7
    1938:	2101      	movs	r1, #1
    193a:	4b09      	ldr	r3, [pc, #36]	; (1960 <main+0x144>)
    193c:	4798      	blx	r3
			wait_10msSec(50);	 			
    193e:	2032      	movs	r0, #50	; 0x32
    1940:	4b0e      	ldr	r3, [pc, #56]	; (197c <main+0x160>)
    1942:	4798      	blx	r3
 		}

 	}
    1944:	e786      	b.n	1854 <main+0x38>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	20000479 	.word	0x20000479
    194c:	0000047d 	.word	0x0000047d
    1950:	000008ad 	.word	0x000008ad
    1954:	000002ad 	.word	0x000002ad
    1958:	00001175 	.word	0x00001175
    195c:	200003f8 	.word	0x200003f8
    1960:	000017cd 	.word	0x000017cd
    1964:	00000af9 	.word	0x00000af9
    1968:	000010b1 	.word	0x000010b1
    196c:	20000381 	.word	0x20000381
    1970:	00001789 	.word	0x00001789
    1974:	00000fcd 	.word	0x00000fcd
    1978:	20000389 	.word	0x20000389
    197c:	000014cd 	.word	0x000014cd

00001980 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    1980:	b580      	push	{r7, lr}
    1982:	b084      	sub	sp, #16
    1984:	af00      	add	r7, sp, #0
    1986:	60f8      	str	r0, [r7, #12]
    1988:	60b9      	str	r1, [r7, #8]
    198a:	1dfb      	adds	r3, r7, #7
    198c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    198e:	1dfb      	adds	r3, r7, #7
    1990:	781a      	ldrb	r2, [r3, #0]
    1992:	68fb      	ldr	r3, [r7, #12]
    1994:	3202      	adds	r2, #2
    1996:	0092      	lsls	r2, r2, #2
    1998:	68b9      	ldr	r1, [r7, #8]
    199a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    199c:	1dfb      	adds	r3, r7, #7
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	2b02      	cmp	r3, #2
    19a2:	d107      	bne.n	19b4 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	7e1b      	ldrb	r3, [r3, #24]
    19a8:	2210      	movs	r2, #16
    19aa:	4313      	orrs	r3, r2
    19ac:	b2da      	uxtb	r2, r3
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	761a      	strb	r2, [r3, #24]
    19b2:	e01a      	b.n	19ea <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    19b4:	1dfb      	adds	r3, r7, #7
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	2b03      	cmp	r3, #3
    19ba:	d107      	bne.n	19cc <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	7e1b      	ldrb	r3, [r3, #24]
    19c0:	2220      	movs	r2, #32
    19c2:	4313      	orrs	r3, r2
    19c4:	b2da      	uxtb	r2, r3
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	761a      	strb	r2, [r3, #24]
    19ca:	e00e      	b.n	19ea <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	7e1b      	ldrb	r3, [r3, #24]
    19d0:	b2d9      	uxtb	r1, r3
    19d2:	1dfb      	adds	r3, r7, #7
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	2201      	movs	r2, #1
    19d8:	409a      	lsls	r2, r3
    19da:	1c13      	adds	r3, r2, #0
    19dc:	b2db      	uxtb	r3, r3
    19de:	1c0a      	adds	r2, r1, #0
    19e0:	4313      	orrs	r3, r2
    19e2:	b2db      	uxtb	r3, r3
    19e4:	b2da      	uxtb	r2, r3
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    19ea:	2300      	movs	r3, #0
}
    19ec:	1c18      	adds	r0, r3, #0
    19ee:	46bd      	mov	sp, r7
    19f0:	b004      	add	sp, #16
    19f2:	bd80      	pop	{r7, pc}

000019f4 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0
    19f8:	2000      	movs	r0, #0
    19fa:	4b02      	ldr	r3, [pc, #8]	; (1a04 <TC0_Handler+0x10>)
    19fc:	4798      	blx	r3
    19fe:	46bd      	mov	sp, r7
    1a00:	bd80      	pop	{r7, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	00001a95 	.word	0x00001a95

00001a08 <TC1_Handler>:
    1a08:	b580      	push	{r7, lr}
    1a0a:	af00      	add	r7, sp, #0
    1a0c:	2001      	movs	r0, #1
    1a0e:	4b02      	ldr	r3, [pc, #8]	; (1a18 <TC1_Handler+0x10>)
    1a10:	4798      	blx	r3
    1a12:	46bd      	mov	sp, r7
    1a14:	bd80      	pop	{r7, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	00001a95 	.word	0x00001a95

00001a1c <TC2_Handler>:
    1a1c:	b580      	push	{r7, lr}
    1a1e:	af00      	add	r7, sp, #0
    1a20:	2002      	movs	r0, #2
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <TC2_Handler+0x10>)
    1a24:	4798      	blx	r3
    1a26:	46bd      	mov	sp, r7
    1a28:	bd80      	pop	{r7, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	00001a95 	.word	0x00001a95

00001a30 <TC3_Handler>:
    1a30:	b580      	push	{r7, lr}
    1a32:	af00      	add	r7, sp, #0
    1a34:	2003      	movs	r0, #3
    1a36:	4b02      	ldr	r3, [pc, #8]	; (1a40 <TC3_Handler+0x10>)
    1a38:	4798      	blx	r3
    1a3a:	46bd      	mov	sp, r7
    1a3c:	bd80      	pop	{r7, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	00001a95 	.word	0x00001a95

00001a44 <TC4_Handler>:
    1a44:	b580      	push	{r7, lr}
    1a46:	af00      	add	r7, sp, #0
    1a48:	2004      	movs	r0, #4
    1a4a:	4b02      	ldr	r3, [pc, #8]	; (1a54 <TC4_Handler+0x10>)
    1a4c:	4798      	blx	r3
    1a4e:	46bd      	mov	sp, r7
    1a50:	bd80      	pop	{r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	00001a95 	.word	0x00001a95

00001a58 <TC5_Handler>:
    1a58:	b580      	push	{r7, lr}
    1a5a:	af00      	add	r7, sp, #0
    1a5c:	2005      	movs	r0, #5
    1a5e:	4b02      	ldr	r3, [pc, #8]	; (1a68 <TC5_Handler+0x10>)
    1a60:	4798      	blx	r3
    1a62:	46bd      	mov	sp, r7
    1a64:	bd80      	pop	{r7, pc}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	00001a95 	.word	0x00001a95

00001a6c <TC6_Handler>:
    1a6c:	b580      	push	{r7, lr}
    1a6e:	af00      	add	r7, sp, #0
    1a70:	2006      	movs	r0, #6
    1a72:	4b02      	ldr	r3, [pc, #8]	; (1a7c <TC6_Handler+0x10>)
    1a74:	4798      	blx	r3
    1a76:	46bd      	mov	sp, r7
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	00001a95 	.word	0x00001a95

00001a80 <TC7_Handler>:
    1a80:	b580      	push	{r7, lr}
    1a82:	af00      	add	r7, sp, #0
    1a84:	2007      	movs	r0, #7
    1a86:	4b02      	ldr	r3, [pc, #8]	; (1a90 <TC7_Handler+0x10>)
    1a88:	4798      	blx	r3
    1a8a:	46bd      	mov	sp, r7
    1a8c:	bd80      	pop	{r7, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00001a95 	.word	0x00001a95

00001a94 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b084      	sub	sp, #16
    1a98:	af00      	add	r7, sp, #0
    1a9a:	1c02      	adds	r2, r0, #0
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1aa0:	1dfb      	adds	r3, r7, #7
    1aa2:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1aa4:	4b28      	ldr	r3, [pc, #160]	; (1b48 <_tc_interrupt_handler+0xb4>)
    1aa6:	0092      	lsls	r2, r2, #2
    1aa8:	58d3      	ldr	r3, [r2, r3]
    1aaa:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1aac:	68fb      	ldr	r3, [r7, #12]
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	7b9b      	ldrb	r3, [r3, #14]
    1ab2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1ab4:	68fa      	ldr	r2, [r7, #12]
    1ab6:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ab8:	4013      	ands	r3, r2
    1aba:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1abc:	68fb      	ldr	r3, [r7, #12]
    1abe:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ac0:	230b      	movs	r3, #11
    1ac2:	18fb      	adds	r3, r7, r3
    1ac4:	400a      	ands	r2, r1
    1ac6:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1ac8:	230b      	movs	r3, #11
    1aca:	18fb      	adds	r3, r7, r3
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2201      	movs	r2, #1
    1ad0:	4013      	ands	r3, r2
    1ad2:	d008      	beq.n	1ae6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1ad4:	68fb      	ldr	r3, [r7, #12]
    1ad6:	689b      	ldr	r3, [r3, #8]
    1ad8:	68fa      	ldr	r2, [r7, #12]
    1ada:	1c10      	adds	r0, r2, #0
    1adc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1ade:	68fb      	ldr	r3, [r7, #12]
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	2201      	movs	r2, #1
    1ae4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1ae6:	230b      	movs	r3, #11
    1ae8:	18fb      	adds	r3, r7, r3
    1aea:	781b      	ldrb	r3, [r3, #0]
    1aec:	2202      	movs	r2, #2
    1aee:	4013      	ands	r3, r2
    1af0:	d008      	beq.n	1b04 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1af2:	68fb      	ldr	r3, [r7, #12]
    1af4:	68db      	ldr	r3, [r3, #12]
    1af6:	68fa      	ldr	r2, [r7, #12]
    1af8:	1c10      	adds	r0, r2, #0
    1afa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1afc:	68fb      	ldr	r3, [r7, #12]
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	2202      	movs	r2, #2
    1b02:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1b04:	230b      	movs	r3, #11
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	2210      	movs	r2, #16
    1b0c:	4013      	ands	r3, r2
    1b0e:	d008      	beq.n	1b22 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1b10:	68fb      	ldr	r3, [r7, #12]
    1b12:	691b      	ldr	r3, [r3, #16]
    1b14:	68fa      	ldr	r2, [r7, #12]
    1b16:	1c10      	adds	r0, r2, #0
    1b18:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1b1a:	68fb      	ldr	r3, [r7, #12]
    1b1c:	681b      	ldr	r3, [r3, #0]
    1b1e:	2210      	movs	r2, #16
    1b20:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1b22:	230b      	movs	r3, #11
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	2220      	movs	r2, #32
    1b2a:	4013      	ands	r3, r2
    1b2c:	d008      	beq.n	1b40 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	695b      	ldr	r3, [r3, #20]
    1b32:	68fa      	ldr	r2, [r7, #12]
    1b34:	1c10      	adds	r0, r2, #0
    1b36:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	2220      	movs	r2, #32
    1b3e:	739a      	strb	r2, [r3, #14]
	}
}
    1b40:	46bd      	mov	sp, r7
    1b42:	b004      	add	sp, #16
    1b44:	bd80      	pop	{r7, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	2000047c 	.word	0x2000047c

00001b4c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	2200      	movs	r2, #0
    1b58:	701a      	strb	r2, [r3, #0]
}
    1b5a:	46bd      	mov	sp, r7
    1b5c:	b002      	add	sp, #8
    1b5e:	bd80      	pop	{r7, pc}

00001b60 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	1c02      	adds	r2, r0, #0
    1b68:	6039      	str	r1, [r7, #0]
    1b6a:	1dfb      	adds	r3, r7, #7
    1b6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1b6e:	1dfb      	adds	r3, r7, #7
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	2b01      	cmp	r3, #1
    1b74:	d00a      	beq.n	1b8c <system_apb_clock_set_mask+0x2c>
    1b76:	2b02      	cmp	r3, #2
    1b78:	d00f      	beq.n	1b9a <system_apb_clock_set_mask+0x3a>
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d114      	bne.n	1ba8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1b7e:	4b0e      	ldr	r3, [pc, #56]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b80:	4a0d      	ldr	r2, [pc, #52]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b82:	6991      	ldr	r1, [r2, #24]
    1b84:	683a      	ldr	r2, [r7, #0]
    1b86:	430a      	orrs	r2, r1
    1b88:	619a      	str	r2, [r3, #24]
			break;
    1b8a:	e00f      	b.n	1bac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1b8c:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b8e:	4a0a      	ldr	r2, [pc, #40]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b90:	69d1      	ldr	r1, [r2, #28]
    1b92:	683a      	ldr	r2, [r7, #0]
    1b94:	430a      	orrs	r2, r1
    1b96:	61da      	str	r2, [r3, #28]
			break;
    1b98:	e008      	b.n	1bac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b9c:	4a06      	ldr	r2, [pc, #24]	; (1bb8 <system_apb_clock_set_mask+0x58>)
    1b9e:	6a11      	ldr	r1, [r2, #32]
    1ba0:	683a      	ldr	r2, [r7, #0]
    1ba2:	430a      	orrs	r2, r1
    1ba4:	621a      	str	r2, [r3, #32]
			break;
    1ba6:	e001      	b.n	1bac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1ba8:	2317      	movs	r3, #23
    1baa:	e000      	b.n	1bae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1bac:	2300      	movs	r3, #0
}
    1bae:	1c18      	adds	r0, r3, #0
    1bb0:	46bd      	mov	sp, r7
    1bb2:	b002      	add	sp, #8
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	40000400 	.word	0x40000400

00001bbc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1bbc:	b580      	push	{r7, lr}
    1bbe:	b082      	sub	sp, #8
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	2280      	movs	r2, #128	; 0x80
    1bc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	2200      	movs	r2, #0
    1bce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	2201      	movs	r2, #1
    1bd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	2200      	movs	r2, #0
    1bda:	70da      	strb	r2, [r3, #3]
}
    1bdc:	46bd      	mov	sp, r7
    1bde:	b002      	add	sp, #8
    1be0:	bd80      	pop	{r7, pc}
    1be2:	46c0      	nop			; (mov r8, r8)

00001be4 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b084      	sub	sp, #16
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	681b      	ldr	r3, [r3, #0]
    1bf0:	60fb      	str	r3, [r7, #12]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bf2:	68fb      	ldr	r3, [r7, #12]
    1bf4:	7bdb      	ldrb	r3, [r3, #15]
    1bf6:	b2db      	uxtb	r3, r3
    1bf8:	1c1a      	adds	r2, r3, #0
    1bfa:	2380      	movs	r3, #128	; 0x80
    1bfc:	4013      	ands	r3, r2
    1bfe:	1e5a      	subs	r2, r3, #1
    1c00:	4193      	sbcs	r3, r2
    1c02:	b2db      	uxtb	r3, r3
#endif
}
    1c04:	1c18      	adds	r0, r3, #0
    1c06:	46bd      	mov	sp, r7
    1c08:	b004      	add	sp, #16
    1c0a:	bd80      	pop	{r7, pc}

00001c0c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1c0c:	b590      	push	{r4, r7, lr}
    1c0e:	b08d      	sub	sp, #52	; 0x34
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1c14:	230c      	movs	r3, #12
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	4a0f      	ldr	r2, [pc, #60]	; (1c58 <_tc_get_inst_index+0x4c>)
    1c1a:	ca13      	ldmia	r2!, {r0, r1, r4}
    1c1c:	c313      	stmia	r3!, {r0, r1, r4}
    1c1e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1c20:	c313      	stmia	r3!, {r0, r1, r4}
    1c22:	ca03      	ldmia	r2!, {r0, r1}
    1c24:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c26:	2300      	movs	r3, #0
    1c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c2a:	e00d      	b.n	1c48 <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    1c2c:	230c      	movs	r3, #12
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c32:	0092      	lsls	r2, r2, #2
    1c34:	58d2      	ldr	r2, [r2, r3]
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	429a      	cmp	r2, r3
    1c3a:	d102      	bne.n	1c42 <_tc_get_inst_index+0x36>
			return i;
    1c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c3e:	b2db      	uxtb	r3, r3
    1c40:	e006      	b.n	1c50 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c44:	3301      	adds	r3, #1
    1c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c4a:	2b07      	cmp	r3, #7
    1c4c:	d9ee      	bls.n	1c2c <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1c4e:	2300      	movs	r3, #0
}
    1c50:	1c18      	adds	r0, r3, #0
    1c52:	46bd      	mov	sp, r7
    1c54:	b00d      	add	sp, #52	; 0x34
    1c56:	bd90      	pop	{r4, r7, pc}
    1c58:	00003f90 	.word	0x00003f90

00001c5c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1c5c:	b590      	push	{r4, r7, lr}
    1c5e:	b08f      	sub	sp, #60	; 0x3c
    1c60:	af00      	add	r7, sp, #0
    1c62:	60f8      	str	r0, [r7, #12]
    1c64:	60b9      	str	r1, [r7, #8]
    1c66:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    1c68:	2336      	movs	r3, #54	; 0x36
    1c6a:	18fb      	adds	r3, r7, r3
    1c6c:	2200      	movs	r2, #0
    1c6e:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1c70:	2335      	movs	r3, #53	; 0x35
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	2200      	movs	r2, #0
    1c76:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    1c78:	2334      	movs	r3, #52	; 0x34
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	2200      	movs	r2, #0
    1c7e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1c80:	2331      	movs	r3, #49	; 0x31
    1c82:	18fc      	adds	r4, r7, r3
    1c84:	68bb      	ldr	r3, [r7, #8]
    1c86:	1c18      	adds	r0, r3, #0
    1c88:	4bc0      	ldr	r3, [pc, #768]	; (1f8c <tc_init+0x330>)
    1c8a:	4798      	blx	r3
    1c8c:	1c03      	adds	r3, r0, #0
    1c8e:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1c90:	2328      	movs	r3, #40	; 0x28
    1c92:	18fa      	adds	r2, r7, r3
    1c94:	4bbe      	ldr	r3, [pc, #760]	; (1f90 <tc_init+0x334>)
    1c96:	1c11      	adds	r1, r2, #0
    1c98:	1c1a      	adds	r2, r3, #0
    1c9a:	2308      	movs	r3, #8
    1c9c:	1c08      	adds	r0, r1, #0
    1c9e:	1c11      	adds	r1, r2, #0
    1ca0:	1c1a      	adds	r2, r3, #0
    1ca2:	4bbc      	ldr	r3, [pc, #752]	; (1f94 <tc_init+0x338>)
    1ca4:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1ca6:	2318      	movs	r3, #24
    1ca8:	18fa      	adds	r2, r7, r3
    1caa:	4bbb      	ldr	r3, [pc, #748]	; (1f98 <tc_init+0x33c>)
    1cac:	1c11      	adds	r1, r2, #0
    1cae:	1c1a      	adds	r2, r3, #0
    1cb0:	2310      	movs	r3, #16
    1cb2:	1c08      	adds	r0, r1, #0
    1cb4:	1c11      	adds	r1, r2, #0
    1cb6:	1c1a      	adds	r2, r3, #0
    1cb8:	4bb6      	ldr	r3, [pc, #728]	; (1f94 <tc_init+0x338>)
    1cba:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1cbc:	2333      	movs	r3, #51	; 0x33
    1cbe:	18fb      	adds	r3, r7, r3
    1cc0:	2200      	movs	r2, #0
    1cc2:	701a      	strb	r2, [r3, #0]
    1cc4:	e00e      	b.n	1ce4 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    1cc6:	2333      	movs	r3, #51	; 0x33
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	781a      	ldrb	r2, [r3, #0]
    1ccc:	68fb      	ldr	r3, [r7, #12]
    1cce:	3202      	adds	r2, #2
    1cd0:	0092      	lsls	r2, r2, #2
    1cd2:	2100      	movs	r1, #0
    1cd4:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1cd6:	2333      	movs	r3, #51	; 0x33
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	781a      	ldrb	r2, [r3, #0]
    1cdc:	2333      	movs	r3, #51	; 0x33
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	3201      	adds	r2, #1
    1ce2:	701a      	strb	r2, [r3, #0]
    1ce4:	2333      	movs	r3, #51	; 0x33
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b03      	cmp	r3, #3
    1cec:	d9eb      	bls.n	1cc6 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	2200      	movs	r2, #0
    1cf2:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	2200      	movs	r2, #0
    1cf8:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1cfa:	2331      	movs	r3, #49	; 0x31
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	781a      	ldrb	r2, [r3, #0]
    1d00:	4ba6      	ldr	r3, [pc, #664]	; (1f9c <tc_init+0x340>)
    1d02:	0092      	lsls	r2, r2, #2
    1d04:	68f9      	ldr	r1, [r7, #12]
    1d06:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d08:	68fb      	ldr	r3, [r7, #12]
    1d0a:	68ba      	ldr	r2, [r7, #8]
    1d0c:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	789b      	ldrb	r3, [r3, #2]
    1d12:	2b08      	cmp	r3, #8
    1d14:	d107      	bne.n	1d26 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    1d16:	2331      	movs	r3, #49	; 0x31
    1d18:	18fb      	adds	r3, r7, r3
    1d1a:	781b      	ldrb	r3, [r3, #0]
    1d1c:	2201      	movs	r2, #1
    1d1e:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d20:	d001      	beq.n	1d26 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d22:	2317      	movs	r3, #23
    1d24:	e1c3      	b.n	20ae <STACK_SIZE+0xae>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	789a      	ldrb	r2, [r3, #2]
    1d2a:	68fb      	ldr	r3, [r7, #12]
    1d2c:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d2e:	68bb      	ldr	r3, [r7, #8]
    1d30:	881b      	ldrh	r3, [r3, #0]
    1d32:	b29b      	uxth	r3, r3
    1d34:	1c1a      	adds	r2, r3, #0
    1d36:	2301      	movs	r3, #1
    1d38:	4013      	ands	r3, r2
    1d3a:	d001      	beq.n	1d40 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d3c:	2305      	movs	r3, #5
    1d3e:	e1b6      	b.n	20ae <STACK_SIZE+0xae>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d40:	68bb      	ldr	r3, [r7, #8]
    1d42:	7bdb      	ldrb	r3, [r3, #15]
    1d44:	b2db      	uxtb	r3, r3
    1d46:	1c1a      	adds	r2, r3, #0
    1d48:	2310      	movs	r3, #16
    1d4a:	4013      	ands	r3, r2
    1d4c:	d001      	beq.n	1d52 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d4e:	231c      	movs	r3, #28
    1d50:	e1ad      	b.n	20ae <STACK_SIZE+0xae>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d52:	68bb      	ldr	r3, [r7, #8]
    1d54:	881b      	ldrh	r3, [r3, #0]
    1d56:	b29b      	uxth	r3, r3
    1d58:	1c1a      	adds	r2, r3, #0
    1d5a:	2302      	movs	r3, #2
    1d5c:	4013      	ands	r3, r2
    1d5e:	d001      	beq.n	1d64 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1d60:	231c      	movs	r3, #28
    1d62:	e1a4      	b.n	20ae <STACK_SIZE+0xae>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	7c1b      	ldrb	r3, [r3, #16]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d017      	beq.n	1d9c <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    1d6c:	2314      	movs	r3, #20
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	1c18      	adds	r0, r3, #0
    1d72:	4b8b      	ldr	r3, [pc, #556]	; (1fa0 <tc_init+0x344>)
    1d74:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d76:	687b      	ldr	r3, [r7, #4]
    1d78:	699b      	ldr	r3, [r3, #24]
    1d7a:	b2da      	uxtb	r2, r3
    1d7c:	2314      	movs	r3, #20
    1d7e:	18fb      	adds	r3, r7, r3
    1d80:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d82:	2314      	movs	r3, #20
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	2201      	movs	r2, #1
    1d88:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1d8e:	b2da      	uxtb	r2, r3
    1d90:	2314      	movs	r3, #20
    1d92:	18fb      	adds	r3, r7, r3
    1d94:	1c10      	adds	r0, r2, #0
    1d96:	1c19      	adds	r1, r3, #0
    1d98:	4b82      	ldr	r3, [pc, #520]	; (1fa4 <tc_init+0x348>)
    1d9a:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	7f1b      	ldrb	r3, [r3, #28]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d017      	beq.n	1dd4 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    1da4:	2314      	movs	r3, #20
    1da6:	18fb      	adds	r3, r7, r3
    1da8:	1c18      	adds	r0, r3, #0
    1daa:	4b7d      	ldr	r3, [pc, #500]	; (1fa0 <tc_init+0x344>)
    1dac:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1db2:	b2da      	uxtb	r2, r3
    1db4:	2314      	movs	r3, #20
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1dba:	2314      	movs	r3, #20
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	2201      	movs	r2, #1
    1dc0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1dc6:	b2da      	uxtb	r2, r3
    1dc8:	2314      	movs	r3, #20
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	1c10      	adds	r0, r2, #0
    1dce:	1c19      	adds	r1, r3, #0
    1dd0:	4b74      	ldr	r3, [pc, #464]	; (1fa4 <tc_init+0x348>)
    1dd2:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1dd4:	2331      	movs	r3, #49	; 0x31
    1dd6:	18fb      	adds	r3, r7, r3
    1dd8:	781a      	ldrb	r2, [r3, #0]
    1dda:	2318      	movs	r3, #24
    1ddc:	18fb      	adds	r3, r7, r3
    1dde:	0052      	lsls	r2, r2, #1
    1de0:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1de2:	2002      	movs	r0, #2
    1de4:	1c19      	adds	r1, r3, #0
    1de6:	4b70      	ldr	r3, [pc, #448]	; (1fa8 <tc_init+0x34c>)
    1de8:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	789b      	ldrb	r3, [r3, #2]
    1dee:	2b08      	cmp	r3, #8
    1df0:	d10b      	bne.n	1e0a <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1df2:	2331      	movs	r3, #49	; 0x31
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	781b      	ldrb	r3, [r3, #0]
    1df8:	1c5a      	adds	r2, r3, #1
    1dfa:	2318      	movs	r3, #24
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	0052      	lsls	r2, r2, #1
    1e00:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1e02:	2002      	movs	r0, #2
    1e04:	1c19      	adds	r1, r3, #0
    1e06:	4b68      	ldr	r3, [pc, #416]	; (1fa8 <tc_init+0x34c>)
    1e08:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1e0a:	2310      	movs	r3, #16
    1e0c:	18fb      	adds	r3, r7, r3
    1e0e:	1c18      	adds	r0, r3, #0
    1e10:	4b66      	ldr	r3, [pc, #408]	; (1fac <tc_init+0x350>)
    1e12:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	781a      	ldrb	r2, [r3, #0]
    1e18:	2310      	movs	r3, #16
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1e1e:	2331      	movs	r3, #49	; 0x31
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	2228      	movs	r2, #40	; 0x28
    1e26:	18ba      	adds	r2, r7, r2
    1e28:	5cd2      	ldrb	r2, [r2, r3]
    1e2a:	2310      	movs	r3, #16
    1e2c:	18fb      	adds	r3, r7, r3
    1e2e:	1c10      	adds	r0, r2, #0
    1e30:	1c19      	adds	r1, r3, #0
    1e32:	4b5f      	ldr	r3, [pc, #380]	; (1fb0 <tc_init+0x354>)
    1e34:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1e36:	2331      	movs	r3, #49	; 0x31
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	2228      	movs	r2, #40	; 0x28
    1e3e:	18ba      	adds	r2, r7, r2
    1e40:	5cd3      	ldrb	r3, [r2, r3]
    1e42:	1c18      	adds	r0, r3, #0
    1e44:	4b5b      	ldr	r3, [pc, #364]	; (1fb4 <tc_init+0x358>)
    1e46:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    1e50:	4313      	orrs	r3, r2
    1e52:	b2db      	uxtb	r3, r3
    1e54:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    1e5a:	4313      	orrs	r3, r2
    1e5c:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    1e62:	2336      	movs	r3, #54	; 0x36
    1e64:	18fb      	adds	r3, r7, r3
    1e66:	430a      	orrs	r2, r1
    1e68:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	785b      	ldrb	r3, [r3, #1]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d008      	beq.n	1e84 <tc_init+0x228>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e72:	2336      	movs	r3, #54	; 0x36
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	2236      	movs	r2, #54	; 0x36
    1e78:	18ba      	adds	r2, r7, r2
    1e7a:	8812      	ldrh	r2, [r2, #0]
    1e7c:	2180      	movs	r1, #128	; 0x80
    1e7e:	0109      	lsls	r1, r1, #4
    1e80:	430a      	orrs	r2, r1
    1e82:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e84:	46c0      	nop			; (mov r8, r8)
    1e86:	68fb      	ldr	r3, [r7, #12]
    1e88:	1c18      	adds	r0, r3, #0
    1e8a:	4b4b      	ldr	r3, [pc, #300]	; (1fb8 <tc_init+0x35c>)
    1e8c:	4798      	blx	r3
    1e8e:	1e03      	subs	r3, r0, #0
    1e90:	d1f9      	bne.n	1e86 <tc_init+0x22a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e92:	68bb      	ldr	r3, [r7, #8]
    1e94:	2236      	movs	r2, #54	; 0x36
    1e96:	18ba      	adds	r2, r7, r2
    1e98:	8812      	ldrh	r2, [r2, #0]
    1e9a:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	7b5b      	ldrb	r3, [r3, #13]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d003      	beq.n	1eac <tc_init+0x250>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1ea4:	2335      	movs	r3, #53	; 0x35
    1ea6:	18fb      	adds	r3, r7, r3
    1ea8:	2204      	movs	r2, #4
    1eaa:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	7b9b      	ldrb	r3, [r3, #14]
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d007      	beq.n	1ec4 <tc_init+0x268>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1eb4:	2335      	movs	r3, #53	; 0x35
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	2235      	movs	r2, #53	; 0x35
    1eba:	18ba      	adds	r2, r7, r2
    1ebc:	7812      	ldrb	r2, [r2, #0]
    1ebe:	2101      	movs	r1, #1
    1ec0:	430a      	orrs	r2, r1
    1ec2:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	68fb      	ldr	r3, [r7, #12]
    1ec8:	1c18      	adds	r0, r3, #0
    1eca:	4b3b      	ldr	r3, [pc, #236]	; (1fb8 <tc_init+0x35c>)
    1ecc:	4798      	blx	r3
    1ece:	1e03      	subs	r3, r0, #0
    1ed0:	d1f9      	bne.n	1ec6 <tc_init+0x26a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1ed2:	68bb      	ldr	r3, [r7, #8]
    1ed4:	22ff      	movs	r2, #255	; 0xff
    1ed6:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1ed8:	2335      	movs	r3, #53	; 0x35
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d00b      	beq.n	1efa <tc_init+0x29e>
		while (tc_is_syncing(module_inst)) {
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	68fb      	ldr	r3, [r7, #12]
    1ee6:	1c18      	adds	r0, r3, #0
    1ee8:	4b33      	ldr	r3, [pc, #204]	; (1fb8 <tc_init+0x35c>)
    1eea:	4798      	blx	r3
    1eec:	1e03      	subs	r3, r0, #0
    1eee:	d1f9      	bne.n	1ee4 <tc_init+0x288>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2235      	movs	r2, #53	; 0x35
    1ef4:	18ba      	adds	r2, r7, r2
    1ef6:	7812      	ldrb	r2, [r2, #0]
    1ef8:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1efa:	2334      	movs	r3, #52	; 0x34
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	687a      	ldr	r2, [r7, #4]
    1f00:	7a92      	ldrb	r2, [r2, #10]
    1f02:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1f04:	2332      	movs	r3, #50	; 0x32
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	2200      	movs	r2, #0
    1f0a:	701a      	strb	r2, [r3, #0]
    1f0c:	e01c      	b.n	1f48 <tc_init+0x2ec>
		if (config->enable_capture_on_channel[i] == true) {
    1f0e:	2332      	movs	r3, #50	; 0x32
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	781b      	ldrb	r3, [r3, #0]
    1f14:	687a      	ldr	r2, [r7, #4]
    1f16:	18d3      	adds	r3, r2, r3
    1f18:	7adb      	ldrb	r3, [r3, #11]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d00d      	beq.n	1f3a <tc_init+0x2de>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1f1e:	2332      	movs	r3, #50	; 0x32
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	2210      	movs	r2, #16
    1f26:	409a      	lsls	r2, r3
    1f28:	1c13      	adds	r3, r2, #0
    1f2a:	b2d9      	uxtb	r1, r3
    1f2c:	2334      	movs	r3, #52	; 0x34
    1f2e:	18fb      	adds	r3, r7, r3
    1f30:	2234      	movs	r2, #52	; 0x34
    1f32:	18ba      	adds	r2, r7, r2
    1f34:	7812      	ldrb	r2, [r2, #0]
    1f36:	430a      	orrs	r2, r1
    1f38:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1f3a:	2332      	movs	r3, #50	; 0x32
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	781a      	ldrb	r2, [r3, #0]
    1f40:	2332      	movs	r3, #50	; 0x32
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	3201      	adds	r2, #1
    1f46:	701a      	strb	r2, [r3, #0]
    1f48:	2332      	movs	r3, #50	; 0x32
    1f4a:	18fb      	adds	r3, r7, r3
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	2b01      	cmp	r3, #1
    1f50:	d9dd      	bls.n	1f0e <tc_init+0x2b2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	1c18      	adds	r0, r3, #0
    1f58:	4b17      	ldr	r3, [pc, #92]	; (1fb8 <tc_init+0x35c>)
    1f5a:	4798      	blx	r3
    1f5c:	1e03      	subs	r3, r0, #0
    1f5e:	d1f9      	bne.n	1f54 <tc_init+0x2f8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1f60:	68bb      	ldr	r3, [r7, #8]
    1f62:	2234      	movs	r2, #52	; 0x34
    1f64:	18ba      	adds	r2, r7, r2
    1f66:	7812      	ldrb	r2, [r2, #0]
    1f68:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	1c18      	adds	r0, r3, #0
    1f70:	4b11      	ldr	r3, [pc, #68]	; (1fb8 <tc_init+0x35c>)
    1f72:	4798      	blx	r3
    1f74:	1e03      	subs	r3, r0, #0
    1f76:	d1f9      	bne.n	1f6c <tc_init+0x310>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	791b      	ldrb	r3, [r3, #4]
    1f7c:	2b04      	cmp	r3, #4
    1f7e:	d01d      	beq.n	1fbc <tc_init+0x360>
    1f80:	2b08      	cmp	r3, #8
    1f82:	d100      	bne.n	1f86 <tc_init+0x32a>
    1f84:	e06f      	b.n	2066 <STACK_SIZE+0x66>
    1f86:	2b00      	cmp	r3, #0
    1f88:	d04a      	beq.n	2020 <STACK_SIZE+0x20>
    1f8a:	e08f      	b.n	20ac <STACK_SIZE+0xac>
    1f8c:	00001c0d 	.word	0x00001c0d
    1f90:	00003fb0 	.word	0x00003fb0
    1f94:	00003da5 	.word	0x00003da5
    1f98:	00003fb8 	.word	0x00003fb8
    1f9c:	2000047c 	.word	0x2000047c
    1fa0:	00001bbd 	.word	0x00001bbd
    1fa4:	00003af9 	.word	0x00003af9
    1fa8:	00001b61 	.word	0x00001b61
    1fac:	00001b4d 	.word	0x00001b4d
    1fb0:	0000380d 	.word	0x0000380d
    1fb4:	00003851 	.word	0x00003851
    1fb8:	00001be5 	.word	0x00001be5
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1fbc:	46c0      	nop			; (mov r8, r8)
    1fbe:	68fb      	ldr	r3, [r7, #12]
    1fc0:	1c18      	adds	r0, r3, #0
    1fc2:	4b3d      	ldr	r3, [pc, #244]	; (20b8 <STACK_SIZE+0xb8>)
    1fc4:	4798      	blx	r3
    1fc6:	1e03      	subs	r3, r0, #0
    1fc8:	d1f9      	bne.n	1fbe <tc_init+0x362>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	2228      	movs	r2, #40	; 0x28
    1fce:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1fd4:	46c0      	nop			; (mov r8, r8)
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	1c18      	adds	r0, r3, #0
    1fda:	4b37      	ldr	r3, [pc, #220]	; (20b8 <STACK_SIZE+0xb8>)
    1fdc:	4798      	blx	r3
    1fde:	1e03      	subs	r3, r0, #0
    1fe0:	d1f9      	bne.n	1fd6 <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	2229      	movs	r2, #41	; 0x29
    1fe6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1fe8:	68bb      	ldr	r3, [r7, #8]
    1fea:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1fec:	46c0      	nop			; (mov r8, r8)
    1fee:	68fb      	ldr	r3, [r7, #12]
    1ff0:	1c18      	adds	r0, r3, #0
    1ff2:	4b31      	ldr	r3, [pc, #196]	; (20b8 <STACK_SIZE+0xb8>)
    1ff4:	4798      	blx	r3
    1ff6:	1e03      	subs	r3, r0, #0
    1ff8:	d1f9      	bne.n	1fee <tc_init+0x392>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	222a      	movs	r2, #42	; 0x2a
    1ffe:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    2000:	68bb      	ldr	r3, [r7, #8]
    2002:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	1c18      	adds	r0, r3, #0
    200a:	4b2b      	ldr	r3, [pc, #172]	; (20b8 <STACK_SIZE+0xb8>)
    200c:	4798      	blx	r3
    200e:	1e03      	subs	r3, r0, #0
    2010:	d1f9      	bne.n	2006 <STACK_SIZE+0x6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	222b      	movs	r2, #43	; 0x2b
    2016:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2018:	68bb      	ldr	r3, [r7, #8]
    201a:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    201c:	2300      	movs	r3, #0
    201e:	e046      	b.n	20ae <STACK_SIZE+0xae>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    2020:	46c0      	nop			; (mov r8, r8)
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	1c18      	adds	r0, r3, #0
    2026:	4b24      	ldr	r3, [pc, #144]	; (20b8 <STACK_SIZE+0xb8>)
    2028:	4798      	blx	r3
    202a:	1e03      	subs	r3, r0, #0
    202c:	d1f9      	bne.n	2022 <STACK_SIZE+0x22>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2032:	68bb      	ldr	r3, [r7, #8]
    2034:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	68fb      	ldr	r3, [r7, #12]
    203a:	1c18      	adds	r0, r3, #0
    203c:	4b1e      	ldr	r3, [pc, #120]	; (20b8 <STACK_SIZE+0xb8>)
    203e:	4798      	blx	r3
    2040:	1e03      	subs	r3, r0, #0
    2042:	d1f9      	bne.n	2038 <STACK_SIZE+0x38>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2048:	68bb      	ldr	r3, [r7, #8]
    204a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    204c:	46c0      	nop			; (mov r8, r8)
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	1c18      	adds	r0, r3, #0
    2052:	4b19      	ldr	r3, [pc, #100]	; (20b8 <STACK_SIZE+0xb8>)
    2054:	4798      	blx	r3
    2056:	1e03      	subs	r3, r0, #0
    2058:	d1f9      	bne.n	204e <STACK_SIZE+0x4e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    205e:	68bb      	ldr	r3, [r7, #8]
    2060:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2062:	2300      	movs	r3, #0
    2064:	e023      	b.n	20ae <STACK_SIZE+0xae>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	68fb      	ldr	r3, [r7, #12]
    206a:	1c18      	adds	r0, r3, #0
    206c:	4b12      	ldr	r3, [pc, #72]	; (20b8 <STACK_SIZE+0xb8>)
    206e:	4798      	blx	r3
    2070:	1e03      	subs	r3, r0, #0
    2072:	d1f9      	bne.n	2068 <STACK_SIZE+0x68>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2078:	68bb      	ldr	r3, [r7, #8]
    207a:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    207c:	46c0      	nop			; (mov r8, r8)
    207e:	68fb      	ldr	r3, [r7, #12]
    2080:	1c18      	adds	r0, r3, #0
    2082:	4b0d      	ldr	r3, [pc, #52]	; (20b8 <STACK_SIZE+0xb8>)
    2084:	4798      	blx	r3
    2086:	1e03      	subs	r3, r0, #0
    2088:	d1f9      	bne.n	207e <STACK_SIZE+0x7e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    208e:	68bb      	ldr	r3, [r7, #8]
    2090:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	68fb      	ldr	r3, [r7, #12]
    2096:	1c18      	adds	r0, r3, #0
    2098:	4b07      	ldr	r3, [pc, #28]	; (20b8 <STACK_SIZE+0xb8>)
    209a:	4798      	blx	r3
    209c:	1e03      	subs	r3, r0, #0
    209e:	d1f9      	bne.n	2094 <STACK_SIZE+0x94>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    20a4:	68bb      	ldr	r3, [r7, #8]
    20a6:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    20a8:	2300      	movs	r3, #0
    20aa:	e000      	b.n	20ae <STACK_SIZE+0xae>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    20ac:	2317      	movs	r3, #23
}
    20ae:	1c18      	adds	r0, r3, #0
    20b0:	46bd      	mov	sp, r7
    20b2:	b00f      	add	sp, #60	; 0x3c
    20b4:	bd90      	pop	{r4, r7, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	00001be5 	.word	0x00001be5

000020bc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    20bc:	b580      	push	{r7, lr}
    20be:	b082      	sub	sp, #8
    20c0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    20c2:	4b0f      	ldr	r3, [pc, #60]	; (2100 <cpu_irq_enter_critical+0x44>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d112      	bne.n	20f0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    20ca:	f3ef 8310 	mrs	r3, PRIMASK
    20ce:	607b      	str	r3, [r7, #4]
  return(result);
    20d0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    20d2:	2b00      	cmp	r3, #0
    20d4:	d109      	bne.n	20ea <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    20d6:	b672      	cpsid	i
    20d8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    20dc:	4b09      	ldr	r3, [pc, #36]	; (2104 <cpu_irq_enter_critical+0x48>)
    20de:	2200      	movs	r2, #0
    20e0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    20e2:	4b09      	ldr	r3, [pc, #36]	; (2108 <cpu_irq_enter_critical+0x4c>)
    20e4:	2201      	movs	r2, #1
    20e6:	701a      	strb	r2, [r3, #0]
    20e8:	e002      	b.n	20f0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    20ea:	4b07      	ldr	r3, [pc, #28]	; (2108 <cpu_irq_enter_critical+0x4c>)
    20ec:	2200      	movs	r2, #0
    20ee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    20f0:	4b03      	ldr	r3, [pc, #12]	; (2100 <cpu_irq_enter_critical+0x44>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	1c5a      	adds	r2, r3, #1
    20f6:	4b02      	ldr	r3, [pc, #8]	; (2100 <cpu_irq_enter_critical+0x44>)
    20f8:	601a      	str	r2, [r3, #0]
}
    20fa:	46bd      	mov	sp, r7
    20fc:	b002      	add	sp, #8
    20fe:	bd80      	pop	{r7, pc}
    2100:	20000044 	.word	0x20000044
    2104:	20000008 	.word	0x20000008
    2108:	20000048 	.word	0x20000048

0000210c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    210c:	b580      	push	{r7, lr}
    210e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2110:	4b0a      	ldr	r3, [pc, #40]	; (213c <cpu_irq_leave_critical+0x30>)
    2112:	681b      	ldr	r3, [r3, #0]
    2114:	1e5a      	subs	r2, r3, #1
    2116:	4b09      	ldr	r3, [pc, #36]	; (213c <cpu_irq_leave_critical+0x30>)
    2118:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    211a:	4b08      	ldr	r3, [pc, #32]	; (213c <cpu_irq_leave_critical+0x30>)
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	2b00      	cmp	r3, #0
    2120:	d10a      	bne.n	2138 <cpu_irq_leave_critical+0x2c>
    2122:	4b07      	ldr	r3, [pc, #28]	; (2140 <cpu_irq_leave_critical+0x34>)
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	b2db      	uxtb	r3, r3
    2128:	2b00      	cmp	r3, #0
    212a:	d005      	beq.n	2138 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <cpu_irq_leave_critical+0x38>)
    212e:	2201      	movs	r2, #1
    2130:	701a      	strb	r2, [r3, #0]
    2132:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2136:	b662      	cpsie	i
	}
}
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	20000044 	.word	0x20000044
    2140:	20000048 	.word	0x20000048
    2144:	20000008 	.word	0x20000008

00002148 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2148:	b580      	push	{r7, lr}
    214a:	b082      	sub	sp, #8
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	2280      	movs	r2, #128	; 0x80
    2154:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	2200      	movs	r2, #0
    215a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	2201      	movs	r2, #1
    2160:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	2200      	movs	r2, #0
    2166:	70da      	strb	r2, [r3, #3]
}
    2168:	46bd      	mov	sp, r7
    216a:	b002      	add	sp, #8
    216c:	bd80      	pop	{r7, pc}
    216e:	46c0      	nop			; (mov r8, r8)

00002170 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2170:	b580      	push	{r7, lr}
    2172:	b084      	sub	sp, #16
    2174:	af00      	add	r7, sp, #0
    2176:	1c02      	adds	r2, r0, #0
    2178:	6039      	str	r1, [r7, #0]
    217a:	1dfb      	adds	r3, r7, #7
    217c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    217e:	230c      	movs	r3, #12
    2180:	18fb      	adds	r3, r7, r3
    2182:	1c18      	adds	r0, r3, #0
    2184:	4b0f      	ldr	r3, [pc, #60]	; (21c4 <port_pin_set_config+0x54>)
    2186:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2188:	230c      	movs	r3, #12
    218a:	18fb      	adds	r3, r7, r3
    218c:	2280      	movs	r2, #128	; 0x80
    218e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2190:	683b      	ldr	r3, [r7, #0]
    2192:	781a      	ldrb	r2, [r3, #0]
    2194:	230c      	movs	r3, #12
    2196:	18fb      	adds	r3, r7, r3
    2198:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    219a:	683b      	ldr	r3, [r7, #0]
    219c:	785a      	ldrb	r2, [r3, #1]
    219e:	230c      	movs	r3, #12
    21a0:	18fb      	adds	r3, r7, r3
    21a2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    21a4:	683b      	ldr	r3, [r7, #0]
    21a6:	789a      	ldrb	r2, [r3, #2]
    21a8:	230c      	movs	r3, #12
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    21ae:	1dfb      	adds	r3, r7, #7
    21b0:	781a      	ldrb	r2, [r3, #0]
    21b2:	230c      	movs	r3, #12
    21b4:	18fb      	adds	r3, r7, r3
    21b6:	1c10      	adds	r0, r2, #0
    21b8:	1c19      	adds	r1, r3, #0
    21ba:	4b03      	ldr	r3, [pc, #12]	; (21c8 <port_pin_set_config+0x58>)
    21bc:	4798      	blx	r3
}
    21be:	46bd      	mov	sp, r7
    21c0:	b004      	add	sp, #16
    21c2:	bd80      	pop	{r7, pc}
    21c4:	00002149 	.word	0x00002149
    21c8:	00003af9 	.word	0x00003af9

000021cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b082      	sub	sp, #8
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	2200      	movs	r2, #0
    21d8:	701a      	strb	r2, [r3, #0]
}
    21da:	46bd      	mov	sp, r7
    21dc:	b002      	add	sp, #8
    21de:	bd80      	pop	{r7, pc}

000021e0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	b08d      	sub	sp, #52	; 0x34
    21e4:	af00      	add	r7, sp, #0
    21e6:	60b8      	str	r0, [r7, #8]
    21e8:	60f9      	str	r1, [r7, #12]
    21ea:	603a      	str	r2, [r7, #0]
    21ec:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    21ee:	2300      	movs	r3, #0
    21f0:	2400      	movs	r4, #0
    21f2:	623b      	str	r3, [r7, #32]
    21f4:	627c      	str	r4, [r7, #36]	; 0x24
    21f6:	2300      	movs	r3, #0
    21f8:	2400      	movs	r4, #0
    21fa:	61bb      	str	r3, [r7, #24]
    21fc:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    21fe:	233f      	movs	r3, #63	; 0x3f
    2200:	62fb      	str	r3, [r7, #44]	; 0x2c
    2202:	e053      	b.n	22ac <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    2204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2206:	3b20      	subs	r3, #32
    2208:	2b00      	cmp	r3, #0
    220a:	db04      	blt.n	2216 <long_division+0x36>
    220c:	2201      	movs	r2, #1
    220e:	409a      	lsls	r2, r3
    2210:	1c13      	adds	r3, r2, #0
    2212:	617b      	str	r3, [r7, #20]
    2214:	e00b      	b.n	222e <long_division+0x4e>
    2216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2218:	2220      	movs	r2, #32
    221a:	1ad3      	subs	r3, r2, r3
    221c:	2201      	movs	r2, #1
    221e:	40da      	lsrs	r2, r3
    2220:	1c13      	adds	r3, r2, #0
    2222:	2100      	movs	r1, #0
    2224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2226:	4091      	lsls	r1, r2
    2228:	1c0a      	adds	r2, r1, #0
    222a:	4313      	orrs	r3, r2
    222c:	617b      	str	r3, [r7, #20]
    222e:	2201      	movs	r2, #1
    2230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2232:	409a      	lsls	r2, r3
    2234:	1c13      	adds	r3, r2, #0
    2236:	613b      	str	r3, [r7, #16]

		r = r << 1;
    2238:	69bb      	ldr	r3, [r7, #24]
    223a:	69fc      	ldr	r4, [r7, #28]
    223c:	18db      	adds	r3, r3, r3
    223e:	4164      	adcs	r4, r4
    2240:	61bb      	str	r3, [r7, #24]
    2242:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    2244:	68bb      	ldr	r3, [r7, #8]
    2246:	693a      	ldr	r2, [r7, #16]
    2248:	401a      	ands	r2, r3
    224a:	1c15      	adds	r5, r2, #0
    224c:	68fb      	ldr	r3, [r7, #12]
    224e:	697a      	ldr	r2, [r7, #20]
    2250:	401a      	ands	r2, r3
    2252:	1c16      	adds	r6, r2, #0
    2254:	1c2b      	adds	r3, r5, #0
    2256:	4333      	orrs	r3, r6
    2258:	d007      	beq.n	226a <long_division+0x8a>
			r |= 0x01;
    225a:	69bb      	ldr	r3, [r7, #24]
    225c:	2201      	movs	r2, #1
    225e:	4313      	orrs	r3, r2
    2260:	61bb      	str	r3, [r7, #24]
    2262:	69fb      	ldr	r3, [r7, #28]
    2264:	2200      	movs	r2, #0
    2266:	4313      	orrs	r3, r2
    2268:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    226a:	687a      	ldr	r2, [r7, #4]
    226c:	69fb      	ldr	r3, [r7, #28]
    226e:	429a      	cmp	r2, r3
    2270:	d819      	bhi.n	22a6 <long_division+0xc6>
    2272:	687a      	ldr	r2, [r7, #4]
    2274:	69fb      	ldr	r3, [r7, #28]
    2276:	429a      	cmp	r2, r3
    2278:	d103      	bne.n	2282 <long_division+0xa2>
    227a:	683a      	ldr	r2, [r7, #0]
    227c:	69bb      	ldr	r3, [r7, #24]
    227e:	429a      	cmp	r2, r3
    2280:	d811      	bhi.n	22a6 <long_division+0xc6>
			r = r - d;
    2282:	69b9      	ldr	r1, [r7, #24]
    2284:	69fa      	ldr	r2, [r7, #28]
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	687c      	ldr	r4, [r7, #4]
    228a:	1ac9      	subs	r1, r1, r3
    228c:	41a2      	sbcs	r2, r4
    228e:	1c0b      	adds	r3, r1, #0
    2290:	1c14      	adds	r4, r2, #0
    2292:	61bb      	str	r3, [r7, #24]
    2294:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    2296:	6a3a      	ldr	r2, [r7, #32]
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	4313      	orrs	r3, r2
    229c:	623b      	str	r3, [r7, #32]
    229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    22a0:	697b      	ldr	r3, [r7, #20]
    22a2:	4313      	orrs	r3, r2
    22a4:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    22a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22a8:	3b01      	subs	r3, #1
    22aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    22ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22ae:	2b00      	cmp	r3, #0
    22b0:	daa8      	bge.n	2204 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    22b2:	6a3b      	ldr	r3, [r7, #32]
    22b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    22b6:	1c18      	adds	r0, r3, #0
    22b8:	1c21      	adds	r1, r4, #0
    22ba:	46bd      	mov	sp, r7
    22bc:	b00d      	add	sp, #52	; 0x34
    22be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000022c0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b086      	sub	sp, #24
    22c4:	af00      	add	r7, sp, #0
    22c6:	60f8      	str	r0, [r7, #12]
    22c8:	60b9      	str	r1, [r7, #8]
    22ca:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    22cc:	2316      	movs	r3, #22
    22ce:	18fb      	adds	r3, r7, r3
    22d0:	2200      	movs	r2, #0
    22d2:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    22d4:	68bb      	ldr	r3, [r7, #8]
    22d6:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    22d8:	68bb      	ldr	r3, [r7, #8]
    22da:	085a      	lsrs	r2, r3, #1
    22dc:	68fb      	ldr	r3, [r7, #12]
    22de:	429a      	cmp	r2, r3
    22e0:	d201      	bcs.n	22e6 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22e2:	2340      	movs	r3, #64	; 0x40
    22e4:	e026      	b.n	2334 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    22e6:	68bb      	ldr	r3, [r7, #8]
    22e8:	085b      	lsrs	r3, r3, #1
    22ea:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    22ec:	e00a      	b.n	2304 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    22ee:	693a      	ldr	r2, [r7, #16]
    22f0:	68fb      	ldr	r3, [r7, #12]
    22f2:	1ad3      	subs	r3, r2, r3
    22f4:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    22f6:	2316      	movs	r3, #22
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	881a      	ldrh	r2, [r3, #0]
    22fc:	2316      	movs	r3, #22
    22fe:	18fb      	adds	r3, r7, r3
    2300:	3201      	adds	r2, #1
    2302:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2304:	693a      	ldr	r2, [r7, #16]
    2306:	68fb      	ldr	r3, [r7, #12]
    2308:	429a      	cmp	r2, r3
    230a:	d2f0      	bcs.n	22ee <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    230c:	2316      	movs	r3, #22
    230e:	18fb      	adds	r3, r7, r3
    2310:	2216      	movs	r2, #22
    2312:	18ba      	adds	r2, r7, r2
    2314:	8812      	ldrh	r2, [r2, #0]
    2316:	3a01      	subs	r2, #1
    2318:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    231a:	2316      	movs	r3, #22
    231c:	18fb      	adds	r3, r7, r3
    231e:	881b      	ldrh	r3, [r3, #0]
    2320:	2bff      	cmp	r3, #255	; 0xff
    2322:	d901      	bls.n	2328 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2324:	2340      	movs	r3, #64	; 0x40
    2326:	e005      	b.n	2334 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	2216      	movs	r2, #22
    232c:	18ba      	adds	r2, r7, r2
    232e:	8812      	ldrh	r2, [r2, #0]
    2330:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2332:	2300      	movs	r3, #0
	}
}
    2334:	1c18      	adds	r0, r3, #0
    2336:	46bd      	mov	sp, r7
    2338:	b006      	add	sp, #24
    233a:	bd80      	pop	{r7, pc}

0000233c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b09d      	sub	sp, #116	; 0x74
    2340:	af00      	add	r7, sp, #0
    2342:	63f8      	str	r0, [r7, #60]	; 0x3c
    2344:	63b9      	str	r1, [r7, #56]	; 0x38
    2346:	637a      	str	r2, [r7, #52]	; 0x34
    2348:	2233      	movs	r2, #51	; 0x33
    234a:	18ba      	adds	r2, r7, r2
    234c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    234e:	2300      	movs	r3, #0
    2350:	2400      	movs	r4, #0
    2352:	65bb      	str	r3, [r7, #88]	; 0x58
    2354:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    2356:	2300      	movs	r3, #0
    2358:	2400      	movs	r4, #0
    235a:	653b      	str	r3, [r7, #80]	; 0x50
    235c:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    235e:	2300      	movs	r3, #0
    2360:	2400      	movs	r4, #0
    2362:	66bb      	str	r3, [r7, #104]	; 0x68
    2364:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    2366:	2300      	movs	r3, #0
    2368:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    236a:	2358      	movs	r3, #88	; 0x58
    236c:	2230      	movs	r2, #48	; 0x30
    236e:	4694      	mov	ip, r2
    2370:	44bc      	add	ip, r7
    2372:	4463      	add	r3, ip
    2374:	781a      	ldrb	r2, [r3, #0]
    2376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2378:	435a      	muls	r2, r3
    237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    237c:	429a      	cmp	r2, r3
    237e:	d901      	bls.n	2384 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2380:	2340      	movs	r3, #64	; 0x40
    2382:	e0c9      	b.n	2518 <_sercom_get_async_baud_val+0x1dc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2384:	2333      	movs	r3, #51	; 0x33
    2386:	18fb      	adds	r3, r7, r3
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d13f      	bne.n	240e <_sercom_get_async_baud_val+0xd2>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    238e:	2358      	movs	r3, #88	; 0x58
    2390:	2230      	movs	r2, #48	; 0x30
    2392:	4694      	mov	ip, r2
    2394:	44bc      	add	ip, r7
    2396:	4463      	add	r3, ip
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	b2db      	uxtb	r3, r3
    239c:	613b      	str	r3, [r7, #16]
    239e:	2300      	movs	r3, #0
    23a0:	617b      	str	r3, [r7, #20]
    23a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23a4:	60bb      	str	r3, [r7, #8]
    23a6:	2300      	movs	r3, #0
    23a8:	60fb      	str	r3, [r7, #12]
    23aa:	4c5d      	ldr	r4, [pc, #372]	; (2520 <_sercom_get_async_baud_val+0x1e4>)
    23ac:	6938      	ldr	r0, [r7, #16]
    23ae:	6979      	ldr	r1, [r7, #20]
    23b0:	68ba      	ldr	r2, [r7, #8]
    23b2:	68fb      	ldr	r3, [r7, #12]
    23b4:	47a0      	blx	r4
    23b6:	1c03      	adds	r3, r0, #0
    23b8:	1c0c      	adds	r4, r1, #0
    23ba:	001b      	movs	r3, r3
    23bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    23be:	2300      	movs	r3, #0
    23c0:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    23c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23c4:	603b      	str	r3, [r7, #0]
    23c6:	2300      	movs	r3, #0
    23c8:	607b      	str	r3, [r7, #4]
    23ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    23cc:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    23ce:	1c18      	adds	r0, r3, #0
    23d0:	1c21      	adds	r1, r4, #0
    23d2:	683a      	ldr	r2, [r7, #0]
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	4c53      	ldr	r4, [pc, #332]	; (2524 <_sercom_get_async_baud_val+0x1e8>)
    23d8:	47a0      	blx	r4
    23da:	1c03      	adds	r3, r0, #0
    23dc:	1c0c      	adds	r4, r1, #0
    23de:	65bb      	str	r3, [r7, #88]	; 0x58
    23e0:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    23e2:	2100      	movs	r1, #0
    23e4:	2201      	movs	r2, #1
    23e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    23e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    23ea:	1ac9      	subs	r1, r1, r3
    23ec:	41a2      	sbcs	r2, r4
    23ee:	1c0b      	adds	r3, r1, #0
    23f0:	1c14      	adds	r4, r2, #0
    23f2:	653b      	str	r3, [r7, #80]	; 0x50
    23f4:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    23f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    23f8:	0c1b      	lsrs	r3, r3, #16
    23fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    23fc:	0416      	lsls	r6, r2, #16
    23fe:	431e      	orrs	r6, r3
    2400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2402:	041d      	lsls	r5, r3, #16
    2404:	0033      	movs	r3, r6
    2406:	66bb      	str	r3, [r7, #104]	; 0x68
    2408:	2300      	movs	r3, #0
    240a:	66fb      	str	r3, [r7, #108]	; 0x6c
    240c:	e07e      	b.n	250c <_sercom_get_async_baud_val+0x1d0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    240e:	2333      	movs	r3, #51	; 0x33
    2410:	18fb      	adds	r3, r7, r3
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b01      	cmp	r3, #1
    2416:	d000      	beq.n	241a <_sercom_get_async_baud_val+0xde>
    2418:	e078      	b.n	250c <_sercom_get_async_baud_val+0x1d0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    241a:	2337      	movs	r3, #55	; 0x37
    241c:	2230      	movs	r2, #48	; 0x30
    241e:	4694      	mov	ip, r2
    2420:	44bc      	add	ip, r7
    2422:	4463      	add	r3, ip
    2424:	2200      	movs	r2, #0
    2426:	701a      	strb	r2, [r3, #0]
    2428:	e051      	b.n	24ce <_sercom_get_async_baud_val+0x192>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    242c:	62bb      	str	r3, [r7, #40]	; 0x28
    242e:	2300      	movs	r3, #0
    2430:	62fb      	str	r3, [r7, #44]	; 0x2c
    2432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    2434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2436:	1c03      	adds	r3, r0, #0
    2438:	0f5b      	lsrs	r3, r3, #29
    243a:	1c0a      	adds	r2, r1, #0
    243c:	00d2      	lsls	r2, r2, #3
    243e:	4313      	orrs	r3, r2
    2440:	64fb      	str	r3, [r7, #76]	; 0x4c
    2442:	1c03      	adds	r3, r0, #0
    2444:	00db      	lsls	r3, r3, #3
    2446:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    2448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    244a:	623b      	str	r3, [r7, #32]
    244c:	2300      	movs	r3, #0
    244e:	627b      	str	r3, [r7, #36]	; 0x24
    2450:	2358      	movs	r3, #88	; 0x58
    2452:	2230      	movs	r2, #48	; 0x30
    2454:	4694      	mov	ip, r2
    2456:	44bc      	add	ip, r7
    2458:	4463      	add	r3, ip
    245a:	781b      	ldrb	r3, [r3, #0]
    245c:	b2db      	uxtb	r3, r3
    245e:	61bb      	str	r3, [r7, #24]
    2460:	2300      	movs	r3, #0
    2462:	61fb      	str	r3, [r7, #28]
    2464:	4c2e      	ldr	r4, [pc, #184]	; (2520 <_sercom_get_async_baud_val+0x1e4>)
    2466:	6a38      	ldr	r0, [r7, #32]
    2468:	6a79      	ldr	r1, [r7, #36]	; 0x24
    246a:	69ba      	ldr	r2, [r7, #24]
    246c:	69fb      	ldr	r3, [r7, #28]
    246e:	47a0      	blx	r4
    2470:	1c03      	adds	r3, r0, #0
    2472:	1c0c      	adds	r4, r1, #0
    2474:	643b      	str	r3, [r7, #64]	; 0x40
    2476:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    2478:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    247a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    247c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    247e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    2480:	1c08      	adds	r0, r1, #0
    2482:	1c11      	adds	r1, r2, #0
    2484:	1c1a      	adds	r2, r3, #0
    2486:	1c23      	adds	r3, r4, #0
    2488:	4c26      	ldr	r4, [pc, #152]	; (2524 <_sercom_get_async_baud_val+0x1e8>)
    248a:	47a0      	blx	r4
    248c:	1c03      	adds	r3, r0, #0
    248e:	1c0c      	adds	r4, r1, #0
    2490:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    2492:	2337      	movs	r3, #55	; 0x37
    2494:	2230      	movs	r2, #48	; 0x30
    2496:	4694      	mov	ip, r2
    2498:	44bc      	add	ip, r7
    249a:	4463      	add	r3, ip
    249c:	781b      	ldrb	r3, [r3, #0]
    249e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    24a0:	1ad3      	subs	r3, r2, r3
    24a2:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    24a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    24a6:	08db      	lsrs	r3, r3, #3
    24a8:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    24aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    24ac:	4a1e      	ldr	r2, [pc, #120]	; (2528 <_sercom_get_async_baud_val+0x1ec>)
    24ae:	4293      	cmp	r3, r2
    24b0:	d800      	bhi.n	24b4 <_sercom_get_async_baud_val+0x178>
				break;
    24b2:	e014      	b.n	24de <_sercom_get_async_baud_val+0x1a2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    24b4:	2337      	movs	r3, #55	; 0x37
    24b6:	2230      	movs	r2, #48	; 0x30
    24b8:	4694      	mov	ip, r2
    24ba:	44bc      	add	ip, r7
    24bc:	4463      	add	r3, ip
    24be:	781a      	ldrb	r2, [r3, #0]
    24c0:	2337      	movs	r3, #55	; 0x37
    24c2:	2130      	movs	r1, #48	; 0x30
    24c4:	468c      	mov	ip, r1
    24c6:	44bc      	add	ip, r7
    24c8:	4463      	add	r3, ip
    24ca:	3201      	adds	r2, #1
    24cc:	701a      	strb	r2, [r3, #0]
    24ce:	2337      	movs	r3, #55	; 0x37
    24d0:	2230      	movs	r2, #48	; 0x30
    24d2:	4694      	mov	ip, r2
    24d4:	44bc      	add	ip, r7
    24d6:	4463      	add	r3, ip
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	2b07      	cmp	r3, #7
    24dc:	d9a5      	bls.n	242a <_sercom_get_async_baud_val+0xee>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    24de:	2337      	movs	r3, #55	; 0x37
    24e0:	2230      	movs	r2, #48	; 0x30
    24e2:	4694      	mov	ip, r2
    24e4:	44bc      	add	ip, r7
    24e6:	4463      	add	r3, ip
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2b08      	cmp	r3, #8
    24ec:	d101      	bne.n	24f2 <_sercom_get_async_baud_val+0x1b6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    24ee:	2340      	movs	r3, #64	; 0x40
    24f0:	e012      	b.n	2518 <_sercom_get_async_baud_val+0x1dc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    24f2:	2337      	movs	r3, #55	; 0x37
    24f4:	2230      	movs	r2, #48	; 0x30
    24f6:	4694      	mov	ip, r2
    24f8:	44bc      	add	ip, r7
    24fa:	4463      	add	r3, ip
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	035b      	lsls	r3, r3, #13
    2500:	1c1a      	adds	r2, r3, #0
    2502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2504:	4313      	orrs	r3, r2
    2506:	66bb      	str	r3, [r7, #104]	; 0x68
    2508:	2300      	movs	r3, #0
    250a:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    250c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    250e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    2510:	b29a      	uxth	r2, r3
    2512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2514:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    2516:	2300      	movs	r3, #0
}
    2518:	1c18      	adds	r0, r3, #0
    251a:	46bd      	mov	sp, r7
    251c:	b01d      	add	sp, #116	; 0x74
    251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2520:	00003d05 	.word	0x00003d05
    2524:	000021e1 	.word	0x000021e1
    2528:	00001fff 	.word	0x00001fff

0000252c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    252c:	b580      	push	{r7, lr}
    252e:	b084      	sub	sp, #16
    2530:	af00      	add	r7, sp, #0
    2532:	1c02      	adds	r2, r0, #0
    2534:	1dfb      	adds	r3, r7, #7
    2536:	701a      	strb	r2, [r3, #0]
    2538:	1dbb      	adds	r3, r7, #6
    253a:	1c0a      	adds	r2, r1, #0
    253c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    253e:	4b1a      	ldr	r3, [pc, #104]	; (25a8 <sercom_set_gclk_generator+0x7c>)
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	2201      	movs	r2, #1
    2544:	4053      	eors	r3, r2
    2546:	b2db      	uxtb	r3, r3
    2548:	2b00      	cmp	r3, #0
    254a:	d103      	bne.n	2554 <sercom_set_gclk_generator+0x28>
    254c:	1dbb      	adds	r3, r7, #6
    254e:	781b      	ldrb	r3, [r3, #0]
    2550:	2b00      	cmp	r3, #0
    2552:	d01b      	beq.n	258c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2554:	230c      	movs	r3, #12
    2556:	18fb      	adds	r3, r7, r3
    2558:	1c18      	adds	r0, r3, #0
    255a:	4b14      	ldr	r3, [pc, #80]	; (25ac <sercom_set_gclk_generator+0x80>)
    255c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    255e:	230c      	movs	r3, #12
    2560:	18fb      	adds	r3, r7, r3
    2562:	1dfa      	adds	r2, r7, #7
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2568:	230c      	movs	r3, #12
    256a:	18fb      	adds	r3, r7, r3
    256c:	200c      	movs	r0, #12
    256e:	1c19      	adds	r1, r3, #0
    2570:	4b0f      	ldr	r3, [pc, #60]	; (25b0 <sercom_set_gclk_generator+0x84>)
    2572:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2574:	200c      	movs	r0, #12
    2576:	4b0f      	ldr	r3, [pc, #60]	; (25b4 <sercom_set_gclk_generator+0x88>)
    2578:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    257a:	4b0b      	ldr	r3, [pc, #44]	; (25a8 <sercom_set_gclk_generator+0x7c>)
    257c:	1dfa      	adds	r2, r7, #7
    257e:	7812      	ldrb	r2, [r2, #0]
    2580:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2582:	4b09      	ldr	r3, [pc, #36]	; (25a8 <sercom_set_gclk_generator+0x7c>)
    2584:	2201      	movs	r2, #1
    2586:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2588:	2300      	movs	r3, #0
    258a:	e008      	b.n	259e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    258c:	4b06      	ldr	r3, [pc, #24]	; (25a8 <sercom_set_gclk_generator+0x7c>)
    258e:	785b      	ldrb	r3, [r3, #1]
    2590:	1dfa      	adds	r2, r7, #7
    2592:	7812      	ldrb	r2, [r2, #0]
    2594:	429a      	cmp	r2, r3
    2596:	d101      	bne.n	259c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    2598:	2300      	movs	r3, #0
    259a:	e000      	b.n	259e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    259c:	231d      	movs	r3, #29
}
    259e:	1c18      	adds	r0, r3, #0
    25a0:	46bd      	mov	sp, r7
    25a2:	b004      	add	sp, #16
    25a4:	bd80      	pop	{r7, pc}
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	2000004c 	.word	0x2000004c
    25ac:	000021cd 	.word	0x000021cd
    25b0:	0000380d 	.word	0x0000380d
    25b4:	00003851 	.word	0x00003851

000025b8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]
    25c0:	1c0a      	adds	r2, r1, #0
    25c2:	1cfb      	adds	r3, r7, #3
    25c4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	4a4d      	ldr	r2, [pc, #308]	; (2700 <_sercom_get_default_pad+0x148>)
    25ca:	4293      	cmp	r3, r2
    25cc:	d03f      	beq.n	264e <_sercom_get_default_pad+0x96>
    25ce:	4a4c      	ldr	r2, [pc, #304]	; (2700 <_sercom_get_default_pad+0x148>)
    25d0:	4293      	cmp	r3, r2
    25d2:	d806      	bhi.n	25e2 <_sercom_get_default_pad+0x2a>
    25d4:	4a4b      	ldr	r2, [pc, #300]	; (2704 <_sercom_get_default_pad+0x14c>)
    25d6:	4293      	cmp	r3, r2
    25d8:	d00f      	beq.n	25fa <_sercom_get_default_pad+0x42>
    25da:	4a4b      	ldr	r2, [pc, #300]	; (2708 <_sercom_get_default_pad+0x150>)
    25dc:	4293      	cmp	r3, r2
    25de:	d021      	beq.n	2624 <_sercom_get_default_pad+0x6c>
    25e0:	e089      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    25e2:	4a4a      	ldr	r2, [pc, #296]	; (270c <_sercom_get_default_pad+0x154>)
    25e4:	4293      	cmp	r3, r2
    25e6:	d100      	bne.n	25ea <_sercom_get_default_pad+0x32>
    25e8:	e05b      	b.n	26a2 <_sercom_get_default_pad+0xea>
    25ea:	4a49      	ldr	r2, [pc, #292]	; (2710 <_sercom_get_default_pad+0x158>)
    25ec:	4293      	cmp	r3, r2
    25ee:	d100      	bne.n	25f2 <_sercom_get_default_pad+0x3a>
    25f0:	e06c      	b.n	26cc <_sercom_get_default_pad+0x114>
    25f2:	4a48      	ldr	r2, [pc, #288]	; (2714 <_sercom_get_default_pad+0x15c>)
    25f4:	4293      	cmp	r3, r2
    25f6:	d03f      	beq.n	2678 <_sercom_get_default_pad+0xc0>
    25f8:	e07d      	b.n	26f6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    25fa:	1cfb      	adds	r3, r7, #3
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	2b01      	cmp	r3, #1
    2600:	d00a      	beq.n	2618 <_sercom_get_default_pad+0x60>
    2602:	dc02      	bgt.n	260a <_sercom_get_default_pad+0x52>
    2604:	2b00      	cmp	r3, #0
    2606:	d005      	beq.n	2614 <_sercom_get_default_pad+0x5c>
    2608:	e075      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    260a:	2b02      	cmp	r3, #2
    260c:	d006      	beq.n	261c <_sercom_get_default_pad+0x64>
    260e:	2b03      	cmp	r3, #3
    2610:	d006      	beq.n	2620 <_sercom_get_default_pad+0x68>
    2612:	e070      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    2614:	4b40      	ldr	r3, [pc, #256]	; (2718 <_sercom_get_default_pad+0x160>)
    2616:	e06f      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2618:	4b40      	ldr	r3, [pc, #256]	; (271c <_sercom_get_default_pad+0x164>)
    261a:	e06d      	b.n	26f8 <_sercom_get_default_pad+0x140>
    261c:	4b40      	ldr	r3, [pc, #256]	; (2720 <_sercom_get_default_pad+0x168>)
    261e:	e06b      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2620:	4b40      	ldr	r3, [pc, #256]	; (2724 <_sercom_get_default_pad+0x16c>)
    2622:	e069      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2624:	1cfb      	adds	r3, r7, #3
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	2b01      	cmp	r3, #1
    262a:	d00a      	beq.n	2642 <_sercom_get_default_pad+0x8a>
    262c:	dc02      	bgt.n	2634 <_sercom_get_default_pad+0x7c>
    262e:	2b00      	cmp	r3, #0
    2630:	d005      	beq.n	263e <_sercom_get_default_pad+0x86>
    2632:	e060      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    2634:	2b02      	cmp	r3, #2
    2636:	d006      	beq.n	2646 <_sercom_get_default_pad+0x8e>
    2638:	2b03      	cmp	r3, #3
    263a:	d006      	beq.n	264a <_sercom_get_default_pad+0x92>
    263c:	e05b      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    263e:	2303      	movs	r3, #3
    2640:	e05a      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2642:	4b39      	ldr	r3, [pc, #228]	; (2728 <_sercom_get_default_pad+0x170>)
    2644:	e058      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2646:	4b39      	ldr	r3, [pc, #228]	; (272c <_sercom_get_default_pad+0x174>)
    2648:	e056      	b.n	26f8 <_sercom_get_default_pad+0x140>
    264a:	4b39      	ldr	r3, [pc, #228]	; (2730 <_sercom_get_default_pad+0x178>)
    264c:	e054      	b.n	26f8 <_sercom_get_default_pad+0x140>
    264e:	1cfb      	adds	r3, r7, #3
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	2b01      	cmp	r3, #1
    2654:	d00a      	beq.n	266c <_sercom_get_default_pad+0xb4>
    2656:	dc02      	bgt.n	265e <_sercom_get_default_pad+0xa6>
    2658:	2b00      	cmp	r3, #0
    265a:	d005      	beq.n	2668 <_sercom_get_default_pad+0xb0>
    265c:	e04b      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    265e:	2b02      	cmp	r3, #2
    2660:	d006      	beq.n	2670 <_sercom_get_default_pad+0xb8>
    2662:	2b03      	cmp	r3, #3
    2664:	d006      	beq.n	2674 <_sercom_get_default_pad+0xbc>
    2666:	e046      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    2668:	4b32      	ldr	r3, [pc, #200]	; (2734 <_sercom_get_default_pad+0x17c>)
    266a:	e045      	b.n	26f8 <_sercom_get_default_pad+0x140>
    266c:	4b32      	ldr	r3, [pc, #200]	; (2738 <_sercom_get_default_pad+0x180>)
    266e:	e043      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2670:	4b32      	ldr	r3, [pc, #200]	; (273c <_sercom_get_default_pad+0x184>)
    2672:	e041      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2674:	4b32      	ldr	r3, [pc, #200]	; (2740 <_sercom_get_default_pad+0x188>)
    2676:	e03f      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2678:	1cfb      	adds	r3, r7, #3
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	2b01      	cmp	r3, #1
    267e:	d00a      	beq.n	2696 <_sercom_get_default_pad+0xde>
    2680:	dc02      	bgt.n	2688 <_sercom_get_default_pad+0xd0>
    2682:	2b00      	cmp	r3, #0
    2684:	d005      	beq.n	2692 <_sercom_get_default_pad+0xda>
    2686:	e036      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    2688:	2b02      	cmp	r3, #2
    268a:	d006      	beq.n	269a <_sercom_get_default_pad+0xe2>
    268c:	2b03      	cmp	r3, #3
    268e:	d006      	beq.n	269e <_sercom_get_default_pad+0xe6>
    2690:	e031      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    2692:	4b2c      	ldr	r3, [pc, #176]	; (2744 <_sercom_get_default_pad+0x18c>)
    2694:	e030      	b.n	26f8 <_sercom_get_default_pad+0x140>
    2696:	4b2c      	ldr	r3, [pc, #176]	; (2748 <_sercom_get_default_pad+0x190>)
    2698:	e02e      	b.n	26f8 <_sercom_get_default_pad+0x140>
    269a:	4b2c      	ldr	r3, [pc, #176]	; (274c <_sercom_get_default_pad+0x194>)
    269c:	e02c      	b.n	26f8 <_sercom_get_default_pad+0x140>
    269e:	4b2c      	ldr	r3, [pc, #176]	; (2750 <_sercom_get_default_pad+0x198>)
    26a0:	e02a      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26a2:	1cfb      	adds	r3, r7, #3
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	2b01      	cmp	r3, #1
    26a8:	d00a      	beq.n	26c0 <_sercom_get_default_pad+0x108>
    26aa:	dc02      	bgt.n	26b2 <_sercom_get_default_pad+0xfa>
    26ac:	2b00      	cmp	r3, #0
    26ae:	d005      	beq.n	26bc <_sercom_get_default_pad+0x104>
    26b0:	e021      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    26b2:	2b02      	cmp	r3, #2
    26b4:	d006      	beq.n	26c4 <_sercom_get_default_pad+0x10c>
    26b6:	2b03      	cmp	r3, #3
    26b8:	d006      	beq.n	26c8 <_sercom_get_default_pad+0x110>
    26ba:	e01c      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    26bc:	4b25      	ldr	r3, [pc, #148]	; (2754 <_sercom_get_default_pad+0x19c>)
    26be:	e01b      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26c0:	4b25      	ldr	r3, [pc, #148]	; (2758 <_sercom_get_default_pad+0x1a0>)
    26c2:	e019      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26c4:	4b25      	ldr	r3, [pc, #148]	; (275c <_sercom_get_default_pad+0x1a4>)
    26c6:	e017      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26c8:	4b25      	ldr	r3, [pc, #148]	; (2760 <_sercom_get_default_pad+0x1a8>)
    26ca:	e015      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26cc:	1cfb      	adds	r3, r7, #3
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	2b01      	cmp	r3, #1
    26d2:	d00a      	beq.n	26ea <_sercom_get_default_pad+0x132>
    26d4:	dc02      	bgt.n	26dc <_sercom_get_default_pad+0x124>
    26d6:	2b00      	cmp	r3, #0
    26d8:	d005      	beq.n	26e6 <_sercom_get_default_pad+0x12e>
    26da:	e00c      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    26dc:	2b02      	cmp	r3, #2
    26de:	d006      	beq.n	26ee <_sercom_get_default_pad+0x136>
    26e0:	2b03      	cmp	r3, #3
    26e2:	d006      	beq.n	26f2 <_sercom_get_default_pad+0x13a>
    26e4:	e007      	b.n	26f6 <_sercom_get_default_pad+0x13e>
    26e6:	4b1f      	ldr	r3, [pc, #124]	; (2764 <_sercom_get_default_pad+0x1ac>)
    26e8:	e006      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26ea:	4b1f      	ldr	r3, [pc, #124]	; (2768 <_sercom_get_default_pad+0x1b0>)
    26ec:	e004      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26ee:	4b1f      	ldr	r3, [pc, #124]	; (276c <_sercom_get_default_pad+0x1b4>)
    26f0:	e002      	b.n	26f8 <_sercom_get_default_pad+0x140>
    26f2:	4b1f      	ldr	r3, [pc, #124]	; (2770 <_sercom_get_default_pad+0x1b8>)
    26f4:	e000      	b.n	26f8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    26f6:	2300      	movs	r3, #0
}
    26f8:	1c18      	adds	r0, r3, #0
    26fa:	46bd      	mov	sp, r7
    26fc:	b002      	add	sp, #8
    26fe:	bd80      	pop	{r7, pc}
    2700:	42001000 	.word	0x42001000
    2704:	42000800 	.word	0x42000800
    2708:	42000c00 	.word	0x42000c00
    270c:	42001800 	.word	0x42001800
    2710:	42001c00 	.word	0x42001c00
    2714:	42001400 	.word	0x42001400
    2718:	00040003 	.word	0x00040003
    271c:	00050003 	.word	0x00050003
    2720:	00060003 	.word	0x00060003
    2724:	00070003 	.word	0x00070003
    2728:	00010003 	.word	0x00010003
    272c:	001e0003 	.word	0x001e0003
    2730:	001f0003 	.word	0x001f0003
    2734:	00080003 	.word	0x00080003
    2738:	00090003 	.word	0x00090003
    273c:	000a0003 	.word	0x000a0003
    2740:	000b0003 	.word	0x000b0003
    2744:	00100003 	.word	0x00100003
    2748:	00110003 	.word	0x00110003
    274c:	00120003 	.word	0x00120003
    2750:	00130003 	.word	0x00130003
    2754:	000c0003 	.word	0x000c0003
    2758:	000d0003 	.word	0x000d0003
    275c:	000e0003 	.word	0x000e0003
    2760:	000f0003 	.word	0x000f0003
    2764:	00160003 	.word	0x00160003
    2768:	00170003 	.word	0x00170003
    276c:	00180003 	.word	0x00180003
    2770:	00190003 	.word	0x00190003

00002774 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2774:	b590      	push	{r4, r7, lr}
    2776:	b08b      	sub	sp, #44	; 0x2c
    2778:	af00      	add	r7, sp, #0
    277a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    277c:	230c      	movs	r3, #12
    277e:	18fb      	adds	r3, r7, r3
    2780:	4a0e      	ldr	r2, [pc, #56]	; (27bc <_sercom_get_sercom_inst_index+0x48>)
    2782:	ca13      	ldmia	r2!, {r0, r1, r4}
    2784:	c313      	stmia	r3!, {r0, r1, r4}
    2786:	ca13      	ldmia	r2!, {r0, r1, r4}
    2788:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    278a:	2300      	movs	r3, #0
    278c:	627b      	str	r3, [r7, #36]	; 0x24
    278e:	e00d      	b.n	27ac <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	220c      	movs	r2, #12
    2794:	18ba      	adds	r2, r7, r2
    2796:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2798:	0089      	lsls	r1, r1, #2
    279a:	588a      	ldr	r2, [r1, r2]
    279c:	4293      	cmp	r3, r2
    279e:	d102      	bne.n	27a6 <_sercom_get_sercom_inst_index+0x32>
			return i;
    27a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27a2:	b2db      	uxtb	r3, r3
    27a4:	e006      	b.n	27b4 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    27a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27a8:	3301      	adds	r3, #1
    27aa:	627b      	str	r3, [r7, #36]	; 0x24
    27ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27ae:	2b05      	cmp	r3, #5
    27b0:	d9ee      	bls.n	2790 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    27b2:	2300      	movs	r3, #0
}
    27b4:	1c18      	adds	r0, r3, #0
    27b6:	46bd      	mov	sp, r7
    27b8:	b00b      	add	sp, #44	; 0x2c
    27ba:	bd90      	pop	{r4, r7, pc}
    27bc:	00003fc8 	.word	0x00003fc8

000027c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	b082      	sub	sp, #8
    27c4:	af00      	add	r7, sp, #0
    27c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	2200      	movs	r2, #0
    27cc:	701a      	strb	r2, [r3, #0]
}
    27ce:	46bd      	mov	sp, r7
    27d0:	b002      	add	sp, #8
    27d2:	bd80      	pop	{r7, pc}

000027d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b082      	sub	sp, #8
    27d8:	af00      	add	r7, sp, #0
    27da:	1c02      	adds	r2, r0, #0
    27dc:	6039      	str	r1, [r7, #0]
    27de:	1dfb      	adds	r3, r7, #7
    27e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    27e2:	1dfb      	adds	r3, r7, #7
    27e4:	781b      	ldrb	r3, [r3, #0]
    27e6:	2b01      	cmp	r3, #1
    27e8:	d00a      	beq.n	2800 <system_apb_clock_set_mask+0x2c>
    27ea:	2b02      	cmp	r3, #2
    27ec:	d00f      	beq.n	280e <system_apb_clock_set_mask+0x3a>
    27ee:	2b00      	cmp	r3, #0
    27f0:	d114      	bne.n	281c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    27f2:	4b0e      	ldr	r3, [pc, #56]	; (282c <system_apb_clock_set_mask+0x58>)
    27f4:	4a0d      	ldr	r2, [pc, #52]	; (282c <system_apb_clock_set_mask+0x58>)
    27f6:	6991      	ldr	r1, [r2, #24]
    27f8:	683a      	ldr	r2, [r7, #0]
    27fa:	430a      	orrs	r2, r1
    27fc:	619a      	str	r2, [r3, #24]
			break;
    27fe:	e00f      	b.n	2820 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2800:	4b0a      	ldr	r3, [pc, #40]	; (282c <system_apb_clock_set_mask+0x58>)
    2802:	4a0a      	ldr	r2, [pc, #40]	; (282c <system_apb_clock_set_mask+0x58>)
    2804:	69d1      	ldr	r1, [r2, #28]
    2806:	683a      	ldr	r2, [r7, #0]
    2808:	430a      	orrs	r2, r1
    280a:	61da      	str	r2, [r3, #28]
			break;
    280c:	e008      	b.n	2820 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    280e:	4b07      	ldr	r3, [pc, #28]	; (282c <system_apb_clock_set_mask+0x58>)
    2810:	4a06      	ldr	r2, [pc, #24]	; (282c <system_apb_clock_set_mask+0x58>)
    2812:	6a11      	ldr	r1, [r2, #32]
    2814:	683a      	ldr	r2, [r7, #0]
    2816:	430a      	orrs	r2, r1
    2818:	621a      	str	r2, [r3, #32]
			break;
    281a:	e001      	b.n	2820 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    281c:	2317      	movs	r3, #23
    281e:	e000      	b.n	2822 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2820:	2300      	movs	r3, #0
}
    2822:	1c18      	adds	r0, r3, #0
    2824:	46bd      	mov	sp, r7
    2826:	b002      	add	sp, #8
    2828:	bd80      	pop	{r7, pc}
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	40000400 	.word	0x40000400

00002830 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2830:	b580      	push	{r7, lr}
    2832:	b082      	sub	sp, #8
    2834:	af00      	add	r7, sp, #0
    2836:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	2280      	movs	r2, #128	; 0x80
    283c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	2200      	movs	r2, #0
    2842:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	2201      	movs	r2, #1
    2848:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	2200      	movs	r2, #0
    284e:	70da      	strb	r2, [r3, #3]
}
    2850:	46bd      	mov	sp, r7
    2852:	b002      	add	sp, #8
    2854:	bd80      	pop	{r7, pc}
    2856:	46c0      	nop			; (mov r8, r8)

00002858 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2858:	b580      	push	{r7, lr}
    285a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <system_is_debugger_present+0x1c>)
    285e:	789b      	ldrb	r3, [r3, #2]
    2860:	b2db      	uxtb	r3, r3
    2862:	1c1a      	adds	r2, r3, #0
    2864:	2302      	movs	r3, #2
    2866:	4013      	ands	r3, r2
    2868:	1e5a      	subs	r2, r3, #1
    286a:	4193      	sbcs	r3, r2
    286c:	b2db      	uxtb	r3, r3
}
    286e:	1c18      	adds	r0, r3, #0
    2870:	46bd      	mov	sp, r7
    2872:	bd80      	pop	{r7, pc}
    2874:	41002000 	.word	0x41002000

00002878 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2878:	b580      	push	{r7, lr}
    287a:	b084      	sub	sp, #16
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2886:	68fb      	ldr	r3, [r7, #12]
    2888:	8a1b      	ldrh	r3, [r3, #16]
    288a:	b29b      	uxth	r3, r3
    288c:	1c1a      	adds	r2, r3, #0
    288e:	2380      	movs	r3, #128	; 0x80
    2890:	021b      	lsls	r3, r3, #8
    2892:	4013      	ands	r3, r2
    2894:	1e5a      	subs	r2, r3, #1
    2896:	4193      	sbcs	r3, r2
    2898:	b2db      	uxtb	r3, r3
#endif
}
    289a:	1c18      	adds	r0, r3, #0
    289c:	46bd      	mov	sp, r7
    289e:	b004      	add	sp, #16
    28a0:	bd80      	pop	{r7, pc}
    28a2:	46c0      	nop			; (mov r8, r8)

000028a4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b082      	sub	sp, #8
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    28ac:	46c0      	nop			; (mov r8, r8)
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	1c18      	adds	r0, r3, #0
    28b2:	4b03      	ldr	r3, [pc, #12]	; (28c0 <_usart_wait_for_sync+0x1c>)
    28b4:	4798      	blx	r3
    28b6:	1e03      	subs	r3, r0, #0
    28b8:	d1f9      	bne.n	28ae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    28ba:	46bd      	mov	sp, r7
    28bc:	b002      	add	sp, #8
    28be:	bd80      	pop	{r7, pc}
    28c0:	00002879 	.word	0x00002879

000028c4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    28c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28c6:	b08d      	sub	sp, #52	; 0x34
    28c8:	af02      	add	r7, sp, #8
    28ca:	6078      	str	r0, [r7, #4]
    28cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	681b      	ldr	r3, [r3, #0]
    28d8:	1c18      	adds	r0, r3, #0
    28da:	4b6e      	ldr	r3, [pc, #440]	; (2a94 <_usart_set_config+0x1d0>)
    28dc:	4798      	blx	r3
    28de:	1c03      	adds	r3, r0, #0
    28e0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    28e2:	697b      	ldr	r3, [r7, #20]
    28e4:	330d      	adds	r3, #13
    28e6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    28e8:	2300      	movs	r3, #0
    28ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    28ec:	2300      	movs	r3, #0
    28ee:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    28f0:	230c      	movs	r3, #12
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	2200      	movs	r2, #0
    28f6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28f8:	230f      	movs	r3, #15
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	2200      	movs	r2, #0
    28fe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2900:	230e      	movs	r3, #14
    2902:	18fb      	adds	r3, r7, r3
    2904:	2210      	movs	r2, #16
    2906:	701a      	strb	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2908:	683b      	ldr	r3, [r7, #0]
    290a:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    290c:	683b      	ldr	r3, [r7, #0]
    290e:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2910:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2912:	683a      	ldr	r2, [r7, #0]
    2914:	7d92      	ldrb	r2, [r2, #22]
    2916:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2918:	4313      	orrs	r3, r2
    291a:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    291c:	231f      	movs	r3, #31
    291e:	18fb      	adds	r3, r7, r3
    2920:	2200      	movs	r2, #0
    2922:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    2924:	683b      	ldr	r3, [r7, #0]
    2926:	685b      	ldr	r3, [r3, #4]
    2928:	2b00      	cmp	r3, #0
    292a:	d01f      	beq.n	296c <_usart_set_config+0xa8>
    292c:	2280      	movs	r2, #128	; 0x80
    292e:	0552      	lsls	r2, r2, #21
    2930:	4293      	cmp	r3, r2
    2932:	d14e      	bne.n	29d2 <_usart_set_config+0x10e>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2934:	683b      	ldr	r3, [r7, #0]
    2936:	7ddb      	ldrb	r3, [r3, #23]
    2938:	2201      	movs	r2, #1
    293a:	4053      	eors	r3, r2
    293c:	b2db      	uxtb	r3, r3
    293e:	2b00      	cmp	r3, #0
    2940:	d013      	beq.n	296a <_usart_set_config+0xa6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2942:	683b      	ldr	r3, [r7, #0]
    2944:	691d      	ldr	r5, [r3, #16]
    2946:	693b      	ldr	r3, [r7, #16]
    2948:	b2db      	uxtb	r3, r3
    294a:	1c18      	adds	r0, r3, #0
    294c:	4b52      	ldr	r3, [pc, #328]	; (2a98 <_usart_set_config+0x1d4>)
    294e:	4798      	blx	r3
    2950:	1c02      	adds	r2, r0, #0
    2952:	231f      	movs	r3, #31
    2954:	18fc      	adds	r4, r7, r3
    2956:	230c      	movs	r3, #12
    2958:	18fb      	adds	r3, r7, r3
    295a:	1c28      	adds	r0, r5, #0
    295c:	1c11      	adds	r1, r2, #0
    295e:	1c1a      	adds	r2, r3, #0
    2960:	4b4e      	ldr	r3, [pc, #312]	; (2a9c <_usart_set_config+0x1d8>)
    2962:	4798      	blx	r3
    2964:	1c03      	adds	r3, r0, #0
    2966:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    2968:	e033      	b.n	29d2 <_usart_set_config+0x10e>
    296a:	e032      	b.n	29d2 <_usart_set_config+0x10e>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    296c:	683b      	ldr	r3, [r7, #0]
    296e:	7ddb      	ldrb	r3, [r3, #23]
    2970:	2b00      	cmp	r3, #0
    2972:	d014      	beq.n	299e <_usart_set_config+0xda>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2974:	683b      	ldr	r3, [r7, #0]
    2976:	6918      	ldr	r0, [r3, #16]
    2978:	683b      	ldr	r3, [r7, #0]
    297a:	6999      	ldr	r1, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    297c:	231f      	movs	r3, #31
    297e:	18fc      	adds	r4, r7, r3
    2980:	230c      	movs	r3, #12
    2982:	18fa      	adds	r2, r7, r3
    2984:	230f      	movs	r3, #15
    2986:	18fb      	adds	r3, r7, r3
    2988:	781d      	ldrb	r5, [r3, #0]
    298a:	230e      	movs	r3, #14
    298c:	18fb      	adds	r3, r7, r3
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	9300      	str	r3, [sp, #0]
    2992:	1c2b      	adds	r3, r5, #0
    2994:	4d42      	ldr	r5, [pc, #264]	; (2aa0 <_usart_set_config+0x1dc>)
    2996:	47a8      	blx	r5
    2998:	1c03      	adds	r3, r0, #0
    299a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    299c:	e018      	b.n	29d0 <_usart_set_config+0x10c>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    299e:	683b      	ldr	r3, [r7, #0]
    29a0:	691e      	ldr	r6, [r3, #16]
    29a2:	693b      	ldr	r3, [r7, #16]
    29a4:	b2db      	uxtb	r3, r3
    29a6:	1c18      	adds	r0, r3, #0
    29a8:	4b3b      	ldr	r3, [pc, #236]	; (2a98 <_usart_set_config+0x1d4>)
    29aa:	4798      	blx	r3
    29ac:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    29ae:	231f      	movs	r3, #31
    29b0:	18fc      	adds	r4, r7, r3
    29b2:	230c      	movs	r3, #12
    29b4:	18fa      	adds	r2, r7, r3
    29b6:	230f      	movs	r3, #15
    29b8:	18fb      	adds	r3, r7, r3
    29ba:	781d      	ldrb	r5, [r3, #0]
    29bc:	230e      	movs	r3, #14
    29be:	18fb      	adds	r3, r7, r3
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	9300      	str	r3, [sp, #0]
    29c4:	1c30      	adds	r0, r6, #0
    29c6:	1c2b      	adds	r3, r5, #0
    29c8:	4d35      	ldr	r5, [pc, #212]	; (2aa0 <_usart_set_config+0x1dc>)
    29ca:	47a8      	blx	r5
    29cc:	1c03      	adds	r3, r0, #0
    29ce:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    29d0:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    29d2:	231f      	movs	r3, #31
    29d4:	18fb      	adds	r3, r7, r3
    29d6:	781b      	ldrb	r3, [r3, #0]
    29d8:	2b00      	cmp	r3, #0
    29da:	d003      	beq.n	29e4 <_usart_set_config+0x120>
		/* Abort */
		return status_code;
    29dc:	231f      	movs	r3, #31
    29de:	18fb      	adds	r3, r7, r3
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	e052      	b.n	2a8a <_usart_set_config+0x1c6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	1c18      	adds	r0, r3, #0
    29e8:	4b2e      	ldr	r3, [pc, #184]	; (2aa4 <_usart_set_config+0x1e0>)
    29ea:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    29ec:	230c      	movs	r3, #12
    29ee:	18fb      	adds	r3, r7, r3
    29f0:	881a      	ldrh	r2, [r3, #0]
    29f2:	69bb      	ldr	r3, [r7, #24]
    29f4:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    29f6:	683b      	ldr	r3, [r7, #0]
    29f8:	685b      	ldr	r3, [r3, #4]
    29fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    29fc:	4313      	orrs	r3, r2
    29fe:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    2a00:	683b      	ldr	r3, [r7, #0]
    2a02:	7ddb      	ldrb	r3, [r3, #23]
    2a04:	2201      	movs	r2, #1
    2a06:	4053      	eors	r3, r2
    2a08:	b2db      	uxtb	r3, r3
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d003      	beq.n	2a16 <_usart_set_config+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a10:	2204      	movs	r2, #4
    2a12:	4313      	orrs	r3, r2
    2a14:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2a16:	683b      	ldr	r3, [r7, #0]
    2a18:	7a9a      	ldrb	r2, [r3, #10]
    2a1a:	683b      	ldr	r3, [r7, #0]
    2a1c:	7adb      	ldrb	r3, [r3, #11]
    2a1e:	4313      	orrs	r3, r2
    2a20:	b2db      	uxtb	r3, r3
    2a22:	1c1a      	adds	r2, r3, #0
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a24:	683b      	ldr	r3, [r7, #0]
    2a26:	7d1b      	ldrb	r3, [r3, #20]
    2a28:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2a2a:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2a2c:	683a      	ldr	r2, [r7, #0]
    2a2e:	7d52      	ldrb	r2, [r2, #21]
    2a30:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2a32:	4313      	orrs	r3, r2
    2a34:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2a36:	683b      	ldr	r3, [r7, #0]
    2a38:	891b      	ldrh	r3, [r3, #8]
    2a3a:	2bff      	cmp	r3, #255	; 0xff
    2a3c:	d00a      	beq.n	2a54 <_usart_set_config+0x190>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a40:	2280      	movs	r2, #128	; 0x80
    2a42:	0452      	lsls	r2, r2, #17
    2a44:	4313      	orrs	r3, r2
    2a46:	627b      	str	r3, [r7, #36]	; 0x24
#endif
		ctrlb |= config->parity;
    2a48:	683b      	ldr	r3, [r7, #0]
    2a4a:	891b      	ldrh	r3, [r3, #8]
    2a4c:	1c1a      	adds	r2, r3, #0
    2a4e:	6a3b      	ldr	r3, [r7, #32]
    2a50:	4313      	orrs	r3, r2
    2a52:	623b      	str	r3, [r7, #32]
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2a54:	683b      	ldr	r3, [r7, #0]
    2a56:	7f1b      	ldrb	r3, [r3, #28]
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d103      	bne.n	2a64 <_usart_set_config+0x1a0>
    2a5c:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <_usart_set_config+0x1e4>)
    2a5e:	4798      	blx	r3
    2a60:	1e03      	subs	r3, r0, #0
    2a62:	d003      	beq.n	2a6c <_usart_set_config+0x1a8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a66:	2280      	movs	r2, #128	; 0x80
    2a68:	4313      	orrs	r3, r2
    2a6a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	1c18      	adds	r0, r3, #0
    2a70:	4b0c      	ldr	r3, [pc, #48]	; (2aa4 <_usart_set_config+0x1e0>)
    2a72:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2a74:	69bb      	ldr	r3, [r7, #24]
    2a76:	6a3a      	ldr	r2, [r7, #32]
    2a78:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	1c18      	adds	r0, r3, #0
    2a7e:	4b09      	ldr	r3, [pc, #36]	; (2aa4 <_usart_set_config+0x1e0>)
    2a80:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2a82:	69bb      	ldr	r3, [r7, #24]
    2a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2a86:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    2a88:	2300      	movs	r3, #0
}
    2a8a:	1c18      	adds	r0, r3, #0
    2a8c:	46bd      	mov	sp, r7
    2a8e:	b00b      	add	sp, #44	; 0x2c
    2a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	00002775 	.word	0x00002775
    2a98:	00003931 	.word	0x00003931
    2a9c:	000022c1 	.word	0x000022c1
    2aa0:	0000233d 	.word	0x0000233d
    2aa4:	000028a5 	.word	0x000028a5
    2aa8:	00002859 	.word	0x00002859

00002aac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2aac:	b590      	push	{r4, r7, lr}
    2aae:	b093      	sub	sp, #76	; 0x4c
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	60f8      	str	r0, [r7, #12]
    2ab4:	60b9      	str	r1, [r7, #8]
    2ab6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    2ab8:	233b      	movs	r3, #59	; 0x3b
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	2200      	movs	r2, #0
    2abe:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	68ba      	ldr	r2, [r7, #8]
    2ac4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ac6:	68fb      	ldr	r3, [r7, #12]
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2acc:	68fb      	ldr	r3, [r7, #12]
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	1c18      	adds	r0, r3, #0
    2ad2:	4b7f      	ldr	r3, [pc, #508]	; (2cd0 <usart_init+0x224>)
    2ad4:	4798      	blx	r3
    2ad6:	1c03      	adds	r3, r0, #0
    2ad8:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2adc:	3302      	adds	r3, #2
    2ade:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ae2:	330d      	adds	r3, #13
    2ae4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ae8:	681b      	ldr	r3, [r3, #0]
    2aea:	2201      	movs	r2, #1
    2aec:	4013      	ands	r3, r2
    2aee:	d001      	beq.n	2af4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2af0:	2305      	movs	r3, #5
    2af2:	e0e8      	b.n	2cc6 <usart_init+0x21a>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2af6:	681b      	ldr	r3, [r3, #0]
    2af8:	2202      	movs	r2, #2
    2afa:	4013      	ands	r3, r2
    2afc:	d001      	beq.n	2b02 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2afe:	231c      	movs	r3, #28
    2b00:	e0e1      	b.n	2cc6 <usart_init+0x21a>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b04:	2201      	movs	r2, #1
    2b06:	409a      	lsls	r2, r3
    2b08:	1c13      	adds	r3, r2, #0
    2b0a:	2002      	movs	r0, #2
    2b0c:	1c19      	adds	r1, r3, #0
    2b0e:	4b71      	ldr	r3, [pc, #452]	; (2cd4 <usart_init+0x228>)
    2b10:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2b12:	2324      	movs	r3, #36	; 0x24
    2b14:	18fb      	adds	r3, r7, r3
    2b16:	1c18      	adds	r0, r3, #0
    2b18:	4b6f      	ldr	r3, [pc, #444]	; (2cd8 <usart_init+0x22c>)
    2b1a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	7f5a      	ldrb	r2, [r3, #29]
    2b20:	2324      	movs	r3, #36	; 0x24
    2b22:	18fb      	adds	r3, r7, r3
    2b24:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b28:	b2da      	uxtb	r2, r3
    2b2a:	2324      	movs	r3, #36	; 0x24
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	1c10      	adds	r0, r2, #0
    2b30:	1c19      	adds	r1, r3, #0
    2b32:	4b6a      	ldr	r3, [pc, #424]	; (2cdc <usart_init+0x230>)
    2b34:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b38:	b2db      	uxtb	r3, r3
    2b3a:	1c18      	adds	r0, r3, #0
    2b3c:	4b68      	ldr	r3, [pc, #416]	; (2ce0 <usart_init+0x234>)
    2b3e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	7f5b      	ldrb	r3, [r3, #29]
    2b44:	1c18      	adds	r0, r3, #0
    2b46:	2100      	movs	r1, #0
    2b48:	4b66      	ldr	r3, [pc, #408]	; (2ce4 <usart_init+0x238>)
    2b4a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	7ada      	ldrb	r2, [r3, #11]
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	7d1a      	ldrb	r2, [r3, #20]
    2b58:	68fb      	ldr	r3, [r7, #12]
    2b5a:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	7d5a      	ldrb	r2, [r3, #21]
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	71da      	strb	r2, [r3, #7]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    2b64:	233b      	movs	r3, #59	; 0x3b
    2b66:	18fc      	adds	r4, r7, r3
    2b68:	68fa      	ldr	r2, [r7, #12]
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	1c10      	adds	r0, r2, #0
    2b6e:	1c19      	adds	r1, r3, #0
    2b70:	4b5d      	ldr	r3, [pc, #372]	; (2ce8 <usart_init+0x23c>)
    2b72:	4798      	blx	r3
    2b74:	1c03      	adds	r3, r0, #0
    2b76:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    2b78:	233b      	movs	r3, #59	; 0x3b
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d003      	beq.n	2b8a <usart_init+0xde>
		return status_code;
    2b82:	233b      	movs	r3, #59	; 0x3b
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	781b      	ldrb	r3, [r3, #0]
    2b88:	e09d      	b.n	2cc6 <usart_init+0x21a>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2b8a:	2320      	movs	r3, #32
    2b8c:	18fb      	adds	r3, r7, r3
    2b8e:	1c18      	adds	r0, r3, #0
    2b90:	4b56      	ldr	r3, [pc, #344]	; (2cec <usart_init+0x240>)
    2b92:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b94:	2320      	movs	r3, #32
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	2200      	movs	r2, #0
    2b9a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b9c:	2320      	movs	r3, #32
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	2200      	movs	r2, #0
    2ba2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	6a1a      	ldr	r2, [r3, #32]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2ba8:	2310      	movs	r3, #16
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2bb2:	2310      	movs	r3, #16
    2bb4:	18fb      	adds	r3, r7, r3
    2bb6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2bbc:	2310      	movs	r3, #16
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2bc6:	2310      	movs	r3, #16
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2bcc:	2347      	movs	r3, #71	; 0x47
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	2200      	movs	r2, #0
    2bd2:	701a      	strb	r2, [r3, #0]
    2bd4:	e02c      	b.n	2c30 <usart_init+0x184>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2bd6:	2347      	movs	r3, #71	; 0x47
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	781a      	ldrb	r2, [r3, #0]
    2bdc:	2310      	movs	r3, #16
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	0092      	lsls	r2, r2, #2
    2be2:	58d3      	ldr	r3, [r2, r3]
    2be4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2be8:	2b00      	cmp	r3, #0
    2bea:	d109      	bne.n	2c00 <usart_init+0x154>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2bec:	68ba      	ldr	r2, [r7, #8]
    2bee:	2347      	movs	r3, #71	; 0x47
    2bf0:	18fb      	adds	r3, r7, r3
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	1c10      	adds	r0, r2, #0
    2bf6:	1c19      	adds	r1, r3, #0
    2bf8:	4b3d      	ldr	r3, [pc, #244]	; (2cf0 <usart_init+0x244>)
    2bfa:	4798      	blx	r3
    2bfc:	1c03      	adds	r3, r0, #0
    2bfe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c02:	3301      	adds	r3, #1
    2c04:	d00d      	beq.n	2c22 <usart_init+0x176>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c08:	b2da      	uxtb	r2, r3
    2c0a:	2320      	movs	r3, #32
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c12:	0c1b      	lsrs	r3, r3, #16
    2c14:	b2da      	uxtb	r2, r3
    2c16:	2320      	movs	r3, #32
    2c18:	18fb      	adds	r3, r7, r3
    2c1a:	1c10      	adds	r0, r2, #0
    2c1c:	1c19      	adds	r1, r3, #0
    2c1e:	4b35      	ldr	r3, [pc, #212]	; (2cf4 <usart_init+0x248>)
    2c20:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2c22:	2347      	movs	r3, #71	; 0x47
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	781a      	ldrb	r2, [r3, #0]
    2c28:	2347      	movs	r3, #71	; 0x47
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	3201      	adds	r2, #1
    2c2e:	701a      	strb	r2, [r3, #0]
    2c30:	2347      	movs	r3, #71	; 0x47
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	781b      	ldrb	r3, [r3, #0]
    2c36:	2b03      	cmp	r3, #3
    2c38:	d9cd      	bls.n	2bd6 <usart_init+0x12a>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2c3a:	2300      	movs	r3, #0
    2c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    2c3e:	e008      	b.n	2c52 <usart_init+0x1a6>
		module->callback[i]            = NULL;
    2c40:	68fb      	ldr	r3, [r7, #12]
    2c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2c44:	3202      	adds	r2, #2
    2c46:	0092      	lsls	r2, r2, #2
    2c48:	2100      	movs	r1, #0
    2c4a:	50d1      	str	r1, [r2, r3]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c4e:	3301      	adds	r3, #1
    2c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    2c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c54:	2b02      	cmp	r3, #2
    2c56:	d9f3      	bls.n	2c40 <usart_init+0x194>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    2c58:	68fb      	ldr	r3, [r7, #12]
    2c5a:	2200      	movs	r2, #0
    2c5c:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	2200      	movs	r2, #0
    2c62:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
    2c64:	68fb      	ldr	r3, [r7, #12]
    2c66:	2200      	movs	r2, #0
    2c68:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
    2c6a:	68fb      	ldr	r3, [r7, #12]
    2c6c:	2200      	movs	r2, #0
    2c6e:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
    2c70:	68fb      	ldr	r3, [r7, #12]
    2c72:	2220      	movs	r2, #32
    2c74:	2100      	movs	r1, #0
    2c76:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	2221      	movs	r2, #33	; 0x21
    2c7c:	2100      	movs	r1, #0
    2c7e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    2c80:	68fb      	ldr	r3, [r7, #12]
    2c82:	2222      	movs	r2, #34	; 0x22
    2c84:	2100      	movs	r1, #0
    2c86:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	2223      	movs	r2, #35	; 0x23
    2c8c:	2100      	movs	r1, #0
    2c8e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2227      	movs	r2, #39	; 0x27
    2c96:	18bc      	adds	r4, r7, r2
    2c98:	1c18      	adds	r0, r3, #0
    2c9a:	4b0d      	ldr	r3, [pc, #52]	; (2cd0 <usart_init+0x224>)
    2c9c:	4798      	blx	r3
    2c9e:	1c03      	adds	r3, r0, #0
    2ca0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2ca2:	2327      	movs	r3, #39	; 0x27
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	781a      	ldrb	r2, [r3, #0]
    2ca8:	4b13      	ldr	r3, [pc, #76]	; (2cf8 <usart_init+0x24c>)
    2caa:	1c10      	adds	r0, r2, #0
    2cac:	1c19      	adds	r1, r3, #0
    2cae:	4b13      	ldr	r3, [pc, #76]	; (2cfc <usart_init+0x250>)
    2cb0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2cb2:	2327      	movs	r3, #39	; 0x27
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	781a      	ldrb	r2, [r3, #0]
    2cb8:	4b11      	ldr	r3, [pc, #68]	; (2d00 <usart_init+0x254>)
    2cba:	0092      	lsls	r2, r2, #2
    2cbc:	68f9      	ldr	r1, [r7, #12]
    2cbe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2cc0:	233b      	movs	r3, #59	; 0x3b
    2cc2:	18fb      	adds	r3, r7, r3
    2cc4:	781b      	ldrb	r3, [r3, #0]
}
    2cc6:	1c18      	adds	r0, r3, #0
    2cc8:	46bd      	mov	sp, r7
    2cca:	b013      	add	sp, #76	; 0x4c
    2ccc:	bd90      	pop	{r4, r7, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	00002775 	.word	0x00002775
    2cd4:	000027d5 	.word	0x000027d5
    2cd8:	000027c1 	.word	0x000027c1
    2cdc:	0000380d 	.word	0x0000380d
    2ce0:	00003851 	.word	0x00003851
    2ce4:	0000252d 	.word	0x0000252d
    2ce8:	000028c5 	.word	0x000028c5
    2cec:	00002831 	.word	0x00002831
    2cf0:	000025b9 	.word	0x000025b9
    2cf4:	00003af9 	.word	0x00003af9
    2cf8:	00000da5 	.word	0x00000da5
    2cfc:	000015cd 	.word	0x000015cd
    2d00:	20000368 	.word	0x20000368

00002d04 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b084      	sub	sp, #16
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
    2d0c:	1c0a      	adds	r2, r1, #0
    2d0e:	1cbb      	adds	r3, r7, #2
    2d10:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	79db      	ldrb	r3, [r3, #7]
    2d1c:	2201      	movs	r2, #1
    2d1e:	4053      	eors	r3, r2
    2d20:	b2db      	uxtb	r3, r3
    2d22:	2b00      	cmp	r3, #0
    2d24:	d001      	beq.n	2d2a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    2d26:	231c      	movs	r3, #28
    2d28:	e017      	b.n	2d5a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	8bdb      	ldrh	r3, [r3, #30]
    2d2e:	b29b      	uxth	r3, r3
    2d30:	2b00      	cmp	r3, #0
    2d32:	d001      	beq.n	2d38 <usart_write_wait+0x34>
		return STATUS_BUSY;
    2d34:	2305      	movs	r3, #5
    2d36:	e010      	b.n	2d5a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	1c18      	adds	r0, r3, #0
    2d3c:	4b09      	ldr	r3, [pc, #36]	; (2d64 <usart_write_wait+0x60>)
    2d3e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2d40:	68fb      	ldr	r3, [r7, #12]
    2d42:	1cba      	adds	r2, r7, #2
    2d44:	8812      	ldrh	r2, [r2, #0]
    2d46:	831a      	strh	r2, [r3, #24]

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2d48:	46c0      	nop			; (mov r8, r8)
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	7b9b      	ldrb	r3, [r3, #14]
    2d4e:	b2db      	uxtb	r3, r3
    2d50:	1c1a      	adds	r2, r3, #0
    2d52:	2302      	movs	r3, #2
    2d54:	4013      	ands	r3, r2
    2d56:	d0f8      	beq.n	2d4a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2d58:	2300      	movs	r3, #0
}
    2d5a:	1c18      	adds	r0, r3, #0
    2d5c:	46bd      	mov	sp, r7
    2d5e:	b004      	add	sp, #16
    2d60:	bd80      	pop	{r7, pc}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	000028a5 	.word	0x000028a5

00002d68 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	b08a      	sub	sp, #40	; 0x28
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	60f8      	str	r0, [r7, #12]
    2d70:	60b9      	str	r1, [r7, #8]
    2d72:	1dbb      	adds	r3, r7, #6
    2d74:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2d76:	1dbb      	adds	r3, r7, #6
    2d78:	881b      	ldrh	r3, [r3, #0]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d101      	bne.n	2d82 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2d7e:	2317      	movs	r3, #23
    2d80:	e07b      	b.n	2e7a <usart_write_buffer_wait+0x112>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	79db      	ldrb	r3, [r3, #7]
    2d86:	2201      	movs	r2, #1
    2d88:	4053      	eors	r3, r2
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d001      	beq.n	2d94 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    2d90:	231c      	movs	r3, #28
    2d92:	e072      	b.n	2e7a <usart_write_buffer_wait+0x112>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d94:	68fb      	ldr	r3, [r7, #12]
    2d96:	681b      	ldr	r3, [r3, #0]
    2d98:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	1c18      	adds	r0, r3, #0
    2d9e:	4b39      	ldr	r3, [pc, #228]	; (2e84 <usart_write_buffer_wait+0x11c>)
    2da0:	4798      	blx	r3

	uint16_t tx_pos = 0;
    2da2:	2326      	movs	r3, #38	; 0x26
    2da4:	18fb      	adds	r3, r7, r3
    2da6:	2200      	movs	r2, #0
    2da8:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    2daa:	e046      	b.n	2e3a <usart_write_buffer_wait+0xd2>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2dac:	2300      	movs	r3, #0
    2dae:	623b      	str	r3, [r7, #32]
    2db0:	e010      	b.n	2dd4 <usart_write_buffer_wait+0x6c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2db2:	697b      	ldr	r3, [r7, #20]
    2db4:	7b9b      	ldrb	r3, [r3, #14]
    2db6:	b2db      	uxtb	r3, r3
    2db8:	1c1a      	adds	r2, r3, #0
    2dba:	2301      	movs	r3, #1
    2dbc:	4013      	ands	r3, r2
    2dbe:	d000      	beq.n	2dc2 <usart_write_buffer_wait+0x5a>
				break;
    2dc0:	e00c      	b.n	2ddc <usart_write_buffer_wait+0x74>
			} else if (i == USART_TIMEOUT) {
    2dc2:	6a3b      	ldr	r3, [r7, #32]
    2dc4:	4a30      	ldr	r2, [pc, #192]	; (2e88 <usart_write_buffer_wait+0x120>)
    2dc6:	4293      	cmp	r3, r2
    2dc8:	d101      	bne.n	2dce <usart_write_buffer_wait+0x66>
				return STATUS_ERR_TIMEOUT;
    2dca:	2312      	movs	r3, #18
    2dcc:	e055      	b.n	2e7a <usart_write_buffer_wait+0x112>

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2dce:	6a3b      	ldr	r3, [r7, #32]
    2dd0:	3301      	adds	r3, #1
    2dd2:	623b      	str	r3, [r7, #32]
    2dd4:	6a3b      	ldr	r3, [r7, #32]
    2dd6:	4a2c      	ldr	r2, [pc, #176]	; (2e88 <usart_write_buffer_wait+0x120>)
    2dd8:	4293      	cmp	r3, r2
    2dda:	d9ea      	bls.n	2db2 <usart_write_buffer_wait+0x4a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2ddc:	2326      	movs	r3, #38	; 0x26
    2dde:	18fb      	adds	r3, r7, r3
    2de0:	881b      	ldrh	r3, [r3, #0]
    2de2:	2226      	movs	r2, #38	; 0x26
    2de4:	18ba      	adds	r2, r7, r2
    2de6:	1c59      	adds	r1, r3, #1
    2de8:	8011      	strh	r1, [r2, #0]
    2dea:	1c1a      	adds	r2, r3, #0
    2dec:	68bb      	ldr	r3, [r7, #8]
    2dee:	189b      	adds	r3, r3, r2
    2df0:	781a      	ldrb	r2, [r3, #0]
    2df2:	231e      	movs	r3, #30
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2df8:	68fb      	ldr	r3, [r7, #12]
    2dfa:	795b      	ldrb	r3, [r3, #5]
    2dfc:	2b01      	cmp	r3, #1
    2dfe:	d114      	bne.n	2e2a <usart_write_buffer_wait+0xc2>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2e00:	2326      	movs	r3, #38	; 0x26
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	881b      	ldrh	r3, [r3, #0]
    2e06:	2226      	movs	r2, #38	; 0x26
    2e08:	18ba      	adds	r2, r7, r2
    2e0a:	1c59      	adds	r1, r3, #1
    2e0c:	8011      	strh	r1, [r2, #0]
    2e0e:	1c1a      	adds	r2, r3, #0
    2e10:	68bb      	ldr	r3, [r7, #8]
    2e12:	189b      	adds	r3, r3, r2
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	021b      	lsls	r3, r3, #8
    2e18:	b29a      	uxth	r2, r3
    2e1a:	231e      	movs	r3, #30
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	881b      	ldrh	r3, [r3, #0]
    2e20:	4313      	orrs	r3, r2
    2e22:	b29a      	uxth	r2, r3
    2e24:	231e      	movs	r3, #30
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    2e2a:	68fa      	ldr	r2, [r7, #12]
    2e2c:	231e      	movs	r3, #30
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	881b      	ldrh	r3, [r3, #0]
    2e32:	1c10      	adds	r0, r2, #0
    2e34:	1c19      	adds	r1, r3, #0
    2e36:	4b15      	ldr	r3, [pc, #84]	; (2e8c <usart_write_buffer_wait+0x124>)
    2e38:	4798      	blx	r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    2e3a:	1dbb      	adds	r3, r7, #6
    2e3c:	881b      	ldrh	r3, [r3, #0]
    2e3e:	1dba      	adds	r2, r7, #6
    2e40:	1e59      	subs	r1, r3, #1
    2e42:	8011      	strh	r1, [r2, #0]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d1b1      	bne.n	2dac <usart_write_buffer_wait+0x44>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2e48:	2300      	movs	r3, #0
    2e4a:	61bb      	str	r3, [r7, #24]
    2e4c:	e010      	b.n	2e70 <usart_write_buffer_wait+0x108>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2e4e:	697b      	ldr	r3, [r7, #20]
    2e50:	7b9b      	ldrb	r3, [r3, #14]
    2e52:	b2db      	uxtb	r3, r3
    2e54:	1c1a      	adds	r2, r3, #0
    2e56:	2302      	movs	r3, #2
    2e58:	4013      	ands	r3, r2
    2e5a:	d000      	beq.n	2e5e <usart_write_buffer_wait+0xf6>
			break;
    2e5c:	e00c      	b.n	2e78 <usart_write_buffer_wait+0x110>
		} else if (i == USART_TIMEOUT) {
    2e5e:	69bb      	ldr	r3, [r7, #24]
    2e60:	4a09      	ldr	r2, [pc, #36]	; (2e88 <usart_write_buffer_wait+0x120>)
    2e62:	4293      	cmp	r3, r2
    2e64:	d101      	bne.n	2e6a <usart_write_buffer_wait+0x102>
			return STATUS_ERR_TIMEOUT;
    2e66:	2312      	movs	r3, #18
    2e68:	e007      	b.n	2e7a <usart_write_buffer_wait+0x112>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2e6a:	69bb      	ldr	r3, [r7, #24]
    2e6c:	3301      	adds	r3, #1
    2e6e:	61bb      	str	r3, [r7, #24]
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	4a05      	ldr	r2, [pc, #20]	; (2e88 <usart_write_buffer_wait+0x120>)
    2e74:	4293      	cmp	r3, r2
    2e76:	d9ea      	bls.n	2e4e <usart_write_buffer_wait+0xe6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    2e78:	2300      	movs	r3, #0
}
    2e7a:	1c18      	adds	r0, r3, #0
    2e7c:	46bd      	mov	sp, r7
    2e7e:	b00a      	add	sp, #40	; 0x28
    2e80:	bd80      	pop	{r7, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	000028a5 	.word	0x000028a5
    2e88:	0000ffff 	.word	0x0000ffff
    2e8c:	00002d05 	.word	0x00002d05

00002e90 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	2201      	movs	r2, #1
    2e9c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	2200      	movs	r2, #0
    2ea2:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	2206      	movs	r2, #6
    2ea8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	2200      	movs	r2, #0
    2eae:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	2200      	movs	r2, #0
    2eb4:	725a      	strb	r2, [r3, #9]
}
    2eb6:	46bd      	mov	sp, r7
    2eb8:	b002      	add	sp, #8
    2eba:	bd80      	pop	{r7, pc}

00002ebc <system_clock_source_xosc_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b082      	sub	sp, #8
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	2200      	movs	r2, #0
    2ec8:	701a      	strb	r2, [r3, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	220e      	movs	r2, #14
    2ece:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control = true;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	2201      	movs	r2, #1
    2ed4:	709a      	strb	r2, [r3, #2]
	config->frequency         = 12000000UL;
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	4a05      	ldr	r2, [pc, #20]	; (2ef0 <system_clock_source_xosc_get_config_defaults+0x34>)
    2eda:	605a      	str	r2, [r3, #4]
	config->run_in_standby    = false;
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	2200      	movs	r2, #0
    2ee0:	721a      	strb	r2, [r3, #8]
	config->on_demand         = true;
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	2201      	movs	r2, #1
    2ee6:	725a      	strb	r2, [r3, #9]
}
    2ee8:	46bd      	mov	sp, r7
    2eea:	b002      	add	sp, #8
    2eec:	bd80      	pop	{r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	00b71b00 	.word	0x00b71b00

00002ef4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	2203      	movs	r2, #3
    2f00:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	2200      	movs	r2, #0
    2f06:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	2201      	movs	r2, #1
    2f0c:	709a      	strb	r2, [r3, #2]
}
    2f0e:	46bd      	mov	sp, r7
    2f10:	b002      	add	sp, #8
    2f12:	bd80      	pop	{r7, pc}

00002f14 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b082      	sub	sp, #8
    2f18:	af00      	add	r7, sp, #0
    2f1a:	1c02      	adds	r2, r0, #0
    2f1c:	1dfb      	adds	r3, r7, #7
    2f1e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2f20:	4a03      	ldr	r2, [pc, #12]	; (2f30 <system_cpu_clock_set_divider+0x1c>)
    2f22:	1dfb      	adds	r3, r7, #7
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	7213      	strb	r3, [r2, #8]
}
    2f28:	46bd      	mov	sp, r7
    2f2a:	b002      	add	sp, #8
    2f2c:	bd80      	pop	{r7, pc}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	40000400 	.word	0x40000400

00002f34 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    2f34:	b580      	push	{r7, lr}
    2f36:	b082      	sub	sp, #8
    2f38:	af00      	add	r7, sp, #0
    2f3a:	1c02      	adds	r2, r0, #0
    2f3c:	1dfb      	adds	r3, r7, #7
    2f3e:	701a      	strb	r2, [r3, #0]
    2f40:	1dbb      	adds	r3, r7, #6
    2f42:	1c0a      	adds	r2, r1, #0
    2f44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2f46:	1dfb      	adds	r3, r7, #7
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	2b01      	cmp	r3, #1
    2f4c:	d008      	beq.n	2f60 <system_apb_clock_set_divider+0x2c>
    2f4e:	2b02      	cmp	r3, #2
    2f50:	d00b      	beq.n	2f6a <system_apb_clock_set_divider+0x36>
    2f52:	2b00      	cmp	r3, #0
    2f54:	d10e      	bne.n	2f74 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2f56:	4a0b      	ldr	r2, [pc, #44]	; (2f84 <system_apb_clock_set_divider+0x50>)
    2f58:	1dbb      	adds	r3, r7, #6
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	7253      	strb	r3, [r2, #9]
			break;
    2f5e:	e00b      	b.n	2f78 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2f60:	4a08      	ldr	r2, [pc, #32]	; (2f84 <system_apb_clock_set_divider+0x50>)
    2f62:	1dbb      	adds	r3, r7, #6
    2f64:	781b      	ldrb	r3, [r3, #0]
    2f66:	7293      	strb	r3, [r2, #10]
			break;
    2f68:	e006      	b.n	2f78 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2f6a:	4a06      	ldr	r2, [pc, #24]	; (2f84 <system_apb_clock_set_divider+0x50>)
    2f6c:	1dbb      	adds	r3, r7, #6
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	72d3      	strb	r3, [r2, #11]
			break;
    2f72:	e001      	b.n	2f78 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2f74:	2317      	movs	r3, #23
    2f76:	e000      	b.n	2f7a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2f78:	2300      	movs	r3, #0
}
    2f7a:	1c18      	adds	r0, r3, #0
    2f7c:	46bd      	mov	sp, r7
    2f7e:	b002      	add	sp, #8
    2f80:	bd80      	pop	{r7, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	40000400 	.word	0x40000400

00002f88 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b082      	sub	sp, #8
    2f8c:	af00      	add	r7, sp, #0
    2f8e:	1c02      	adds	r2, r0, #0
    2f90:	1dfb      	adds	r3, r7, #7
    2f92:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2f94:	4b08      	ldr	r3, [pc, #32]	; (2fb8 <system_flash_set_waitstates+0x30>)
    2f96:	1dfa      	adds	r2, r7, #7
    2f98:	7812      	ldrb	r2, [r2, #0]
    2f9a:	210f      	movs	r1, #15
    2f9c:	400a      	ands	r2, r1
    2f9e:	b2d2      	uxtb	r2, r2
    2fa0:	210f      	movs	r1, #15
    2fa2:	400a      	ands	r2, r1
    2fa4:	0052      	lsls	r2, r2, #1
    2fa6:	6859      	ldr	r1, [r3, #4]
    2fa8:	201e      	movs	r0, #30
    2faa:	4381      	bics	r1, r0
    2fac:	430a      	orrs	r2, r1
    2fae:	605a      	str	r2, [r3, #4]
}
    2fb0:	46bd      	mov	sp, r7
    2fb2:	b002      	add	sp, #8
    2fb4:	bd80      	pop	{r7, pc}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	41004000 	.word	0x41004000

00002fbc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2fbc:	b580      	push	{r7, lr}
    2fbe:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fc0:	46c0      	nop			; (mov r8, r8)
    2fc2:	4b03      	ldr	r3, [pc, #12]	; (2fd0 <_system_dfll_wait_for_sync+0x14>)
    2fc4:	68db      	ldr	r3, [r3, #12]
    2fc6:	2210      	movs	r2, #16
    2fc8:	4013      	ands	r3, r2
    2fca:	d0fa      	beq.n	2fc2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2fcc:	46bd      	mov	sp, r7
    2fce:	bd80      	pop	{r7, pc}
    2fd0:	40000800 	.word	0x40000800

00002fd4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2fd8:	4a0c      	ldr	r2, [pc, #48]	; (300c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2fda:	4b0d      	ldr	r3, [pc, #52]	; (3010 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2fdc:	681b      	ldr	r3, [r3, #0]
    2fde:	b29b      	uxth	r3, r3
    2fe0:	2180      	movs	r1, #128	; 0x80
    2fe2:	438b      	bics	r3, r1
    2fe4:	b29b      	uxth	r3, r3
    2fe6:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2fe8:	4b0a      	ldr	r3, [pc, #40]	; (3014 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2fea:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2fec:	4a07      	ldr	r2, [pc, #28]	; (300c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2fee:	4b08      	ldr	r3, [pc, #32]	; (3010 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2ff0:	689b      	ldr	r3, [r3, #8]
    2ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ff4:	4a05      	ldr	r2, [pc, #20]	; (300c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2ff8:	685b      	ldr	r3, [r3, #4]
    2ffa:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2ffc:	4a03      	ldr	r2, [pc, #12]	; (300c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ffe:	4b04      	ldr	r3, [pc, #16]	; (3010 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	b29b      	uxth	r3, r3
    3004:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3006:	46bd      	mov	sp, r7
    3008:	bd80      	pop	{r7, pc}
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	40000800 	.word	0x40000800
    3010:	20000050 	.word	0x20000050
    3014:	00002fbd 	.word	0x00002fbd

00003018 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3018:	b580      	push	{r7, lr}
    301a:	b082      	sub	sp, #8
    301c:	af00      	add	r7, sp, #0
    301e:	1c02      	adds	r2, r0, #0
    3020:	1dfb      	adds	r3, r7, #7
    3022:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3024:	1dfb      	adds	r3, r7, #7
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d835      	bhi.n	3098 <system_clock_source_get_hz+0x80>
    302c:	009a      	lsls	r2, r3, #2
    302e:	4b1d      	ldr	r3, [pc, #116]	; (30a4 <system_clock_source_get_hz+0x8c>)
    3030:	18d3      	adds	r3, r2, r3
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3036:	4b1c      	ldr	r3, [pc, #112]	; (30a8 <system_clock_source_get_hz+0x90>)
    3038:	68db      	ldr	r3, [r3, #12]
    303a:	e02e      	b.n	309a <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    303c:	4b1b      	ldr	r3, [pc, #108]	; (30ac <system_clock_source_get_hz+0x94>)
    303e:	6a1b      	ldr	r3, [r3, #32]
    3040:	0a1b      	lsrs	r3, r3, #8
    3042:	1c1a      	adds	r2, r3, #0
    3044:	2303      	movs	r3, #3
    3046:	4013      	ands	r3, r2
    3048:	b2db      	uxtb	r3, r3
    304a:	1c1a      	adds	r2, r3, #0
    304c:	4b18      	ldr	r3, [pc, #96]	; (30b0 <system_clock_source_get_hz+0x98>)
    304e:	40d3      	lsrs	r3, r2
    3050:	e023      	b.n	309a <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3052:	2380      	movs	r3, #128	; 0x80
    3054:	021b      	lsls	r3, r3, #8
    3056:	e020      	b.n	309a <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3058:	2380      	movs	r3, #128	; 0x80
    305a:	021b      	lsls	r3, r3, #8
    305c:	e01d      	b.n	309a <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    305e:	4b12      	ldr	r3, [pc, #72]	; (30a8 <system_clock_source_get_hz+0x90>)
    3060:	691b      	ldr	r3, [r3, #16]
    3062:	e01a      	b.n	309a <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3064:	4b10      	ldr	r3, [pc, #64]	; (30a8 <system_clock_source_get_hz+0x90>)
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	2202      	movs	r2, #2
    306a:	4013      	ands	r3, r2
    306c:	d101      	bne.n	3072 <system_clock_source_get_hz+0x5a>
			return 0;
    306e:	2300      	movs	r3, #0
    3070:	e013      	b.n	309a <system_clock_source_get_hz+0x82>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3072:	4b10      	ldr	r3, [pc, #64]	; (30b4 <system_clock_source_get_hz+0x9c>)
    3074:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3076:	4b0c      	ldr	r3, [pc, #48]	; (30a8 <system_clock_source_get_hz+0x90>)
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	2204      	movs	r2, #4
    307c:	4013      	ands	r3, r2
    307e:	d009      	beq.n	3094 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3080:	2000      	movs	r0, #0
    3082:	4b0d      	ldr	r3, [pc, #52]	; (30b8 <system_clock_source_get_hz+0xa0>)
    3084:	4798      	blx	r3
    3086:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    3088:	4b07      	ldr	r3, [pc, #28]	; (30a8 <system_clock_source_get_hz+0x90>)
    308a:	689b      	ldr	r3, [r3, #8]
    308c:	041b      	lsls	r3, r3, #16
    308e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3090:	4353      	muls	r3, r2
    3092:	e002      	b.n	309a <system_clock_source_get_hz+0x82>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3094:	4b09      	ldr	r3, [pc, #36]	; (30bc <system_clock_source_get_hz+0xa4>)
    3096:	e000      	b.n	309a <system_clock_source_get_hz+0x82>

	default:
		return 0;
    3098:	2300      	movs	r3, #0
	}
}
    309a:	1c18      	adds	r0, r3, #0
    309c:	46bd      	mov	sp, r7
    309e:	b002      	add	sp, #8
    30a0:	bd80      	pop	{r7, pc}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	00003fe0 	.word	0x00003fe0
    30a8:	20000050 	.word	0x20000050
    30ac:	40000800 	.word	0x40000800
    30b0:	007a1200 	.word	0x007a1200
    30b4:	00002fbd 	.word	0x00002fbd
    30b8:	00003931 	.word	0x00003931
    30bc:	02dc6c00 	.word	0x02dc6c00

000030c0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    30c0:	b580      	push	{r7, lr}
    30c2:	b084      	sub	sp, #16
    30c4:	af00      	add	r7, sp, #0
    30c6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    30c8:	4b1a      	ldr	r3, [pc, #104]	; (3134 <system_clock_source_osc8m_set_config+0x74>)
    30ca:	6a1b      	ldr	r3, [r3, #32]
    30cc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	1c1a      	adds	r2, r3, #0
    30d4:	2303      	movs	r3, #3
    30d6:	4013      	ands	r3, r2
    30d8:	b2da      	uxtb	r2, r3
    30da:	230d      	movs	r3, #13
    30dc:	18fb      	adds	r3, r7, r3
    30de:	2103      	movs	r1, #3
    30e0:	400a      	ands	r2, r1
    30e2:	1c10      	adds	r0, r2, #0
    30e4:	781a      	ldrb	r2, [r3, #0]
    30e6:	2103      	movs	r1, #3
    30e8:	438a      	bics	r2, r1
    30ea:	1c11      	adds	r1, r2, #0
    30ec:	1c02      	adds	r2, r0, #0
    30ee:	430a      	orrs	r2, r1
    30f0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	789a      	ldrb	r2, [r3, #2]
    30f6:	230c      	movs	r3, #12
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	01d0      	lsls	r0, r2, #7
    30fc:	781a      	ldrb	r2, [r3, #0]
    30fe:	217f      	movs	r1, #127	; 0x7f
    3100:	400a      	ands	r2, r1
    3102:	1c11      	adds	r1, r2, #0
    3104:	1c02      	adds	r2, r0, #0
    3106:	430a      	orrs	r2, r1
    3108:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	785a      	ldrb	r2, [r3, #1]
    310e:	230c      	movs	r3, #12
    3110:	18fb      	adds	r3, r7, r3
    3112:	2101      	movs	r1, #1
    3114:	400a      	ands	r2, r1
    3116:	0190      	lsls	r0, r2, #6
    3118:	781a      	ldrb	r2, [r3, #0]
    311a:	2140      	movs	r1, #64	; 0x40
    311c:	438a      	bics	r2, r1
    311e:	1c11      	adds	r1, r2, #0
    3120:	1c02      	adds	r2, r0, #0
    3122:	430a      	orrs	r2, r1
    3124:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    3126:	4b03      	ldr	r3, [pc, #12]	; (3134 <system_clock_source_osc8m_set_config+0x74>)
    3128:	68fa      	ldr	r2, [r7, #12]
    312a:	621a      	str	r2, [r3, #32]
}
    312c:	46bd      	mov	sp, r7
    312e:	b004      	add	sp, #16
    3130:	bd80      	pop	{r7, pc}
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	40000800 	.word	0x40000800

00003138 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    3138:	b580      	push	{r7, lr}
    313a:	b084      	sub	sp, #16
    313c:	af00      	add	r7, sp, #0
    313e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    3140:	4a53      	ldr	r2, [pc, #332]	; (3290 <system_clock_source_xosc_set_config+0x158>)
    3142:	230c      	movs	r3, #12
    3144:	18fb      	adds	r3, r7, r3
    3146:	8a12      	ldrh	r2, [r2, #16]
    3148:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	785b      	ldrb	r3, [r3, #1]
    314e:	1c1a      	adds	r2, r3, #0
    3150:	230f      	movs	r3, #15
    3152:	4013      	ands	r3, r2
    3154:	b2da      	uxtb	r2, r3
    3156:	230c      	movs	r3, #12
    3158:	18fb      	adds	r3, r7, r3
    315a:	0110      	lsls	r0, r2, #4
    315c:	785a      	ldrb	r2, [r3, #1]
    315e:	210f      	movs	r1, #15
    3160:	400a      	ands	r2, r1
    3162:	1c11      	adds	r1, r2, #0
    3164:	1c02      	adds	r2, r0, #0
    3166:	430a      	orrs	r2, r1
    3168:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	d106      	bne.n	3180 <system_clock_source_xosc_set_config+0x48>
		temp.bit.XTALEN = 1;
    3172:	230c      	movs	r3, #12
    3174:	18fb      	adds	r3, r7, r3
    3176:	781a      	ldrb	r2, [r3, #0]
    3178:	2104      	movs	r1, #4
    317a:	430a      	orrs	r2, r1
    317c:	701a      	strb	r2, [r3, #0]
    317e:	e005      	b.n	318c <system_clock_source_xosc_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    3180:	230c      	movs	r3, #12
    3182:	18fb      	adds	r3, r7, r3
    3184:	781a      	ldrb	r2, [r3, #0]
    3186:	2104      	movs	r1, #4
    3188:	438a      	bics	r2, r1
    318a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AMPGC = config->auto_gain_control;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	789a      	ldrb	r2, [r3, #2]
    3190:	230c      	movs	r3, #12
    3192:	18fb      	adds	r3, r7, r3
    3194:	2101      	movs	r1, #1
    3196:	400a      	ands	r2, r1
    3198:	00d0      	lsls	r0, r2, #3
    319a:	785a      	ldrb	r2, [r3, #1]
    319c:	2108      	movs	r1, #8
    319e:	438a      	bics	r2, r1
    31a0:	1c11      	adds	r1, r2, #0
    31a2:	1c02      	adds	r2, r0, #0
    31a4:	430a      	orrs	r2, r1
    31a6:	705a      	strb	r2, [r3, #1]

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	789b      	ldrb	r3, [r3, #2]
    31ac:	2201      	movs	r2, #1
    31ae:	4053      	eors	r3, r2
    31b0:	b2db      	uxtb	r3, r3
    31b2:	2b00      	cmp	r3, #0
    31b4:	d046      	beq.n	3244 <system_clock_source_xosc_set_config+0x10c>
		if (config->frequency <= 2000000) {
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	685b      	ldr	r3, [r3, #4]
    31ba:	4a36      	ldr	r2, [pc, #216]	; (3294 <system_clock_source_xosc_set_config+0x15c>)
    31bc:	4293      	cmp	r3, r2
    31be:	d806      	bhi.n	31ce <system_clock_source_xosc_set_config+0x96>
			temp.bit.GAIN = 0;
    31c0:	230c      	movs	r3, #12
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	785a      	ldrb	r2, [r3, #1]
    31c6:	2107      	movs	r1, #7
    31c8:	438a      	bics	r2, r1
    31ca:	705a      	strb	r2, [r3, #1]
    31cc:	e03a      	b.n	3244 <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 4000000) {
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	4a31      	ldr	r2, [pc, #196]	; (3298 <system_clock_source_xosc_set_config+0x160>)
    31d4:	4293      	cmp	r3, r2
    31d6:	d809      	bhi.n	31ec <system_clock_source_xosc_set_config+0xb4>
			temp.bit.GAIN = 1;
    31d8:	230c      	movs	r3, #12
    31da:	18fb      	adds	r3, r7, r3
    31dc:	785a      	ldrb	r2, [r3, #1]
    31de:	2107      	movs	r1, #7
    31e0:	438a      	bics	r2, r1
    31e2:	1c11      	adds	r1, r2, #0
    31e4:	2201      	movs	r2, #1
    31e6:	430a      	orrs	r2, r1
    31e8:	705a      	strb	r2, [r3, #1]
    31ea:	e02b      	b.n	3244 <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 8000000) {
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	685b      	ldr	r3, [r3, #4]
    31f0:	4a2a      	ldr	r2, [pc, #168]	; (329c <system_clock_source_xosc_set_config+0x164>)
    31f2:	4293      	cmp	r3, r2
    31f4:	d809      	bhi.n	320a <system_clock_source_xosc_set_config+0xd2>
			temp.bit.GAIN = 2;
    31f6:	230c      	movs	r3, #12
    31f8:	18fb      	adds	r3, r7, r3
    31fa:	785a      	ldrb	r2, [r3, #1]
    31fc:	2107      	movs	r1, #7
    31fe:	438a      	bics	r2, r1
    3200:	1c11      	adds	r1, r2, #0
    3202:	2202      	movs	r2, #2
    3204:	430a      	orrs	r2, r1
    3206:	705a      	strb	r2, [r3, #1]
    3208:	e01c      	b.n	3244 <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 16000000) {
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	685b      	ldr	r3, [r3, #4]
    320e:	4a24      	ldr	r2, [pc, #144]	; (32a0 <system_clock_source_xosc_set_config+0x168>)
    3210:	4293      	cmp	r3, r2
    3212:	d809      	bhi.n	3228 <system_clock_source_xosc_set_config+0xf0>
			temp.bit.GAIN = 3;
    3214:	230c      	movs	r3, #12
    3216:	18fb      	adds	r3, r7, r3
    3218:	785a      	ldrb	r2, [r3, #1]
    321a:	2107      	movs	r1, #7
    321c:	438a      	bics	r2, r1
    321e:	1c11      	adds	r1, r2, #0
    3220:	2203      	movs	r2, #3
    3222:	430a      	orrs	r2, r1
    3224:	705a      	strb	r2, [r3, #1]
    3226:	e00d      	b.n	3244 <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 30000000) {
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	685b      	ldr	r3, [r3, #4]
    322c:	4a1d      	ldr	r2, [pc, #116]	; (32a4 <system_clock_source_xosc_set_config+0x16c>)
    322e:	4293      	cmp	r3, r2
    3230:	d808      	bhi.n	3244 <system_clock_source_xosc_set_config+0x10c>
			temp.bit.GAIN = 4;
    3232:	230c      	movs	r3, #12
    3234:	18fb      	adds	r3, r7, r3
    3236:	785a      	ldrb	r2, [r3, #1]
    3238:	2107      	movs	r1, #7
    323a:	438a      	bics	r2, r1
    323c:	1c11      	adds	r1, r2, #0
    323e:	2204      	movs	r2, #4
    3240:	430a      	orrs	r2, r1
    3242:	705a      	strb	r2, [r3, #1]
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	7a5a      	ldrb	r2, [r3, #9]
    3248:	230c      	movs	r3, #12
    324a:	18fb      	adds	r3, r7, r3
    324c:	01d0      	lsls	r0, r2, #7
    324e:	781a      	ldrb	r2, [r3, #0]
    3250:	217f      	movs	r1, #127	; 0x7f
    3252:	400a      	ands	r2, r1
    3254:	1c11      	adds	r1, r2, #0
    3256:	1c02      	adds	r2, r0, #0
    3258:	430a      	orrs	r2, r1
    325a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	7a1a      	ldrb	r2, [r3, #8]
    3260:	230c      	movs	r3, #12
    3262:	18fb      	adds	r3, r7, r3
    3264:	2101      	movs	r1, #1
    3266:	400a      	ands	r2, r1
    3268:	0190      	lsls	r0, r2, #6
    326a:	781a      	ldrb	r2, [r3, #0]
    326c:	2140      	movs	r1, #64	; 0x40
    326e:	438a      	bics	r2, r1
    3270:	1c11      	adds	r1, r2, #0
    3272:	1c02      	adds	r2, r0, #0
    3274:	430a      	orrs	r2, r1
    3276:	701a      	strb	r2, [r3, #0]

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	685a      	ldr	r2, [r3, #4]
    327c:	4b0a      	ldr	r3, [pc, #40]	; (32a8 <system_clock_source_xosc_set_config+0x170>)
    327e:	60da      	str	r2, [r3, #12]

	SYSCTRL->XOSC = temp;
    3280:	4a03      	ldr	r2, [pc, #12]	; (3290 <system_clock_source_xosc_set_config+0x158>)
    3282:	230c      	movs	r3, #12
    3284:	18fb      	adds	r3, r7, r3
    3286:	881b      	ldrh	r3, [r3, #0]
    3288:	8213      	strh	r3, [r2, #16]
}
    328a:	46bd      	mov	sp, r7
    328c:	b004      	add	sp, #16
    328e:	bd80      	pop	{r7, pc}
    3290:	40000800 	.word	0x40000800
    3294:	001e8480 	.word	0x001e8480
    3298:	003d0900 	.word	0x003d0900
    329c:	007a1200 	.word	0x007a1200
    32a0:	00f42400 	.word	0x00f42400
    32a4:	01c9c380 	.word	0x01c9c380
    32a8:	20000050 	.word	0x20000050

000032ac <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	1c02      	adds	r2, r0, #0
    32b4:	1dfb      	adds	r3, r7, #7
    32b6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    32b8:	1dfb      	adds	r3, r7, #7
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	2b07      	cmp	r3, #7
    32be:	d830      	bhi.n	3322 <system_clock_source_enable+0x76>
    32c0:	009a      	lsls	r2, r3, #2
    32c2:	4b1b      	ldr	r3, [pc, #108]	; (3330 <system_clock_source_enable+0x84>)
    32c4:	18d3      	adds	r3, r2, r3
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    32ca:	4b1a      	ldr	r3, [pc, #104]	; (3334 <system_clock_source_enable+0x88>)
    32cc:	4a19      	ldr	r2, [pc, #100]	; (3334 <system_clock_source_enable+0x88>)
    32ce:	6a12      	ldr	r2, [r2, #32]
    32d0:	2102      	movs	r1, #2
    32d2:	430a      	orrs	r2, r1
    32d4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    32d6:	2300      	movs	r3, #0
    32d8:	e026      	b.n	3328 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    32da:	4b16      	ldr	r3, [pc, #88]	; (3334 <system_clock_source_enable+0x88>)
    32dc:	4a15      	ldr	r2, [pc, #84]	; (3334 <system_clock_source_enable+0x88>)
    32de:	6992      	ldr	r2, [r2, #24]
    32e0:	2102      	movs	r1, #2
    32e2:	430a      	orrs	r2, r1
    32e4:	619a      	str	r2, [r3, #24]
		break;
    32e6:	e01e      	b.n	3326 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    32e8:	4a12      	ldr	r2, [pc, #72]	; (3334 <system_clock_source_enable+0x88>)
    32ea:	4b12      	ldr	r3, [pc, #72]	; (3334 <system_clock_source_enable+0x88>)
    32ec:	8a1b      	ldrh	r3, [r3, #16]
    32ee:	b29b      	uxth	r3, r3
    32f0:	2102      	movs	r1, #2
    32f2:	430b      	orrs	r3, r1
    32f4:	b29b      	uxth	r3, r3
    32f6:	8213      	strh	r3, [r2, #16]
		break;
    32f8:	e015      	b.n	3326 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    32fa:	4a0e      	ldr	r2, [pc, #56]	; (3334 <system_clock_source_enable+0x88>)
    32fc:	4b0d      	ldr	r3, [pc, #52]	; (3334 <system_clock_source_enable+0x88>)
    32fe:	8a9b      	ldrh	r3, [r3, #20]
    3300:	b29b      	uxth	r3, r3
    3302:	2102      	movs	r1, #2
    3304:	430b      	orrs	r3, r1
    3306:	b29b      	uxth	r3, r3
    3308:	8293      	strh	r3, [r2, #20]
		break;
    330a:	e00c      	b.n	3326 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    330c:	4b0a      	ldr	r3, [pc, #40]	; (3338 <system_clock_source_enable+0x8c>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	2202      	movs	r2, #2
    3312:	431a      	orrs	r2, r3
    3314:	4b08      	ldr	r3, [pc, #32]	; (3338 <system_clock_source_enable+0x8c>)
    3316:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3318:	4b08      	ldr	r3, [pc, #32]	; (333c <system_clock_source_enable+0x90>)
    331a:	4798      	blx	r3
		break;
    331c:	e003      	b.n	3326 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    331e:	2300      	movs	r3, #0
    3320:	e002      	b.n	3328 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3322:	2317      	movs	r3, #23
    3324:	e000      	b.n	3328 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    3326:	2300      	movs	r3, #0
}
    3328:	1c18      	adds	r0, r3, #0
    332a:	46bd      	mov	sp, r7
    332c:	b002      	add	sp, #8
    332e:	bd80      	pop	{r7, pc}
    3330:	00004000 	.word	0x00004000
    3334:	40000800 	.word	0x40000800
    3338:	20000050 	.word	0x20000050
    333c:	00002fd5 	.word	0x00002fd5

00003340 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3340:	b580      	push	{r7, lr}
    3342:	b082      	sub	sp, #8
    3344:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3346:	1c3b      	adds	r3, r7, #0
    3348:	2202      	movs	r2, #2
    334a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    334c:	2300      	movs	r3, #0
    334e:	607b      	str	r3, [r7, #4]
    3350:	e009      	b.n	3366 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	b2da      	uxtb	r2, r3
    3356:	1c3b      	adds	r3, r7, #0
    3358:	1c10      	adds	r0, r2, #0
    335a:	1c19      	adds	r1, r3, #0
    335c:	4b05      	ldr	r3, [pc, #20]	; (3374 <_switch_peripheral_gclk+0x34>)
    335e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	3301      	adds	r3, #1
    3364:	607b      	str	r3, [r7, #4]
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	2b1b      	cmp	r3, #27
    336a:	d9f2      	bls.n	3352 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    336c:	46bd      	mov	sp, r7
    336e:	b002      	add	sp, #8
    3370:	bd80      	pop	{r7, pc}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	0000380d 	.word	0x0000380d

00003378 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3378:	b580      	push	{r7, lr}
    337a:	b0a0      	sub	sp, #128	; 0x80
    337c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    337e:	4b48      	ldr	r3, [pc, #288]	; (34a0 <system_clock_init+0x128>)
    3380:	22c2      	movs	r2, #194	; 0xc2
    3382:	00d2      	lsls	r2, r2, #3
    3384:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3386:	2000      	movs	r0, #0
    3388:	4b46      	ldr	r3, [pc, #280]	; (34a4 <system_clock_init+0x12c>)
    338a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    338c:	4b46      	ldr	r3, [pc, #280]	; (34a8 <system_clock_init+0x130>)
    338e:	4798      	blx	r3

	/* XOSC */
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);
    3390:	2374      	movs	r3, #116	; 0x74
    3392:	18fb      	adds	r3, r7, r3
    3394:	1c18      	adds	r0, r3, #0
    3396:	4b45      	ldr	r3, [pc, #276]	; (34ac <system_clock_init+0x134>)
    3398:	4798      	blx	r3

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
    339a:	2374      	movs	r3, #116	; 0x74
    339c:	18fb      	adds	r3, r7, r3
    339e:	2200      	movs	r2, #0
    33a0:	701a      	strb	r2, [r3, #0]
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    33a2:	2374      	movs	r3, #116	; 0x74
    33a4:	18fb      	adds	r3, r7, r3
    33a6:	220f      	movs	r2, #15
    33a8:	705a      	strb	r2, [r3, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
    33aa:	2374      	movs	r3, #116	; 0x74
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	2201      	movs	r2, #1
    33b0:	709a      	strb	r2, [r3, #2]
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    33b2:	2374      	movs	r3, #116	; 0x74
    33b4:	18fb      	adds	r3, r7, r3
    33b6:	4a3e      	ldr	r2, [pc, #248]	; (34b0 <system_clock_init+0x138>)
    33b8:	605a      	str	r2, [r3, #4]
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
    33ba:	2374      	movs	r3, #116	; 0x74
    33bc:	18fb      	adds	r3, r7, r3
    33be:	2201      	movs	r2, #1
    33c0:	725a      	strb	r2, [r3, #9]
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    33c2:	2374      	movs	r3, #116	; 0x74
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	2200      	movs	r2, #0
    33c8:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    33ca:	2374      	movs	r3, #116	; 0x74
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	1c18      	adds	r0, r3, #0
    33d0:	4b38      	ldr	r3, [pc, #224]	; (34b4 <system_clock_init+0x13c>)
    33d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    33d4:	2000      	movs	r0, #0
    33d6:	4b38      	ldr	r3, [pc, #224]	; (34b8 <system_clock_init+0x140>)
    33d8:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    33da:	2370      	movs	r3, #112	; 0x70
    33dc:	18fb      	adds	r3, r7, r3
    33de:	1c18      	adds	r0, r3, #0
    33e0:	4b36      	ldr	r3, [pc, #216]	; (34bc <system_clock_init+0x144>)
    33e2:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    33e4:	2370      	movs	r3, #112	; 0x70
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	2200      	movs	r2, #0
    33ea:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    33ec:	2370      	movs	r3, #112	; 0x70
    33ee:	18fb      	adds	r3, r7, r3
    33f0:	2201      	movs	r2, #1
    33f2:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    33f4:	2370      	movs	r3, #112	; 0x70
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	2200      	movs	r2, #0
    33fa:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    33fc:	2370      	movs	r3, #112	; 0x70
    33fe:	18fb      	adds	r3, r7, r3
    3400:	1c18      	adds	r0, r3, #0
    3402:	4b2f      	ldr	r3, [pc, #188]	; (34c0 <system_clock_init+0x148>)
    3404:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3406:	2006      	movs	r0, #6
    3408:	4b2b      	ldr	r3, [pc, #172]	; (34b8 <system_clock_init+0x140>)
    340a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    340c:	4b2d      	ldr	r3, [pc, #180]	; (34c4 <system_clock_init+0x14c>)
    340e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3410:	2358      	movs	r3, #88	; 0x58
    3412:	18fb      	adds	r3, r7, r3
    3414:	1c18      	adds	r0, r3, #0
    3416:	4b2c      	ldr	r3, [pc, #176]	; (34c8 <system_clock_init+0x150>)
    3418:	4798      	blx	r3
    341a:	2358      	movs	r3, #88	; 0x58
    341c:	18fb      	adds	r3, r7, r3
    341e:	2200      	movs	r2, #0
    3420:	701a      	strb	r2, [r3, #0]
    3422:	2358      	movs	r3, #88	; 0x58
    3424:	18fb      	adds	r3, r7, r3
    3426:	2201      	movs	r2, #1
    3428:	605a      	str	r2, [r3, #4]
    342a:	2358      	movs	r3, #88	; 0x58
    342c:	18fb      	adds	r3, r7, r3
    342e:	2200      	movs	r2, #0
    3430:	721a      	strb	r2, [r3, #8]
    3432:	2358      	movs	r3, #88	; 0x58
    3434:	18fb      	adds	r3, r7, r3
    3436:	2200      	movs	r2, #0
    3438:	725a      	strb	r2, [r3, #9]
    343a:	2358      	movs	r3, #88	; 0x58
    343c:	18fb      	adds	r3, r7, r3
    343e:	2001      	movs	r0, #1
    3440:	1c19      	adds	r1, r3, #0
    3442:	4b22      	ldr	r3, [pc, #136]	; (34cc <system_clock_init+0x154>)
    3444:	4798      	blx	r3
    3446:	2001      	movs	r0, #1
    3448:	4b21      	ldr	r3, [pc, #132]	; (34d0 <system_clock_init+0x158>)
    344a:	4798      	blx	r3
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    344c:	2000      	movs	r0, #0
    344e:	4b21      	ldr	r3, [pc, #132]	; (34d4 <system_clock_init+0x15c>)
    3450:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3452:	2000      	movs	r0, #0
    3454:	2100      	movs	r1, #0
    3456:	4b20      	ldr	r3, [pc, #128]	; (34d8 <system_clock_init+0x160>)
    3458:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    345a:	2001      	movs	r0, #1
    345c:	2100      	movs	r1, #0
    345e:	4b1e      	ldr	r3, [pc, #120]	; (34d8 <system_clock_init+0x160>)
    3460:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3462:	2002      	movs	r0, #2
    3464:	2100      	movs	r1, #0
    3466:	4b1c      	ldr	r3, [pc, #112]	; (34d8 <system_clock_init+0x160>)
    3468:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    346a:	1d3b      	adds	r3, r7, #4
    346c:	1c18      	adds	r0, r3, #0
    346e:	4b16      	ldr	r3, [pc, #88]	; (34c8 <system_clock_init+0x150>)
    3470:	4798      	blx	r3
    3472:	1d3b      	adds	r3, r7, #4
    3474:	2206      	movs	r2, #6
    3476:	701a      	strb	r2, [r3, #0]
    3478:	1d3b      	adds	r3, r7, #4
    347a:	2201      	movs	r2, #1
    347c:	605a      	str	r2, [r3, #4]
    347e:	1d3b      	adds	r3, r7, #4
    3480:	2200      	movs	r2, #0
    3482:	721a      	strb	r2, [r3, #8]
    3484:	1d3b      	adds	r3, r7, #4
    3486:	2200      	movs	r2, #0
    3488:	725a      	strb	r2, [r3, #9]
    348a:	1d3b      	adds	r3, r7, #4
    348c:	2000      	movs	r0, #0
    348e:	1c19      	adds	r1, r3, #0
    3490:	4b0e      	ldr	r3, [pc, #56]	; (34cc <system_clock_init+0x154>)
    3492:	4798      	blx	r3
    3494:	2000      	movs	r0, #0
    3496:	4b0e      	ldr	r3, [pc, #56]	; (34d0 <system_clock_init+0x158>)
    3498:	4798      	blx	r3
#endif
}
    349a:	46bd      	mov	sp, r7
    349c:	b020      	add	sp, #128	; 0x80
    349e:	bd80      	pop	{r7, pc}
    34a0:	40000800 	.word	0x40000800
    34a4:	00002f89 	.word	0x00002f89
    34a8:	00003341 	.word	0x00003341
    34ac:	00002ebd 	.word	0x00002ebd
    34b0:	00b71b00 	.word	0x00b71b00
    34b4:	00003139 	.word	0x00003139
    34b8:	000032ad 	.word	0x000032ad
    34bc:	00002ef5 	.word	0x00002ef5
    34c0:	000030c1 	.word	0x000030c1
    34c4:	0000357d 	.word	0x0000357d
    34c8:	00002e91 	.word	0x00002e91
    34cc:	000035ad 	.word	0x000035ad
    34d0:	000036cd 	.word	0x000036cd
    34d4:	00002f15 	.word	0x00002f15
    34d8:	00002f35 	.word	0x00002f35

000034dc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b082      	sub	sp, #8
    34e0:	af00      	add	r7, sp, #0
    34e2:	1c02      	adds	r2, r0, #0
    34e4:	6039      	str	r1, [r7, #0]
    34e6:	1dfb      	adds	r3, r7, #7
    34e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    34ea:	1dfb      	adds	r3, r7, #7
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	2b01      	cmp	r3, #1
    34f0:	d00a      	beq.n	3508 <system_apb_clock_set_mask+0x2c>
    34f2:	2b02      	cmp	r3, #2
    34f4:	d00f      	beq.n	3516 <system_apb_clock_set_mask+0x3a>
    34f6:	2b00      	cmp	r3, #0
    34f8:	d114      	bne.n	3524 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    34fa:	4b0e      	ldr	r3, [pc, #56]	; (3534 <system_apb_clock_set_mask+0x58>)
    34fc:	4a0d      	ldr	r2, [pc, #52]	; (3534 <system_apb_clock_set_mask+0x58>)
    34fe:	6991      	ldr	r1, [r2, #24]
    3500:	683a      	ldr	r2, [r7, #0]
    3502:	430a      	orrs	r2, r1
    3504:	619a      	str	r2, [r3, #24]
			break;
    3506:	e00f      	b.n	3528 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3508:	4b0a      	ldr	r3, [pc, #40]	; (3534 <system_apb_clock_set_mask+0x58>)
    350a:	4a0a      	ldr	r2, [pc, #40]	; (3534 <system_apb_clock_set_mask+0x58>)
    350c:	69d1      	ldr	r1, [r2, #28]
    350e:	683a      	ldr	r2, [r7, #0]
    3510:	430a      	orrs	r2, r1
    3512:	61da      	str	r2, [r3, #28]
			break;
    3514:	e008      	b.n	3528 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3516:	4b07      	ldr	r3, [pc, #28]	; (3534 <system_apb_clock_set_mask+0x58>)
    3518:	4a06      	ldr	r2, [pc, #24]	; (3534 <system_apb_clock_set_mask+0x58>)
    351a:	6a11      	ldr	r1, [r2, #32]
    351c:	683a      	ldr	r2, [r7, #0]
    351e:	430a      	orrs	r2, r1
    3520:	621a      	str	r2, [r3, #32]
			break;
    3522:	e001      	b.n	3528 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3524:	2317      	movs	r3, #23
    3526:	e000      	b.n	352a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3528:	2300      	movs	r3, #0
}
    352a:	1c18      	adds	r0, r3, #0
    352c:	46bd      	mov	sp, r7
    352e:	b002      	add	sp, #8
    3530:	bd80      	pop	{r7, pc}
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	40000400 	.word	0x40000400

00003538 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    3538:	b580      	push	{r7, lr}
    353a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    353c:	4b01      	ldr	r3, [pc, #4]	; (3544 <system_interrupt_enter_critical_section+0xc>)
    353e:	4798      	blx	r3
}
    3540:	46bd      	mov	sp, r7
    3542:	bd80      	pop	{r7, pc}
    3544:	000020bd 	.word	0x000020bd

00003548 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    3548:	b580      	push	{r7, lr}
    354a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    354c:	4b01      	ldr	r3, [pc, #4]	; (3554 <system_interrupt_leave_critical_section+0xc>)
    354e:	4798      	blx	r3
}
    3550:	46bd      	mov	sp, r7
    3552:	bd80      	pop	{r7, pc}
    3554:	0000210d 	.word	0x0000210d

00003558 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3558:	b580      	push	{r7, lr}
    355a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    355c:	4b06      	ldr	r3, [pc, #24]	; (3578 <system_gclk_is_syncing+0x20>)
    355e:	785b      	ldrb	r3, [r3, #1]
    3560:	b2db      	uxtb	r3, r3
    3562:	b2db      	uxtb	r3, r3
    3564:	b25b      	sxtb	r3, r3
    3566:	2b00      	cmp	r3, #0
    3568:	da01      	bge.n	356e <system_gclk_is_syncing+0x16>
		return true;
    356a:	2301      	movs	r3, #1
    356c:	e000      	b.n	3570 <system_gclk_is_syncing+0x18>
	}

	return false;
    356e:	2300      	movs	r3, #0
}
    3570:	1c18      	adds	r0, r3, #0
    3572:	46bd      	mov	sp, r7
    3574:	bd80      	pop	{r7, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	40000c00 	.word	0x40000c00

0000357c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    357c:	b580      	push	{r7, lr}
    357e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3580:	2000      	movs	r0, #0
    3582:	2108      	movs	r1, #8
    3584:	4b07      	ldr	r3, [pc, #28]	; (35a4 <system_gclk_init+0x28>)
    3586:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3588:	4b07      	ldr	r3, [pc, #28]	; (35a8 <system_gclk_init+0x2c>)
    358a:	2201      	movs	r2, #1
    358c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <system_gclk_init+0x2c>)
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	b2db      	uxtb	r3, r3
    3596:	1c1a      	adds	r2, r3, #0
    3598:	2301      	movs	r3, #1
    359a:	4013      	ands	r3, r2
    359c:	d1f8      	bne.n	3590 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	000034dd 	.word	0x000034dd
    35a8:	40000c00 	.word	0x40000c00

000035ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    35ac:	b580      	push	{r7, lr}
    35ae:	b086      	sub	sp, #24
    35b0:	af00      	add	r7, sp, #0
    35b2:	1c02      	adds	r2, r0, #0
    35b4:	6039      	str	r1, [r7, #0]
    35b6:	1dfb      	adds	r3, r7, #7
    35b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    35ba:	1dfb      	adds	r3, r7, #7
    35bc:	781b      	ldrb	r3, [r3, #0]
    35be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    35c0:	1dfb      	adds	r3, r7, #7
    35c2:	781b      	ldrb	r3, [r3, #0]
    35c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    35c6:	683b      	ldr	r3, [r7, #0]
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	021b      	lsls	r3, r3, #8
    35cc:	1c1a      	adds	r2, r3, #0
    35ce:	697b      	ldr	r3, [r7, #20]
    35d0:	4313      	orrs	r3, r2
    35d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    35d4:	683b      	ldr	r3, [r7, #0]
    35d6:	785b      	ldrb	r3, [r3, #1]
    35d8:	2b00      	cmp	r3, #0
    35da:	d004      	beq.n	35e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    35dc:	697b      	ldr	r3, [r7, #20]
    35de:	2280      	movs	r2, #128	; 0x80
    35e0:	02d2      	lsls	r2, r2, #11
    35e2:	4313      	orrs	r3, r2
    35e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    35e6:	683b      	ldr	r3, [r7, #0]
    35e8:	7a5b      	ldrb	r3, [r3, #9]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d004      	beq.n	35f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    35ee:	697b      	ldr	r3, [r7, #20]
    35f0:	2280      	movs	r2, #128	; 0x80
    35f2:	0312      	lsls	r2, r2, #12
    35f4:	4313      	orrs	r3, r2
    35f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    35f8:	683b      	ldr	r3, [r7, #0]
    35fa:	685b      	ldr	r3, [r3, #4]
    35fc:	2b01      	cmp	r3, #1
    35fe:	d92c      	bls.n	365a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3600:	683b      	ldr	r3, [r7, #0]
    3602:	685a      	ldr	r2, [r3, #4]
    3604:	683b      	ldr	r3, [r7, #0]
    3606:	685b      	ldr	r3, [r3, #4]
    3608:	3b01      	subs	r3, #1
    360a:	4013      	ands	r3, r2
    360c:	d11a      	bne.n	3644 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    360e:	2300      	movs	r3, #0
    3610:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3612:	2302      	movs	r3, #2
    3614:	60bb      	str	r3, [r7, #8]
    3616:	e005      	b.n	3624 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3618:	68fb      	ldr	r3, [r7, #12]
    361a:	3301      	adds	r3, #1
    361c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    361e:	68bb      	ldr	r3, [r7, #8]
    3620:	005b      	lsls	r3, r3, #1
    3622:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3624:	683b      	ldr	r3, [r7, #0]
    3626:	685a      	ldr	r2, [r3, #4]
    3628:	68bb      	ldr	r3, [r7, #8]
    362a:	429a      	cmp	r2, r3
    362c:	d8f4      	bhi.n	3618 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    362e:	68fb      	ldr	r3, [r7, #12]
    3630:	021b      	lsls	r3, r3, #8
    3632:	693a      	ldr	r2, [r7, #16]
    3634:	4313      	orrs	r3, r2
    3636:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3638:	697b      	ldr	r3, [r7, #20]
    363a:	2280      	movs	r2, #128	; 0x80
    363c:	0352      	lsls	r2, r2, #13
    363e:	4313      	orrs	r3, r2
    3640:	617b      	str	r3, [r7, #20]
    3642:	e00a      	b.n	365a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3644:	683b      	ldr	r3, [r7, #0]
    3646:	685b      	ldr	r3, [r3, #4]
    3648:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    364a:	693a      	ldr	r2, [r7, #16]
    364c:	4313      	orrs	r3, r2
    364e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3650:	697b      	ldr	r3, [r7, #20]
    3652:	2280      	movs	r2, #128	; 0x80
    3654:	0292      	lsls	r2, r2, #10
    3656:	4313      	orrs	r3, r2
    3658:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    365a:	683b      	ldr	r3, [r7, #0]
    365c:	7a1b      	ldrb	r3, [r3, #8]
    365e:	2b00      	cmp	r3, #0
    3660:	d004      	beq.n	366c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3662:	697b      	ldr	r3, [r7, #20]
    3664:	2280      	movs	r2, #128	; 0x80
    3666:	0392      	lsls	r2, r2, #14
    3668:	4313      	orrs	r3, r2
    366a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    366c:	46c0      	nop			; (mov r8, r8)
    366e:	4b12      	ldr	r3, [pc, #72]	; (36b8 <system_gclk_gen_set_config+0x10c>)
    3670:	4798      	blx	r3
    3672:	1e03      	subs	r3, r0, #0
    3674:	d1fb      	bne.n	366e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3676:	4b11      	ldr	r3, [pc, #68]	; (36bc <system_gclk_gen_set_config+0x110>)
    3678:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    367a:	4a11      	ldr	r2, [pc, #68]	; (36c0 <system_gclk_gen_set_config+0x114>)
    367c:	1dfb      	adds	r3, r7, #7
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3682:	46c0      	nop			; (mov r8, r8)
    3684:	4b0c      	ldr	r3, [pc, #48]	; (36b8 <system_gclk_gen_set_config+0x10c>)
    3686:	4798      	blx	r3
    3688:	1e03      	subs	r3, r0, #0
    368a:	d1fb      	bne.n	3684 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    368c:	4b0d      	ldr	r3, [pc, #52]	; (36c4 <system_gclk_gen_set_config+0x118>)
    368e:	693a      	ldr	r2, [r7, #16]
    3690:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	4b08      	ldr	r3, [pc, #32]	; (36b8 <system_gclk_gen_set_config+0x10c>)
    3696:	4798      	blx	r3
    3698:	1e03      	subs	r3, r0, #0
    369a:	d1fb      	bne.n	3694 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    369c:	4b09      	ldr	r3, [pc, #36]	; (36c4 <system_gclk_gen_set_config+0x118>)
    369e:	4a09      	ldr	r2, [pc, #36]	; (36c4 <system_gclk_gen_set_config+0x118>)
    36a0:	6851      	ldr	r1, [r2, #4]
    36a2:	2280      	movs	r2, #128	; 0x80
    36a4:	0252      	lsls	r2, r2, #9
    36a6:	4011      	ands	r1, r2
    36a8:	697a      	ldr	r2, [r7, #20]
    36aa:	430a      	orrs	r2, r1
    36ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    36ae:	4b06      	ldr	r3, [pc, #24]	; (36c8 <system_gclk_gen_set_config+0x11c>)
    36b0:	4798      	blx	r3
}
    36b2:	46bd      	mov	sp, r7
    36b4:	b006      	add	sp, #24
    36b6:	bd80      	pop	{r7, pc}
    36b8:	00003559 	.word	0x00003559
    36bc:	00003539 	.word	0x00003539
    36c0:	40000c08 	.word	0x40000c08
    36c4:	40000c00 	.word	0x40000c00
    36c8:	00003549 	.word	0x00003549

000036cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    36cc:	b580      	push	{r7, lr}
    36ce:	b082      	sub	sp, #8
    36d0:	af00      	add	r7, sp, #0
    36d2:	1c02      	adds	r2, r0, #0
    36d4:	1dfb      	adds	r3, r7, #7
    36d6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    36d8:	46c0      	nop			; (mov r8, r8)
    36da:	4b0d      	ldr	r3, [pc, #52]	; (3710 <system_gclk_gen_enable+0x44>)
    36dc:	4798      	blx	r3
    36de:	1e03      	subs	r3, r0, #0
    36e0:	d1fb      	bne.n	36da <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    36e2:	4b0c      	ldr	r3, [pc, #48]	; (3714 <system_gclk_gen_enable+0x48>)
    36e4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    36e6:	4a0c      	ldr	r2, [pc, #48]	; (3718 <system_gclk_gen_enable+0x4c>)
    36e8:	1dfb      	adds	r3, r7, #7
    36ea:	781b      	ldrb	r3, [r3, #0]
    36ec:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    36ee:	46c0      	nop			; (mov r8, r8)
    36f0:	4b07      	ldr	r3, [pc, #28]	; (3710 <system_gclk_gen_enable+0x44>)
    36f2:	4798      	blx	r3
    36f4:	1e03      	subs	r3, r0, #0
    36f6:	d1fb      	bne.n	36f0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    36f8:	4b08      	ldr	r3, [pc, #32]	; (371c <system_gclk_gen_enable+0x50>)
    36fa:	4a08      	ldr	r2, [pc, #32]	; (371c <system_gclk_gen_enable+0x50>)
    36fc:	6852      	ldr	r2, [r2, #4]
    36fe:	2180      	movs	r1, #128	; 0x80
    3700:	0249      	lsls	r1, r1, #9
    3702:	430a      	orrs	r2, r1
    3704:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3706:	4b06      	ldr	r3, [pc, #24]	; (3720 <system_gclk_gen_enable+0x54>)
    3708:	4798      	blx	r3
}
    370a:	46bd      	mov	sp, r7
    370c:	b002      	add	sp, #8
    370e:	bd80      	pop	{r7, pc}
    3710:	00003559 	.word	0x00003559
    3714:	00003539 	.word	0x00003539
    3718:	40000c04 	.word	0x40000c04
    371c:	40000c00 	.word	0x40000c00
    3720:	00003549 	.word	0x00003549

00003724 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3724:	b580      	push	{r7, lr}
    3726:	b086      	sub	sp, #24
    3728:	af00      	add	r7, sp, #0
    372a:	1c02      	adds	r2, r0, #0
    372c:	1dfb      	adds	r3, r7, #7
    372e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3730:	46c0      	nop			; (mov r8, r8)
    3732:	4b2e      	ldr	r3, [pc, #184]	; (37ec <system_gclk_gen_get_hz+0xc8>)
    3734:	4798      	blx	r3
    3736:	1e03      	subs	r3, r0, #0
    3738:	d1fb      	bne.n	3732 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    373a:	4b2d      	ldr	r3, [pc, #180]	; (37f0 <system_gclk_gen_get_hz+0xcc>)
    373c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    373e:	4a2d      	ldr	r2, [pc, #180]	; (37f4 <system_gclk_gen_get_hz+0xd0>)
    3740:	1dfb      	adds	r3, r7, #7
    3742:	781b      	ldrb	r3, [r3, #0]
    3744:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3746:	46c0      	nop			; (mov r8, r8)
    3748:	4b28      	ldr	r3, [pc, #160]	; (37ec <system_gclk_gen_get_hz+0xc8>)
    374a:	4798      	blx	r3
    374c:	1e03      	subs	r3, r0, #0
    374e:	d1fb      	bne.n	3748 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3750:	4b29      	ldr	r3, [pc, #164]	; (37f8 <system_gclk_gen_get_hz+0xd4>)
    3752:	685b      	ldr	r3, [r3, #4]
    3754:	0a1b      	lsrs	r3, r3, #8
    3756:	1c1a      	adds	r2, r3, #0
    3758:	231f      	movs	r3, #31
    375a:	4013      	ands	r3, r2
    375c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    375e:	1c18      	adds	r0, r3, #0
    3760:	4b26      	ldr	r3, [pc, #152]	; (37fc <system_gclk_gen_get_hz+0xd8>)
    3762:	4798      	blx	r3
    3764:	1c03      	adds	r3, r0, #0
    3766:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3768:	4a22      	ldr	r2, [pc, #136]	; (37f4 <system_gclk_gen_get_hz+0xd0>)
    376a:	1dfb      	adds	r3, r7, #7
    376c:	781b      	ldrb	r3, [r3, #0]
    376e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3770:	4b21      	ldr	r3, [pc, #132]	; (37f8 <system_gclk_gen_get_hz+0xd4>)
    3772:	685b      	ldr	r3, [r3, #4]
    3774:	0d1b      	lsrs	r3, r3, #20
    3776:	1c1a      	adds	r2, r3, #0
    3778:	2301      	movs	r3, #1
    377a:	4013      	ands	r3, r2
    377c:	b2da      	uxtb	r2, r3
    377e:	2313      	movs	r3, #19
    3780:	18fb      	adds	r3, r7, r3
    3782:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3784:	4a1e      	ldr	r2, [pc, #120]	; (3800 <system_gclk_gen_get_hz+0xdc>)
    3786:	1dfb      	adds	r3, r7, #7
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	4b17      	ldr	r3, [pc, #92]	; (37ec <system_gclk_gen_get_hz+0xc8>)
    3790:	4798      	blx	r3
    3792:	1e03      	subs	r3, r0, #0
    3794:	d1fb      	bne.n	378e <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3796:	4b18      	ldr	r3, [pc, #96]	; (37f8 <system_gclk_gen_get_hz+0xd4>)
    3798:	689b      	ldr	r3, [r3, #8]
    379a:	0a1b      	lsrs	r3, r3, #8
    379c:	1c1a      	adds	r2, r3, #0
    379e:	2300      	movs	r3, #0
    37a0:	439a      	bics	r2, r3
    37a2:	1c13      	adds	r3, r2, #0
    37a4:	b29b      	uxth	r3, r3
    37a6:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    37a8:	4b16      	ldr	r3, [pc, #88]	; (3804 <system_gclk_gen_get_hz+0xe0>)
    37aa:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    37ac:	2313      	movs	r3, #19
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d109      	bne.n	37ca <system_gclk_gen_get_hz+0xa6>
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	2b01      	cmp	r3, #1
    37ba:	d906      	bls.n	37ca <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    37bc:	4b12      	ldr	r3, [pc, #72]	; (3808 <system_gclk_gen_get_hz+0xe4>)
    37be:	6978      	ldr	r0, [r7, #20]
    37c0:	68f9      	ldr	r1, [r7, #12]
    37c2:	4798      	blx	r3
    37c4:	1c03      	adds	r3, r0, #0
    37c6:	617b      	str	r3, [r7, #20]
    37c8:	e00a      	b.n	37e0 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    37ca:	2313      	movs	r3, #19
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	781b      	ldrb	r3, [r3, #0]
    37d0:	2b00      	cmp	r3, #0
    37d2:	d005      	beq.n	37e0 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	3301      	adds	r3, #1
    37d8:	1c1a      	adds	r2, r3, #0
    37da:	697b      	ldr	r3, [r7, #20]
    37dc:	40d3      	lsrs	r3, r2
    37de:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    37e0:	697b      	ldr	r3, [r7, #20]
}
    37e2:	1c18      	adds	r0, r3, #0
    37e4:	46bd      	mov	sp, r7
    37e6:	b006      	add	sp, #24
    37e8:	bd80      	pop	{r7, pc}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	00003559 	.word	0x00003559
    37f0:	00003539 	.word	0x00003539
    37f4:	40000c04 	.word	0x40000c04
    37f8:	40000c00 	.word	0x40000c00
    37fc:	00003019 	.word	0x00003019
    3800:	40000c08 	.word	0x40000c08
    3804:	00003549 	.word	0x00003549
    3808:	00003be1 	.word	0x00003be1

0000380c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    380c:	b580      	push	{r7, lr}
    380e:	b084      	sub	sp, #16
    3810:	af00      	add	r7, sp, #0
    3812:	1c02      	adds	r2, r0, #0
    3814:	6039      	str	r1, [r7, #0]
    3816:	1dfb      	adds	r3, r7, #7
    3818:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    381a:	1dfb      	adds	r3, r7, #7
    381c:	781b      	ldrb	r3, [r3, #0]
    381e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3820:	683b      	ldr	r3, [r7, #0]
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	021b      	lsls	r3, r3, #8
    3826:	1c1a      	adds	r2, r3, #0
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	4313      	orrs	r3, r2
    382c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    382e:	1dfb      	adds	r3, r7, #7
    3830:	781b      	ldrb	r3, [r3, #0]
    3832:	1c18      	adds	r0, r3, #0
    3834:	4b04      	ldr	r3, [pc, #16]	; (3848 <system_gclk_chan_set_config+0x3c>)
    3836:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <system_gclk_chan_set_config+0x40>)
    383a:	68fa      	ldr	r2, [r7, #12]
    383c:	b292      	uxth	r2, r2
    383e:	805a      	strh	r2, [r3, #2]
}
    3840:	46bd      	mov	sp, r7
    3842:	b004      	add	sp, #16
    3844:	bd80      	pop	{r7, pc}
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	00003895 	.word	0x00003895
    384c:	40000c00 	.word	0x40000c00

00003850 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3850:	b580      	push	{r7, lr}
    3852:	b082      	sub	sp, #8
    3854:	af00      	add	r7, sp, #0
    3856:	1c02      	adds	r2, r0, #0
    3858:	1dfb      	adds	r3, r7, #7
    385a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    385c:	4b09      	ldr	r3, [pc, #36]	; (3884 <system_gclk_chan_enable+0x34>)
    385e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3860:	4a09      	ldr	r2, [pc, #36]	; (3888 <system_gclk_chan_enable+0x38>)
    3862:	1dfb      	adds	r3, r7, #7
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3868:	4908      	ldr	r1, [pc, #32]	; (388c <system_gclk_chan_enable+0x3c>)
    386a:	4b08      	ldr	r3, [pc, #32]	; (388c <system_gclk_chan_enable+0x3c>)
    386c:	885b      	ldrh	r3, [r3, #2]
    386e:	b29b      	uxth	r3, r3
    3870:	2280      	movs	r2, #128	; 0x80
    3872:	01d2      	lsls	r2, r2, #7
    3874:	4313      	orrs	r3, r2
    3876:	b29b      	uxth	r3, r3
    3878:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    387a:	4b05      	ldr	r3, [pc, #20]	; (3890 <system_gclk_chan_enable+0x40>)
    387c:	4798      	blx	r3
}
    387e:	46bd      	mov	sp, r7
    3880:	b002      	add	sp, #8
    3882:	bd80      	pop	{r7, pc}
    3884:	00003539 	.word	0x00003539
    3888:	40000c02 	.word	0x40000c02
    388c:	40000c00 	.word	0x40000c00
    3890:	00003549 	.word	0x00003549

00003894 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3894:	b580      	push	{r7, lr}
    3896:	b084      	sub	sp, #16
    3898:	af00      	add	r7, sp, #0
    389a:	1c02      	adds	r2, r0, #0
    389c:	1dfb      	adds	r3, r7, #7
    389e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    38a0:	4b1d      	ldr	r3, [pc, #116]	; (3918 <system_gclk_chan_disable+0x84>)
    38a2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    38a4:	4a1d      	ldr	r2, [pc, #116]	; (391c <system_gclk_chan_disable+0x88>)
    38a6:	1dfb      	adds	r3, r7, #7
    38a8:	781b      	ldrb	r3, [r3, #0]
    38aa:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    38ac:	4b1c      	ldr	r3, [pc, #112]	; (3920 <system_gclk_chan_disable+0x8c>)
    38ae:	885b      	ldrh	r3, [r3, #2]
    38b0:	b29b      	uxth	r3, r3
    38b2:	0a1b      	lsrs	r3, r3, #8
    38b4:	1c1a      	adds	r2, r3, #0
    38b6:	230f      	movs	r3, #15
    38b8:	4013      	ands	r3, r2
    38ba:	b2db      	uxtb	r3, r3
    38bc:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    38be:	4b18      	ldr	r3, [pc, #96]	; (3920 <system_gclk_chan_disable+0x8c>)
    38c0:	885a      	ldrh	r2, [r3, #2]
    38c2:	4918      	ldr	r1, [pc, #96]	; (3924 <system_gclk_chan_disable+0x90>)
    38c4:	400a      	ands	r2, r1
    38c6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    38c8:	4a15      	ldr	r2, [pc, #84]	; (3920 <system_gclk_chan_disable+0x8c>)
    38ca:	4b15      	ldr	r3, [pc, #84]	; (3920 <system_gclk_chan_disable+0x8c>)
    38cc:	885b      	ldrh	r3, [r3, #2]
    38ce:	b29b      	uxth	r3, r3
    38d0:	4915      	ldr	r1, [pc, #84]	; (3928 <system_gclk_chan_disable+0x94>)
    38d2:	400b      	ands	r3, r1
    38d4:	b29b      	uxth	r3, r3
    38d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    38d8:	46c0      	nop			; (mov r8, r8)
    38da:	4b11      	ldr	r3, [pc, #68]	; (3920 <system_gclk_chan_disable+0x8c>)
    38dc:	885b      	ldrh	r3, [r3, #2]
    38de:	b29b      	uxth	r3, r3
    38e0:	1c1a      	adds	r2, r3, #0
    38e2:	2380      	movs	r3, #128	; 0x80
    38e4:	01db      	lsls	r3, r3, #7
    38e6:	4013      	ands	r3, r2
    38e8:	d1f7      	bne.n	38da <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    38ea:	4b0d      	ldr	r3, [pc, #52]	; (3920 <system_gclk_chan_disable+0x8c>)
    38ec:	68fa      	ldr	r2, [r7, #12]
    38ee:	b2d2      	uxtb	r2, r2
    38f0:	1c11      	adds	r1, r2, #0
    38f2:	220f      	movs	r2, #15
    38f4:	400a      	ands	r2, r1
    38f6:	b2d2      	uxtb	r2, r2
    38f8:	1c11      	adds	r1, r2, #0
    38fa:	220f      	movs	r2, #15
    38fc:	400a      	ands	r2, r1
    38fe:	0210      	lsls	r0, r2, #8
    3900:	885a      	ldrh	r2, [r3, #2]
    3902:	4908      	ldr	r1, [pc, #32]	; (3924 <system_gclk_chan_disable+0x90>)
    3904:	400a      	ands	r2, r1
    3906:	1c11      	adds	r1, r2, #0
    3908:	1c02      	adds	r2, r0, #0
    390a:	430a      	orrs	r2, r1
    390c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    390e:	4b07      	ldr	r3, [pc, #28]	; (392c <system_gclk_chan_disable+0x98>)
    3910:	4798      	blx	r3
}
    3912:	46bd      	mov	sp, r7
    3914:	b004      	add	sp, #16
    3916:	bd80      	pop	{r7, pc}
    3918:	00003539 	.word	0x00003539
    391c:	40000c02 	.word	0x40000c02
    3920:	40000c00 	.word	0x40000c00
    3924:	fffff0ff 	.word	0xfffff0ff
    3928:	ffffbfff 	.word	0xffffbfff
    392c:	00003549 	.word	0x00003549

00003930 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3930:	b580      	push	{r7, lr}
    3932:	b084      	sub	sp, #16
    3934:	af00      	add	r7, sp, #0
    3936:	1c02      	adds	r2, r0, #0
    3938:	1dfb      	adds	r3, r7, #7
    393a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    393c:	4b0e      	ldr	r3, [pc, #56]	; (3978 <system_gclk_chan_get_hz+0x48>)
    393e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3940:	4a0e      	ldr	r2, [pc, #56]	; (397c <system_gclk_chan_get_hz+0x4c>)
    3942:	1dfb      	adds	r3, r7, #7
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3948:	4b0d      	ldr	r3, [pc, #52]	; (3980 <system_gclk_chan_get_hz+0x50>)
    394a:	885b      	ldrh	r3, [r3, #2]
    394c:	b29b      	uxth	r3, r3
    394e:	0a1b      	lsrs	r3, r3, #8
    3950:	1c1a      	adds	r2, r3, #0
    3952:	230f      	movs	r3, #15
    3954:	4013      	ands	r3, r2
    3956:	b2da      	uxtb	r2, r3
    3958:	230f      	movs	r3, #15
    395a:	18fb      	adds	r3, r7, r3
    395c:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    395e:	4b09      	ldr	r3, [pc, #36]	; (3984 <system_gclk_chan_get_hz+0x54>)
    3960:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3962:	230f      	movs	r3, #15
    3964:	18fb      	adds	r3, r7, r3
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	1c18      	adds	r0, r3, #0
    396a:	4b07      	ldr	r3, [pc, #28]	; (3988 <system_gclk_chan_get_hz+0x58>)
    396c:	4798      	blx	r3
    396e:	1c03      	adds	r3, r0, #0
}
    3970:	1c18      	adds	r0, r3, #0
    3972:	46bd      	mov	sp, r7
    3974:	b004      	add	sp, #16
    3976:	bd80      	pop	{r7, pc}
    3978:	00003539 	.word	0x00003539
    397c:	40000c02 	.word	0x40000c02
    3980:	40000c00 	.word	0x40000c00
    3984:	00003549 	.word	0x00003549
    3988:	00003725 	.word	0x00003725

0000398c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	1c02      	adds	r2, r0, #0
    3994:	1dfb      	adds	r3, r7, #7
    3996:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3998:	230f      	movs	r3, #15
    399a:	18fb      	adds	r3, r7, r3
    399c:	1dfa      	adds	r2, r7, #7
    399e:	7812      	ldrb	r2, [r2, #0]
    39a0:	09d2      	lsrs	r2, r2, #7
    39a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    39a4:	230e      	movs	r3, #14
    39a6:	18fb      	adds	r3, r7, r3
    39a8:	1dfa      	adds	r2, r7, #7
    39aa:	7812      	ldrb	r2, [r2, #0]
    39ac:	0952      	lsrs	r2, r2, #5
    39ae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    39b0:	4b0d      	ldr	r3, [pc, #52]	; (39e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    39b2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    39b4:	230f      	movs	r3, #15
    39b6:	18fb      	adds	r3, r7, r3
    39b8:	781b      	ldrb	r3, [r3, #0]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d10f      	bne.n	39de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    39be:	230f      	movs	r3, #15
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	781b      	ldrb	r3, [r3, #0]
    39c4:	009b      	lsls	r3, r3, #2
    39c6:	2210      	movs	r2, #16
    39c8:	4694      	mov	ip, r2
    39ca:	44bc      	add	ip, r7
    39cc:	4463      	add	r3, ip
    39ce:	3b08      	subs	r3, #8
    39d0:	681a      	ldr	r2, [r3, #0]
    39d2:	230e      	movs	r3, #14
    39d4:	18fb      	adds	r3, r7, r3
    39d6:	781b      	ldrb	r3, [r3, #0]
    39d8:	01db      	lsls	r3, r3, #7
    39da:	18d3      	adds	r3, r2, r3
    39dc:	e000      	b.n	39e0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    39de:	2300      	movs	r3, #0
	}
}
    39e0:	1c18      	adds	r0, r3, #0
    39e2:	46bd      	mov	sp, r7
    39e4:	b004      	add	sp, #16
    39e6:	bd80      	pop	{r7, pc}
    39e8:	41004400 	.word	0x41004400

000039ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    39ec:	b580      	push	{r7, lr}
    39ee:	b088      	sub	sp, #32
    39f0:	af00      	add	r7, sp, #0
    39f2:	60f8      	str	r0, [r7, #12]
    39f4:	60b9      	str	r1, [r7, #8]
    39f6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    39f8:	2300      	movs	r3, #0
    39fa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	78db      	ldrb	r3, [r3, #3]
    3a00:	2201      	movs	r2, #1
    3a02:	4053      	eors	r3, r2
    3a04:	b2db      	uxtb	r3, r3
    3a06:	2b00      	cmp	r3, #0
    3a08:	d035      	beq.n	3a76 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b80      	cmp	r3, #128	; 0x80
    3a10:	d00b      	beq.n	3a2a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3a12:	69fb      	ldr	r3, [r7, #28]
    3a14:	2280      	movs	r2, #128	; 0x80
    3a16:	0252      	lsls	r2, r2, #9
    3a18:	4313      	orrs	r3, r2
    3a1a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	781b      	ldrb	r3, [r3, #0]
    3a20:	061b      	lsls	r3, r3, #24
    3a22:	1c1a      	adds	r2, r3, #0
    3a24:	69fb      	ldr	r3, [r7, #28]
    3a26:	4313      	orrs	r3, r2
    3a28:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	785b      	ldrb	r3, [r3, #1]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d003      	beq.n	3a3a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3a36:	2b02      	cmp	r3, #2
    3a38:	d110      	bne.n	3a5c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3a3a:	69fb      	ldr	r3, [r7, #28]
    3a3c:	2280      	movs	r2, #128	; 0x80
    3a3e:	0292      	lsls	r2, r2, #10
    3a40:	4313      	orrs	r3, r2
    3a42:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	789b      	ldrb	r3, [r3, #2]
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d004      	beq.n	3a56 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3a4c:	69fb      	ldr	r3, [r7, #28]
    3a4e:	2280      	movs	r2, #128	; 0x80
    3a50:	02d2      	lsls	r2, r2, #11
    3a52:	4313      	orrs	r3, r2
    3a54:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	68ba      	ldr	r2, [r7, #8]
    3a5a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	785b      	ldrb	r3, [r3, #1]
    3a60:	2b01      	cmp	r3, #1
    3a62:	d003      	beq.n	3a6c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a68:	2b02      	cmp	r3, #2
    3a6a:	d107      	bne.n	3a7c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3a6c:	69fb      	ldr	r3, [r7, #28]
    3a6e:	4a21      	ldr	r2, [pc, #132]	; (3af4 <_system_pinmux_config+0x108>)
    3a70:	4013      	ands	r3, r2
    3a72:	61fb      	str	r3, [r7, #28]
    3a74:	e002      	b.n	3a7c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	68ba      	ldr	r2, [r7, #8]
    3a7a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3a7c:	68bb      	ldr	r3, [r7, #8]
    3a7e:	041b      	lsls	r3, r3, #16
    3a80:	0c1b      	lsrs	r3, r3, #16
    3a82:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3a84:	68bb      	ldr	r3, [r7, #8]
    3a86:	0c1b      	lsrs	r3, r3, #16
    3a88:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a8a:	69ba      	ldr	r2, [r7, #24]
    3a8c:	69fb      	ldr	r3, [r7, #28]
    3a8e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3a90:	22a0      	movs	r2, #160	; 0xa0
    3a92:	05d2      	lsls	r2, r2, #23
    3a94:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a9a:	697a      	ldr	r2, [r7, #20]
    3a9c:	69fb      	ldr	r3, [r7, #28]
    3a9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3aa0:	22d0      	movs	r2, #208	; 0xd0
    3aa2:	0612      	lsls	r2, r2, #24
    3aa4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3aa6:	68fb      	ldr	r3, [r7, #12]
    3aa8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	78db      	ldrb	r3, [r3, #3]
    3aae:	2201      	movs	r2, #1
    3ab0:	4053      	eors	r3, r2
    3ab2:	b2db      	uxtb	r3, r3
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d01a      	beq.n	3aee <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3ab8:	69fa      	ldr	r2, [r7, #28]
    3aba:	2380      	movs	r3, #128	; 0x80
    3abc:	02db      	lsls	r3, r3, #11
    3abe:	4013      	ands	r3, r2
    3ac0:	d00a      	beq.n	3ad8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	789b      	ldrb	r3, [r3, #2]
    3ac6:	2b01      	cmp	r3, #1
    3ac8:	d103      	bne.n	3ad2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	68ba      	ldr	r2, [r7, #8]
    3ace:	619a      	str	r2, [r3, #24]
    3ad0:	e002      	b.n	3ad8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3ad2:	68fb      	ldr	r3, [r7, #12]
    3ad4:	68ba      	ldr	r2, [r7, #8]
    3ad6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	785b      	ldrb	r3, [r3, #1]
    3adc:	2b01      	cmp	r3, #1
    3ade:	d003      	beq.n	3ae8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ae4:	2b02      	cmp	r3, #2
    3ae6:	d102      	bne.n	3aee <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3ae8:	68fb      	ldr	r3, [r7, #12]
    3aea:	68ba      	ldr	r2, [r7, #8]
    3aec:	609a      	str	r2, [r3, #8]
		}
	}
}
    3aee:	46bd      	mov	sp, r7
    3af0:	b008      	add	sp, #32
    3af2:	bd80      	pop	{r7, pc}
    3af4:	fffbffff 	.word	0xfffbffff

00003af8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b084      	sub	sp, #16
    3afc:	af00      	add	r7, sp, #0
    3afe:	1c02      	adds	r2, r0, #0
    3b00:	6039      	str	r1, [r7, #0]
    3b02:	1dfb      	adds	r3, r7, #7
    3b04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3b06:	1dfb      	adds	r3, r7, #7
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	1c18      	adds	r0, r3, #0
    3b0c:	4b0b      	ldr	r3, [pc, #44]	; (3b3c <system_pinmux_pin_set_config+0x44>)
    3b0e:	4798      	blx	r3
    3b10:	1c03      	adds	r3, r0, #0
    3b12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3b14:	1dfb      	adds	r3, r7, #7
    3b16:	781b      	ldrb	r3, [r3, #0]
    3b18:	221f      	movs	r2, #31
    3b1a:	4013      	ands	r3, r2
    3b1c:	2201      	movs	r2, #1
    3b1e:	409a      	lsls	r2, r3
    3b20:	1c13      	adds	r3, r2, #0
    3b22:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3b24:	68f9      	ldr	r1, [r7, #12]
    3b26:	68ba      	ldr	r2, [r7, #8]
    3b28:	683b      	ldr	r3, [r7, #0]
    3b2a:	1c08      	adds	r0, r1, #0
    3b2c:	1c11      	adds	r1, r2, #0
    3b2e:	1c1a      	adds	r2, r3, #0
    3b30:	4b03      	ldr	r3, [pc, #12]	; (3b40 <system_pinmux_pin_set_config+0x48>)
    3b32:	4798      	blx	r3
}
    3b34:	46bd      	mov	sp, r7
    3b36:	b004      	add	sp, #16
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	0000398d 	.word	0x0000398d
    3b40:	000039ed 	.word	0x000039ed

00003b44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b082      	sub	sp, #8
    3b48:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3b4a:	4b19      	ldr	r3, [pc, #100]	; (3bb0 <Reset_Handler+0x6c>)
    3b4c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3b4e:	4b19      	ldr	r3, [pc, #100]	; (3bb4 <Reset_Handler+0x70>)
    3b50:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3b52:	687a      	ldr	r2, [r7, #4]
    3b54:	683b      	ldr	r3, [r7, #0]
    3b56:	429a      	cmp	r2, r3
    3b58:	d00c      	beq.n	3b74 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3b5a:	e007      	b.n	3b6c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3b5c:	683b      	ldr	r3, [r7, #0]
    3b5e:	1d1a      	adds	r2, r3, #4
    3b60:	603a      	str	r2, [r7, #0]
    3b62:	687a      	ldr	r2, [r7, #4]
    3b64:	1d11      	adds	r1, r2, #4
    3b66:	6079      	str	r1, [r7, #4]
    3b68:	6812      	ldr	r2, [r2, #0]
    3b6a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3b6c:	683a      	ldr	r2, [r7, #0]
    3b6e:	4b12      	ldr	r3, [pc, #72]	; (3bb8 <Reset_Handler+0x74>)
    3b70:	429a      	cmp	r2, r3
    3b72:	d3f3      	bcc.n	3b5c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3b74:	4b11      	ldr	r3, [pc, #68]	; (3bbc <Reset_Handler+0x78>)
    3b76:	603b      	str	r3, [r7, #0]
    3b78:	e004      	b.n	3b84 <Reset_Handler+0x40>
                *pDest++ = 0;
    3b7a:	683b      	ldr	r3, [r7, #0]
    3b7c:	1d1a      	adds	r2, r3, #4
    3b7e:	603a      	str	r2, [r7, #0]
    3b80:	2200      	movs	r2, #0
    3b82:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3b84:	683a      	ldr	r2, [r7, #0]
    3b86:	4b0e      	ldr	r3, [pc, #56]	; (3bc0 <Reset_Handler+0x7c>)
    3b88:	429a      	cmp	r2, r3
    3b8a:	d3f6      	bcc.n	3b7a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3b8c:	4b0d      	ldr	r3, [pc, #52]	; (3bc4 <Reset_Handler+0x80>)
    3b8e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3b90:	4b0d      	ldr	r3, [pc, #52]	; (3bc8 <Reset_Handler+0x84>)
    3b92:	687a      	ldr	r2, [r7, #4]
    3b94:	21ff      	movs	r1, #255	; 0xff
    3b96:	438a      	bics	r2, r1
    3b98:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3b9a:	4b0c      	ldr	r3, [pc, #48]	; (3bcc <Reset_Handler+0x88>)
    3b9c:	685a      	ldr	r2, [r3, #4]
    3b9e:	2180      	movs	r1, #128	; 0x80
    3ba0:	430a      	orrs	r2, r1
    3ba2:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    3ba4:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <Reset_Handler+0x8c>)
    3ba6:	4798      	blx	r3

        /* Branch to main function */
        main();
    3ba8:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <Reset_Handler+0x90>)
    3baa:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3bac:	e7fe      	b.n	3bac <Reset_Handler+0x68>
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	00004040 	.word	0x00004040
    3bb4:	20000000 	.word	0x20000000
    3bb8:	2000000c 	.word	0x2000000c
    3bbc:	2000000c 	.word	0x2000000c
    3bc0:	2000049c 	.word	0x2000049c
    3bc4:	00000000 	.word	0x00000000
    3bc8:	e000ed00 	.word	0xe000ed00
    3bcc:	41004000 	.word	0x41004000
    3bd0:	00003d59 	.word	0x00003d59
    3bd4:	0000181d 	.word	0x0000181d

00003bd8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	af00      	add	r7, sp, #0
        while (1) {
        }
    3bdc:	e7fe      	b.n	3bdc <Dummy_Handler+0x4>
    3bde:	46c0      	nop			; (mov r8, r8)

00003be0 <__aeabi_uidiv>:
    3be0:	2200      	movs	r2, #0
    3be2:	0843      	lsrs	r3, r0, #1
    3be4:	428b      	cmp	r3, r1
    3be6:	d374      	bcc.n	3cd2 <__aeabi_uidiv+0xf2>
    3be8:	0903      	lsrs	r3, r0, #4
    3bea:	428b      	cmp	r3, r1
    3bec:	d35f      	bcc.n	3cae <__aeabi_uidiv+0xce>
    3bee:	0a03      	lsrs	r3, r0, #8
    3bf0:	428b      	cmp	r3, r1
    3bf2:	d344      	bcc.n	3c7e <__aeabi_uidiv+0x9e>
    3bf4:	0b03      	lsrs	r3, r0, #12
    3bf6:	428b      	cmp	r3, r1
    3bf8:	d328      	bcc.n	3c4c <__aeabi_uidiv+0x6c>
    3bfa:	0c03      	lsrs	r3, r0, #16
    3bfc:	428b      	cmp	r3, r1
    3bfe:	d30d      	bcc.n	3c1c <__aeabi_uidiv+0x3c>
    3c00:	22ff      	movs	r2, #255	; 0xff
    3c02:	0209      	lsls	r1, r1, #8
    3c04:	ba12      	rev	r2, r2
    3c06:	0c03      	lsrs	r3, r0, #16
    3c08:	428b      	cmp	r3, r1
    3c0a:	d302      	bcc.n	3c12 <__aeabi_uidiv+0x32>
    3c0c:	1212      	asrs	r2, r2, #8
    3c0e:	0209      	lsls	r1, r1, #8
    3c10:	d065      	beq.n	3cde <__aeabi_uidiv+0xfe>
    3c12:	0b03      	lsrs	r3, r0, #12
    3c14:	428b      	cmp	r3, r1
    3c16:	d319      	bcc.n	3c4c <__aeabi_uidiv+0x6c>
    3c18:	e000      	b.n	3c1c <__aeabi_uidiv+0x3c>
    3c1a:	0a09      	lsrs	r1, r1, #8
    3c1c:	0bc3      	lsrs	r3, r0, #15
    3c1e:	428b      	cmp	r3, r1
    3c20:	d301      	bcc.n	3c26 <__aeabi_uidiv+0x46>
    3c22:	03cb      	lsls	r3, r1, #15
    3c24:	1ac0      	subs	r0, r0, r3
    3c26:	4152      	adcs	r2, r2
    3c28:	0b83      	lsrs	r3, r0, #14
    3c2a:	428b      	cmp	r3, r1
    3c2c:	d301      	bcc.n	3c32 <__aeabi_uidiv+0x52>
    3c2e:	038b      	lsls	r3, r1, #14
    3c30:	1ac0      	subs	r0, r0, r3
    3c32:	4152      	adcs	r2, r2
    3c34:	0b43      	lsrs	r3, r0, #13
    3c36:	428b      	cmp	r3, r1
    3c38:	d301      	bcc.n	3c3e <__aeabi_uidiv+0x5e>
    3c3a:	034b      	lsls	r3, r1, #13
    3c3c:	1ac0      	subs	r0, r0, r3
    3c3e:	4152      	adcs	r2, r2
    3c40:	0b03      	lsrs	r3, r0, #12
    3c42:	428b      	cmp	r3, r1
    3c44:	d301      	bcc.n	3c4a <__aeabi_uidiv+0x6a>
    3c46:	030b      	lsls	r3, r1, #12
    3c48:	1ac0      	subs	r0, r0, r3
    3c4a:	4152      	adcs	r2, r2
    3c4c:	0ac3      	lsrs	r3, r0, #11
    3c4e:	428b      	cmp	r3, r1
    3c50:	d301      	bcc.n	3c56 <__aeabi_uidiv+0x76>
    3c52:	02cb      	lsls	r3, r1, #11
    3c54:	1ac0      	subs	r0, r0, r3
    3c56:	4152      	adcs	r2, r2
    3c58:	0a83      	lsrs	r3, r0, #10
    3c5a:	428b      	cmp	r3, r1
    3c5c:	d301      	bcc.n	3c62 <__aeabi_uidiv+0x82>
    3c5e:	028b      	lsls	r3, r1, #10
    3c60:	1ac0      	subs	r0, r0, r3
    3c62:	4152      	adcs	r2, r2
    3c64:	0a43      	lsrs	r3, r0, #9
    3c66:	428b      	cmp	r3, r1
    3c68:	d301      	bcc.n	3c6e <__aeabi_uidiv+0x8e>
    3c6a:	024b      	lsls	r3, r1, #9
    3c6c:	1ac0      	subs	r0, r0, r3
    3c6e:	4152      	adcs	r2, r2
    3c70:	0a03      	lsrs	r3, r0, #8
    3c72:	428b      	cmp	r3, r1
    3c74:	d301      	bcc.n	3c7a <__aeabi_uidiv+0x9a>
    3c76:	020b      	lsls	r3, r1, #8
    3c78:	1ac0      	subs	r0, r0, r3
    3c7a:	4152      	adcs	r2, r2
    3c7c:	d2cd      	bcs.n	3c1a <__aeabi_uidiv+0x3a>
    3c7e:	09c3      	lsrs	r3, r0, #7
    3c80:	428b      	cmp	r3, r1
    3c82:	d301      	bcc.n	3c88 <__aeabi_uidiv+0xa8>
    3c84:	01cb      	lsls	r3, r1, #7
    3c86:	1ac0      	subs	r0, r0, r3
    3c88:	4152      	adcs	r2, r2
    3c8a:	0983      	lsrs	r3, r0, #6
    3c8c:	428b      	cmp	r3, r1
    3c8e:	d301      	bcc.n	3c94 <__aeabi_uidiv+0xb4>
    3c90:	018b      	lsls	r3, r1, #6
    3c92:	1ac0      	subs	r0, r0, r3
    3c94:	4152      	adcs	r2, r2
    3c96:	0943      	lsrs	r3, r0, #5
    3c98:	428b      	cmp	r3, r1
    3c9a:	d301      	bcc.n	3ca0 <__aeabi_uidiv+0xc0>
    3c9c:	014b      	lsls	r3, r1, #5
    3c9e:	1ac0      	subs	r0, r0, r3
    3ca0:	4152      	adcs	r2, r2
    3ca2:	0903      	lsrs	r3, r0, #4
    3ca4:	428b      	cmp	r3, r1
    3ca6:	d301      	bcc.n	3cac <__aeabi_uidiv+0xcc>
    3ca8:	010b      	lsls	r3, r1, #4
    3caa:	1ac0      	subs	r0, r0, r3
    3cac:	4152      	adcs	r2, r2
    3cae:	08c3      	lsrs	r3, r0, #3
    3cb0:	428b      	cmp	r3, r1
    3cb2:	d301      	bcc.n	3cb8 <__aeabi_uidiv+0xd8>
    3cb4:	00cb      	lsls	r3, r1, #3
    3cb6:	1ac0      	subs	r0, r0, r3
    3cb8:	4152      	adcs	r2, r2
    3cba:	0883      	lsrs	r3, r0, #2
    3cbc:	428b      	cmp	r3, r1
    3cbe:	d301      	bcc.n	3cc4 <__aeabi_uidiv+0xe4>
    3cc0:	008b      	lsls	r3, r1, #2
    3cc2:	1ac0      	subs	r0, r0, r3
    3cc4:	4152      	adcs	r2, r2
    3cc6:	0843      	lsrs	r3, r0, #1
    3cc8:	428b      	cmp	r3, r1
    3cca:	d301      	bcc.n	3cd0 <__aeabi_uidiv+0xf0>
    3ccc:	004b      	lsls	r3, r1, #1
    3cce:	1ac0      	subs	r0, r0, r3
    3cd0:	4152      	adcs	r2, r2
    3cd2:	1a41      	subs	r1, r0, r1
    3cd4:	d200      	bcs.n	3cd8 <__aeabi_uidiv+0xf8>
    3cd6:	4601      	mov	r1, r0
    3cd8:	4152      	adcs	r2, r2
    3cda:	4610      	mov	r0, r2
    3cdc:	4770      	bx	lr
    3cde:	e7ff      	b.n	3ce0 <__aeabi_uidiv+0x100>
    3ce0:	b501      	push	{r0, lr}
    3ce2:	2000      	movs	r0, #0
    3ce4:	f000 f80c 	bl	3d00 <__aeabi_idiv0>
    3ce8:	bd02      	pop	{r1, pc}
    3cea:	46c0      	nop			; (mov r8, r8)

00003cec <__aeabi_uidivmod>:
    3cec:	2900      	cmp	r1, #0
    3cee:	d0f7      	beq.n	3ce0 <__aeabi_uidiv+0x100>
    3cf0:	b503      	push	{r0, r1, lr}
    3cf2:	f7ff ff75 	bl	3be0 <__aeabi_uidiv>
    3cf6:	bc0e      	pop	{r1, r2, r3}
    3cf8:	4342      	muls	r2, r0
    3cfa:	1a89      	subs	r1, r1, r2
    3cfc:	4718      	bx	r3
    3cfe:	46c0      	nop			; (mov r8, r8)

00003d00 <__aeabi_idiv0>:
    3d00:	4770      	bx	lr
    3d02:	46c0      	nop			; (mov r8, r8)

00003d04 <__aeabi_lmul>:
    3d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d06:	464f      	mov	r7, r9
    3d08:	4646      	mov	r6, r8
    3d0a:	0405      	lsls	r5, r0, #16
    3d0c:	0c2d      	lsrs	r5, r5, #16
    3d0e:	1c2c      	adds	r4, r5, #0
    3d10:	b4c0      	push	{r6, r7}
    3d12:	0417      	lsls	r7, r2, #16
    3d14:	0c16      	lsrs	r6, r2, #16
    3d16:	0c3f      	lsrs	r7, r7, #16
    3d18:	4699      	mov	r9, r3
    3d1a:	0c03      	lsrs	r3, r0, #16
    3d1c:	437c      	muls	r4, r7
    3d1e:	4375      	muls	r5, r6
    3d20:	435f      	muls	r7, r3
    3d22:	4373      	muls	r3, r6
    3d24:	197d      	adds	r5, r7, r5
    3d26:	0c26      	lsrs	r6, r4, #16
    3d28:	19ad      	adds	r5, r5, r6
    3d2a:	469c      	mov	ip, r3
    3d2c:	42af      	cmp	r7, r5
    3d2e:	d903      	bls.n	3d38 <__aeabi_lmul+0x34>
    3d30:	2380      	movs	r3, #128	; 0x80
    3d32:	025b      	lsls	r3, r3, #9
    3d34:	4698      	mov	r8, r3
    3d36:	44c4      	add	ip, r8
    3d38:	464b      	mov	r3, r9
    3d3a:	4351      	muls	r1, r2
    3d3c:	4343      	muls	r3, r0
    3d3e:	0424      	lsls	r4, r4, #16
    3d40:	0c2e      	lsrs	r6, r5, #16
    3d42:	0c24      	lsrs	r4, r4, #16
    3d44:	042d      	lsls	r5, r5, #16
    3d46:	4466      	add	r6, ip
    3d48:	192c      	adds	r4, r5, r4
    3d4a:	1859      	adds	r1, r3, r1
    3d4c:	1989      	adds	r1, r1, r6
    3d4e:	1c20      	adds	r0, r4, #0
    3d50:	bc0c      	pop	{r2, r3}
    3d52:	4690      	mov	r8, r2
    3d54:	4699      	mov	r9, r3
    3d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d58 <__libc_init_array>:
    3d58:	4b0e      	ldr	r3, [pc, #56]	; (3d94 <__libc_init_array+0x3c>)
    3d5a:	b570      	push	{r4, r5, r6, lr}
    3d5c:	2500      	movs	r5, #0
    3d5e:	1c1e      	adds	r6, r3, #0
    3d60:	4c0d      	ldr	r4, [pc, #52]	; (3d98 <__libc_init_array+0x40>)
    3d62:	1ae4      	subs	r4, r4, r3
    3d64:	10a4      	asrs	r4, r4, #2
    3d66:	42a5      	cmp	r5, r4
    3d68:	d004      	beq.n	3d74 <__libc_init_array+0x1c>
    3d6a:	00ab      	lsls	r3, r5, #2
    3d6c:	58f3      	ldr	r3, [r6, r3]
    3d6e:	4798      	blx	r3
    3d70:	3501      	adds	r5, #1
    3d72:	e7f8      	b.n	3d66 <__libc_init_array+0xe>
    3d74:	f000 f954 	bl	4020 <_init>
    3d78:	4b08      	ldr	r3, [pc, #32]	; (3d9c <__libc_init_array+0x44>)
    3d7a:	2500      	movs	r5, #0
    3d7c:	1c1e      	adds	r6, r3, #0
    3d7e:	4c08      	ldr	r4, [pc, #32]	; (3da0 <__libc_init_array+0x48>)
    3d80:	1ae4      	subs	r4, r4, r3
    3d82:	10a4      	asrs	r4, r4, #2
    3d84:	42a5      	cmp	r5, r4
    3d86:	d004      	beq.n	3d92 <__libc_init_array+0x3a>
    3d88:	00ab      	lsls	r3, r5, #2
    3d8a:	58f3      	ldr	r3, [r6, r3]
    3d8c:	4798      	blx	r3
    3d8e:	3501      	adds	r5, #1
    3d90:	e7f8      	b.n	3d84 <__libc_init_array+0x2c>
    3d92:	bd70      	pop	{r4, r5, r6, pc}
    3d94:	0000402c 	.word	0x0000402c
    3d98:	0000402c 	.word	0x0000402c
    3d9c:	0000402c 	.word	0x0000402c
    3da0:	00004030 	.word	0x00004030

00003da4 <memcpy>:
    3da4:	2300      	movs	r3, #0
    3da6:	b510      	push	{r4, lr}
    3da8:	4293      	cmp	r3, r2
    3daa:	d003      	beq.n	3db4 <memcpy+0x10>
    3dac:	5ccc      	ldrb	r4, [r1, r3]
    3dae:	54c4      	strb	r4, [r0, r3]
    3db0:	3301      	adds	r3, #1
    3db2:	e7f9      	b.n	3da8 <memcpy+0x4>
    3db4:	bd10      	pop	{r4, pc}

00003db6 <memmem>:
    3db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3db8:	1c04      	adds	r4, r0, #0
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d013      	beq.n	3de6 <memmem+0x30>
    3dbe:	1c1d      	adds	r5, r3, #0
    3dc0:	1c0f      	adds	r7, r1, #0
    3dc2:	1c0e      	adds	r6, r1, #0
    3dc4:	9201      	str	r2, [sp, #4]
    3dc6:	9000      	str	r0, [sp, #0]
    3dc8:	9b00      	ldr	r3, [sp, #0]
    3dca:	1bbc      	subs	r4, r7, r6
    3dcc:	191c      	adds	r4, r3, r4
    3dce:	42b5      	cmp	r5, r6
    3dd0:	d808      	bhi.n	3de4 <memmem+0x2e>
    3dd2:	1c20      	adds	r0, r4, #0
    3dd4:	9901      	ldr	r1, [sp, #4]
    3dd6:	1c2a      	adds	r2, r5, #0
    3dd8:	f000 f81b 	bl	3e12 <memcmp>
    3ddc:	2800      	cmp	r0, #0
    3dde:	d002      	beq.n	3de6 <memmem+0x30>
    3de0:	3e01      	subs	r6, #1
    3de2:	e7f1      	b.n	3dc8 <memmem+0x12>
    3de4:	2400      	movs	r4, #0
    3de6:	1c20      	adds	r0, r4, #0
    3de8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003dea <strcat>:
    3dea:	1c02      	adds	r2, r0, #0
    3dec:	b510      	push	{r4, lr}
    3dee:	7813      	ldrb	r3, [r2, #0]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d001      	beq.n	3df8 <strcat+0xe>
    3df4:	3201      	adds	r2, #1
    3df6:	e7fa      	b.n	3dee <strcat+0x4>
    3df8:	5ccc      	ldrb	r4, [r1, r3]
    3dfa:	54d4      	strb	r4, [r2, r3]
    3dfc:	3301      	adds	r3, #1
    3dfe:	2c00      	cmp	r4, #0
    3e00:	d1fa      	bne.n	3df8 <strcat+0xe>
    3e02:	bd10      	pop	{r4, pc}

00003e04 <strlen>:
    3e04:	2300      	movs	r3, #0
    3e06:	5cc2      	ldrb	r2, [r0, r3]
    3e08:	3301      	adds	r3, #1
    3e0a:	2a00      	cmp	r2, #0
    3e0c:	d1fb      	bne.n	3e06 <strlen+0x2>
    3e0e:	1e58      	subs	r0, r3, #1
    3e10:	4770      	bx	lr

00003e12 <memcmp>:
    3e12:	b530      	push	{r4, r5, lr}
    3e14:	2400      	movs	r4, #0
    3e16:	4294      	cmp	r4, r2
    3e18:	d008      	beq.n	3e2c <memcmp+0x1a>
    3e1a:	5d03      	ldrb	r3, [r0, r4]
    3e1c:	1c65      	adds	r5, r4, #1
    3e1e:	5d0c      	ldrb	r4, [r1, r4]
    3e20:	42a3      	cmp	r3, r4
    3e22:	d001      	beq.n	3e28 <memcmp+0x16>
    3e24:	1b18      	subs	r0, r3, r4
    3e26:	e002      	b.n	3e2e <memcmp+0x1c>
    3e28:	1c2c      	adds	r4, r5, #0
    3e2a:	e7f4      	b.n	3e16 <memcmp+0x4>
    3e2c:	2000      	movs	r0, #0
    3e2e:	bd30      	pop	{r4, r5, pc}
    3e30:	0a0d7461 	.word	0x0a0d7461
    3e34:	00000000 	.word	0x00000000
    3e38:	0a0d7461 	.word	0x0a0d7461
    3e3c:	75716e69 	.word	0x75716e69
    3e40:	20797269 	.word	0x20797269
    3e44:	616e2035 	.word	0x616e2035
    3e48:	0a0d656d 	.word	0x0a0d656d
    3e4c:	00000000 	.word	0x00000000
    3e50:	4c534941 	.word	0x4c534941
    3e54:	31307656 	.word	0x31307656
    3e58:	00000000 	.word	0x00000000
    3e5c:	454d414e 	.word	0x454d414e
    3e60:	00000000 	.word	0x00000000
    3e64:	20746573 	.word	0x20746573
    3e68:	70207462 	.word	0x70207462
    3e6c:	0d726961 	.word	0x0d726961
    3e70:	0000000a 	.word	0x0000000a
    3e74:	20544553 	.word	0x20544553
    3e78:	50205442 	.word	0x50205442
    3e7c:	00524941 	.word	0x00524941
    3e80:	0a0d7461 	.word	0x0a0d7461
    3e84:	0a0d7461 	.word	0x0a0d7461
    3e88:	00000000 	.word	0x00000000
    3e8c:	0a0d4b4f 	.word	0x0a0d4b4f
    3e90:	00000000 	.word	0x00000000
    3e94:	61700a0d 	.word	0x61700a0d
    3e98:	00207269 	.word	0x00207269
    3e9c:	00000a0d 	.word	0x00000a0d
    3ea0:	00004b4f 	.word	0x00004b4f
    3ea4:	0a0d7461 	.word	0x0a0d7461
    3ea8:	20746573 	.word	0x20746573
    3eac:	70207462 	.word	0x70207462
    3eb0:	20726961 	.word	0x20726961
    3eb4:	00000000 	.word	0x00000000
    3eb8:	0a0d7461 	.word	0x0a0d7461
    3ebc:	4c4c4143 	.word	0x4c4c4143
    3ec0:	00000020 	.word	0x00000020
    3ec4:	30313120 	.word	0x30313120
    3ec8:	46522031 	.word	0x46522031
    3ecc:	4d4d4f43 	.word	0x4d4d4f43
    3ed0:	00000a0d 	.word	0x00000a0d
    3ed4:	4e4e4f43 	.word	0x4e4e4f43
    3ed8:	20544345 	.word	0x20544345
    3edc:	46522030 	.word	0x46522030
    3ee0:	4d4d4f43 	.word	0x4d4d4f43
    3ee4:	0a0d3120 	.word	0x0a0d3120
    3ee8:	00000000 	.word	0x00000000
    3eec:	0a0d6b6f 	.word	0x0a0d6b6f
    3ef0:	0d746573 	.word	0x0d746573
    3ef4:	0000000a 	.word	0x0000000a
    3ef8:	4d494133 	.word	0x4d494133
    3efc:	30765341 	.word	0x30765341
    3f00:	00000031 	.word	0x00000031
    3f04:	65730a0d 	.word	0x65730a0d
    3f08:	74622074 	.word	0x74622074
    3f0c:	6c6f7220 	.word	0x6c6f7220
    3f10:	20302065 	.word	0x20302065
    3f14:	30312046 	.word	0x30312046
    3f18:	0a0d3030 	.word	0x0a0d3030
    3f1c:	00000000 	.word	0x00000000
    3f20:	65730a0d 	.word	0x65730a0d
    3f24:	6f632074 	.word	0x6f632074
    3f28:	6f72746e 	.word	0x6f72746e
    3f2c:	6463206c 	.word	0x6463206c
    3f30:	20303220 	.word	0x20303220
    3f34:	30382032 	.word	0x30382032
    3f38:	00000a0d 	.word	0x00000a0d
    3f3c:	65730a0d 	.word	0x65730a0d
    3f40:	6f632074 	.word	0x6f632074
    3f44:	6f72746e 	.word	0x6f72746e
    3f48:	7561206c 	.word	0x7561206c
    3f4c:	61636f74 	.word	0x61636f74
    3f50:	31206c6c 	.word	0x31206c6c
    3f54:	20313031 	.word	0x20313031
    3f58:	30303035 	.word	0x30303035
    3f5c:	63667220 	.word	0x63667220
    3f60:	0d6d6d6f 	.word	0x0d6d6d6f
    3f64:	0000000a 	.word	0x0000000a
    3f68:	0a0d7461 	.word	0x0a0d7461
    3f6c:	0a0d7461 	.word	0x0a0d7461
    3f70:	20746573 	.word	0x20746573
    3f74:	6e207462 	.word	0x6e207462
    3f78:	20656d61 	.word	0x20656d61
    3f7c:	00000000 	.word	0x00000000
    3f80:	65730a0d 	.word	0x65730a0d
    3f84:	000a0d74 	.word	0x000a0d74
    3f88:	0a090807 	.word	0x0a090807
    3f8c:	00000c0b 	.word	0x00000c0b
    3f90:	42002000 	.word	0x42002000
    3f94:	42002400 	.word	0x42002400
    3f98:	42002800 	.word	0x42002800
    3f9c:	42002c00 	.word	0x42002c00
    3fa0:	42003000 	.word	0x42003000
    3fa4:	42003400 	.word	0x42003400
    3fa8:	42003800 	.word	0x42003800
    3fac:	42003c00 	.word	0x42003c00
    3fb0:	14141313 	.word	0x14141313
    3fb4:	16161515 	.word	0x16161515
    3fb8:	02000100 	.word	0x02000100
    3fbc:	08000400 	.word	0x08000400
    3fc0:	20001000 	.word	0x20001000
    3fc4:	80004000 	.word	0x80004000
    3fc8:	42000800 	.word	0x42000800
    3fcc:	42000c00 	.word	0x42000c00
    3fd0:	42001000 	.word	0x42001000
    3fd4:	42001400 	.word	0x42001400
    3fd8:	42001800 	.word	0x42001800
    3fdc:	42001c00 	.word	0x42001c00
    3fe0:	00003036 	.word	0x00003036
    3fe4:	00003098 	.word	0x00003098
    3fe8:	00003098 	.word	0x00003098
    3fec:	00003058 	.word	0x00003058
    3ff0:	00003052 	.word	0x00003052
    3ff4:	0000305e 	.word	0x0000305e
    3ff8:	0000303c 	.word	0x0000303c
    3ffc:	00003064 	.word	0x00003064
    4000:	000032e8 	.word	0x000032e8
    4004:	00003322 	.word	0x00003322
    4008:	00003322 	.word	0x00003322
    400c:	0000331e 	.word	0x0000331e
    4010:	000032da 	.word	0x000032da
    4014:	000032fa 	.word	0x000032fa
    4018:	000032ca 	.word	0x000032ca
    401c:	0000330c 	.word	0x0000330c

00004020 <_init>:
    4020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4026:	bc08      	pop	{r3}
    4028:	469e      	mov	lr, r3
    402a:	4770      	bx	lr

0000402c <__init_array_start>:
    402c:	000000cd 	.word	0x000000cd

00004030 <_fini>:
    4030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4036:	bc08      	pop	{r3}
    4038:	469e      	mov	lr, r3
    403a:	4770      	bx	lr

0000403c <__fini_array_start>:
    403c:	000000a5 	.word	0x000000a5
