
FP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002610  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002610  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000950  20000010  00002620  00010010  2**2
                  ALLOC
  3 .stack        00002000  20000960  00002f70  00010010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016fe0  00000000  00000000  00010093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002272  00000000  00000000  00027073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001f4e  00000000  00000000  000292e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000600  00000000  00000000  0002b233  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000520  00000000  00000000  0002b833  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000051bc  00000000  00000000  0002bd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009462  00000000  00000000  00030f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006012d  00000000  00000000  0003a371  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001370  00000000  00000000  0009a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002960 	.word	0x20002960
       4:	0000247d 	.word	0x0000247d
       8:	00002511 	.word	0x00002511
       c:	00002511 	.word	0x00002511
	...
      2c:	00002511 	.word	0x00002511
	...
      38:	00002511 	.word	0x00002511
      3c:	00002511 	.word	0x00002511
      40:	00002511 	.word	0x00002511
      44:	00002511 	.word	0x00002511
      48:	00002511 	.word	0x00002511
      4c:	00002511 	.word	0x00002511
      50:	00002511 	.word	0x00002511
      54:	00002511 	.word	0x00002511
      58:	00002511 	.word	0x00002511
      5c:	00000a05 	.word	0x00000a05
      60:	00000a19 	.word	0x00000a19
      64:	00000a2d 	.word	0x00000a2d
      68:	00000a41 	.word	0x00000a41
      6c:	00000a55 	.word	0x00000a55
      70:	00000a69 	.word	0x00000a69
      74:	00001db5 	.word	0x00001db5
      78:	00001dc9 	.word	0x00001dc9
      7c:	00001ddd 	.word	0x00001ddd
      80:	00001df1 	.word	0x00001df1
      84:	00001e05 	.word	0x00001e05
      88:	00001e19 	.word	0x00001e19
      8c:	00001e2d 	.word	0x00001e2d
      90:	00001e41 	.word	0x00001e41
      94:	00002511 	.word	0x00002511
      98:	00002511 	.word	0x00002511
      9c:	00002511 	.word	0x00002511
      a0:	00002511 	.word	0x00002511

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000010 	.word	0x20000010
      c4:	00000000 	.word	0x00000000
      c8:	00002610 	.word	0x00002610

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00002610 	.word	0x00002610
      f8:	20000014 	.word	0x20000014
      fc:	00002610 	.word	0x00002610
     100:	00000000 	.word	0x00000000

00000104 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     104:	b580      	push	{r7, lr}
     106:	b084      	sub	sp, #16
     108:	af00      	add	r7, sp, #0
     10a:	1c02      	adds	r2, r0, #0
     10c:	1dfb      	adds	r3, r7, #7
     10e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     110:	230f      	movs	r3, #15
     112:	18fb      	adds	r3, r7, r3
     114:	1dfa      	adds	r2, r7, #7
     116:	7812      	ldrb	r2, [r2, #0]
     118:	09d2      	lsrs	r2, r2, #7
     11a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     11c:	230e      	movs	r3, #14
     11e:	18fb      	adds	r3, r7, r3
     120:	1dfa      	adds	r2, r7, #7
     122:	7812      	ldrb	r2, [r2, #0]
     124:	0952      	lsrs	r2, r2, #5
     126:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     128:	4b0d      	ldr	r3, [pc, #52]	; (160 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     12a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10f      	bne.n	156 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     136:	230f      	movs	r3, #15
     138:	18fb      	adds	r3, r7, r3
     13a:	781b      	ldrb	r3, [r3, #0]
     13c:	009b      	lsls	r3, r3, #2
     13e:	2210      	movs	r2, #16
     140:	4694      	mov	ip, r2
     142:	44bc      	add	ip, r7
     144:	4463      	add	r3, ip
     146:	3b08      	subs	r3, #8
     148:	681a      	ldr	r2, [r3, #0]
     14a:	230e      	movs	r3, #14
     14c:	18fb      	adds	r3, r7, r3
     14e:	781b      	ldrb	r3, [r3, #0]
     150:	01db      	lsls	r3, r3, #7
     152:	18d3      	adds	r3, r2, r3
     154:	e000      	b.n	158 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     156:	2300      	movs	r3, #0
	}
}
     158:	1c18      	adds	r0, r3, #0
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}
     160:	41004400 	.word	0x41004400

00000164 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     164:	b580      	push	{r7, lr}
     166:	b082      	sub	sp, #8
     168:	af00      	add	r7, sp, #0
     16a:	1c02      	adds	r2, r0, #0
     16c:	1dfb      	adds	r3, r7, #7
     16e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     170:	1dfb      	adds	r3, r7, #7
     172:	781b      	ldrb	r3, [r3, #0]
     174:	1c18      	adds	r0, r3, #0
     176:	4b03      	ldr	r3, [pc, #12]	; (184 <port_get_group_from_gpio_pin+0x20>)
     178:	4798      	blx	r3
     17a:	1c03      	adds	r3, r0, #0
}
     17c:	1c18      	adds	r0, r3, #0
     17e:	46bd      	mov	sp, r7
     180:	b002      	add	sp, #8
     182:	bd80      	pop	{r7, pc}
     184:	00000105 	.word	0x00000105

00000188 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2200      	movs	r2, #0
     194:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2201      	movs	r2, #1
     19a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2200      	movs	r2, #0
     1a0:	709a      	strb	r2, [r3, #2]
}
     1a2:	46bd      	mov	sp, r7
     1a4:	b002      	add	sp, #8
     1a6:	bd80      	pop	{r7, pc}

000001a8 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	1c02      	adds	r2, r0, #0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	1c18      	adds	r0, r3, #0
     1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <port_pin_get_input_level+0x40>)
     1bc:	4798      	blx	r3
     1be:	1c03      	adds	r3, r0, #0
     1c0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1c2:	1dfb      	adds	r3, r7, #7
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	221f      	movs	r2, #31
     1c8:	4013      	ands	r3, r2
     1ca:	2201      	movs	r2, #1
     1cc:	409a      	lsls	r2, r3
     1ce:	1c13      	adds	r3, r2, #0
     1d0:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	6a1b      	ldr	r3, [r3, #32]
     1d6:	68ba      	ldr	r2, [r7, #8]
     1d8:	4013      	ands	r3, r2
     1da:	1e5a      	subs	r2, r3, #1
     1dc:	4193      	sbcs	r3, r2
     1de:	b2db      	uxtb	r3, r3
}
     1e0:	1c18      	adds	r0, r3, #0
     1e2:	46bd      	mov	sp, r7
     1e4:	b004      	add	sp, #16
     1e6:	bd80      	pop	{r7, pc}
     1e8:	00000165 	.word	0x00000165

000001ec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	1c02      	adds	r2, r0, #0
     1f4:	1dfb      	adds	r3, r7, #7
     1f6:	701a      	strb	r2, [r3, #0]
     1f8:	1dbb      	adds	r3, r7, #6
     1fa:	1c0a      	adds	r2, r1, #0
     1fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1fe:	1dfb      	adds	r3, r7, #7
     200:	781b      	ldrb	r3, [r3, #0]
     202:	1c18      	adds	r0, r3, #0
     204:	4b0c      	ldr	r3, [pc, #48]	; (238 <port_pin_set_output_level+0x4c>)
     206:	4798      	blx	r3
     208:	1c03      	adds	r3, r0, #0
     20a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     20c:	1dfb      	adds	r3, r7, #7
     20e:	781b      	ldrb	r3, [r3, #0]
     210:	221f      	movs	r2, #31
     212:	4013      	ands	r3, r2
     214:	2201      	movs	r2, #1
     216:	409a      	lsls	r2, r3
     218:	1c13      	adds	r3, r2, #0
     21a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     21c:	1dbb      	adds	r3, r7, #6
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	2b00      	cmp	r3, #0
     222:	d003      	beq.n	22c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     224:	68fb      	ldr	r3, [r7, #12]
     226:	68ba      	ldr	r2, [r7, #8]
     228:	619a      	str	r2, [r3, #24]
     22a:	e002      	b.n	232 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	68ba      	ldr	r2, [r7, #8]
     230:	615a      	str	r2, [r3, #20]
	}
}
     232:	46bd      	mov	sp, r7
     234:	b004      	add	sp, #16
     236:	bd80      	pop	{r7, pc}
     238:	00000165 	.word	0x00000165

0000023c <delay>:
#define I2C_CLOCK_LO()	port_pin_set_output_level(LED_FP_SCL,0);

volatile uint32_t delayCnt;

void delay(uint32_t delayCntt)						// some delay for clock
{	delayCnt = delayCntt;
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <delay+0x24>)
     246:	687a      	ldr	r2, [r7, #4]
     248:	601a      	str	r2, [r3, #0]
	while (delayCntt>0) delayCntt--;
     24a:	e002      	b.n	252 <delay+0x16>
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	3b01      	subs	r3, #1
     250:	607b      	str	r3, [r7, #4]
     252:	687b      	ldr	r3, [r7, #4]
     254:	2b00      	cmp	r3, #0
     256:	d1f9      	bne.n	24c <delay+0x10>
}
     258:	46bd      	mov	sp, r7
     25a:	b002      	add	sp, #8
     25c:	bd80      	pop	{r7, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	20000064 	.word	0x20000064

00000264 <LED_I2C_Init>:


void LED_I2C_Init(void)
{
     264:	b580      	push	{r7, lr}
     266:	b082      	sub	sp, #8
     268:	af00      	add	r7, sp, #0
	/* Initialize board hardware */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     26a:	1d3b      	adds	r3, r7, #4
     26c:	1c18      	adds	r0, r3, #0
     26e:	4b0e      	ldr	r3, [pc, #56]	; (2a8 <LED_I2C_Init+0x44>)
     270:	4798      	blx	r3

	// SDA
	pin_conf.direction    = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
     272:	1d3b      	adds	r3, r7, #4
     274:	2202      	movs	r2, #2
     276:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_FP_SDA, &pin_conf);
     278:	1d3b      	adds	r3, r7, #4
     27a:	2023      	movs	r0, #35	; 0x23
     27c:	1c19      	adds	r1, r3, #0
     27e:	4b0b      	ldr	r3, [pc, #44]	; (2ac <LED_I2C_Init+0x48>)
     280:	4798      	blx	r3
	port_pin_set_output_level(LED_FP_SDA, 1);
     282:	2023      	movs	r0, #35	; 0x23
     284:	2101      	movs	r1, #1
     286:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <LED_I2C_Init+0x4c>)
     288:	4798      	blx	r3
	// SCL 
	pin_conf.direction    = PORT_PIN_DIR_OUTPUT;
     28a:	1d3b      	adds	r3, r7, #4
     28c:	2201      	movs	r2, #1
     28e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_FP_SCL, &pin_conf);
     290:	1d3b      	adds	r3, r7, #4
     292:	2022      	movs	r0, #34	; 0x22
     294:	1c19      	adds	r1, r3, #0
     296:	4b05      	ldr	r3, [pc, #20]	; (2ac <LED_I2C_Init+0x48>)
     298:	4798      	blx	r3
	port_pin_set_output_level(LED_FP_SCL, 1);
     29a:	2022      	movs	r0, #34	; 0x22
     29c:	2101      	movs	r1, #1
     29e:	4b04      	ldr	r3, [pc, #16]	; (2b0 <LED_I2C_Init+0x4c>)
     2a0:	4798      	blx	r3
	
}
     2a2:	46bd      	mov	sp, r7
     2a4:	b002      	add	sp, #8
     2a6:	bd80      	pop	{r7, pc}
     2a8:	00000189 	.word	0x00000189
     2ac:	00001129 	.word	0x00001129
     2b0:	000001ed 	.word	0x000001ed

000002b4 <I2C_WriteBit>:
	

void I2C_WriteBit(bool bval)
{
     2b4:	b580      	push	{r7, lr}
     2b6:	b082      	sub	sp, #8
     2b8:	af00      	add	r7, sp, #0
     2ba:	1c02      	adds	r2, r0, #0
     2bc:	1dfb      	adds	r3, r7, #7
     2be:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(LED_FP_SDA,bval);
     2c0:	1dfb      	adds	r3, r7, #7
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2023      	movs	r0, #35	; 0x23
     2c6:	1c19      	adds	r1, r3, #0
     2c8:	4b09      	ldr	r3, [pc, #36]	; (2f0 <I2C_WriteBit+0x3c>)
     2ca:	4798      	blx	r3
    I2C_CLOCK_HI();
     2cc:	2022      	movs	r0, #34	; 0x22
     2ce:	2101      	movs	r1, #1
     2d0:	4b07      	ldr	r3, [pc, #28]	; (2f0 <I2C_WriteBit+0x3c>)
     2d2:	4798      	blx	r3

    delay(1);
     2d4:	2001      	movs	r0, #1
     2d6:	4b07      	ldr	r3, [pc, #28]	; (2f4 <I2C_WriteBit+0x40>)
     2d8:	4798      	blx	r3

    I2C_CLOCK_LO();
     2da:	2022      	movs	r0, #34	; 0x22
     2dc:	2100      	movs	r1, #0
     2de:	4b04      	ldr	r3, [pc, #16]	; (2f0 <I2C_WriteBit+0x3c>)
     2e0:	4798      	blx	r3
    delay(1);
     2e2:	2001      	movs	r0, #1
     2e4:	4b03      	ldr	r3, [pc, #12]	; (2f4 <I2C_WriteBit+0x40>)
     2e6:	4798      	blx	r3


}
     2e8:	46bd      	mov	sp, r7
     2ea:	b002      	add	sp, #8
     2ec:	bd80      	pop	{r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	000001ed 	.word	0x000001ed
     2f4:	0000023d 	.word	0x0000023d

000002f8 <I2C_ReadBit>:
bool lastI2C_ReadBit;

bool I2C_ReadBit(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	af00      	add	r7, sp, #0
    port_pin_set_output_level(LED_FP_SDA,1); //I2C_DATA_HI();
     2fc:	2023      	movs	r0, #35	; 0x23
     2fe:	2101      	movs	r1, #1
     300:	4b0d      	ldr	r3, [pc, #52]	; (338 <I2C_ReadBit+0x40>)
     302:	4798      	blx	r3

    I2C_CLOCK_HI();
     304:	2022      	movs	r0, #34	; 0x22
     306:	2101      	movs	r1, #1
     308:	4b0b      	ldr	r3, [pc, #44]	; (338 <I2C_ReadBit+0x40>)
     30a:	4798      	blx	r3
    delay(1);
     30c:	2001      	movs	r0, #1
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <I2C_ReadBit+0x44>)
     310:	4798      	blx	r3

    lastI2C_ReadBit = port_pin_get_input_level(LED_FP_SDA);
     312:	2023      	movs	r0, #35	; 0x23
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <I2C_ReadBit+0x48>)
     316:	4798      	blx	r3
     318:	1c03      	adds	r3, r0, #0
     31a:	1c1a      	adds	r2, r3, #0
     31c:	4b09      	ldr	r3, [pc, #36]	; (344 <I2C_ReadBit+0x4c>)
     31e:	701a      	strb	r2, [r3, #0]

    I2C_CLOCK_LO();
     320:	2022      	movs	r0, #34	; 0x22
     322:	2100      	movs	r1, #0
     324:	4b04      	ldr	r3, [pc, #16]	; (338 <I2C_ReadBit+0x40>)
     326:	4798      	blx	r3
    delay(1);
     328:	2001      	movs	r0, #1
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <I2C_ReadBit+0x44>)
     32c:	4798      	blx	r3

    return lastI2C_ReadBit;
     32e:	4b05      	ldr	r3, [pc, #20]	; (344 <I2C_ReadBit+0x4c>)
     330:	781b      	ldrb	r3, [r3, #0]
}
     332:	1c18      	adds	r0, r3, #0
     334:	46bd      	mov	sp, r7
     336:	bd80      	pop	{r7, pc}
     338:	000001ed 	.word	0x000001ed
     33c:	0000023d 	.word	0x0000023d
     340:	000001a9 	.word	0x000001a9
     344:	20000068 	.word	0x20000068

00000348 <LED_I2C_Start>:
condition*/

// Send a START Condition
//
void LED_I2C_Start(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
    // set both to high at the same time
	port_pin_set_output_level(LED_FP_SDA,1);	//I2C_DDR &= ~ ((1 << I2C_DAT) | (1 << I2C_CLK));
     34c:	2023      	movs	r0, #35	; 0x23
     34e:	2101      	movs	r1, #1
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <LED_I2C_Start+0x3c>)
     352:	4798      	blx	r3
	port_pin_set_output_level(LED_FP_SCL,1);
     354:	2022      	movs	r0, #34	; 0x22
     356:	2101      	movs	r1, #1
     358:	4b0a      	ldr	r3, [pc, #40]	; (384 <LED_I2C_Start+0x3c>)
     35a:	4798      	blx	r3
    delay(1);
     35c:	2001      	movs	r0, #1
     35e:	4b0a      	ldr	r3, [pc, #40]	; (388 <LED_I2C_Start+0x40>)
     360:	4798      	blx	r3

	port_pin_set_output_level(LED_FP_SDA,0);	// I2C_DATA_LO()
     362:	2023      	movs	r0, #35	; 0x23
     364:	2100      	movs	r1, #0
     366:	4b07      	ldr	r3, [pc, #28]	; (384 <LED_I2C_Start+0x3c>)
     368:	4798      	blx	r3
    delay(1);
     36a:	2001      	movs	r0, #1
     36c:	4b06      	ldr	r3, [pc, #24]	; (388 <LED_I2C_Start+0x40>)
     36e:	4798      	blx	r3
	I2C_CLOCK_LO();
     370:	2022      	movs	r0, #34	; 0x22
     372:	2100      	movs	r1, #0
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <LED_I2C_Start+0x3c>)
     376:	4798      	blx	r3
    delay(1);
     378:	2001      	movs	r0, #1
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <LED_I2C_Start+0x40>)
     37c:	4798      	blx	r3
}
     37e:	46bd      	mov	sp, r7
     380:	bd80      	pop	{r7, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	000001ed 	.word	0x000001ed
     388:	0000023d 	.word	0x0000023d

0000038c <LED_I2C_Stop>:

// Send a STOP Condition
//
void LED_I2C_Stop(void)
{
     38c:	b580      	push	{r7, lr}
     38e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LED_FP_SDA,0);
     390:	2023      	movs	r0, #35	; 0x23
     392:	2100      	movs	r1, #0
     394:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <LED_I2C_Stop+0x34>)
     396:	4798      	blx	r3
    delay(1);    
     398:	2001      	movs	r0, #1
     39a:	4b0a      	ldr	r3, [pc, #40]	; (3c4 <LED_I2C_Stop+0x38>)
     39c:	4798      	blx	r3
	
	I2C_CLOCK_HI();
     39e:	2022      	movs	r0, #34	; 0x22
     3a0:	2101      	movs	r1, #1
     3a2:	4b07      	ldr	r3, [pc, #28]	; (3c0 <LED_I2C_Stop+0x34>)
     3a4:	4798      	blx	r3
    delay(1);
     3a6:	2001      	movs	r0, #1
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <LED_I2C_Stop+0x38>)
     3aa:	4798      	blx	r3

	port_pin_set_output_level(LED_FP_SDA,1);	//I2C_DATA_HI();
     3ac:	2023      	movs	r0, #35	; 0x23
     3ae:	2101      	movs	r1, #1
     3b0:	4b03      	ldr	r3, [pc, #12]	; (3c0 <LED_I2C_Stop+0x34>)
     3b2:	4798      	blx	r3
    delay(1);
     3b4:	2001      	movs	r0, #1
     3b6:	4b03      	ldr	r3, [pc, #12]	; (3c4 <LED_I2C_Stop+0x38>)
     3b8:	4798      	blx	r3
}
     3ba:	46bd      	mov	sp, r7
     3bc:	bd80      	pop	{r7, pc}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	000001ed 	.word	0x000001ed
     3c4:	0000023d 	.word	0x0000023d

000003c8 <LED_I2C_Write>:


// write a byte to the I2C slave device
//
uint8_t LED_I2C_Write(uint8_t c)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b084      	sub	sp, #16
     3cc:	af00      	add	r7, sp, #0
     3ce:	1c02      	adds	r2, r0, #0
     3d0:	1dfb      	adds	r3, r7, #7
     3d2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
     3d4:	230f      	movs	r3, #15
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	2200      	movs	r2, #0
     3da:	701a      	strb	r2, [r3, #0]
     3dc:	e017      	b.n	40e <LED_I2C_Write+0x46>
    {			
		if(c & 0x80)I2C_WriteBit(true);
     3de:	1dfb      	adds	r3, r7, #7
     3e0:	781b      	ldrb	r3, [r3, #0]
     3e2:	b25b      	sxtb	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	da03      	bge.n	3f0 <LED_I2C_Write+0x28>
     3e8:	2001      	movs	r0, #1
     3ea:	4b0f      	ldr	r3, [pc, #60]	; (428 <LED_I2C_Write+0x60>)
     3ec:	4798      	blx	r3
     3ee:	e002      	b.n	3f6 <LED_I2C_Write+0x2e>
		else I2C_WriteBit(false);
     3f0:	2000      	movs	r0, #0
     3f2:	4b0d      	ldr	r3, [pc, #52]	; (428 <LED_I2C_Write+0x60>)
     3f4:	4798      	blx	r3
        c <<= 1;
     3f6:	1dfa      	adds	r2, r7, #7
     3f8:	1dfb      	adds	r3, r7, #7
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	18db      	adds	r3, r3, r3
     3fe:	7013      	strb	r3, [r2, #0]

// write a byte to the I2C slave device
//
uint8_t LED_I2C_Write(uint8_t c)
{
    for (uint8_t i = 0; i < 8; i++)
     400:	230f      	movs	r3, #15
     402:	18fb      	adds	r3, r7, r3
     404:	781a      	ldrb	r2, [r3, #0]
     406:	230f      	movs	r3, #15
     408:	18fb      	adds	r3, r7, r3
     40a:	3201      	adds	r2, #1
     40c:	701a      	strb	r2, [r3, #0]
     40e:	230f      	movs	r3, #15
     410:	18fb      	adds	r3, r7, r3
     412:	781b      	ldrb	r3, [r3, #0]
     414:	2b07      	cmp	r3, #7
     416:	d9e2      	bls.n	3de <LED_I2C_Write+0x16>
		if(c & 0x80)I2C_WriteBit(true);
		else I2C_WriteBit(false);
        c <<= 1;
    }

    return I2C_ReadBit();
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <LED_I2C_Write+0x64>)
     41a:	4798      	blx	r3
     41c:	1c03      	adds	r3, r0, #0
    //return 0;
}
     41e:	1c18      	adds	r0, r3, #0
     420:	46bd      	mov	sp, r7
     422:	b004      	add	sp, #16
     424:	bd80      	pop	{r7, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	000002b5 	.word	0x000002b5
     42c:	000002f9 	.word	0x000002f9

00000430 <LED_I2C_Read>:


// read a byte from the I2C slave device
//
uint8_t LED_I2C_Read(uint8_t ack)
{
     430:	b580      	push	{r7, lr}
     432:	b084      	sub	sp, #16
     434:	af00      	add	r7, sp, #0
     436:	1c02      	adds	r2, r0, #0
     438:	1dfb      	adds	r3, r7, #7
     43a:	701a      	strb	r2, [r3, #0]
    uint8_t res = 0;
     43c:	230f      	movs	r3, #15
     43e:	18fb      	adds	r3, r7, r3
     440:	2200      	movs	r2, #0
     442:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 8; i++)
     444:	230e      	movs	r3, #14
     446:	18fb      	adds	r3, r7, r3
     448:	2200      	movs	r2, #0
     44a:	701a      	strb	r2, [r3, #0]
     44c:	e018      	b.n	480 <LED_I2C_Read+0x50>
    {
        res <<= 1;
     44e:	230f      	movs	r3, #15
     450:	18fa      	adds	r2, r7, r3
     452:	230f      	movs	r3, #15
     454:	18fb      	adds	r3, r7, r3
     456:	781b      	ldrb	r3, [r3, #0]
     458:	18db      	adds	r3, r3, r3
     45a:	7013      	strb	r3, [r2, #0]
        res |= I2C_ReadBit();
     45c:	4b15      	ldr	r3, [pc, #84]	; (4b4 <LED_I2C_Read+0x84>)
     45e:	4798      	blx	r3
     460:	1c03      	adds	r3, r0, #0
     462:	1c19      	adds	r1, r3, #0
     464:	230f      	movs	r3, #15
     466:	18fb      	adds	r3, r7, r3
     468:	220f      	movs	r2, #15
     46a:	18ba      	adds	r2, r7, r2
     46c:	7812      	ldrb	r2, [r2, #0]
     46e:	430a      	orrs	r2, r1
     470:	701a      	strb	r2, [r3, #0]
//
uint8_t LED_I2C_Read(uint8_t ack)
{
    uint8_t res = 0;

    for (uint8_t i = 0; i < 8; i++)
     472:	230e      	movs	r3, #14
     474:	18fb      	adds	r3, r7, r3
     476:	781a      	ldrb	r2, [r3, #0]
     478:	230e      	movs	r3, #14
     47a:	18fb      	adds	r3, r7, r3
     47c:	3201      	adds	r2, #1
     47e:	701a      	strb	r2, [r3, #0]
     480:	230e      	movs	r3, #14
     482:	18fb      	adds	r3, r7, r3
     484:	781b      	ldrb	r3, [r3, #0]
     486:	2b07      	cmp	r3, #7
     488:	d9e1      	bls.n	44e <LED_I2C_Read+0x1e>
    {
        res <<= 1;
        res |= I2C_ReadBit();
    }

    if (ack > 0)
     48a:	1dfb      	adds	r3, r7, #7
     48c:	781b      	ldrb	r3, [r3, #0]
     48e:	2b00      	cmp	r3, #0
     490:	d003      	beq.n	49a <LED_I2C_Read+0x6a>
    {
        I2C_WriteBit(0);
     492:	2000      	movs	r0, #0
     494:	4b08      	ldr	r3, [pc, #32]	; (4b8 <LED_I2C_Read+0x88>)
     496:	4798      	blx	r3
     498:	e002      	b.n	4a0 <LED_I2C_Read+0x70>
    }
    else
    {
        I2C_WriteBit(1);
     49a:	2001      	movs	r0, #1
     49c:	4b06      	ldr	r3, [pc, #24]	; (4b8 <LED_I2C_Read+0x88>)
     49e:	4798      	blx	r3
    }

    delay(1);
     4a0:	2001      	movs	r0, #1
     4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <LED_I2C_Read+0x8c>)
     4a4:	4798      	blx	r3

    return res;
     4a6:	230f      	movs	r3, #15
     4a8:	18fb      	adds	r3, r7, r3
     4aa:	781b      	ldrb	r3, [r3, #0]
}
     4ac:	1c18      	adds	r0, r3, #0
     4ae:	46bd      	mov	sp, r7
     4b0:	b004      	add	sp, #16
     4b2:	bd80      	pop	{r7, pc}
     4b4:	000002f9 	.word	0x000002f9
     4b8:	000002b5 	.word	0x000002b5
     4bc:	0000023d 	.word	0x0000023d

000004c0 <LEDs_Init>:
}*/

uint8_t LED_Vals[3*24];		// brightness values 0-255
uint8_t regs[100];
void LEDs_Init(void)						// init all 3 ICs
{
     4c0:	b590      	push	{r4, r7, lr}
     4c2:	b083      	sub	sp, #12
     4c4:	af00      	add	r7, sp, #0
	uint8_t i;

	LED_I2C_Init();
     4c6:	4b5e      	ldr	r3, [pc, #376]	; (640 <LEDs_Init+0x180>)
     4c8:	4798      	blx	r3
	// read the default values
	LED_I2C_Start();
     4ca:	4b5e      	ldr	r3, [pc, #376]	; (644 <LEDs_Init+0x184>)
     4cc:	4798      	blx	r3
	LED_I2C_Write(3);		// addr + read bit
     4ce:	2003      	movs	r0, #3
     4d0:	4b5d      	ldr	r3, [pc, #372]	; (648 <LEDs_Init+0x188>)
     4d2:	4798      	blx	r3
	for (i=0; i<0x3e; i++) regs[i]=LED_I2C_Read(1);
     4d4:	1dfb      	adds	r3, r7, #7
     4d6:	2200      	movs	r2, #0
     4d8:	701a      	strb	r2, [r3, #0]
     4da:	e00d      	b.n	4f8 <LEDs_Init+0x38>
     4dc:	1dfb      	adds	r3, r7, #7
     4de:	781c      	ldrb	r4, [r3, #0]
     4e0:	2001      	movs	r0, #1
     4e2:	4b5a      	ldr	r3, [pc, #360]	; (64c <LEDs_Init+0x18c>)
     4e4:	4798      	blx	r3
     4e6:	1c03      	adds	r3, r0, #0
     4e8:	1c1a      	adds	r2, r3, #0
     4ea:	4b59      	ldr	r3, [pc, #356]	; (650 <LEDs_Init+0x190>)
     4ec:	551a      	strb	r2, [r3, r4]
     4ee:	1dfb      	adds	r3, r7, #7
     4f0:	781a      	ldrb	r2, [r3, #0]
     4f2:	1dfb      	adds	r3, r7, #7
     4f4:	3201      	adds	r2, #1
     4f6:	701a      	strb	r2, [r3, #0]
     4f8:	1dfb      	adds	r3, r7, #7
     4fa:	781b      	ldrb	r3, [r3, #0]
     4fc:	2b3d      	cmp	r3, #61	; 0x3d
     4fe:	d9ed      	bls.n	4dc <LEDs_Init+0x1c>
	regs[i]=LED_I2C_Read(0);
     500:	1dfb      	adds	r3, r7, #7
     502:	781c      	ldrb	r4, [r3, #0]
     504:	2000      	movs	r0, #0
     506:	4b51      	ldr	r3, [pc, #324]	; (64c <LEDs_Init+0x18c>)
     508:	4798      	blx	r3
     50a:	1c03      	adds	r3, r0, #0
     50c:	1c1a      	adds	r2, r3, #0
     50e:	4b50      	ldr	r3, [pc, #320]	; (650 <LEDs_Init+0x190>)
     510:	551a      	strb	r2, [r3, r4]
	LED_I2C_Stop();
     512:	4b50      	ldr	r3, [pc, #320]	; (654 <LEDs_Init+0x194>)
     514:	4798      	blx	r3

	// load IREF_REGISTERs to max
	for (i=IREF_REGISTER_START; i<IREF_REGISTER_START+24; i++) regs[i]= 0xff;
     516:	1dfb      	adds	r3, r7, #7
     518:	2222      	movs	r2, #34	; 0x22
     51a:	701a      	strb	r2, [r3, #0]
     51c:	e009      	b.n	532 <LEDs_Init+0x72>
     51e:	1dfb      	adds	r3, r7, #7
     520:	781b      	ldrb	r3, [r3, #0]
     522:	4a4b      	ldr	r2, [pc, #300]	; (650 <LEDs_Init+0x190>)
     524:	21ff      	movs	r1, #255	; 0xff
     526:	54d1      	strb	r1, [r2, r3]
     528:	1dfb      	adds	r3, r7, #7
     52a:	781a      	ldrb	r2, [r3, #0]
     52c:	1dfb      	adds	r3, r7, #7
     52e:	3201      	adds	r2, #1
     530:	701a      	strb	r2, [r3, #0]
     532:	1dfb      	adds	r3, r7, #7
     534:	781b      	ldrb	r3, [r3, #0]
     536:	2b39      	cmp	r3, #57	; 0x39
     538:	d9f1      	bls.n	51e <LEDs_Init+0x5e>

	// write them back
	LED_I2C_Start();
     53a:	4b42      	ldr	r3, [pc, #264]	; (644 <LEDs_Init+0x184>)
     53c:	4798      	blx	r3
	LED_I2C_Write(LED_1_24_ADDRESS);		// addr
     53e:	2002      	movs	r0, #2
     540:	4b41      	ldr	r3, [pc, #260]	; (648 <LEDs_Init+0x188>)
     542:	4798      	blx	r3
	LED_I2C_Write(0x80);	// auto inc		
     544:	2080      	movs	r0, #128	; 0x80
     546:	4b40      	ldr	r3, [pc, #256]	; (648 <LEDs_Init+0x188>)
     548:	4798      	blx	r3
	for (i=0; i<0x3f; i++) 	LED_I2C_Write(regs[i]);
     54a:	1dfb      	adds	r3, r7, #7
     54c:	2200      	movs	r2, #0
     54e:	701a      	strb	r2, [r3, #0]
     550:	e00b      	b.n	56a <LEDs_Init+0xaa>
     552:	1dfb      	adds	r3, r7, #7
     554:	781b      	ldrb	r3, [r3, #0]
     556:	4a3e      	ldr	r2, [pc, #248]	; (650 <LEDs_Init+0x190>)
     558:	5cd3      	ldrb	r3, [r2, r3]
     55a:	1c18      	adds	r0, r3, #0
     55c:	4b3a      	ldr	r3, [pc, #232]	; (648 <LEDs_Init+0x188>)
     55e:	4798      	blx	r3
     560:	1dfb      	adds	r3, r7, #7
     562:	781a      	ldrb	r2, [r3, #0]
     564:	1dfb      	adds	r3, r7, #7
     566:	3201      	adds	r2, #1
     568:	701a      	strb	r2, [r3, #0]
     56a:	1dfb      	adds	r3, r7, #7
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	2b3e      	cmp	r3, #62	; 0x3e
     570:	d9ef      	bls.n	552 <LEDs_Init+0x92>
	LED_I2C_Stop();		
     572:	4b38      	ldr	r3, [pc, #224]	; (654 <LEDs_Init+0x194>)
     574:	4798      	blx	r3

	// write them back
	LED_I2C_Start();
     576:	4b33      	ldr	r3, [pc, #204]	; (644 <LEDs_Init+0x184>)
     578:	4798      	blx	r3
	LED_I2C_Write(LED_25_48_ADDRESS);		// addr
     57a:	200a      	movs	r0, #10
     57c:	4b32      	ldr	r3, [pc, #200]	; (648 <LEDs_Init+0x188>)
     57e:	4798      	blx	r3
	LED_I2C_Write(0x80);	// auto inc		
     580:	2080      	movs	r0, #128	; 0x80
     582:	4b31      	ldr	r3, [pc, #196]	; (648 <LEDs_Init+0x188>)
     584:	4798      	blx	r3
	for (i=0; i<0x3f; i++) 	LED_I2C_Write(regs[i]);
     586:	1dfb      	adds	r3, r7, #7
     588:	2200      	movs	r2, #0
     58a:	701a      	strb	r2, [r3, #0]
     58c:	e00b      	b.n	5a6 <LEDs_Init+0xe6>
     58e:	1dfb      	adds	r3, r7, #7
     590:	781b      	ldrb	r3, [r3, #0]
     592:	4a2f      	ldr	r2, [pc, #188]	; (650 <LEDs_Init+0x190>)
     594:	5cd3      	ldrb	r3, [r2, r3]
     596:	1c18      	adds	r0, r3, #0
     598:	4b2b      	ldr	r3, [pc, #172]	; (648 <LEDs_Init+0x188>)
     59a:	4798      	blx	r3
     59c:	1dfb      	adds	r3, r7, #7
     59e:	781a      	ldrb	r2, [r3, #0]
     5a0:	1dfb      	adds	r3, r7, #7
     5a2:	3201      	adds	r2, #1
     5a4:	701a      	strb	r2, [r3, #0]
     5a6:	1dfb      	adds	r3, r7, #7
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	2b3e      	cmp	r3, #62	; 0x3e
     5ac:	d9ef      	bls.n	58e <LEDs_Init+0xce>
	LED_I2C_Stop();		
     5ae:	4b29      	ldr	r3, [pc, #164]	; (654 <LEDs_Init+0x194>)
     5b0:	4798      	blx	r3

	// write them back
	LED_I2C_Start();
     5b2:	4b24      	ldr	r3, [pc, #144]	; (644 <LEDs_Init+0x184>)
     5b4:	4798      	blx	r3
	LED_I2C_Write(LED_49_61_ADDRESS);		// addr
     5b6:	202a      	movs	r0, #42	; 0x2a
     5b8:	4b23      	ldr	r3, [pc, #140]	; (648 <LEDs_Init+0x188>)
     5ba:	4798      	blx	r3
	LED_I2C_Write(0x80);	// auto inc		
     5bc:	2080      	movs	r0, #128	; 0x80
     5be:	4b22      	ldr	r3, [pc, #136]	; (648 <LEDs_Init+0x188>)
     5c0:	4798      	blx	r3
	for (i=0; i<0x3f; i++) 	LED_I2C_Write(regs[i]);
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	2200      	movs	r2, #0
     5c6:	701a      	strb	r2, [r3, #0]
     5c8:	e00b      	b.n	5e2 <LEDs_Init+0x122>
     5ca:	1dfb      	adds	r3, r7, #7
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	4a20      	ldr	r2, [pc, #128]	; (650 <LEDs_Init+0x190>)
     5d0:	5cd3      	ldrb	r3, [r2, r3]
     5d2:	1c18      	adds	r0, r3, #0
     5d4:	4b1c      	ldr	r3, [pc, #112]	; (648 <LEDs_Init+0x188>)
     5d6:	4798      	blx	r3
     5d8:	1dfb      	adds	r3, r7, #7
     5da:	781a      	ldrb	r2, [r3, #0]
     5dc:	1dfb      	adds	r3, r7, #7
     5de:	3201      	adds	r2, #1
     5e0:	701a      	strb	r2, [r3, #0]
     5e2:	1dfb      	adds	r3, r7, #7
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	2b3e      	cmp	r3, #62	; 0x3e
     5e8:	d9ef      	bls.n	5ca <LEDs_Init+0x10a>
	LED_I2C_Stop();
     5ea:	4b1a      	ldr	r3, [pc, #104]	; (654 <LEDs_Init+0x194>)
     5ec:	4798      	blx	r3
	
	LED_I2C_Start();
     5ee:	4b15      	ldr	r3, [pc, #84]	; (644 <LEDs_Init+0x184>)
     5f0:	4798      	blx	r3
	LED_I2C_Write(3);		// addr + read bit
     5f2:	2003      	movs	r0, #3
     5f4:	4b14      	ldr	r3, [pc, #80]	; (648 <LEDs_Init+0x188>)
     5f6:	4798      	blx	r3
	for (i=0; i<0x3e; i++) regs[i]=LED_I2C_Read(1);
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	2200      	movs	r2, #0
     5fc:	701a      	strb	r2, [r3, #0]
     5fe:	e00d      	b.n	61c <LEDs_Init+0x15c>
     600:	1dfb      	adds	r3, r7, #7
     602:	781c      	ldrb	r4, [r3, #0]
     604:	2001      	movs	r0, #1
     606:	4b11      	ldr	r3, [pc, #68]	; (64c <LEDs_Init+0x18c>)
     608:	4798      	blx	r3
     60a:	1c03      	adds	r3, r0, #0
     60c:	1c1a      	adds	r2, r3, #0
     60e:	4b10      	ldr	r3, [pc, #64]	; (650 <LEDs_Init+0x190>)
     610:	551a      	strb	r2, [r3, r4]
     612:	1dfb      	adds	r3, r7, #7
     614:	781a      	ldrb	r2, [r3, #0]
     616:	1dfb      	adds	r3, r7, #7
     618:	3201      	adds	r2, #1
     61a:	701a      	strb	r2, [r3, #0]
     61c:	1dfb      	adds	r3, r7, #7
     61e:	781b      	ldrb	r3, [r3, #0]
     620:	2b3d      	cmp	r3, #61	; 0x3d
     622:	d9ed      	bls.n	600 <LEDs_Init+0x140>
	regs[i]=LED_I2C_Read(0);
     624:	1dfb      	adds	r3, r7, #7
     626:	781c      	ldrb	r4, [r3, #0]
     628:	2000      	movs	r0, #0
     62a:	4b08      	ldr	r3, [pc, #32]	; (64c <LEDs_Init+0x18c>)
     62c:	4798      	blx	r3
     62e:	1c03      	adds	r3, r0, #0
     630:	1c1a      	adds	r2, r3, #0
     632:	4b07      	ldr	r3, [pc, #28]	; (650 <LEDs_Init+0x190>)
     634:	551a      	strb	r2, [r3, r4]
	LED_I2C_Stop();
     636:	4b07      	ldr	r3, [pc, #28]	; (654 <LEDs_Init+0x194>)
     638:	4798      	blx	r3
			
}
     63a:	46bd      	mov	sp, r7
     63c:	b003      	add	sp, #12
     63e:	bd90      	pop	{r4, r7, pc}
     640:	00000265 	.word	0x00000265
     644:	00000349 	.word	0x00000349
     648:	000003c9 	.word	0x000003c9
     64c:	00000431 	.word	0x00000431
     650:	200000b8 	.word	0x200000b8
     654:	0000038d 	.word	0x0000038d

00000658 <Do_LEDs>:
uint8_t entryCnt;



void Do_LEDs(void)							// writes 1 byte per call
{	uint8_t i, ledCmd;
     658:	b580      	push	{r7, lr}
     65a:	b082      	sub	sp, #8
     65c:	af00      	add	r7, sp, #0
	if (FPledQ.length>0)
     65e:	4b53      	ldr	r3, [pc, #332]	; (7ac <Do_LEDs+0x154>)
     660:	789b      	ldrb	r3, [r3, #2]
     662:	2b00      	cmp	r3, #0
     664:	d04c      	beq.n	700 <Do_LEDs+0xa8>
	{
		get_FP_ledQ(&ledCmd);
     666:	1dbb      	adds	r3, r7, #6
     668:	1c18      	adds	r0, r3, #0
     66a:	4b51      	ldr	r3, [pc, #324]	; (7b0 <Do_LEDs+0x158>)
     66c:	4798      	blx	r3
		if ((ledCmd & FP_LED_OFF_FLAG_MASK) > 64)
     66e:	1dbb      	adds	r3, r7, #6
     670:	781b      	ldrb	r3, [r3, #0]
     672:	1c1a      	adds	r2, r3, #0
     674:	237f      	movs	r3, #127	; 0x7f
     676:	4013      	ands	r3, r2
     678:	2b40      	cmp	r3, #64	; 0x40
     67a:	dd02      	ble.n	682 <Do_LEDs+0x2a>
		{	
			ledCmd = 0;
     67c:	1dbb      	adds	r3, r7, #6
     67e:	2200      	movs	r2, #0
     680:	701a      	strb	r2, [r3, #0]
		}
		switch(ledCmd)
     682:	1dbb      	adds	r3, r7, #6
     684:	781b      	ldrb	r3, [r3, #0]
     686:	2bf7      	cmp	r3, #247	; 0xf7
     688:	d037      	beq.n	6fa <Do_LEDs+0xa2>
     68a:	2bfa      	cmp	r3, #250	; 0xfa
     68c:	d002      	beq.n	694 <Do_LEDs+0x3c>
     68e:	2b00      	cmp	r3, #0
     690:	d035      	beq.n	6fe <Do_LEDs+0xa6>
     692:	e012      	b.n	6ba <Do_LEDs+0x62>
		{
			case 0:
				break;
			case FP_LED_ALL_OFF:
				for (i=0; i<64; i++)
     694:	1dfb      	adds	r3, r7, #7
     696:	2200      	movs	r2, #0
     698:	701a      	strb	r2, [r3, #0]
     69a:	e009      	b.n	6b0 <Do_LEDs+0x58>
				{
					LED_Vals[i]=0;
     69c:	1dfb      	adds	r3, r7, #7
     69e:	781b      	ldrb	r3, [r3, #0]
     6a0:	4a44      	ldr	r2, [pc, #272]	; (7b4 <Do_LEDs+0x15c>)
     6a2:	2100      	movs	r1, #0
     6a4:	54d1      	strb	r1, [r2, r3]
		switch(ledCmd)
		{
			case 0:
				break;
			case FP_LED_ALL_OFF:
				for (i=0; i<64; i++)
     6a6:	1dfb      	adds	r3, r7, #7
     6a8:	781a      	ldrb	r2, [r3, #0]
     6aa:	1dfb      	adds	r3, r7, #7
     6ac:	3201      	adds	r2, #1
     6ae:	701a      	strb	r2, [r3, #0]
     6b0:	1dfb      	adds	r3, r7, #7
     6b2:	781b      	ldrb	r3, [r3, #0]
     6b4:	2b3f      	cmp	r3, #63	; 0x3f
     6b6:	d9f1      	bls.n	69c <Do_LEDs+0x44>
				{
					LED_Vals[i]=0;
				}
				break;
     6b8:	e022      	b.n	700 <Do_LEDs+0xa8>
			case FP_LED_NO_CHANGE:
				break;
			default:
				if (ledCmd & FP_LED_OFF_FLAG)
     6ba:	1dbb      	adds	r3, r7, #6
     6bc:	781b      	ldrb	r3, [r3, #0]
     6be:	b2db      	uxtb	r3, r3
     6c0:	b25b      	sxtb	r3, r3
     6c2:	2b00      	cmp	r3, #0
     6c4:	da0e      	bge.n	6e4 <Do_LEDs+0x8c>
				{	ledCmd ^= FP_LED_OFF_FLAG; 
     6c6:	1dbb      	adds	r3, r7, #6
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	2280      	movs	r2, #128	; 0x80
     6cc:	4252      	negs	r2, r2
     6ce:	4053      	eors	r3, r2
     6d0:	b2da      	uxtb	r2, r3
     6d2:	1dbb      	adds	r3, r7, #6
     6d4:	701a      	strb	r2, [r3, #0]
					LED_Vals[ledCmd-1]=0;
     6d6:	1dbb      	adds	r3, r7, #6
     6d8:	781b      	ldrb	r3, [r3, #0]
     6da:	3b01      	subs	r3, #1
     6dc:	4a35      	ldr	r2, [pc, #212]	; (7b4 <Do_LEDs+0x15c>)
     6de:	2100      	movs	r1, #0
     6e0:	54d1      	strb	r1, [r2, r3]
     6e2:	e00d      	b.n	700 <Do_LEDs+0xa8>
				}
				else if (ledCmd<64)
     6e4:	1dbb      	adds	r3, r7, #6
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b3f      	cmp	r3, #63	; 0x3f
     6ea:	d809      	bhi.n	700 <Do_LEDs+0xa8>
				{	LED_Vals[ledCmd-1]=LED_BRIGHTNESS;
     6ec:	1dbb      	adds	r3, r7, #6
     6ee:	781b      	ldrb	r3, [r3, #0]
     6f0:	3b01      	subs	r3, #1
     6f2:	4a30      	ldr	r2, [pc, #192]	; (7b4 <Do_LEDs+0x15c>)
     6f4:	2163      	movs	r1, #99	; 0x63
     6f6:	54d1      	strb	r1, [r2, r3]
     6f8:	e002      	b.n	700 <Do_LEDs+0xa8>
				{
					LED_Vals[i]=0;
				}
				break;
			case FP_LED_NO_CHANGE:
				break;
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	e000      	b.n	700 <Do_LEDs+0xa8>
			ledCmd = 0;
		}
		switch(ledCmd)
		{
			case 0:
				break;
     6fe:	46c0      	nop			; (mov r8, r8)
				}
		}
	}


	entryCnt++;
     700:	4b2d      	ldr	r3, [pc, #180]	; (7b8 <Do_LEDs+0x160>)
     702:	781b      	ldrb	r3, [r3, #0]
     704:	3301      	adds	r3, #1
     706:	b2da      	uxtb	r2, r3
     708:	4b2b      	ldr	r3, [pc, #172]	; (7b8 <Do_LEDs+0x160>)
     70a:	701a      	strb	r2, [r3, #0]
	if (ledState == 0)
     70c:	4b2b      	ldr	r3, [pc, #172]	; (7bc <Do_LEDs+0x164>)
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	2b00      	cmp	r3, #0
     712:	d117      	bne.n	744 <Do_LEDs+0xec>
	{							// PWMs
		LED_I2C_Start();
     714:	4b2a      	ldr	r3, [pc, #168]	; (7c0 <Do_LEDs+0x168>)
     716:	4798      	blx	r3
		LED_I2C_Write(ledAddr);		// addr
     718:	4b2a      	ldr	r3, [pc, #168]	; (7c4 <Do_LEDs+0x16c>)
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	1c18      	adds	r0, r3, #0
     71e:	4b2a      	ldr	r3, [pc, #168]	; (7c8 <Do_LEDs+0x170>)
     720:	4798      	blx	r3
		LED_I2C_Write(0x8a);	// control
     722:	208a      	movs	r0, #138	; 0x8a
     724:	4b28      	ldr	r3, [pc, #160]	; (7c8 <Do_LEDs+0x170>)
     726:	4798      	blx	r3
		if(ledAddr==LED_1_24_ADDRESS) ledValPtr = LED_Vals;
     728:	4b26      	ldr	r3, [pc, #152]	; (7c4 <Do_LEDs+0x16c>)
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	2b02      	cmp	r3, #2
     72e:	d102      	bne.n	736 <Do_LEDs+0xde>
     730:	4b26      	ldr	r3, [pc, #152]	; (7cc <Do_LEDs+0x174>)
     732:	4a20      	ldr	r2, [pc, #128]	; (7b4 <Do_LEDs+0x15c>)
     734:	601a      	str	r2, [r3, #0]
		ledState=1;
     736:	4b21      	ldr	r3, [pc, #132]	; (7bc <Do_LEDs+0x164>)
     738:	2201      	movs	r2, #1
     73a:	701a      	strb	r2, [r3, #0]
		ledByteCnt=0;
     73c:	4b24      	ldr	r3, [pc, #144]	; (7d0 <Do_LEDs+0x178>)
     73e:	2200      	movs	r2, #0
     740:	701a      	strb	r2, [r3, #0]
     742:	e030      	b.n	7a6 <Do_LEDs+0x14e>
	}
	else
	{	LED_I2C_Write(*ledValPtr);
     744:	4b21      	ldr	r3, [pc, #132]	; (7cc <Do_LEDs+0x174>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	781b      	ldrb	r3, [r3, #0]
     74a:	1c18      	adds	r0, r3, #0
     74c:	4b1e      	ldr	r3, [pc, #120]	; (7c8 <Do_LEDs+0x170>)
     74e:	4798      	blx	r3
		ledByteCnt++;
     750:	4b1f      	ldr	r3, [pc, #124]	; (7d0 <Do_LEDs+0x178>)
     752:	781b      	ldrb	r3, [r3, #0]
     754:	3301      	adds	r3, #1
     756:	b2da      	uxtb	r2, r3
     758:	4b1d      	ldr	r3, [pc, #116]	; (7d0 <Do_LEDs+0x178>)
     75a:	701a      	strb	r2, [r3, #0]
		ledValPtr++;
     75c:	4b1b      	ldr	r3, [pc, #108]	; (7cc <Do_LEDs+0x174>)
     75e:	681b      	ldr	r3, [r3, #0]
     760:	1c5a      	adds	r2, r3, #1
     762:	4b1a      	ldr	r3, [pc, #104]	; (7cc <Do_LEDs+0x174>)
     764:	601a      	str	r2, [r3, #0]
		if (ledByteCnt == 24)
     766:	4b1a      	ldr	r3, [pc, #104]	; (7d0 <Do_LEDs+0x178>)
     768:	781b      	ldrb	r3, [r3, #0]
     76a:	2b18      	cmp	r3, #24
     76c:	d11b      	bne.n	7a6 <Do_LEDs+0x14e>
		{	LED_I2C_Stop();
     76e:	4b19      	ldr	r3, [pc, #100]	; (7d4 <Do_LEDs+0x17c>)
     770:	4798      	blx	r3
			ledState=0;
     772:	4b12      	ldr	r3, [pc, #72]	; (7bc <Do_LEDs+0x164>)
     774:	2200      	movs	r2, #0
     776:	701a      	strb	r2, [r3, #0]
			switch (ledAddr)
     778:	4b12      	ldr	r3, [pc, #72]	; (7c4 <Do_LEDs+0x16c>)
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	2b0a      	cmp	r3, #10
     77e:	d007      	beq.n	790 <Do_LEDs+0x138>
     780:	2b2a      	cmp	r3, #42	; 0x2a
     782:	d009      	beq.n	798 <Do_LEDs+0x140>
     784:	2b02      	cmp	r3, #2
     786:	d10b      	bne.n	7a0 <Do_LEDs+0x148>
			{
				case LED_1_24_ADDRESS:
					ledAddr = LED_25_48_ADDRESS;
     788:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <Do_LEDs+0x16c>)
     78a:	220a      	movs	r2, #10
     78c:	701a      	strb	r2, [r3, #0]
					break;
     78e:	e00a      	b.n	7a6 <Do_LEDs+0x14e>
				case LED_25_48_ADDRESS:
					ledAddr = LED_49_61_ADDRESS;
     790:	4b0c      	ldr	r3, [pc, #48]	; (7c4 <Do_LEDs+0x16c>)
     792:	222a      	movs	r2, #42	; 0x2a
     794:	701a      	strb	r2, [r3, #0]
					break;
     796:	e006      	b.n	7a6 <Do_LEDs+0x14e>
				case LED_49_61_ADDRESS:
					ledAddr = LED_1_24_ADDRESS;
     798:	4b0a      	ldr	r3, [pc, #40]	; (7c4 <Do_LEDs+0x16c>)
     79a:	2202      	movs	r2, #2
     79c:	701a      	strb	r2, [r3, #0]
					break;
     79e:	e002      	b.n	7a6 <Do_LEDs+0x14e>
				default:
					ledAddr = LED_1_24_ADDRESS;
     7a0:	4b08      	ldr	r3, [pc, #32]	; (7c4 <Do_LEDs+0x16c>)
     7a2:	2202      	movs	r2, #2
     7a4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
     7a6:	46bd      	mov	sp, r7
     7a8:	b002      	add	sp, #8
     7aa:	bd80      	pop	{r7, pc}
     7ac:	2000011c 	.word	0x2000011c
     7b0:	000009a1 	.word	0x000009a1
     7b4:	2000006c 	.word	0x2000006c
     7b8:	20000069 	.word	0x20000069
     7bc:	2000002c 	.word	0x2000002c
     7c0:	00000349 	.word	0x00000349
     7c4:	20000000 	.word	0x20000000
     7c8:	000003c9 	.word	0x000003c9
     7cc:	200000b4 	.word	0x200000b4
     7d0:	2000002d 	.word	0x2000002d
     7d4:	0000038d 	.word	0x0000038d

000007d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b084      	sub	sp, #16
     7dc:	af00      	add	r7, sp, #0
     7de:	1c02      	adds	r2, r0, #0
     7e0:	1dfb      	adds	r3, r7, #7
     7e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     7e4:	230f      	movs	r3, #15
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	1dfa      	adds	r2, r7, #7
     7ea:	7812      	ldrb	r2, [r2, #0]
     7ec:	09d2      	lsrs	r2, r2, #7
     7ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     7f0:	230e      	movs	r3, #14
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	1dfa      	adds	r2, r7, #7
     7f6:	7812      	ldrb	r2, [r2, #0]
     7f8:	0952      	lsrs	r2, r2, #5
     7fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     7fc:	4b0d      	ldr	r3, [pc, #52]	; (834 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     7fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     800:	230f      	movs	r3, #15
     802:	18fb      	adds	r3, r7, r3
     804:	781b      	ldrb	r3, [r3, #0]
     806:	2b00      	cmp	r3, #0
     808:	d10f      	bne.n	82a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     80a:	230f      	movs	r3, #15
     80c:	18fb      	adds	r3, r7, r3
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	009b      	lsls	r3, r3, #2
     812:	2210      	movs	r2, #16
     814:	4694      	mov	ip, r2
     816:	44bc      	add	ip, r7
     818:	4463      	add	r3, ip
     81a:	3b08      	subs	r3, #8
     81c:	681a      	ldr	r2, [r3, #0]
     81e:	230e      	movs	r3, #14
     820:	18fb      	adds	r3, r7, r3
     822:	781b      	ldrb	r3, [r3, #0]
     824:	01db      	lsls	r3, r3, #7
     826:	18d3      	adds	r3, r2, r3
     828:	e000      	b.n	82c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     82a:	2300      	movs	r3, #0
	}
}
     82c:	1c18      	adds	r0, r3, #0
     82e:	46bd      	mov	sp, r7
     830:	b004      	add	sp, #16
     832:	bd80      	pop	{r7, pc}
     834:	41004400 	.word	0x41004400

00000838 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	1c02      	adds	r2, r0, #0
     840:	1dfb      	adds	r3, r7, #7
     842:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     844:	1dfb      	adds	r3, r7, #7
     846:	781b      	ldrb	r3, [r3, #0]
     848:	1c18      	adds	r0, r3, #0
     84a:	4b03      	ldr	r3, [pc, #12]	; (858 <port_get_group_from_gpio_pin+0x20>)
     84c:	4798      	blx	r3
     84e:	1c03      	adds	r3, r0, #0
}
     850:	1c18      	adds	r0, r3, #0
     852:	46bd      	mov	sp, r7
     854:	b002      	add	sp, #8
     856:	bd80      	pop	{r7, pc}
     858:	000007d9 	.word	0x000007d9

0000085c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     85c:	b580      	push	{r7, lr}
     85e:	b084      	sub	sp, #16
     860:	af00      	add	r7, sp, #0
     862:	1c02      	adds	r2, r0, #0
     864:	1dfb      	adds	r3, r7, #7
     866:	701a      	strb	r2, [r3, #0]
     868:	1dbb      	adds	r3, r7, #6
     86a:	1c0a      	adds	r2, r1, #0
     86c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     86e:	1dfb      	adds	r3, r7, #7
     870:	781b      	ldrb	r3, [r3, #0]
     872:	1c18      	adds	r0, r3, #0
     874:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <port_pin_set_output_level+0x4c>)
     876:	4798      	blx	r3
     878:	1c03      	adds	r3, r0, #0
     87a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     87c:	1dfb      	adds	r3, r7, #7
     87e:	781b      	ldrb	r3, [r3, #0]
     880:	221f      	movs	r2, #31
     882:	4013      	ands	r3, r2
     884:	2201      	movs	r2, #1
     886:	409a      	lsls	r2, r3
     888:	1c13      	adds	r3, r2, #0
     88a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     88c:	1dbb      	adds	r3, r7, #6
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	2b00      	cmp	r3, #0
     892:	d003      	beq.n	89c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     894:	68fb      	ldr	r3, [r7, #12]
     896:	68ba      	ldr	r2, [r7, #8]
     898:	619a      	str	r2, [r3, #24]
     89a:	e002      	b.n	8a2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	68ba      	ldr	r2, [r7, #8]
     8a0:	615a      	str	r2, [r3, #20]
	}
}
     8a2:	46bd      	mov	sp, r7
     8a4:	b004      	add	sp, #16
     8a6:	bd80      	pop	{r7, pc}
     8a8:	00000839 	.word	0x00000839

000008ac <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
     8ac:	b580      	push	{r7, lr}
     8ae:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)PM->RCAUSE.reg;
     8b0:	4a03      	ldr	r2, [pc, #12]	; (8c0 <system_get_reset_cause+0x14>)
     8b2:	2338      	movs	r3, #56	; 0x38
     8b4:	5cd3      	ldrb	r3, [r2, r3]
     8b6:	b2db      	uxtb	r3, r3
}
     8b8:	1c18      	adds	r0, r3, #0
     8ba:	46bd      	mov	sp, r7
     8bc:	bd80      	pop	{r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	40000400 	.word	0x40000400

000008c4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     8c8:	4b03      	ldr	r3, [pc, #12]	; (8d8 <system_interrupt_enable_global+0x14>)
     8ca:	2201      	movs	r2, #1
     8cc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     8ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     8d2:	b662      	cpsie	i
}
     8d4:	46bd      	mov	sp, r7
     8d6:	bd80      	pop	{r7, pc}
     8d8:	2000000c 	.word	0x2000000c

000008dc <main>:
uint8_t ledCmd = 0; //0x55;
	
uint32_t cntErrors;
		
int main(void)
{
     8dc:	b590      	push	{r4, r7, lr}
     8de:	b083      	sub	sp, #12
     8e0:	af00      	add	r7, sp, #0



	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     8e2:	4b23      	ldr	r3, [pc, #140]	; (970 <main+0x94>)
     8e4:	4798      	blx	r3
	fp_board_init();
     8e6:	4b23      	ldr	r3, [pc, #140]	; (974 <main+0x98>)
     8e8:	4798      	blx	r3




// check restart cause
	enum system_reset_cause reset_cause = system_get_reset_cause();
     8ea:	1dbc      	adds	r4, r7, #6
     8ec:	4b22      	ldr	r3, [pc, #136]	; (978 <main+0x9c>)
     8ee:	4798      	blx	r3
     8f0:	1c03      	adds	r3, r0, #0
     8f2:	7023      	strb	r3, [r4, #0]




	//	start 1ms timer
	configure_tc7();
     8f4:	4b21      	ldr	r3, [pc, #132]	; (97c <main+0xa0>)
     8f6:	4798      	blx	r3
	configure_tc7_callbacks();
     8f8:	4b21      	ldr	r3, [pc, #132]	; (980 <main+0xa4>)
     8fa:	4798      	blx	r3
	system_interrupt_enable_global();
     8fc:	4b21      	ldr	r3, [pc, #132]	; (984 <main+0xa8>)
     8fe:	4798      	blx	r3
	

	// reset LED drivers
	port_pin_set_output_level(LED_CHIP_RST, 1);			// reset is active high at processor
     900:	2014      	movs	r0, #20
     902:	2101      	movs	r1, #1
     904:	4b20      	ldr	r3, [pc, #128]	; (988 <main+0xac>)
     906:	4798      	blx	r3
	ledTimer = 0;
     908:	4b20      	ldr	r3, [pc, #128]	; (98c <main+0xb0>)
     90a:	2200      	movs	r2, #0
     90c:	701a      	strb	r2, [r3, #0]
	while(get_ledTimer());
     90e:	46c0      	nop			; (mov r8, r8)
     910:	4b1f      	ldr	r3, [pc, #124]	; (990 <main+0xb4>)
     912:	4798      	blx	r3
     914:	1e03      	subs	r3, r0, #0
     916:	d1fb      	bne.n	910 <main+0x34>
	port_pin_set_output_level(LED_CHIP_RST, 0);	
     918:	2014      	movs	r0, #20
     91a:	2100      	movs	r1, #0
     91c:	4b1a      	ldr	r3, [pc, #104]	; (988 <main+0xac>)
     91e:	4798      	blx	r3
	// setup spi										 **********************************
	configure_spi_slave();
	configure_spi_slave_callbacks();*/
	

	LEDs_Init();						// init all 3 ICs
     920:	4b1c      	ldr	r3, [pc, #112]	; (994 <main+0xb8>)
     922:	4798      	blx	r3
		uint8_t cnt;

	while (1)
	{

		Do_LEDs();							// writes 1 byte per call
     924:	4b1c      	ldr	r3, [pc, #112]	; (998 <main+0xbc>)
     926:	4798      	blx	r3




		
		switch(ledTimer)
     928:	4b18      	ldr	r3, [pc, #96]	; (98c <main+0xb0>)
     92a:	781b      	ldrb	r3, [r3, #0]
     92c:	2bc0      	cmp	r3, #192	; 0xc0
     92e:	d000      	beq.n	932 <main+0x56>
//				LED_Vals[cnt+48]=99;
				ledTimer++;

				break;			
			default:
				break;	
     930:	e01c      	b.n	96c <main+0x90>
				cnt++;
				if(cnt>23)cnt=0;
				LED_Vals[cnt]=LED_Vals[cnt+24]=LED_Vals[cnt+48]=99;				
				ledTimer++;
*/
				LED_Vals[cnt]=0;
     932:	1dfb      	adds	r3, r7, #7
     934:	781b      	ldrb	r3, [r3, #0]
     936:	4a19      	ldr	r2, [pc, #100]	; (99c <main+0xc0>)
     938:	2100      	movs	r1, #0
     93a:	54d1      	strb	r1, [r2, r3]
//				LED_Vals[cnt+24]=0;
//				LED_Vals[cnt+48]=0;
				cnt++;
     93c:	1dfb      	adds	r3, r7, #7
     93e:	781a      	ldrb	r2, [r3, #0]
     940:	1dfb      	adds	r3, r7, #7
     942:	3201      	adds	r2, #1
     944:	701a      	strb	r2, [r3, #0]
				if(cnt>62)
     946:	1dfb      	adds	r3, r7, #7
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	2b3e      	cmp	r3, #62	; 0x3e
     94c:	d902      	bls.n	954 <main+0x78>
					cnt=0;
     94e:	1dfb      	adds	r3, r7, #7
     950:	2200      	movs	r2, #0
     952:	701a      	strb	r2, [r3, #0]
				LED_Vals[cnt]=99;
     954:	1dfb      	adds	r3, r7, #7
     956:	781b      	ldrb	r3, [r3, #0]
     958:	4a10      	ldr	r2, [pc, #64]	; (99c <main+0xc0>)
     95a:	2163      	movs	r1, #99	; 0x63
     95c:	54d1      	strb	r1, [r2, r3]
// 				LED_Vals[cnt+24]=99;
//				LED_Vals[cnt+48]=99;
				ledTimer++;
     95e:	4b0b      	ldr	r3, [pc, #44]	; (98c <main+0xb0>)
     960:	781b      	ldrb	r3, [r3, #0]
     962:	3301      	adds	r3, #1
     964:	b2da      	uxtb	r2, r3
     966:	4b09      	ldr	r3, [pc, #36]	; (98c <main+0xb0>)
     968:	701a      	strb	r2, [r3, #0]

				break;			
     96a:	46c0      	nop			; (mov r8, r8)
			default:
				break;	
		}
	}
     96c:	e7da      	b.n	924 <main+0x48>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	000015e5 	.word	0x000015e5
     974:	00000b71 	.word	0x00000b71
     978:	000008ad 	.word	0x000008ad
     97c:	00001019 	.word	0x00001019
     980:	00000f85 	.word	0x00000f85
     984:	000008c5 	.word	0x000008c5
     988:	0000085d 	.word	0x0000085d
     98c:	2000093c 	.word	0x2000093c
     990:	00000f71 	.word	0x00000f71
     994:	000004c1 	.word	0x000004c1
     998:	00000659 	.word	0x00000659
     99c:	2000006c 	.word	0x2000006c

000009a0 <get_FP_ledQ>:
	FPledQ.length = FPledQ.buff_in - FPledQ.buff_out;	// can be negative
	FPledQ.length = FPledQ.length & (FP_QUE_SIZE-1);				// make sure positive
}

void get_FP_ledQ(uint8_t *ptr)				 // only used in this file
{
     9a0:	b580      	push	{r7, lr}
     9a2:	b082      	sub	sp, #8
     9a4:	af00      	add	r7, sp, #0
     9a6:	6078      	str	r0, [r7, #4]
	if (FPledQ.length >0)
     9a8:	4b15      	ldr	r3, [pc, #84]	; (a00 <get_FP_ledQ+0x60>)
     9aa:	789b      	ldrb	r3, [r3, #2]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d023      	beq.n	9f8 <get_FP_ledQ+0x58>
	{
		*ptr = FPledQ.val[FPledQ.buff_out];
     9b0:	4b13      	ldr	r3, [pc, #76]	; (a00 <get_FP_ledQ+0x60>)
     9b2:	785b      	ldrb	r3, [r3, #1]
     9b4:	1c1a      	adds	r2, r3, #0
     9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <get_FP_ledQ+0x60>)
     9b8:	189b      	adds	r3, r3, r2
     9ba:	78da      	ldrb	r2, [r3, #3]
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	701a      	strb	r2, [r3, #0]
		FPledQ.buff_out++;
     9c0:	4b0f      	ldr	r3, [pc, #60]	; (a00 <get_FP_ledQ+0x60>)
     9c2:	785b      	ldrb	r3, [r3, #1]
     9c4:	3301      	adds	r3, #1
     9c6:	b2da      	uxtb	r2, r3
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <get_FP_ledQ+0x60>)
     9ca:	705a      	strb	r2, [r3, #1]
		FPledQ.buff_out = FPledQ.buff_out & (FP_QUE_SIZE-1);
     9cc:	4b0c      	ldr	r3, [pc, #48]	; (a00 <get_FP_ledQ+0x60>)
     9ce:	785b      	ldrb	r3, [r3, #1]
     9d0:	220f      	movs	r2, #15
     9d2:	4013      	ands	r3, r2
     9d4:	b2da      	uxtb	r2, r3
     9d6:	4b0a      	ldr	r3, [pc, #40]	; (a00 <get_FP_ledQ+0x60>)
     9d8:	705a      	strb	r2, [r3, #1]
		FPledQ.length = FPledQ.buff_in - FPledQ.buff_out;			// can be negative
     9da:	4b09      	ldr	r3, [pc, #36]	; (a00 <get_FP_ledQ+0x60>)
     9dc:	781a      	ldrb	r2, [r3, #0]
     9de:	4b08      	ldr	r3, [pc, #32]	; (a00 <get_FP_ledQ+0x60>)
     9e0:	785b      	ldrb	r3, [r3, #1]
     9e2:	1ad3      	subs	r3, r2, r3
     9e4:	b2da      	uxtb	r2, r3
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <get_FP_ledQ+0x60>)
     9e8:	709a      	strb	r2, [r3, #2]
		FPledQ.length = FPledQ.length & (FP_QUE_SIZE-1);		// make sure positive
     9ea:	4b05      	ldr	r3, [pc, #20]	; (a00 <get_FP_ledQ+0x60>)
     9ec:	789b      	ldrb	r3, [r3, #2]
     9ee:	220f      	movs	r2, #15
     9f0:	4013      	ands	r3, r2
     9f2:	b2da      	uxtb	r2, r3
     9f4:	4b02      	ldr	r3, [pc, #8]	; (a00 <get_FP_ledQ+0x60>)
     9f6:	709a      	strb	r2, [r3, #2]
	}
}
     9f8:	46bd      	mov	sp, r7
     9fa:	b002      	add	sp, #8
     9fc:	bd80      	pop	{r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	2000011c 	.word	0x2000011c

00000a04 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a04:	b580      	push	{r7, lr}
     a06:	af00      	add	r7, sp, #0
     a08:	4b02      	ldr	r3, [pc, #8]	; (a14 <SERCOM0_Handler+0x10>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	2000      	movs	r0, #0
     a0e:	4798      	blx	r3
     a10:	46bd      	mov	sp, r7
     a12:	bd80      	pop	{r7, pc}
     a14:	20000030 	.word	0x20000030

00000a18 <SERCOM1_Handler>:
     a18:	b580      	push	{r7, lr}
     a1a:	af00      	add	r7, sp, #0
     a1c:	4b02      	ldr	r3, [pc, #8]	; (a28 <SERCOM1_Handler+0x10>)
     a1e:	685b      	ldr	r3, [r3, #4]
     a20:	2001      	movs	r0, #1
     a22:	4798      	blx	r3
     a24:	46bd      	mov	sp, r7
     a26:	bd80      	pop	{r7, pc}
     a28:	20000030 	.word	0x20000030

00000a2c <SERCOM2_Handler>:
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
     a30:	4b02      	ldr	r3, [pc, #8]	; (a3c <SERCOM2_Handler+0x10>)
     a32:	689b      	ldr	r3, [r3, #8]
     a34:	2002      	movs	r0, #2
     a36:	4798      	blx	r3
     a38:	46bd      	mov	sp, r7
     a3a:	bd80      	pop	{r7, pc}
     a3c:	20000030 	.word	0x20000030

00000a40 <SERCOM3_Handler>:
     a40:	b580      	push	{r7, lr}
     a42:	af00      	add	r7, sp, #0
     a44:	4b02      	ldr	r3, [pc, #8]	; (a50 <SERCOM3_Handler+0x10>)
     a46:	68db      	ldr	r3, [r3, #12]
     a48:	2003      	movs	r0, #3
     a4a:	4798      	blx	r3
     a4c:	46bd      	mov	sp, r7
     a4e:	bd80      	pop	{r7, pc}
     a50:	20000030 	.word	0x20000030

00000a54 <SERCOM4_Handler>:
     a54:	b580      	push	{r7, lr}
     a56:	af00      	add	r7, sp, #0
     a58:	4b02      	ldr	r3, [pc, #8]	; (a64 <SERCOM4_Handler+0x10>)
     a5a:	691b      	ldr	r3, [r3, #16]
     a5c:	2004      	movs	r0, #4
     a5e:	4798      	blx	r3
     a60:	46bd      	mov	sp, r7
     a62:	bd80      	pop	{r7, pc}
     a64:	20000030 	.word	0x20000030

00000a68 <SERCOM5_Handler>:
     a68:	b580      	push	{r7, lr}
     a6a:	af00      	add	r7, sp, #0
     a6c:	4b02      	ldr	r3, [pc, #8]	; (a78 <SERCOM5_Handler+0x10>)
     a6e:	695b      	ldr	r3, [r3, #20]
     a70:	2005      	movs	r0, #5
     a72:	4798      	blx	r3
     a74:	46bd      	mov	sp, r7
     a76:	bd80      	pop	{r7, pc}
     a78:	20000030 	.word	0x20000030

00000a7c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b084      	sub	sp, #16
     a80:	af00      	add	r7, sp, #0
     a82:	1c02      	adds	r2, r0, #0
     a84:	1dfb      	adds	r3, r7, #7
     a86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     a88:	230f      	movs	r3, #15
     a8a:	18fb      	adds	r3, r7, r3
     a8c:	1dfa      	adds	r2, r7, #7
     a8e:	7812      	ldrb	r2, [r2, #0]
     a90:	09d2      	lsrs	r2, r2, #7
     a92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     a94:	230e      	movs	r3, #14
     a96:	18fb      	adds	r3, r7, r3
     a98:	1dfa      	adds	r2, r7, #7
     a9a:	7812      	ldrb	r2, [r2, #0]
     a9c:	0952      	lsrs	r2, r2, #5
     a9e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     aa0:	4b0d      	ldr	r3, [pc, #52]	; (ad8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     aa2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     aa4:	230f      	movs	r3, #15
     aa6:	18fb      	adds	r3, r7, r3
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	2b00      	cmp	r3, #0
     aac:	d10f      	bne.n	ace <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     aae:	230f      	movs	r3, #15
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	009b      	lsls	r3, r3, #2
     ab6:	2210      	movs	r2, #16
     ab8:	4694      	mov	ip, r2
     aba:	44bc      	add	ip, r7
     abc:	4463      	add	r3, ip
     abe:	3b08      	subs	r3, #8
     ac0:	681a      	ldr	r2, [r3, #0]
     ac2:	230e      	movs	r3, #14
     ac4:	18fb      	adds	r3, r7, r3
     ac6:	781b      	ldrb	r3, [r3, #0]
     ac8:	01db      	lsls	r3, r3, #7
     aca:	18d3      	adds	r3, r2, r3
     acc:	e000      	b.n	ad0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     ace:	2300      	movs	r3, #0
	}
}
     ad0:	1c18      	adds	r0, r3, #0
     ad2:	46bd      	mov	sp, r7
     ad4:	b004      	add	sp, #16
     ad6:	bd80      	pop	{r7, pc}
     ad8:	41004400 	.word	0x41004400

00000adc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     adc:	b580      	push	{r7, lr}
     ade:	b082      	sub	sp, #8
     ae0:	af00      	add	r7, sp, #0
     ae2:	1c02      	adds	r2, r0, #0
     ae4:	1dfb      	adds	r3, r7, #7
     ae6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     ae8:	1dfb      	adds	r3, r7, #7
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	1c18      	adds	r0, r3, #0
     aee:	4b03      	ldr	r3, [pc, #12]	; (afc <port_get_group_from_gpio_pin+0x20>)
     af0:	4798      	blx	r3
     af2:	1c03      	adds	r3, r0, #0
}
     af4:	1c18      	adds	r0, r3, #0
     af6:	46bd      	mov	sp, r7
     af8:	b002      	add	sp, #8
     afa:	bd80      	pop	{r7, pc}
     afc:	00000a7d 	.word	0x00000a7d

00000b00 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	2200      	movs	r2, #0
     b0c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2201      	movs	r2, #1
     b12:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	2200      	movs	r2, #0
     b18:	709a      	strb	r2, [r3, #2]
}
     b1a:	46bd      	mov	sp, r7
     b1c:	b002      	add	sp, #8
     b1e:	bd80      	pop	{r7, pc}

00000b20 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     b20:	b580      	push	{r7, lr}
     b22:	b084      	sub	sp, #16
     b24:	af00      	add	r7, sp, #0
     b26:	1c02      	adds	r2, r0, #0
     b28:	1dfb      	adds	r3, r7, #7
     b2a:	701a      	strb	r2, [r3, #0]
     b2c:	1dbb      	adds	r3, r7, #6
     b2e:	1c0a      	adds	r2, r1, #0
     b30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     b32:	1dfb      	adds	r3, r7, #7
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	1c18      	adds	r0, r3, #0
     b38:	4b0c      	ldr	r3, [pc, #48]	; (b6c <port_pin_set_output_level+0x4c>)
     b3a:	4798      	blx	r3
     b3c:	1c03      	adds	r3, r0, #0
     b3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b40:	1dfb      	adds	r3, r7, #7
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	221f      	movs	r2, #31
     b46:	4013      	ands	r3, r2
     b48:	2201      	movs	r2, #1
     b4a:	409a      	lsls	r2, r3
     b4c:	1c13      	adds	r3, r2, #0
     b4e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     b50:	1dbb      	adds	r3, r7, #6
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	2b00      	cmp	r3, #0
     b56:	d003      	beq.n	b60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	68ba      	ldr	r2, [r7, #8]
     b5c:	619a      	str	r2, [r3, #24]
     b5e:	e002      	b.n	b66 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	68ba      	ldr	r2, [r7, #8]
     b64:	615a      	str	r2, [r3, #20]
	}
}
     b66:	46bd      	mov	sp, r7
     b68:	b004      	add	sp, #16
     b6a:	bd80      	pop	{r7, pc}
     b6c:	00000add 	.word	0x00000add

00000b70 <fp_board_init>:
#define OFF			1
#define ON			0


void fp_board_init(void)
{
     b70:	b580      	push	{r7, lr}
     b72:	b082      	sub	sp, #8
     b74:	af00      	add	r7, sp, #0


	/* Initialize board hardware */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     b76:	1d3b      	adds	r3, r7, #4
     b78:	1c18      	adds	r0, r3, #0
     b7a:	4b4d      	ldr	r3, [pc, #308]	; (cb0 <fp_board_init+0x140>)
     b7c:	4798      	blx	r3

 // outputs
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     b7e:	1d3b      	adds	r3, r7, #4
     b80:	2201      	movs	r2, #1
     b82:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_RUN_PIN, &pin_conf);
     b84:	1d3b      	adds	r3, r7, #4
     b86:	2013      	movs	r0, #19
     b88:	1c19      	adds	r1, r3, #0
     b8a:	4b4a      	ldr	r3, [pc, #296]	; (cb4 <fp_board_init+0x144>)
     b8c:	4798      	blx	r3
	port_pin_set_output_level(LED_RUN_PIN, 1);
     b8e:	2013      	movs	r0, #19
     b90:	2101      	movs	r1, #1
     b92:	4b49      	ldr	r3, [pc, #292]	; (cb8 <fp_board_init+0x148>)
     b94:	4798      	blx	r3
	port_pin_set_config(LED_CHIP_RST, &pin_conf);
     b96:	1d3b      	adds	r3, r7, #4
     b98:	2014      	movs	r0, #20
     b9a:	1c19      	adds	r1, r3, #0
     b9c:	4b45      	ldr	r3, [pc, #276]	; (cb4 <fp_board_init+0x144>)
     b9e:	4798      	blx	r3
	
	port_pin_set_config(FP_SWO0, &pin_conf);
     ba0:	1d3b      	adds	r3, r7, #4
     ba2:	2000      	movs	r0, #0
     ba4:	1c19      	adds	r1, r3, #0
     ba6:	4b43      	ldr	r3, [pc, #268]	; (cb4 <fp_board_init+0x144>)
     ba8:	4798      	blx	r3
	port_pin_set_config(FP_SWO1, &pin_conf);
     baa:	1d3b      	adds	r3, r7, #4
     bac:	2001      	movs	r0, #1
     bae:	1c19      	adds	r1, r3, #0
     bb0:	4b40      	ldr	r3, [pc, #256]	; (cb4 <fp_board_init+0x144>)
     bb2:	4798      	blx	r3
	port_pin_set_config(FP_SWO2, &pin_conf);
     bb4:	1d3b      	adds	r3, r7, #4
     bb6:	2002      	movs	r0, #2
     bb8:	1c19      	adds	r1, r3, #0
     bba:	4b3e      	ldr	r3, [pc, #248]	; (cb4 <fp_board_init+0x144>)
     bbc:	4798      	blx	r3
	port_pin_set_config(FP_SWO3, &pin_conf);	
     bbe:	1d3b      	adds	r3, r7, #4
     bc0:	2003      	movs	r0, #3
     bc2:	1c19      	adds	r1, r3, #0
     bc4:	4b3b      	ldr	r3, [pc, #236]	; (cb4 <fp_board_init+0x144>)
     bc6:	4798      	blx	r3
	port_pin_set_config(FP_SWO4, &pin_conf);
     bc8:	1d3b      	adds	r3, r7, #4
     bca:	2004      	movs	r0, #4
     bcc:	1c19      	adds	r1, r3, #0
     bce:	4b39      	ldr	r3, [pc, #228]	; (cb4 <fp_board_init+0x144>)
     bd0:	4798      	blx	r3
	port_pin_set_config(FP_SWO5, &pin_conf);
     bd2:	1d3b      	adds	r3, r7, #4
     bd4:	2005      	movs	r0, #5
     bd6:	1c19      	adds	r1, r3, #0
     bd8:	4b36      	ldr	r3, [pc, #216]	; (cb4 <fp_board_init+0x144>)
     bda:	4798      	blx	r3
	port_pin_set_config(FP_SWO6, &pin_conf);
     bdc:	1d3b      	adds	r3, r7, #4
     bde:	2006      	movs	r0, #6
     be0:	1c19      	adds	r1, r3, #0
     be2:	4b34      	ldr	r3, [pc, #208]	; (cb4 <fp_board_init+0x144>)
     be4:	4798      	blx	r3
	port_pin_set_config(FP_SWO7, &pin_conf);
     be6:	1d3b      	adds	r3, r7, #4
     be8:	2007      	movs	r0, #7
     bea:	1c19      	adds	r1, r3, #0
     bec:	4b31      	ldr	r3, [pc, #196]	; (cb4 <fp_board_init+0x144>)
     bee:	4798      	blx	r3
	port_pin_set_config(FP_SWO8, &pin_conf);
     bf0:	1d3b      	adds	r3, r7, #4
     bf2:	2008      	movs	r0, #8
     bf4:	1c19      	adds	r1, r3, #0
     bf6:	4b2f      	ldr	r3, [pc, #188]	; (cb4 <fp_board_init+0x144>)
     bf8:	4798      	blx	r3
	
	port_pin_set_output_level(FP_SWO0, 0);
     bfa:	2000      	movs	r0, #0
     bfc:	2100      	movs	r1, #0
     bfe:	4b2e      	ldr	r3, [pc, #184]	; (cb8 <fp_board_init+0x148>)
     c00:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO1, 0);
     c02:	2001      	movs	r0, #1
     c04:	2100      	movs	r1, #0
     c06:	4b2c      	ldr	r3, [pc, #176]	; (cb8 <fp_board_init+0x148>)
     c08:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO2, 0);
     c0a:	2002      	movs	r0, #2
     c0c:	2100      	movs	r1, #0
     c0e:	4b2a      	ldr	r3, [pc, #168]	; (cb8 <fp_board_init+0x148>)
     c10:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO3, 0);
     c12:	2003      	movs	r0, #3
     c14:	2100      	movs	r1, #0
     c16:	4b28      	ldr	r3, [pc, #160]	; (cb8 <fp_board_init+0x148>)
     c18:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO4, 0);
     c1a:	2004      	movs	r0, #4
     c1c:	2100      	movs	r1, #0
     c1e:	4b26      	ldr	r3, [pc, #152]	; (cb8 <fp_board_init+0x148>)
     c20:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO5, 0);
     c22:	2005      	movs	r0, #5
     c24:	2100      	movs	r1, #0
     c26:	4b24      	ldr	r3, [pc, #144]	; (cb8 <fp_board_init+0x148>)
     c28:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO6, 0);
     c2a:	2006      	movs	r0, #6
     c2c:	2100      	movs	r1, #0
     c2e:	4b22      	ldr	r3, [pc, #136]	; (cb8 <fp_board_init+0x148>)
     c30:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO7, 0);
     c32:	2007      	movs	r0, #7
     c34:	2100      	movs	r1, #0
     c36:	4b20      	ldr	r3, [pc, #128]	; (cb8 <fp_board_init+0x148>)
     c38:	4798      	blx	r3
	port_pin_set_output_level(FP_SWO8, 0);
     c3a:	2008      	movs	r0, #8
     c3c:	2100      	movs	r1, #0
     c3e:	4b1e      	ldr	r3, [pc, #120]	; (cb8 <fp_board_init+0x148>)
     c40:	4798      	blx	r3

	/* Set inputs */

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c42:	1d3b      	adds	r3, r7, #4
     c44:	2200      	movs	r2, #0
     c46:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c48:	1d3b      	adds	r3, r7, #4
     c4a:	2201      	movs	r2, #1
     c4c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(FP_SWI0, &pin_conf);
     c4e:	1d3b      	adds	r3, r7, #4
     c50:	2009      	movs	r0, #9
     c52:	1c19      	adds	r1, r3, #0
     c54:	4b17      	ldr	r3, [pc, #92]	; (cb4 <fp_board_init+0x144>)
     c56:	4798      	blx	r3
	port_pin_set_config(FP_SWI1, &pin_conf);	
     c58:	1d3b      	adds	r3, r7, #4
     c5a:	200a      	movs	r0, #10
     c5c:	1c19      	adds	r1, r3, #0
     c5e:	4b15      	ldr	r3, [pc, #84]	; (cb4 <fp_board_init+0x144>)
     c60:	4798      	blx	r3
	port_pin_set_config(FP_SWI2, &pin_conf);
     c62:	1d3b      	adds	r3, r7, #4
     c64:	200b      	movs	r0, #11
     c66:	1c19      	adds	r1, r3, #0
     c68:	4b12      	ldr	r3, [pc, #72]	; (cb4 <fp_board_init+0x144>)
     c6a:	4798      	blx	r3
	port_pin_set_config(FP_SWI3, &pin_conf);	
     c6c:	1d3b      	adds	r3, r7, #4
     c6e:	200c      	movs	r0, #12
     c70:	1c19      	adds	r1, r3, #0
     c72:	4b10      	ldr	r3, [pc, #64]	; (cb4 <fp_board_init+0x144>)
     c74:	4798      	blx	r3
	port_pin_set_config(FP_SWI4, &pin_conf);
     c76:	1d3b      	adds	r3, r7, #4
     c78:	200d      	movs	r0, #13
     c7a:	1c19      	adds	r1, r3, #0
     c7c:	4b0d      	ldr	r3, [pc, #52]	; (cb4 <fp_board_init+0x144>)
     c7e:	4798      	blx	r3
	port_pin_set_config(FP_SWI5, &pin_conf);	
     c80:	1d3b      	adds	r3, r7, #4
     c82:	200e      	movs	r0, #14
     c84:	1c19      	adds	r1, r3, #0
     c86:	4b0b      	ldr	r3, [pc, #44]	; (cb4 <fp_board_init+0x144>)
     c88:	4798      	blx	r3
	port_pin_set_config(FP_SWI6, &pin_conf);
     c8a:	1d3b      	adds	r3, r7, #4
     c8c:	200f      	movs	r0, #15
     c8e:	1c19      	adds	r1, r3, #0
     c90:	4b08      	ldr	r3, [pc, #32]	; (cb4 <fp_board_init+0x144>)
     c92:	4798      	blx	r3
	port_pin_set_config(FP_SWI7, &pin_conf);	
     c94:	1d3b      	adds	r3, r7, #4
     c96:	2010      	movs	r0, #16
     c98:	1c19      	adds	r1, r3, #0
     c9a:	4b06      	ldr	r3, [pc, #24]	; (cb4 <fp_board_init+0x144>)
     c9c:	4798      	blx	r3
	port_pin_set_config(FP_SWI8, &pin_conf);	
     c9e:	1d3b      	adds	r3, r7, #4
     ca0:	2011      	movs	r0, #17
     ca2:	1c19      	adds	r1, r3, #0
     ca4:	4b03      	ldr	r3, [pc, #12]	; (cb4 <fp_board_init+0x144>)
     ca6:	4798      	blx	r3


}
     ca8:	46bd      	mov	sp, r7
     caa:	b002      	add	sp, #8
     cac:	bd80      	pop	{r7, pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00000b01 	.word	0x00000b01
     cb4:	00001129 	.word	0x00001129
     cb8:	00000b21 	.word	0x00000b21

00000cbc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b084      	sub	sp, #16
     cc0:	af00      	add	r7, sp, #0
     cc2:	1c02      	adds	r2, r0, #0
     cc4:	1dfb      	adds	r3, r7, #7
     cc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     cc8:	230f      	movs	r3, #15
     cca:	18fb      	adds	r3, r7, r3
     ccc:	1dfa      	adds	r2, r7, #7
     cce:	7812      	ldrb	r2, [r2, #0]
     cd0:	09d2      	lsrs	r2, r2, #7
     cd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     cd4:	230e      	movs	r3, #14
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	1dfa      	adds	r2, r7, #7
     cda:	7812      	ldrb	r2, [r2, #0]
     cdc:	0952      	lsrs	r2, r2, #5
     cde:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     ce0:	4b0d      	ldr	r3, [pc, #52]	; (d18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     ce2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     ce4:	230f      	movs	r3, #15
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b00      	cmp	r3, #0
     cec:	d10f      	bne.n	d0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     cee:	230f      	movs	r3, #15
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	781b      	ldrb	r3, [r3, #0]
     cf4:	009b      	lsls	r3, r3, #2
     cf6:	2210      	movs	r2, #16
     cf8:	4694      	mov	ip, r2
     cfa:	44bc      	add	ip, r7
     cfc:	4463      	add	r3, ip
     cfe:	3b08      	subs	r3, #8
     d00:	681a      	ldr	r2, [r3, #0]
     d02:	230e      	movs	r3, #14
     d04:	18fb      	adds	r3, r7, r3
     d06:	781b      	ldrb	r3, [r3, #0]
     d08:	01db      	lsls	r3, r3, #7
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	e000      	b.n	d10 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     d0e:	2300      	movs	r3, #0
	}
}
     d10:	1c18      	adds	r0, r3, #0
     d12:	46bd      	mov	sp, r7
     d14:	b004      	add	sp, #16
     d16:	bd80      	pop	{r7, pc}
     d18:	41004400 	.word	0x41004400

00000d1c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     d1c:	b580      	push	{r7, lr}
     d1e:	b082      	sub	sp, #8
     d20:	af00      	add	r7, sp, #0
     d22:	1c02      	adds	r2, r0, #0
     d24:	1dfb      	adds	r3, r7, #7
     d26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     d28:	1dfb      	adds	r3, r7, #7
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	1c18      	adds	r0, r3, #0
     d2e:	4b03      	ldr	r3, [pc, #12]	; (d3c <port_get_group_from_gpio_pin+0x20>)
     d30:	4798      	blx	r3
     d32:	1c03      	adds	r3, r0, #0
}
     d34:	1c18      	adds	r0, r3, #0
     d36:	46bd      	mov	sp, r7
     d38:	b002      	add	sp, #8
     d3a:	bd80      	pop	{r7, pc}
     d3c:	00000cbd 	.word	0x00000cbd

00000d40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     d40:	b580      	push	{r7, lr}
     d42:	b084      	sub	sp, #16
     d44:	af00      	add	r7, sp, #0
     d46:	1c02      	adds	r2, r0, #0
     d48:	1dfb      	adds	r3, r7, #7
     d4a:	701a      	strb	r2, [r3, #0]
     d4c:	1dbb      	adds	r3, r7, #6
     d4e:	1c0a      	adds	r2, r1, #0
     d50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     d52:	1dfb      	adds	r3, r7, #7
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	1c18      	adds	r0, r3, #0
     d58:	4b0c      	ldr	r3, [pc, #48]	; (d8c <port_pin_set_output_level+0x4c>)
     d5a:	4798      	blx	r3
     d5c:	1c03      	adds	r3, r0, #0
     d5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d60:	1dfb      	adds	r3, r7, #7
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	221f      	movs	r2, #31
     d66:	4013      	ands	r3, r2
     d68:	2201      	movs	r2, #1
     d6a:	409a      	lsls	r2, r3
     d6c:	1c13      	adds	r3, r2, #0
     d6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     d70:	1dbb      	adds	r3, r7, #6
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	2b00      	cmp	r3, #0
     d76:	d003      	beq.n	d80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	68ba      	ldr	r2, [r7, #8]
     d7c:	619a      	str	r2, [r3, #24]
     d7e:	e002      	b.n	d86 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	68ba      	ldr	r2, [r7, #8]
     d84:	615a      	str	r2, [r3, #20]
	}
}
     d86:	46bd      	mov	sp, r7
     d88:	b004      	add	sp, #16
     d8a:	bd80      	pop	{r7, pc}
     d8c:	00000d1d 	.word	0x00000d1d

00000d90 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     d90:	b580      	push	{r7, lr}
     d92:	b082      	sub	sp, #8
     d94:	af00      	add	r7, sp, #0
     d96:	1c02      	adds	r2, r0, #0
     d98:	1dfb      	adds	r3, r7, #7
     d9a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d9c:	4b06      	ldr	r3, [pc, #24]	; (db8 <system_interrupt_enable+0x28>)
     d9e:	1dfa      	adds	r2, r7, #7
     da0:	7812      	ldrb	r2, [r2, #0]
     da2:	1c11      	adds	r1, r2, #0
     da4:	221f      	movs	r2, #31
     da6:	400a      	ands	r2, r1
     da8:	2101      	movs	r1, #1
     daa:	4091      	lsls	r1, r2
     dac:	1c0a      	adds	r2, r1, #0
     dae:	601a      	str	r2, [r3, #0]
}
     db0:	46bd      	mov	sp, r7
     db2:	b002      	add	sp, #8
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	e000e100 	.word	0xe000e100

00000dbc <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b084      	sub	sp, #16
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dca:	68fb      	ldr	r3, [r7, #12]
     dcc:	7bdb      	ldrb	r3, [r3, #15]
     dce:	b2db      	uxtb	r3, r3
     dd0:	1c1a      	adds	r2, r3, #0
     dd2:	2380      	movs	r3, #128	; 0x80
     dd4:	4013      	ands	r3, r2
     dd6:	1e5a      	subs	r2, r3, #1
     dd8:	4193      	sbcs	r3, r2
     dda:	b2db      	uxtb	r3, r3
#endif
}
     ddc:	1c18      	adds	r0, r3, #0
     dde:	46bd      	mov	sp, r7
     de0:	b004      	add	sp, #16
     de2:	bd80      	pop	{r7, pc}

00000de4 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
     de4:	b580      	push	{r7, lr}
     de6:	b082      	sub	sp, #8
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2200      	movs	r2, #0
     df0:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2200      	movs	r2, #0
     df6:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2200      	movs	r2, #0
     dfc:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2200      	movs	r2, #0
     e02:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2200      	movs	r2, #0
     e08:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2200      	movs	r2, #0
     e0e:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	2200      	movs	r2, #0
     e14:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2200      	movs	r2, #0
     e1a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	2200      	movs	r2, #0
     e20:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	2200      	movs	r2, #0
     e26:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2200      	movs	r2, #0
     e2c:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2200      	movs	r2, #0
     e32:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2200      	movs	r2, #0
     e38:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	2200      	movs	r2, #0
     e3e:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	2200      	movs	r2, #0
     e44:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	2200      	movs	r2, #0
     e4a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	2200      	movs	r2, #0
     e50:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	2200      	movs	r2, #0
     e56:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	2200      	movs	r2, #0
     e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	2200      	movs	r2, #0
     e62:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
     e64:	46bd      	mov	sp, r7
     e66:	b002      	add	sp, #8
     e68:	bd80      	pop	{r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)

00000e6c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
     e6c:	b580      	push	{r7, lr}
     e6e:	b084      	sub	sp, #16
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	1c18      	adds	r0, r3, #0
     e80:	4b07      	ldr	r3, [pc, #28]	; (ea0 <tc_enable+0x34>)
     e82:	4798      	blx	r3
     e84:	1e03      	subs	r3, r0, #0
     e86:	d1f9      	bne.n	e7c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	881b      	ldrh	r3, [r3, #0]
     e8c:	b29b      	uxth	r3, r3
     e8e:	2202      	movs	r2, #2
     e90:	4313      	orrs	r3, r2
     e92:	b29a      	uxth	r2, r3
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	801a      	strh	r2, [r3, #0]
}
     e98:	46bd      	mov	sp, r7
     e9a:	b004      	add	sp, #16
     e9c:	bd80      	pop	{r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00000dbd 	.word	0x00000dbd

00000ea4 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b082      	sub	sp, #8
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     eac:	4a04      	ldr	r2, [pc, #16]	; (ec0 <_tc_interrupt_get_interrupt_vector+0x1c>)
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	18d3      	adds	r3, r2, r3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	b2db      	uxtb	r3, r3
     eb6:	b25b      	sxtb	r3, r3
}
     eb8:	1c18      	adds	r0, r3, #0
     eba:	46bd      	mov	sp, r7
     ebc:	b002      	add	sp, #8
     ebe:	bd80      	pop	{r7, pc}
     ec0:	20000004 	.word	0x20000004

00000ec4 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b082      	sub	sp, #8
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	1c0a      	adds	r2, r1, #0
     ece:	1cfb      	adds	r3, r7, #3
     ed0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	1c18      	adds	r0, r3, #0
     ed8:	4b22      	ldr	r3, [pc, #136]	; (f64 <tc_enable_callback+0xa0>)
     eda:	4798      	blx	r3
     edc:	1c03      	adds	r3, r0, #0
     ede:	1c18      	adds	r0, r3, #0
     ee0:	4b21      	ldr	r3, [pc, #132]	; (f68 <tc_enable_callback+0xa4>)
     ee2:	4798      	blx	r3
     ee4:	1c03      	adds	r3, r0, #0
     ee6:	1c18      	adds	r0, r3, #0
     ee8:	4b20      	ldr	r3, [pc, #128]	; (f6c <tc_enable_callback+0xa8>)
     eea:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     eec:	1cfb      	adds	r3, r7, #3
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	2b02      	cmp	r3, #2
     ef2:	d10b      	bne.n	f0c <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	7e5b      	ldrb	r3, [r3, #25]
     ef8:	2210      	movs	r2, #16
     efa:	4313      	orrs	r3, r2
     efc:	b2da      	uxtb	r2, r3
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	2210      	movs	r2, #16
     f08:	735a      	strb	r2, [r3, #13]
     f0a:	e027      	b.n	f5c <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     f0c:	1cfb      	adds	r3, r7, #3
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	2b03      	cmp	r3, #3
     f12:	d10b      	bne.n	f2c <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
     f14:	687b      	ldr	r3, [r7, #4]
     f16:	7e5b      	ldrb	r3, [r3, #25]
     f18:	2220      	movs	r2, #32
     f1a:	4313      	orrs	r3, r2
     f1c:	b2da      	uxtb	r2, r3
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	681b      	ldr	r3, [r3, #0]
     f26:	2220      	movs	r2, #32
     f28:	735a      	strb	r2, [r3, #13]
     f2a:	e017      	b.n	f5c <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	7e5b      	ldrb	r3, [r3, #25]
     f30:	b2d9      	uxtb	r1, r3
     f32:	1cfb      	adds	r3, r7, #3
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	2201      	movs	r2, #1
     f38:	409a      	lsls	r2, r3
     f3a:	1c13      	adds	r3, r2, #0
     f3c:	b2db      	uxtb	r3, r3
     f3e:	1c0a      	adds	r2, r1, #0
     f40:	4313      	orrs	r3, r2
     f42:	b2db      	uxtb	r3, r3
     f44:	b2da      	uxtb	r2, r3
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	1cfa      	adds	r2, r7, #3
     f50:	7812      	ldrb	r2, [r2, #0]
     f52:	2101      	movs	r1, #1
     f54:	4091      	lsls	r1, r2
     f56:	1c0a      	adds	r2, r1, #0
     f58:	b2d2      	uxtb	r2, r2
     f5a:	735a      	strb	r2, [r3, #13]
	}
}
     f5c:	46bd      	mov	sp, r7
     f5e:	b002      	add	sp, #8
     f60:	bd80      	pop	{r7, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	00001fcd 	.word	0x00001fcd
     f68:	00000ea5 	.word	0x00000ea5
     f6c:	00000d91 	.word	0x00000d91

00000f70 <get_ledTimer>:

uint8_t timer100ms, ledTimer; 


uint8_t get_ledTimer(void)
{	return ledTimer;
     f70:	b580      	push	{r7, lr}
     f72:	af00      	add	r7, sp, #0
     f74:	4b02      	ldr	r3, [pc, #8]	; (f80 <get_ledTimer+0x10>)
     f76:	781b      	ldrb	r3, [r3, #0]
}
     f78:	1c18      	adds	r0, r3, #0
     f7a:	46bd      	mov	sp, r7
     f7c:	bd80      	pop	{r7, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	2000093c 	.word	0x2000093c

00000f84 <configure_tc7_callbacks>:
	

void configure_tc7_callbacks(void)
{
     f84:	b580      	push	{r7, lr}
     f86:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(&tc7_instance, tc7_callback,TC_CALLBACK_OVERFLOW);
     f88:	4a06      	ldr	r2, [pc, #24]	; (fa4 <configure_tc7_callbacks+0x20>)
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <configure_tc7_callbacks+0x24>)
     f8c:	1c10      	adds	r0, r2, #0
     f8e:	1c19      	adds	r1, r3, #0
     f90:	2200      	movs	r2, #0
     f92:	4b06      	ldr	r3, [pc, #24]	; (fac <configure_tc7_callbacks+0x28>)
     f94:	4798      	blx	r3

	//! [setup_enable_callback]
	tc_enable_callback(&tc7_instance, TC_CALLBACK_OVERFLOW);
     f96:	4b03      	ldr	r3, [pc, #12]	; (fa4 <configure_tc7_callbacks+0x20>)
     f98:	1c18      	adds	r0, r3, #0
     f9a:	2100      	movs	r1, #0
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <configure_tc7_callbacks+0x2c>)
     f9e:	4798      	blx	r3
}
     fa0:	46bd      	mov	sp, r7
     fa2:	bd80      	pop	{r7, pc}
     fa4:	20000920 	.word	0x20000920
     fa8:	00000fb5 	.word	0x00000fb5
     fac:	00001d41 	.word	0x00001d41
     fb0:	00000ec5 	.word	0x00000ec5

00000fb4 <tc7_callback>:



void tc7_callback(
		struct tc_module *const module_inst)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	af00      	add	r7, sp, #0
     fba:	6078      	str	r0, [r7, #4]

	ledTimer++;
     fbc:	4b13      	ldr	r3, [pc, #76]	; (100c <tc7_callback+0x58>)
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	3301      	adds	r3, #1
     fc2:	b2da      	uxtb	r2, r3
     fc4:	4b11      	ldr	r3, [pc, #68]	; (100c <tc7_callback+0x58>)
     fc6:	701a      	strb	r2, [r3, #0]
	
	if (ledTimer == 0)	port_pin_set_output_level(LED_RUN_PIN, 0);
     fc8:	4b10      	ldr	r3, [pc, #64]	; (100c <tc7_callback+0x58>)
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d103      	bne.n	fd8 <tc7_callback+0x24>
     fd0:	2013      	movs	r0, #19
     fd2:	2100      	movs	r1, #0
     fd4:	4b0e      	ldr	r3, [pc, #56]	; (1010 <tc7_callback+0x5c>)
     fd6:	4798      	blx	r3
	if (ledTimer == 40) port_pin_set_output_level(LED_RUN_PIN, 1);
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <tc7_callback+0x58>)
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	2b28      	cmp	r3, #40	; 0x28
     fde:	d103      	bne.n	fe8 <tc7_callback+0x34>
     fe0:	2013      	movs	r0, #19
     fe2:	2101      	movs	r1, #1
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <tc7_callback+0x5c>)
     fe6:	4798      	blx	r3


	
	if (ledTimer == 100)						// do 100ms stuff
     fe8:	4b08      	ldr	r3, [pc, #32]	; (100c <tc7_callback+0x58>)
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	2b64      	cmp	r3, #100	; 0x64
     fee:	d109      	bne.n	1004 <tc7_callback+0x50>
	{
		if (timer100ms)  timer100ms--;
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <tc7_callback+0x60>)
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d005      	beq.n	1004 <tc7_callback+0x50>
     ff8:	4b06      	ldr	r3, [pc, #24]	; (1014 <tc7_callback+0x60>)
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	3b01      	subs	r3, #1
     ffe:	b2da      	uxtb	r2, r3
    1000:	4b04      	ldr	r3, [pc, #16]	; (1014 <tc7_callback+0x60>)
    1002:	701a      	strb	r2, [r3, #0]
		
	}

//	port_pin_toggle_output_level(FP_SWO0);		
		
}								 
    1004:	46bd      	mov	sp, r7
    1006:	b002      	add	sp, #8
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	2000093c 	.word	0x2000093c
    1010:	00000d41 	.word	0x00000d41
    1014:	2000091c 	.word	0x2000091c

00001018 <configure_tc7>:
//! [callback_funcs]
									
//! [setup]
void configure_tc7(void)
{
    1018:	b580      	push	{r7, lr}
    101a:	b08e      	sub	sp, #56	; 0x38
    101c:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    101e:	1d3b      	adds	r3, r7, #4
    1020:	1c18      	adds	r0, r3, #0
    1022:	4b0f      	ldr	r3, [pc, #60]	; (1060 <configure_tc7+0x48>)
    1024:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
		config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    1026:	1d3b      	adds	r3, r7, #4
    1028:	2204      	movs	r2, #4
    102a:	709a      	strb	r2, [r3, #2]
		config_tc.clock_source = GCLK_GENERATOR_1;						// running at 8Mhz
    102c:	1d3b      	adds	r3, r7, #4
    102e:	2201      	movs	r2, #1
    1030:	701a      	strb	r2, [r3, #0]
		config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64;
    1032:	1d3b      	adds	r3, r7, #4
    1034:	22a0      	movs	r2, #160	; 0xa0
    1036:	00d2      	lsls	r2, r2, #3
    1038:	809a      	strh	r2, [r3, #4]
		config_tc.counter_8_bit.period = 124;						// measured 1khz with scope
    103a:	1d3b      	adds	r3, r7, #4
    103c:	2229      	movs	r2, #41	; 0x29
    103e:	217c      	movs	r1, #124	; 0x7c
    1040:	5499      	strb	r1, [r3, r2]
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(&tc7_instance, TC7, &config_tc);
    1042:	4a08      	ldr	r2, [pc, #32]	; (1064 <configure_tc7+0x4c>)
    1044:	4908      	ldr	r1, [pc, #32]	; (1068 <configure_tc7+0x50>)
    1046:	1d3b      	adds	r3, r7, #4
    1048:	1c10      	adds	r0, r2, #0
    104a:	1c1a      	adds	r2, r3, #0
    104c:	4b07      	ldr	r3, [pc, #28]	; (106c <configure_tc7+0x54>)
    104e:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc7_instance);
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <configure_tc7+0x4c>)
    1052:	1c18      	adds	r0, r3, #0
    1054:	4b06      	ldr	r3, [pc, #24]	; (1070 <configure_tc7+0x58>)
    1056:	4798      	blx	r3
	//! [setup_enable]
}
    1058:	46bd      	mov	sp, r7
    105a:	b00e      	add	sp, #56	; 0x38
    105c:	bd80      	pop	{r7, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	00000de5 	.word	0x00000de5
    1064:	20000920 	.word	0x20000920
    1068:	42003c00 	.word	0x42003c00
    106c:	0000201d 	.word	0x0000201d
    1070:	00000e6d 	.word	0x00000e6d

00001074 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1074:	b580      	push	{r7, lr}
    1076:	b082      	sub	sp, #8
    1078:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    107a:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <cpu_irq_enter_critical+0x44>)
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	2b00      	cmp	r3, #0
    1080:	d112      	bne.n	10a8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1082:	f3ef 8310 	mrs	r3, PRIMASK
    1086:	607b      	str	r3, [r7, #4]
  return(result);
    1088:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    108a:	2b00      	cmp	r3, #0
    108c:	d109      	bne.n	10a2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    108e:	b672      	cpsid	i
    1090:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <cpu_irq_enter_critical+0x48>)
    1096:	2200      	movs	r2, #0
    1098:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    109a:	4b09      	ldr	r3, [pc, #36]	; (10c0 <cpu_irq_enter_critical+0x4c>)
    109c:	2201      	movs	r2, #1
    109e:	701a      	strb	r2, [r3, #0]
    10a0:	e002      	b.n	10a8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    10a2:	4b07      	ldr	r3, [pc, #28]	; (10c0 <cpu_irq_enter_critical+0x4c>)
    10a4:	2200      	movs	r2, #0
    10a6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    10a8:	4b03      	ldr	r3, [pc, #12]	; (10b8 <cpu_irq_enter_critical+0x44>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	1c5a      	adds	r2, r3, #1
    10ae:	4b02      	ldr	r3, [pc, #8]	; (10b8 <cpu_irq_enter_critical+0x44>)
    10b0:	601a      	str	r2, [r3, #0]
}
    10b2:	46bd      	mov	sp, r7
    10b4:	b002      	add	sp, #8
    10b6:	bd80      	pop	{r7, pc}
    10b8:	20000048 	.word	0x20000048
    10bc:	2000000c 	.word	0x2000000c
    10c0:	2000004c 	.word	0x2000004c

000010c4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <cpu_irq_leave_critical+0x30>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	1e5a      	subs	r2, r3, #1
    10ce:	4b09      	ldr	r3, [pc, #36]	; (10f4 <cpu_irq_leave_critical+0x30>)
    10d0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    10d2:	4b08      	ldr	r3, [pc, #32]	; (10f4 <cpu_irq_leave_critical+0x30>)
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d10a      	bne.n	10f0 <cpu_irq_leave_critical+0x2c>
    10da:	4b07      	ldr	r3, [pc, #28]	; (10f8 <cpu_irq_leave_critical+0x34>)
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	b2db      	uxtb	r3, r3
    10e0:	2b00      	cmp	r3, #0
    10e2:	d005      	beq.n	10f0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    10e4:	4b05      	ldr	r3, [pc, #20]	; (10fc <cpu_irq_leave_critical+0x38>)
    10e6:	2201      	movs	r2, #1
    10e8:	701a      	strb	r2, [r3, #0]
    10ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    10ee:	b662      	cpsie	i
	}
}
    10f0:	46bd      	mov	sp, r7
    10f2:	bd80      	pop	{r7, pc}
    10f4:	20000048 	.word	0x20000048
    10f8:	2000004c 	.word	0x2000004c
    10fc:	2000000c 	.word	0x2000000c

00001100 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1100:	b580      	push	{r7, lr}
    1102:	b082      	sub	sp, #8
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	2280      	movs	r2, #128	; 0x80
    110c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	2200      	movs	r2, #0
    1112:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	2201      	movs	r2, #1
    1118:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	2200      	movs	r2, #0
    111e:	70da      	strb	r2, [r3, #3]
}
    1120:	46bd      	mov	sp, r7
    1122:	b002      	add	sp, #8
    1124:	bd80      	pop	{r7, pc}
    1126:	46c0      	nop			; (mov r8, r8)

00001128 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1128:	b580      	push	{r7, lr}
    112a:	b084      	sub	sp, #16
    112c:	af00      	add	r7, sp, #0
    112e:	1c02      	adds	r2, r0, #0
    1130:	6039      	str	r1, [r7, #0]
    1132:	1dfb      	adds	r3, r7, #7
    1134:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1136:	230c      	movs	r3, #12
    1138:	18fb      	adds	r3, r7, r3
    113a:	1c18      	adds	r0, r3, #0
    113c:	4b0f      	ldr	r3, [pc, #60]	; (117c <port_pin_set_config+0x54>)
    113e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1140:	230c      	movs	r3, #12
    1142:	18fb      	adds	r3, r7, r3
    1144:	2280      	movs	r2, #128	; 0x80
    1146:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1148:	683b      	ldr	r3, [r7, #0]
    114a:	781a      	ldrb	r2, [r3, #0]
    114c:	230c      	movs	r3, #12
    114e:	18fb      	adds	r3, r7, r3
    1150:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	785a      	ldrb	r2, [r3, #1]
    1156:	230c      	movs	r3, #12
    1158:	18fb      	adds	r3, r7, r3
    115a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    115c:	683b      	ldr	r3, [r7, #0]
    115e:	789a      	ldrb	r2, [r3, #2]
    1160:	230c      	movs	r3, #12
    1162:	18fb      	adds	r3, r7, r3
    1164:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1166:	1dfb      	adds	r3, r7, #7
    1168:	781a      	ldrb	r2, [r3, #0]
    116a:	230c      	movs	r3, #12
    116c:	18fb      	adds	r3, r7, r3
    116e:	1c10      	adds	r0, r2, #0
    1170:	1c19      	adds	r1, r3, #0
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <port_pin_set_config+0x58>)
    1174:	4798      	blx	r3
}
    1176:	46bd      	mov	sp, r7
    1178:	b004      	add	sp, #16
    117a:	bd80      	pop	{r7, pc}
    117c:	00001101 	.word	0x00001101
    1180:	00001cf5 	.word	0x00001cf5

00001184 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1184:	b580      	push	{r7, lr}
    1186:	b082      	sub	sp, #8
    1188:	af00      	add	r7, sp, #0
    118a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	2201      	movs	r2, #1
    1190:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	2200      	movs	r2, #0
    1196:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	2206      	movs	r2, #6
    119c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	2200      	movs	r2, #0
    11a2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	2200      	movs	r2, #0
    11a8:	725a      	strb	r2, [r3, #9]
}
    11aa:	46bd      	mov	sp, r7
    11ac:	b002      	add	sp, #8
    11ae:	bd80      	pop	{r7, pc}

000011b0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
    11b6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	2203      	movs	r2, #3
    11bc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	2200      	movs	r2, #0
    11c2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    11c4:	687b      	ldr	r3, [r7, #4]
    11c6:	2201      	movs	r2, #1
    11c8:	709a      	strb	r2, [r3, #2]
}
    11ca:	46bd      	mov	sp, r7
    11cc:	b002      	add	sp, #8
    11ce:	bd80      	pop	{r7, pc}

000011d0 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    11d0:	b580      	push	{r7, lr}
    11d2:	b082      	sub	sp, #8
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	2200      	movs	r2, #0
    11dc:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	2200      	movs	r2, #0
    11e2:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	2200      	movs	r2, #0
    11e8:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	2200      	movs	r2, #0
    11ee:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	2200      	movs	r2, #0
    11f4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	2201      	movs	r2, #1
    11fa:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	2207      	movs	r2, #7
    1200:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	223f      	movs	r2, #63	; 0x3f
    1206:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    1208:	687b      	ldr	r3, [r7, #4]
    120a:	2201      	movs	r2, #1
    120c:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	2201      	movs	r2, #1
    1212:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	2206      	movs	r2, #6
    1218:	821a      	strh	r2, [r3, #16]
}
    121a:	46bd      	mov	sp, r7
    121c:	b002      	add	sp, #8
    121e:	bd80      	pop	{r7, pc}

00001220 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
    1226:	1c02      	adds	r2, r0, #0
    1228:	1dfb      	adds	r3, r7, #7
    122a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    122c:	4a03      	ldr	r2, [pc, #12]	; (123c <system_cpu_clock_set_divider+0x1c>)
    122e:	1dfb      	adds	r3, r7, #7
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	7213      	strb	r3, [r2, #8]
}
    1234:	46bd      	mov	sp, r7
    1236:	b002      	add	sp, #8
    1238:	bd80      	pop	{r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	40000400 	.word	0x40000400

00001240 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    1240:	b580      	push	{r7, lr}
    1242:	b082      	sub	sp, #8
    1244:	af00      	add	r7, sp, #0
    1246:	1c02      	adds	r2, r0, #0
    1248:	1dfb      	adds	r3, r7, #7
    124a:	701a      	strb	r2, [r3, #0]
    124c:	1dbb      	adds	r3, r7, #6
    124e:	1c0a      	adds	r2, r1, #0
    1250:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1252:	1dfb      	adds	r3, r7, #7
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	2b01      	cmp	r3, #1
    1258:	d008      	beq.n	126c <system_apb_clock_set_divider+0x2c>
    125a:	2b02      	cmp	r3, #2
    125c:	d00b      	beq.n	1276 <system_apb_clock_set_divider+0x36>
    125e:	2b00      	cmp	r3, #0
    1260:	d10e      	bne.n	1280 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1262:	4a0b      	ldr	r2, [pc, #44]	; (1290 <system_apb_clock_set_divider+0x50>)
    1264:	1dbb      	adds	r3, r7, #6
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	7253      	strb	r3, [r2, #9]
			break;
    126a:	e00b      	b.n	1284 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    126c:	4a08      	ldr	r2, [pc, #32]	; (1290 <system_apb_clock_set_divider+0x50>)
    126e:	1dbb      	adds	r3, r7, #6
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	7293      	strb	r3, [r2, #10]
			break;
    1274:	e006      	b.n	1284 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1276:	4a06      	ldr	r2, [pc, #24]	; (1290 <system_apb_clock_set_divider+0x50>)
    1278:	1dbb      	adds	r3, r7, #6
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	72d3      	strb	r3, [r2, #11]
			break;
    127e:	e001      	b.n	1284 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1280:	2317      	movs	r3, #23
    1282:	e000      	b.n	1286 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1284:	2300      	movs	r3, #0
}
    1286:	1c18      	adds	r0, r3, #0
    1288:	46bd      	mov	sp, r7
    128a:	b002      	add	sp, #8
    128c:	bd80      	pop	{r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	40000400 	.word	0x40000400

00001294 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1294:	b580      	push	{r7, lr}
    1296:	b082      	sub	sp, #8
    1298:	af00      	add	r7, sp, #0
    129a:	1c02      	adds	r2, r0, #0
    129c:	1dfb      	adds	r3, r7, #7
    129e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12a0:	4b08      	ldr	r3, [pc, #32]	; (12c4 <system_flash_set_waitstates+0x30>)
    12a2:	1dfa      	adds	r2, r7, #7
    12a4:	7812      	ldrb	r2, [r2, #0]
    12a6:	210f      	movs	r1, #15
    12a8:	400a      	ands	r2, r1
    12aa:	b2d2      	uxtb	r2, r2
    12ac:	210f      	movs	r1, #15
    12ae:	400a      	ands	r2, r1
    12b0:	0052      	lsls	r2, r2, #1
    12b2:	6859      	ldr	r1, [r3, #4]
    12b4:	201e      	movs	r0, #30
    12b6:	4381      	bics	r1, r0
    12b8:	430a      	orrs	r2, r1
    12ba:	605a      	str	r2, [r3, #4]
}
    12bc:	46bd      	mov	sp, r7
    12be:	b002      	add	sp, #8
    12c0:	bd80      	pop	{r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	41004000 	.word	0x41004000

000012c8 <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
    12c8:	b580      	push	{r7, lr}
    12ca:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
    12cc:	4b02      	ldr	r3, [pc, #8]	; (12d8 <system_get_device_id+0x10>)
    12ce:	699b      	ldr	r3, [r3, #24]
}
    12d0:	1c18      	adds	r0, r3, #0
    12d2:	46bd      	mov	sp, r7
    12d4:	bd80      	pop	{r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	41002000 	.word	0x41002000

000012dc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    12dc:	b580      	push	{r7, lr}
    12de:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12e0:	46c0      	nop			; (mov r8, r8)
    12e2:	4b03      	ldr	r3, [pc, #12]	; (12f0 <_system_dfll_wait_for_sync+0x14>)
    12e4:	68db      	ldr	r3, [r3, #12]
    12e6:	2210      	movs	r2, #16
    12e8:	4013      	ands	r3, r2
    12ea:	d0fa      	beq.n	12e2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    12ec:	46bd      	mov	sp, r7
    12ee:	bd80      	pop	{r7, pc}
    12f0:	40000800 	.word	0x40000800

000012f4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    12f8:	4a0c      	ldr	r2, [pc, #48]	; (132c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    12fa:	4b0d      	ldr	r3, [pc, #52]	; (1330 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	b29b      	uxth	r3, r3
    1300:	2180      	movs	r1, #128	; 0x80
    1302:	438b      	bics	r3, r1
    1304:	b29b      	uxth	r3, r3
    1306:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1308:	4b0a      	ldr	r3, [pc, #40]	; (1334 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    130a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    130c:	4a07      	ldr	r2, [pc, #28]	; (132c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    130e:	4b08      	ldr	r3, [pc, #32]	; (1330 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1310:	689b      	ldr	r3, [r3, #8]
    1312:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1314:	4a05      	ldr	r2, [pc, #20]	; (132c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1316:	4b06      	ldr	r3, [pc, #24]	; (1330 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1318:	685b      	ldr	r3, [r3, #4]
    131a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    131c:	4a03      	ldr	r2, [pc, #12]	; (132c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1320:	681b      	ldr	r3, [r3, #0]
    1322:	b29b      	uxth	r3, r3
    1324:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1326:	46bd      	mov	sp, r7
    1328:	bd80      	pop	{r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	40000800 	.word	0x40000800
    1330:	20000050 	.word	0x20000050
    1334:	000012dd 	.word	0x000012dd

00001338 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1338:	b580      	push	{r7, lr}
    133a:	b084      	sub	sp, #16
    133c:	af00      	add	r7, sp, #0
    133e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1340:	4b1a      	ldr	r3, [pc, #104]	; (13ac <system_clock_source_osc8m_set_config+0x74>)
    1342:	6a1b      	ldr	r3, [r3, #32]
    1344:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	1c1a      	adds	r2, r3, #0
    134c:	2303      	movs	r3, #3
    134e:	4013      	ands	r3, r2
    1350:	b2da      	uxtb	r2, r3
    1352:	230d      	movs	r3, #13
    1354:	18fb      	adds	r3, r7, r3
    1356:	2103      	movs	r1, #3
    1358:	400a      	ands	r2, r1
    135a:	1c10      	adds	r0, r2, #0
    135c:	781a      	ldrb	r2, [r3, #0]
    135e:	2103      	movs	r1, #3
    1360:	438a      	bics	r2, r1
    1362:	1c11      	adds	r1, r2, #0
    1364:	1c02      	adds	r2, r0, #0
    1366:	430a      	orrs	r2, r1
    1368:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	789a      	ldrb	r2, [r3, #2]
    136e:	230c      	movs	r3, #12
    1370:	18fb      	adds	r3, r7, r3
    1372:	01d0      	lsls	r0, r2, #7
    1374:	781a      	ldrb	r2, [r3, #0]
    1376:	217f      	movs	r1, #127	; 0x7f
    1378:	400a      	ands	r2, r1
    137a:	1c11      	adds	r1, r2, #0
    137c:	1c02      	adds	r2, r0, #0
    137e:	430a      	orrs	r2, r1
    1380:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	785a      	ldrb	r2, [r3, #1]
    1386:	230c      	movs	r3, #12
    1388:	18fb      	adds	r3, r7, r3
    138a:	2101      	movs	r1, #1
    138c:	400a      	ands	r2, r1
    138e:	0190      	lsls	r0, r2, #6
    1390:	781a      	ldrb	r2, [r3, #0]
    1392:	2140      	movs	r1, #64	; 0x40
    1394:	438a      	bics	r2, r1
    1396:	1c11      	adds	r1, r2, #0
    1398:	1c02      	adds	r2, r0, #0
    139a:	430a      	orrs	r2, r1
    139c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    139e:	4b03      	ldr	r3, [pc, #12]	; (13ac <system_clock_source_osc8m_set_config+0x74>)
    13a0:	68fa      	ldr	r2, [r7, #12]
    13a2:	621a      	str	r2, [r3, #32]
}
    13a4:	46bd      	mov	sp, r7
    13a6:	b004      	add	sp, #16
    13a8:	bd80      	pop	{r7, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	40000800 	.word	0x40000800

000013b0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    13b0:	b580      	push	{r7, lr}
    13b2:	b084      	sub	sp, #16
    13b4:	af00      	add	r7, sp, #0
    13b6:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    13b8:	4b39      	ldr	r3, [pc, #228]	; (14a0 <system_clock_source_dfll_set_config+0xf0>)
    13ba:	4798      	blx	r3
    13bc:	1c03      	adds	r3, r0, #0
    13be:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    13c0:	68fa      	ldr	r2, [r7, #12]
    13c2:	23f0      	movs	r3, #240	; 0xf0
    13c4:	011b      	lsls	r3, r3, #4
    13c6:	4013      	ands	r3, r2
    13c8:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	0a1b      	lsrs	r3, r3, #8
    13ce:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2b02      	cmp	r3, #2
    13d4:	d80f      	bhi.n	13f6 <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	7a1b      	ldrb	r3, [r3, #8]
    13da:	021b      	lsls	r3, r3, #8
    13dc:	1c1a      	adds	r2, r3, #0
    13de:	23f8      	movs	r3, #248	; 0xf8
    13e0:	015b      	lsls	r3, r3, #5
    13e2:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	895b      	ldrh	r3, [r3, #10]
    13e8:	1c19      	adds	r1, r3, #0
    13ea:	23ff      	movs	r3, #255	; 0xff
    13ec:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    13ee:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
    13f0:	4b2c      	ldr	r3, [pc, #176]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    13f2:	605a      	str	r2, [r3, #4]
    13f4:	e00b      	b.n	140e <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	7a1b      	ldrb	r3, [r3, #8]
    13fa:	029b      	lsls	r3, r3, #10
    13fc:	041b      	lsls	r3, r3, #16
    13fe:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	895b      	ldrh	r3, [r3, #10]
    1404:	059b      	lsls	r3, r3, #22
    1406:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    1408:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
    140a:	4b26      	ldr	r3, [pc, #152]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    140c:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1416:	4313      	orrs	r3, r2
    1418:	b2db      	uxtb	r3, r3
    141a:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    1420:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1422:	687a      	ldr	r2, [r7, #4]
    1424:	8892      	ldrh	r2, [r2, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1426:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	785b      	ldrb	r3, [r3, #1]
    142c:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    142e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
    1430:	4b1c      	ldr	r3, [pc, #112]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    1432:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	781b      	ldrb	r3, [r3, #0]
    1438:	2b04      	cmp	r3, #4
    143a:	d12e      	bne.n	149a <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	2b02      	cmp	r3, #2
    1440:	d814      	bhi.n	146c <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	7b1b      	ldrb	r3, [r3, #12]
    1446:	061b      	lsls	r3, r3, #24
    1448:	1c1a      	adds	r2, r3, #0
    144a:	23f8      	movs	r3, #248	; 0xf8
    144c:	055b      	lsls	r3, r3, #21
    144e:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	89db      	ldrh	r3, [r3, #14]
    1454:	041b      	lsls	r3, r3, #16
    1456:	1c19      	adds	r1, r3, #0
    1458:	23ff      	movs	r3, #255	; 0xff
    145a:	041b      	lsls	r3, r3, #16
    145c:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    145e:	4313      	orrs	r3, r2
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	8a12      	ldrh	r2, [r2, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    1464:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
    1466:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    1468:	609a      	str	r2, [r3, #8]
    146a:	e00f      	b.n	148c <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	7b1b      	ldrb	r3, [r3, #12]
    1470:	069b      	lsls	r3, r3, #26
    1472:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	89db      	ldrh	r3, [r3, #14]
    1478:	041b      	lsls	r3, r3, #16
    147a:	1c19      	adds	r1, r3, #0
    147c:	4b0a      	ldr	r3, [pc, #40]	; (14a8 <system_clock_source_dfll_set_config+0xf8>)
    147e:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    1480:	4313      	orrs	r3, r2
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1482:	687a      	ldr	r2, [r7, #4]
    1484:	8a12      	ldrh	r2, [r2, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    1486:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    148a:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	687a      	ldr	r2, [r7, #4]
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	431a      	orrs	r2, r3
    1496:	4b03      	ldr	r3, [pc, #12]	; (14a4 <system_clock_source_dfll_set_config+0xf4>)
    1498:	601a      	str	r2, [r3, #0]
	}
}
    149a:	46bd      	mov	sp, r7
    149c:	b004      	add	sp, #16
    149e:	bd80      	pop	{r7, pc}
    14a0:	000012c9 	.word	0x000012c9
    14a4:	20000050 	.word	0x20000050
    14a8:	03ff0000 	.word	0x03ff0000

000014ac <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b082      	sub	sp, #8
    14b0:	af00      	add	r7, sp, #0
    14b2:	1c02      	adds	r2, r0, #0
    14b4:	1dfb      	adds	r3, r7, #7
    14b6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    14b8:	1dfb      	adds	r3, r7, #7
    14ba:	781b      	ldrb	r3, [r3, #0]
    14bc:	2b07      	cmp	r3, #7
    14be:	d830      	bhi.n	1522 <system_clock_source_enable+0x76>
    14c0:	009a      	lsls	r2, r3, #2
    14c2:	4b1b      	ldr	r3, [pc, #108]	; (1530 <system_clock_source_enable+0x84>)
    14c4:	18d3      	adds	r3, r2, r3
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14ca:	4b1a      	ldr	r3, [pc, #104]	; (1534 <system_clock_source_enable+0x88>)
    14cc:	4a19      	ldr	r2, [pc, #100]	; (1534 <system_clock_source_enable+0x88>)
    14ce:	6a12      	ldr	r2, [r2, #32]
    14d0:	2102      	movs	r1, #2
    14d2:	430a      	orrs	r2, r1
    14d4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    14d6:	2300      	movs	r3, #0
    14d8:	e026      	b.n	1528 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14da:	4b16      	ldr	r3, [pc, #88]	; (1534 <system_clock_source_enable+0x88>)
    14dc:	4a15      	ldr	r2, [pc, #84]	; (1534 <system_clock_source_enable+0x88>)
    14de:	6992      	ldr	r2, [r2, #24]
    14e0:	2102      	movs	r1, #2
    14e2:	430a      	orrs	r2, r1
    14e4:	619a      	str	r2, [r3, #24]
		break;
    14e6:	e01e      	b.n	1526 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    14e8:	4a12      	ldr	r2, [pc, #72]	; (1534 <system_clock_source_enable+0x88>)
    14ea:	4b12      	ldr	r3, [pc, #72]	; (1534 <system_clock_source_enable+0x88>)
    14ec:	8a1b      	ldrh	r3, [r3, #16]
    14ee:	b29b      	uxth	r3, r3
    14f0:	2102      	movs	r1, #2
    14f2:	430b      	orrs	r3, r1
    14f4:	b29b      	uxth	r3, r3
    14f6:	8213      	strh	r3, [r2, #16]
		break;
    14f8:	e015      	b.n	1526 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    14fa:	4a0e      	ldr	r2, [pc, #56]	; (1534 <system_clock_source_enable+0x88>)
    14fc:	4b0d      	ldr	r3, [pc, #52]	; (1534 <system_clock_source_enable+0x88>)
    14fe:	8a9b      	ldrh	r3, [r3, #20]
    1500:	b29b      	uxth	r3, r3
    1502:	2102      	movs	r1, #2
    1504:	430b      	orrs	r3, r1
    1506:	b29b      	uxth	r3, r3
    1508:	8293      	strh	r3, [r2, #20]
		break;
    150a:	e00c      	b.n	1526 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    150c:	4b0a      	ldr	r3, [pc, #40]	; (1538 <system_clock_source_enable+0x8c>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	2202      	movs	r2, #2
    1512:	431a      	orrs	r2, r3
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <system_clock_source_enable+0x8c>)
    1516:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1518:	4b08      	ldr	r3, [pc, #32]	; (153c <system_clock_source_enable+0x90>)
    151a:	4798      	blx	r3
		break;
    151c:	e003      	b.n	1526 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    151e:	2300      	movs	r3, #0
    1520:	e002      	b.n	1528 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1522:	2317      	movs	r3, #23
    1524:	e000      	b.n	1528 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    1526:	2300      	movs	r3, #0
}
    1528:	1c18      	adds	r0, r3, #0
    152a:	46bd      	mov	sp, r7
    152c:	b002      	add	sp, #8
    152e:	bd80      	pop	{r7, pc}
    1530:	00002578 	.word	0x00002578
    1534:	40000800 	.word	0x40000800
    1538:	20000050 	.word	0x20000050
    153c:	000012f5 	.word	0x000012f5

00001540 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    1540:	b580      	push	{r7, lr}
    1542:	b084      	sub	sp, #16
    1544:	af00      	add	r7, sp, #0
    1546:	1c02      	adds	r2, r0, #0
    1548:	1dfb      	adds	r3, r7, #7
    154a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    154c:	2300      	movs	r3, #0
    154e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    1550:	1dfb      	adds	r3, r7, #7
    1552:	781b      	ldrb	r3, [r3, #0]
    1554:	2b07      	cmp	r3, #7
    1556:	d815      	bhi.n	1584 <system_clock_source_is_ready+0x44>
    1558:	009a      	lsls	r2, r3, #2
    155a:	4b12      	ldr	r3, [pc, #72]	; (15a4 <system_clock_source_is_ready+0x64>)
    155c:	18d3      	adds	r3, r2, r3
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    1562:	2308      	movs	r3, #8
    1564:	60fb      	str	r3, [r7, #12]
		break;
    1566:	e00f      	b.n	1588 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    1568:	2304      	movs	r3, #4
    156a:	60fb      	str	r3, [r7, #12]
		break;
    156c:	e00c      	b.n	1588 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    156e:	2301      	movs	r3, #1
    1570:	60fb      	str	r3, [r7, #12]
		break;
    1572:	e009      	b.n	1588 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    1574:	2302      	movs	r3, #2
    1576:	60fb      	str	r3, [r7, #12]
		break;
    1578:	e006      	b.n	1588 <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    157a:	2310      	movs	r3, #16
    157c:	60fb      	str	r3, [r7, #12]
		}
		break;
    157e:	e003      	b.n	1588 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    1580:	2301      	movs	r3, #1
    1582:	e00a      	b.n	159a <system_clock_source_is_ready+0x5a>

	default:
		return false;
    1584:	2300      	movs	r3, #0
    1586:	e008      	b.n	159a <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <system_clock_source_is_ready+0x68>)
    158a:	68db      	ldr	r3, [r3, #12]
    158c:	68fa      	ldr	r2, [r7, #12]
    158e:	401a      	ands	r2, r3
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	1ad3      	subs	r3, r2, r3
    1594:	425a      	negs	r2, r3
    1596:	4153      	adcs	r3, r2
    1598:	b2db      	uxtb	r3, r3
}
    159a:	1c18      	adds	r0, r3, #0
    159c:	46bd      	mov	sp, r7
    159e:	b004      	add	sp, #16
    15a0:	bd80      	pop	{r7, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	00002598 	.word	0x00002598
    15a8:	40000800 	.word	0x40000800

000015ac <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    15b2:	1c3b      	adds	r3, r7, #0
    15b4:	2202      	movs	r2, #2
    15b6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15b8:	2300      	movs	r3, #0
    15ba:	607b      	str	r3, [r7, #4]
    15bc:	e009      	b.n	15d2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	b2da      	uxtb	r2, r3
    15c2:	1c3b      	adds	r3, r7, #0
    15c4:	1c10      	adds	r0, r2, #0
    15c6:	1c19      	adds	r1, r3, #0
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <_switch_peripheral_gclk+0x34>)
    15ca:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	3301      	adds	r3, #1
    15d0:	607b      	str	r3, [r7, #4]
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	2b1b      	cmp	r3, #27
    15d6:	d9f2      	bls.n	15be <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    15d8:	46bd      	mov	sp, r7
    15da:	b002      	add	sp, #8
    15dc:	bd80      	pop	{r7, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00001a65 	.word	0x00001a65

000015e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b0a4      	sub	sp, #144	; 0x90
    15e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    15ea:	4b7b      	ldr	r3, [pc, #492]	; (17d8 <system_clock_init+0x1f4>)
    15ec:	22c2      	movs	r2, #194	; 0xc2
    15ee:	00d2      	lsls	r2, r2, #3
    15f0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    15f2:	2000      	movs	r0, #0
    15f4:	4b79      	ldr	r3, [pc, #484]	; (17dc <system_clock_init+0x1f8>)
    15f6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    15f8:	4b79      	ldr	r3, [pc, #484]	; (17e0 <system_clock_init+0x1fc>)
    15fa:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    15fc:	2374      	movs	r3, #116	; 0x74
    15fe:	18fb      	adds	r3, r7, r3
    1600:	1c18      	adds	r0, r3, #0
    1602:	4b78      	ldr	r3, [pc, #480]	; (17e4 <system_clock_init+0x200>)
    1604:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1606:	2374      	movs	r3, #116	; 0x74
    1608:	18fb      	adds	r3, r7, r3
    160a:	2200      	movs	r2, #0
    160c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    160e:	2374      	movs	r3, #116	; 0x74
    1610:	18fb      	adds	r3, r7, r3
    1612:	2200      	movs	r2, #0
    1614:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
     in DFLL.COARSE helps to output a frequency close to 48 MHz.
	   Not applicable for silicon rev C and previous*/

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    1616:	4b74      	ldr	r3, [pc, #464]	; (17e8 <system_clock_init+0x204>)
    1618:	4798      	blx	r3
    161a:	1c03      	adds	r3, r0, #0
    161c:	2288      	movs	r2, #136	; 0x88
    161e:	18ba      	adds	r2, r7, r2
    1620:	6013      	str	r3, [r2, #0]

	rev &= DSU_DID_REVISION_Msk;
    1622:	2388      	movs	r3, #136	; 0x88
    1624:	18fb      	adds	r3, r7, r3
    1626:	681a      	ldr	r2, [r3, #0]
    1628:	23f0      	movs	r3, #240	; 0xf0
    162a:	011b      	lsls	r3, r3, #4
    162c:	4013      	ands	r3, r2
    162e:	2288      	movs	r2, #136	; 0x88
    1630:	18ba      	adds	r2, r7, r2
    1632:	6013      	str	r3, [r2, #0]
	rev = rev >> DSU_DID_REVISION_Pos;
    1634:	2388      	movs	r3, #136	; 0x88
    1636:	18fb      	adds	r3, r7, r3
    1638:	681b      	ldr	r3, [r3, #0]
    163a:	0a1b      	lsrs	r3, r3, #8
    163c:	2288      	movs	r2, #136	; 0x88
    163e:	18ba      	adds	r2, r7, r2
    1640:	6013      	str	r3, [r2, #0]

	if (rev >= _SYSTEM_MCU_REVISION_D) {
    1642:	2388      	movs	r3, #136	; 0x88
    1644:	18fb      	adds	r3, r7, r3
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	2b02      	cmp	r3, #2
    164a:	d915      	bls.n	1678 <system_clock_init+0x94>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    164c:	4b67      	ldr	r3, [pc, #412]	; (17ec <system_clock_init+0x208>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	0e9b      	lsrs	r3, r3, #26
    1652:	228c      	movs	r2, #140	; 0x8c
    1654:	18ba      	adds	r2, r7, r2
    1656:	6013      	str	r3, [r2, #0]
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
    1658:	238c      	movs	r3, #140	; 0x8c
    165a:	18fb      	adds	r3, r7, r3
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	2b3f      	cmp	r3, #63	; 0x3f
    1660:	d103      	bne.n	166a <system_clock_init+0x86>
			coarse = 0x1f;
    1662:	231f      	movs	r3, #31
    1664:	228c      	movs	r2, #140	; 0x8c
    1666:	18ba      	adds	r2, r7, r2
    1668:	6013      	str	r3, [r2, #0]
		}
		dfll_conf.coarse_value = coarse;
    166a:	238c      	movs	r3, #140	; 0x8c
    166c:	18fb      	adds	r3, r7, r3
    166e:	681b      	ldr	r3, [r3, #0]
    1670:	b2da      	uxtb	r2, r3
    1672:	2374      	movs	r3, #116	; 0x74
    1674:	18fb      	adds	r3, r7, r3
    1676:	721a      	strb	r2, [r3, #8]
	}

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    1678:	2374      	movs	r3, #116	; 0x74
    167a:	18fb      	adds	r3, r7, r3
    167c:	223f      	movs	r2, #63	; 0x3f
    167e:	815a      	strh	r2, [r3, #10]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1680:	2374      	movs	r3, #116	; 0x74
    1682:	18fb      	adds	r3, r7, r3
    1684:	2200      	movs	r2, #0
    1686:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1688:	2374      	movs	r3, #116	; 0x74
    168a:	18fb      	adds	r3, r7, r3
    168c:	2200      	movs	r2, #0
    168e:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1690:	2374      	movs	r3, #116	; 0x74
    1692:	18fb      	adds	r3, r7, r3
    1694:	2200      	movs	r2, #0
    1696:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1698:	2374      	movs	r3, #116	; 0x74
    169a:	18fb      	adds	r3, r7, r3
    169c:	2200      	movs	r2, #0
    169e:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    16a0:	2374      	movs	r3, #116	; 0x74
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	2207      	movs	r2, #7
    16a6:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    16a8:	2374      	movs	r3, #116	; 0x74
    16aa:	18fb      	adds	r3, r7, r3
    16ac:	223f      	movs	r2, #63	; 0x3f
    16ae:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
    16b0:	2374      	movs	r3, #116	; 0x74
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	1c18      	adds	r0, r3, #0
    16b6:	4b4e      	ldr	r3, [pc, #312]	; (17f0 <system_clock_init+0x20c>)
    16b8:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    16ba:	2370      	movs	r3, #112	; 0x70
    16bc:	18fb      	adds	r3, r7, r3
    16be:	1c18      	adds	r0, r3, #0
    16c0:	4b4c      	ldr	r3, [pc, #304]	; (17f4 <system_clock_init+0x210>)
    16c2:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16c4:	2370      	movs	r3, #112	; 0x70
    16c6:	18fb      	adds	r3, r7, r3
    16c8:	2200      	movs	r2, #0
    16ca:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    16cc:	2370      	movs	r3, #112	; 0x70
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	2201      	movs	r2, #1
    16d2:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    16d4:	2370      	movs	r3, #112	; 0x70
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	2200      	movs	r2, #0
    16da:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    16dc:	2370      	movs	r3, #112	; 0x70
    16de:	18fb      	adds	r3, r7, r3
    16e0:	1c18      	adds	r0, r3, #0
    16e2:	4b45      	ldr	r3, [pc, #276]	; (17f8 <system_clock_init+0x214>)
    16e4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    16e6:	2006      	movs	r0, #6
    16e8:	4b44      	ldr	r3, [pc, #272]	; (17fc <system_clock_init+0x218>)
    16ea:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    16ec:	4b44      	ldr	r3, [pc, #272]	; (1800 <system_clock_init+0x21c>)
    16ee:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    16f0:	2358      	movs	r3, #88	; 0x58
    16f2:	18fb      	adds	r3, r7, r3
    16f4:	1c18      	adds	r0, r3, #0
    16f6:	4b43      	ldr	r3, [pc, #268]	; (1804 <system_clock_init+0x220>)
    16f8:	4798      	blx	r3
    16fa:	2358      	movs	r3, #88	; 0x58
    16fc:	18fb      	adds	r3, r7, r3
    16fe:	2206      	movs	r2, #6
    1700:	701a      	strb	r2, [r3, #0]
    1702:	2358      	movs	r3, #88	; 0x58
    1704:	18fb      	adds	r3, r7, r3
    1706:	2201      	movs	r2, #1
    1708:	605a      	str	r2, [r3, #4]
    170a:	2358      	movs	r3, #88	; 0x58
    170c:	18fb      	adds	r3, r7, r3
    170e:	2200      	movs	r2, #0
    1710:	721a      	strb	r2, [r3, #8]
    1712:	2358      	movs	r3, #88	; 0x58
    1714:	18fb      	adds	r3, r7, r3
    1716:	2200      	movs	r2, #0
    1718:	725a      	strb	r2, [r3, #9]
    171a:	2358      	movs	r3, #88	; 0x58
    171c:	18fb      	adds	r3, r7, r3
    171e:	2001      	movs	r0, #1
    1720:	1c19      	adds	r1, r3, #0
    1722:	4b39      	ldr	r3, [pc, #228]	; (1808 <system_clock_init+0x224>)
    1724:	4798      	blx	r3
    1726:	2001      	movs	r0, #1
    1728:	4b38      	ldr	r3, [pc, #224]	; (180c <system_clock_init+0x228>)
    172a:	4798      	blx	r3
    172c:	2334      	movs	r3, #52	; 0x34
    172e:	18fb      	adds	r3, r7, r3
    1730:	1c18      	adds	r0, r3, #0
    1732:	4b34      	ldr	r3, [pc, #208]	; (1804 <system_clock_init+0x220>)
    1734:	4798      	blx	r3
    1736:	2334      	movs	r3, #52	; 0x34
    1738:	18fb      	adds	r3, r7, r3
    173a:	2206      	movs	r2, #6
    173c:	701a      	strb	r2, [r3, #0]
    173e:	2334      	movs	r3, #52	; 0x34
    1740:	18fb      	adds	r3, r7, r3
    1742:	22ff      	movs	r2, #255	; 0xff
    1744:	605a      	str	r2, [r3, #4]
    1746:	2334      	movs	r3, #52	; 0x34
    1748:	18fb      	adds	r3, r7, r3
    174a:	2200      	movs	r2, #0
    174c:	721a      	strb	r2, [r3, #8]
    174e:	2334      	movs	r3, #52	; 0x34
    1750:	18fb      	adds	r3, r7, r3
    1752:	2200      	movs	r2, #0
    1754:	725a      	strb	r2, [r3, #9]
    1756:	2334      	movs	r3, #52	; 0x34
    1758:	18fb      	adds	r3, r7, r3
    175a:	2004      	movs	r0, #4
    175c:	1c19      	adds	r1, r3, #0
    175e:	4b2a      	ldr	r3, [pc, #168]	; (1808 <system_clock_init+0x224>)
    1760:	4798      	blx	r3
    1762:	2004      	movs	r0, #4
    1764:	4b29      	ldr	r3, [pc, #164]	; (180c <system_clock_init+0x228>)
    1766:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1768:	2007      	movs	r0, #7
    176a:	4b24      	ldr	r3, [pc, #144]	; (17fc <system_clock_init+0x218>)
    176c:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	2007      	movs	r0, #7
    1772:	4b27      	ldr	r3, [pc, #156]	; (1810 <system_clock_init+0x22c>)
    1774:	4798      	blx	r3
    1776:	1c03      	adds	r3, r0, #0
    1778:	1c1a      	adds	r2, r3, #0
    177a:	2301      	movs	r3, #1
    177c:	4053      	eors	r3, r2
    177e:	b2db      	uxtb	r3, r3
    1780:	2b00      	cmp	r3, #0
    1782:	d1f5      	bne.n	1770 <system_clock_init+0x18c>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1784:	2000      	movs	r0, #0
    1786:	4b23      	ldr	r3, [pc, #140]	; (1814 <system_clock_init+0x230>)
    1788:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    178a:	2000      	movs	r0, #0
    178c:	2100      	movs	r1, #0
    178e:	4b22      	ldr	r3, [pc, #136]	; (1818 <system_clock_init+0x234>)
    1790:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1792:	2001      	movs	r0, #1
    1794:	2100      	movs	r1, #0
    1796:	4b20      	ldr	r3, [pc, #128]	; (1818 <system_clock_init+0x234>)
    1798:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    179a:	2002      	movs	r0, #2
    179c:	2100      	movs	r1, #0
    179e:	4b1e      	ldr	r3, [pc, #120]	; (1818 <system_clock_init+0x234>)
    17a0:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17a2:	1c3b      	adds	r3, r7, #0
    17a4:	1c18      	adds	r0, r3, #0
    17a6:	4b17      	ldr	r3, [pc, #92]	; (1804 <system_clock_init+0x220>)
    17a8:	4798      	blx	r3
    17aa:	1c3b      	adds	r3, r7, #0
    17ac:	2206      	movs	r2, #6
    17ae:	701a      	strb	r2, [r3, #0]
    17b0:	1c3b      	adds	r3, r7, #0
    17b2:	2201      	movs	r2, #1
    17b4:	605a      	str	r2, [r3, #4]
    17b6:	1c3b      	adds	r3, r7, #0
    17b8:	2200      	movs	r2, #0
    17ba:	721a      	strb	r2, [r3, #8]
    17bc:	1c3b      	adds	r3, r7, #0
    17be:	2200      	movs	r2, #0
    17c0:	725a      	strb	r2, [r3, #9]
    17c2:	1c3b      	adds	r3, r7, #0
    17c4:	2000      	movs	r0, #0
    17c6:	1c19      	adds	r1, r3, #0
    17c8:	4b0f      	ldr	r3, [pc, #60]	; (1808 <system_clock_init+0x224>)
    17ca:	4798      	blx	r3
    17cc:	2000      	movs	r0, #0
    17ce:	4b0f      	ldr	r3, [pc, #60]	; (180c <system_clock_init+0x228>)
    17d0:	4798      	blx	r3
#endif
}
    17d2:	46bd      	mov	sp, r7
    17d4:	b024      	add	sp, #144	; 0x90
    17d6:	bd80      	pop	{r7, pc}
    17d8:	40000800 	.word	0x40000800
    17dc:	00001295 	.word	0x00001295
    17e0:	000015ad 	.word	0x000015ad
    17e4:	000011d1 	.word	0x000011d1
    17e8:	000012c9 	.word	0x000012c9
    17ec:	00806024 	.word	0x00806024
    17f0:	000013b1 	.word	0x000013b1
    17f4:	000011b1 	.word	0x000011b1
    17f8:	00001339 	.word	0x00001339
    17fc:	000014ad 	.word	0x000014ad
    1800:	000018bd 	.word	0x000018bd
    1804:	00001185 	.word	0x00001185
    1808:	000018ed 	.word	0x000018ed
    180c:	00001a0d 	.word	0x00001a0d
    1810:	00001541 	.word	0x00001541
    1814:	00001221 	.word	0x00001221
    1818:	00001241 	.word	0x00001241

0000181c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    181c:	b580      	push	{r7, lr}
    181e:	b082      	sub	sp, #8
    1820:	af00      	add	r7, sp, #0
    1822:	1c02      	adds	r2, r0, #0
    1824:	6039      	str	r1, [r7, #0]
    1826:	1dfb      	adds	r3, r7, #7
    1828:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    182a:	1dfb      	adds	r3, r7, #7
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	2b01      	cmp	r3, #1
    1830:	d00a      	beq.n	1848 <system_apb_clock_set_mask+0x2c>
    1832:	2b02      	cmp	r3, #2
    1834:	d00f      	beq.n	1856 <system_apb_clock_set_mask+0x3a>
    1836:	2b00      	cmp	r3, #0
    1838:	d114      	bne.n	1864 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    183a:	4b0e      	ldr	r3, [pc, #56]	; (1874 <system_apb_clock_set_mask+0x58>)
    183c:	4a0d      	ldr	r2, [pc, #52]	; (1874 <system_apb_clock_set_mask+0x58>)
    183e:	6991      	ldr	r1, [r2, #24]
    1840:	683a      	ldr	r2, [r7, #0]
    1842:	430a      	orrs	r2, r1
    1844:	619a      	str	r2, [r3, #24]
			break;
    1846:	e00f      	b.n	1868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1848:	4b0a      	ldr	r3, [pc, #40]	; (1874 <system_apb_clock_set_mask+0x58>)
    184a:	4a0a      	ldr	r2, [pc, #40]	; (1874 <system_apb_clock_set_mask+0x58>)
    184c:	69d1      	ldr	r1, [r2, #28]
    184e:	683a      	ldr	r2, [r7, #0]
    1850:	430a      	orrs	r2, r1
    1852:	61da      	str	r2, [r3, #28]
			break;
    1854:	e008      	b.n	1868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1856:	4b07      	ldr	r3, [pc, #28]	; (1874 <system_apb_clock_set_mask+0x58>)
    1858:	4a06      	ldr	r2, [pc, #24]	; (1874 <system_apb_clock_set_mask+0x58>)
    185a:	6a11      	ldr	r1, [r2, #32]
    185c:	683a      	ldr	r2, [r7, #0]
    185e:	430a      	orrs	r2, r1
    1860:	621a      	str	r2, [r3, #32]
			break;
    1862:	e001      	b.n	1868 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1864:	2317      	movs	r3, #23
    1866:	e000      	b.n	186a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1868:	2300      	movs	r3, #0
}
    186a:	1c18      	adds	r0, r3, #0
    186c:	46bd      	mov	sp, r7
    186e:	b002      	add	sp, #8
    1870:	bd80      	pop	{r7, pc}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	40000400 	.word	0x40000400

00001878 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    187c:	4b01      	ldr	r3, [pc, #4]	; (1884 <system_interrupt_enter_critical_section+0xc>)
    187e:	4798      	blx	r3
}
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}
    1884:	00001075 	.word	0x00001075

00001888 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1888:	b580      	push	{r7, lr}
    188a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    188c:	4b01      	ldr	r3, [pc, #4]	; (1894 <system_interrupt_leave_critical_section+0xc>)
    188e:	4798      	blx	r3
}
    1890:	46bd      	mov	sp, r7
    1892:	bd80      	pop	{r7, pc}
    1894:	000010c5 	.word	0x000010c5

00001898 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1898:	b580      	push	{r7, lr}
    189a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    189c:	4b06      	ldr	r3, [pc, #24]	; (18b8 <system_gclk_is_syncing+0x20>)
    189e:	785b      	ldrb	r3, [r3, #1]
    18a0:	b2db      	uxtb	r3, r3
    18a2:	b2db      	uxtb	r3, r3
    18a4:	b25b      	sxtb	r3, r3
    18a6:	2b00      	cmp	r3, #0
    18a8:	da01      	bge.n	18ae <system_gclk_is_syncing+0x16>
		return true;
    18aa:	2301      	movs	r3, #1
    18ac:	e000      	b.n	18b0 <system_gclk_is_syncing+0x18>
	}

	return false;
    18ae:	2300      	movs	r3, #0
}
    18b0:	1c18      	adds	r0, r3, #0
    18b2:	46bd      	mov	sp, r7
    18b4:	bd80      	pop	{r7, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	40000c00 	.word	0x40000c00

000018bc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    18bc:	b580      	push	{r7, lr}
    18be:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    18c0:	2000      	movs	r0, #0
    18c2:	2108      	movs	r1, #8
    18c4:	4b07      	ldr	r3, [pc, #28]	; (18e4 <system_gclk_init+0x28>)
    18c6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18c8:	4b07      	ldr	r3, [pc, #28]	; (18e8 <system_gclk_init+0x2c>)
    18ca:	2201      	movs	r2, #1
    18cc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <system_gclk_init+0x2c>)
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	b2db      	uxtb	r3, r3
    18d6:	1c1a      	adds	r2, r3, #0
    18d8:	2301      	movs	r3, #1
    18da:	4013      	ands	r3, r2
    18dc:	d1f8      	bne.n	18d0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    18de:	46bd      	mov	sp, r7
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	0000181d 	.word	0x0000181d
    18e8:	40000c00 	.word	0x40000c00

000018ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	b086      	sub	sp, #24
    18f0:	af00      	add	r7, sp, #0
    18f2:	1c02      	adds	r2, r0, #0
    18f4:	6039      	str	r1, [r7, #0]
    18f6:	1dfb      	adds	r3, r7, #7
    18f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18fa:	1dfb      	adds	r3, r7, #7
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1900:	1dfb      	adds	r3, r7, #7
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1906:	683b      	ldr	r3, [r7, #0]
    1908:	781b      	ldrb	r3, [r3, #0]
    190a:	021b      	lsls	r3, r3, #8
    190c:	1c1a      	adds	r2, r3, #0
    190e:	697b      	ldr	r3, [r7, #20]
    1910:	4313      	orrs	r3, r2
    1912:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	785b      	ldrb	r3, [r3, #1]
    1918:	2b00      	cmp	r3, #0
    191a:	d004      	beq.n	1926 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    191c:	697b      	ldr	r3, [r7, #20]
    191e:	2280      	movs	r2, #128	; 0x80
    1920:	02d2      	lsls	r2, r2, #11
    1922:	4313      	orrs	r3, r2
    1924:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1926:	683b      	ldr	r3, [r7, #0]
    1928:	7a5b      	ldrb	r3, [r3, #9]
    192a:	2b00      	cmp	r3, #0
    192c:	d004      	beq.n	1938 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    192e:	697b      	ldr	r3, [r7, #20]
    1930:	2280      	movs	r2, #128	; 0x80
    1932:	0312      	lsls	r2, r2, #12
    1934:	4313      	orrs	r3, r2
    1936:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1938:	683b      	ldr	r3, [r7, #0]
    193a:	685b      	ldr	r3, [r3, #4]
    193c:	2b01      	cmp	r3, #1
    193e:	d92c      	bls.n	199a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1940:	683b      	ldr	r3, [r7, #0]
    1942:	685a      	ldr	r2, [r3, #4]
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	685b      	ldr	r3, [r3, #4]
    1948:	3b01      	subs	r3, #1
    194a:	4013      	ands	r3, r2
    194c:	d11a      	bne.n	1984 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    194e:	2300      	movs	r3, #0
    1950:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1952:	2302      	movs	r3, #2
    1954:	60bb      	str	r3, [r7, #8]
    1956:	e005      	b.n	1964 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1958:	68fb      	ldr	r3, [r7, #12]
    195a:	3301      	adds	r3, #1
    195c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    195e:	68bb      	ldr	r3, [r7, #8]
    1960:	005b      	lsls	r3, r3, #1
    1962:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1964:	683b      	ldr	r3, [r7, #0]
    1966:	685a      	ldr	r2, [r3, #4]
    1968:	68bb      	ldr	r3, [r7, #8]
    196a:	429a      	cmp	r2, r3
    196c:	d8f4      	bhi.n	1958 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	021b      	lsls	r3, r3, #8
    1972:	693a      	ldr	r2, [r7, #16]
    1974:	4313      	orrs	r3, r2
    1976:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1978:	697b      	ldr	r3, [r7, #20]
    197a:	2280      	movs	r2, #128	; 0x80
    197c:	0352      	lsls	r2, r2, #13
    197e:	4313      	orrs	r3, r2
    1980:	617b      	str	r3, [r7, #20]
    1982:	e00a      	b.n	199a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1984:	683b      	ldr	r3, [r7, #0]
    1986:	685b      	ldr	r3, [r3, #4]
    1988:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    198a:	693a      	ldr	r2, [r7, #16]
    198c:	4313      	orrs	r3, r2
    198e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1990:	697b      	ldr	r3, [r7, #20]
    1992:	2280      	movs	r2, #128	; 0x80
    1994:	0292      	lsls	r2, r2, #10
    1996:	4313      	orrs	r3, r2
    1998:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    199a:	683b      	ldr	r3, [r7, #0]
    199c:	7a1b      	ldrb	r3, [r3, #8]
    199e:	2b00      	cmp	r3, #0
    19a0:	d004      	beq.n	19ac <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    19a2:	697b      	ldr	r3, [r7, #20]
    19a4:	2280      	movs	r2, #128	; 0x80
    19a6:	0392      	lsls	r2, r2, #14
    19a8:	4313      	orrs	r3, r2
    19aa:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    19ac:	46c0      	nop			; (mov r8, r8)
    19ae:	4b12      	ldr	r3, [pc, #72]	; (19f8 <system_gclk_gen_set_config+0x10c>)
    19b0:	4798      	blx	r3
    19b2:	1e03      	subs	r3, r0, #0
    19b4:	d1fb      	bne.n	19ae <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    19b6:	4b11      	ldr	r3, [pc, #68]	; (19fc <system_gclk_gen_set_config+0x110>)
    19b8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19ba:	4a11      	ldr	r2, [pc, #68]	; (1a00 <system_gclk_gen_set_config+0x114>)
    19bc:	1dfb      	adds	r3, r7, #7
    19be:	781b      	ldrb	r3, [r3, #0]
    19c0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	4b0c      	ldr	r3, [pc, #48]	; (19f8 <system_gclk_gen_set_config+0x10c>)
    19c6:	4798      	blx	r3
    19c8:	1e03      	subs	r3, r0, #0
    19ca:	d1fb      	bne.n	19c4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    19cc:	4b0d      	ldr	r3, [pc, #52]	; (1a04 <system_gclk_gen_set_config+0x118>)
    19ce:	693a      	ldr	r2, [r7, #16]
    19d0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <system_gclk_gen_set_config+0x10c>)
    19d6:	4798      	blx	r3
    19d8:	1e03      	subs	r3, r0, #0
    19da:	d1fb      	bne.n	19d4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    19dc:	4b09      	ldr	r3, [pc, #36]	; (1a04 <system_gclk_gen_set_config+0x118>)
    19de:	4a09      	ldr	r2, [pc, #36]	; (1a04 <system_gclk_gen_set_config+0x118>)
    19e0:	6851      	ldr	r1, [r2, #4]
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	0252      	lsls	r2, r2, #9
    19e6:	4011      	ands	r1, r2
    19e8:	697a      	ldr	r2, [r7, #20]
    19ea:	430a      	orrs	r2, r1
    19ec:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    19ee:	4b06      	ldr	r3, [pc, #24]	; (1a08 <system_gclk_gen_set_config+0x11c>)
    19f0:	4798      	blx	r3
}
    19f2:	46bd      	mov	sp, r7
    19f4:	b006      	add	sp, #24
    19f6:	bd80      	pop	{r7, pc}
    19f8:	00001899 	.word	0x00001899
    19fc:	00001879 	.word	0x00001879
    1a00:	40000c08 	.word	0x40000c08
    1a04:	40000c00 	.word	0x40000c00
    1a08:	00001889 	.word	0x00001889

00001a0c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	af00      	add	r7, sp, #0
    1a12:	1c02      	adds	r2, r0, #0
    1a14:	1dfb      	adds	r3, r7, #7
    1a16:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	4b0d      	ldr	r3, [pc, #52]	; (1a50 <system_gclk_gen_enable+0x44>)
    1a1c:	4798      	blx	r3
    1a1e:	1e03      	subs	r3, r0, #0
    1a20:	d1fb      	bne.n	1a1a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1a22:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <system_gclk_gen_enable+0x48>)
    1a24:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a26:	4a0c      	ldr	r2, [pc, #48]	; (1a58 <system_gclk_gen_enable+0x4c>)
    1a28:	1dfb      	adds	r3, r7, #7
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <system_gclk_gen_enable+0x44>)
    1a32:	4798      	blx	r3
    1a34:	1e03      	subs	r3, r0, #0
    1a36:	d1fb      	bne.n	1a30 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <system_gclk_gen_enable+0x50>)
    1a3a:	4a08      	ldr	r2, [pc, #32]	; (1a5c <system_gclk_gen_enable+0x50>)
    1a3c:	6852      	ldr	r2, [r2, #4]
    1a3e:	2180      	movs	r1, #128	; 0x80
    1a40:	0249      	lsls	r1, r1, #9
    1a42:	430a      	orrs	r2, r1
    1a44:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <system_gclk_gen_enable+0x54>)
    1a48:	4798      	blx	r3
}
    1a4a:	46bd      	mov	sp, r7
    1a4c:	b002      	add	sp, #8
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	00001899 	.word	0x00001899
    1a54:	00001879 	.word	0x00001879
    1a58:	40000c04 	.word	0x40000c04
    1a5c:	40000c00 	.word	0x40000c00
    1a60:	00001889 	.word	0x00001889

00001a64 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	af00      	add	r7, sp, #0
    1a6a:	1c02      	adds	r2, r0, #0
    1a6c:	6039      	str	r1, [r7, #0]
    1a6e:	1dfb      	adds	r3, r7, #7
    1a70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1a72:	1dfb      	adds	r3, r7, #7
    1a74:	781b      	ldrb	r3, [r3, #0]
    1a76:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a78:	683b      	ldr	r3, [r7, #0]
    1a7a:	781b      	ldrb	r3, [r3, #0]
    1a7c:	021b      	lsls	r3, r3, #8
    1a7e:	1c1a      	adds	r2, r3, #0
    1a80:	68fb      	ldr	r3, [r7, #12]
    1a82:	4313      	orrs	r3, r2
    1a84:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1a86:	1dfb      	adds	r3, r7, #7
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	1c18      	adds	r0, r3, #0
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <system_gclk_chan_set_config+0x3c>)
    1a8e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a90:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <system_gclk_chan_set_config+0x40>)
    1a92:	68fa      	ldr	r2, [r7, #12]
    1a94:	b292      	uxth	r2, r2
    1a96:	805a      	strh	r2, [r3, #2]
}
    1a98:	46bd      	mov	sp, r7
    1a9a:	b004      	add	sp, #16
    1a9c:	bd80      	pop	{r7, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	00001aed 	.word	0x00001aed
    1aa4:	40000c00 	.word	0x40000c00

00001aa8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b082      	sub	sp, #8
    1aac:	af00      	add	r7, sp, #0
    1aae:	1c02      	adds	r2, r0, #0
    1ab0:	1dfb      	adds	r3, r7, #7
    1ab2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1ab4:	4b09      	ldr	r3, [pc, #36]	; (1adc <system_gclk_chan_enable+0x34>)
    1ab6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ab8:	4a09      	ldr	r2, [pc, #36]	; (1ae0 <system_gclk_chan_enable+0x38>)
    1aba:	1dfb      	adds	r3, r7, #7
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1ac0:	4908      	ldr	r1, [pc, #32]	; (1ae4 <system_gclk_chan_enable+0x3c>)
    1ac2:	4b08      	ldr	r3, [pc, #32]	; (1ae4 <system_gclk_chan_enable+0x3c>)
    1ac4:	885b      	ldrh	r3, [r3, #2]
    1ac6:	b29b      	uxth	r3, r3
    1ac8:	2280      	movs	r2, #128	; 0x80
    1aca:	01d2      	lsls	r2, r2, #7
    1acc:	4313      	orrs	r3, r2
    1ace:	b29b      	uxth	r3, r3
    1ad0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1ad2:	4b05      	ldr	r3, [pc, #20]	; (1ae8 <system_gclk_chan_enable+0x40>)
    1ad4:	4798      	blx	r3
}
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b002      	add	sp, #8
    1ada:	bd80      	pop	{r7, pc}
    1adc:	00001879 	.word	0x00001879
    1ae0:	40000c02 	.word	0x40000c02
    1ae4:	40000c00 	.word	0x40000c00
    1ae8:	00001889 	.word	0x00001889

00001aec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b084      	sub	sp, #16
    1af0:	af00      	add	r7, sp, #0
    1af2:	1c02      	adds	r2, r0, #0
    1af4:	1dfb      	adds	r3, r7, #7
    1af6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1af8:	4b1d      	ldr	r3, [pc, #116]	; (1b70 <system_gclk_chan_disable+0x84>)
    1afa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1afc:	4a1d      	ldr	r2, [pc, #116]	; (1b74 <system_gclk_chan_disable+0x88>)
    1afe:	1dfb      	adds	r3, r7, #7
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1b04:	4b1c      	ldr	r3, [pc, #112]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b06:	885b      	ldrh	r3, [r3, #2]
    1b08:	b29b      	uxth	r3, r3
    1b0a:	0a1b      	lsrs	r3, r3, #8
    1b0c:	1c1a      	adds	r2, r3, #0
    1b0e:	230f      	movs	r3, #15
    1b10:	4013      	ands	r3, r2
    1b12:	b2db      	uxtb	r3, r3
    1b14:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1b16:	4b18      	ldr	r3, [pc, #96]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b18:	885a      	ldrh	r2, [r3, #2]
    1b1a:	4918      	ldr	r1, [pc, #96]	; (1b7c <system_gclk_chan_disable+0x90>)
    1b1c:	400a      	ands	r2, r1
    1b1e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1b20:	4a15      	ldr	r2, [pc, #84]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b22:	4b15      	ldr	r3, [pc, #84]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b24:	885b      	ldrh	r3, [r3, #2]
    1b26:	b29b      	uxth	r3, r3
    1b28:	4915      	ldr	r1, [pc, #84]	; (1b80 <system_gclk_chan_disable+0x94>)
    1b2a:	400b      	ands	r3, r1
    1b2c:	b29b      	uxth	r3, r3
    1b2e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1b30:	46c0      	nop			; (mov r8, r8)
    1b32:	4b11      	ldr	r3, [pc, #68]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b34:	885b      	ldrh	r3, [r3, #2]
    1b36:	b29b      	uxth	r3, r3
    1b38:	1c1a      	adds	r2, r3, #0
    1b3a:	2380      	movs	r3, #128	; 0x80
    1b3c:	01db      	lsls	r3, r3, #7
    1b3e:	4013      	ands	r3, r2
    1b40:	d1f7      	bne.n	1b32 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1b42:	4b0d      	ldr	r3, [pc, #52]	; (1b78 <system_gclk_chan_disable+0x8c>)
    1b44:	68fa      	ldr	r2, [r7, #12]
    1b46:	b2d2      	uxtb	r2, r2
    1b48:	1c11      	adds	r1, r2, #0
    1b4a:	220f      	movs	r2, #15
    1b4c:	400a      	ands	r2, r1
    1b4e:	b2d2      	uxtb	r2, r2
    1b50:	1c11      	adds	r1, r2, #0
    1b52:	220f      	movs	r2, #15
    1b54:	400a      	ands	r2, r1
    1b56:	0210      	lsls	r0, r2, #8
    1b58:	885a      	ldrh	r2, [r3, #2]
    1b5a:	4908      	ldr	r1, [pc, #32]	; (1b7c <system_gclk_chan_disable+0x90>)
    1b5c:	400a      	ands	r2, r1
    1b5e:	1c11      	adds	r1, r2, #0
    1b60:	1c02      	adds	r2, r0, #0
    1b62:	430a      	orrs	r2, r1
    1b64:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1b66:	4b07      	ldr	r3, [pc, #28]	; (1b84 <system_gclk_chan_disable+0x98>)
    1b68:	4798      	blx	r3
}
    1b6a:	46bd      	mov	sp, r7
    1b6c:	b004      	add	sp, #16
    1b6e:	bd80      	pop	{r7, pc}
    1b70:	00001879 	.word	0x00001879
    1b74:	40000c02 	.word	0x40000c02
    1b78:	40000c00 	.word	0x40000c00
    1b7c:	fffff0ff 	.word	0xfffff0ff
    1b80:	ffffbfff 	.word	0xffffbfff
    1b84:	00001889 	.word	0x00001889

00001b88 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	b084      	sub	sp, #16
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	1c02      	adds	r2, r0, #0
    1b90:	1dfb      	adds	r3, r7, #7
    1b92:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1b94:	230f      	movs	r3, #15
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	1dfa      	adds	r2, r7, #7
    1b9a:	7812      	ldrb	r2, [r2, #0]
    1b9c:	09d2      	lsrs	r2, r2, #7
    1b9e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1ba0:	230e      	movs	r3, #14
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	1dfa      	adds	r2, r7, #7
    1ba6:	7812      	ldrb	r2, [r2, #0]
    1ba8:	0952      	lsrs	r2, r2, #5
    1baa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1bac:	4b0d      	ldr	r3, [pc, #52]	; (1be4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1bae:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1bb0:	230f      	movs	r3, #15
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d10f      	bne.n	1bda <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1bba:	230f      	movs	r3, #15
    1bbc:	18fb      	adds	r3, r7, r3
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	009b      	lsls	r3, r3, #2
    1bc2:	2210      	movs	r2, #16
    1bc4:	4694      	mov	ip, r2
    1bc6:	44bc      	add	ip, r7
    1bc8:	4463      	add	r3, ip
    1bca:	3b08      	subs	r3, #8
    1bcc:	681a      	ldr	r2, [r3, #0]
    1bce:	230e      	movs	r3, #14
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	01db      	lsls	r3, r3, #7
    1bd6:	18d3      	adds	r3, r2, r3
    1bd8:	e000      	b.n	1bdc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1bda:	2300      	movs	r3, #0
	}
}
    1bdc:	1c18      	adds	r0, r3, #0
    1bde:	46bd      	mov	sp, r7
    1be0:	b004      	add	sp, #16
    1be2:	bd80      	pop	{r7, pc}
    1be4:	41004400 	.word	0x41004400

00001be8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b088      	sub	sp, #32
    1bec:	af00      	add	r7, sp, #0
    1bee:	60f8      	str	r0, [r7, #12]
    1bf0:	60b9      	str	r1, [r7, #8]
    1bf2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1bf4:	2300      	movs	r3, #0
    1bf6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	78db      	ldrb	r3, [r3, #3]
    1bfc:	2201      	movs	r2, #1
    1bfe:	4053      	eors	r3, r2
    1c00:	b2db      	uxtb	r3, r3
    1c02:	2b00      	cmp	r3, #0
    1c04:	d035      	beq.n	1c72 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	2b80      	cmp	r3, #128	; 0x80
    1c0c:	d00b      	beq.n	1c26 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1c0e:	69fb      	ldr	r3, [r7, #28]
    1c10:	2280      	movs	r2, #128	; 0x80
    1c12:	0252      	lsls	r2, r2, #9
    1c14:	4313      	orrs	r3, r2
    1c16:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	781b      	ldrb	r3, [r3, #0]
    1c1c:	061b      	lsls	r3, r3, #24
    1c1e:	1c1a      	adds	r2, r3, #0
    1c20:	69fb      	ldr	r3, [r7, #28]
    1c22:	4313      	orrs	r3, r2
    1c24:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	785b      	ldrb	r3, [r3, #1]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d003      	beq.n	1c36 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c32:	2b02      	cmp	r3, #2
    1c34:	d110      	bne.n	1c58 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c36:	69fb      	ldr	r3, [r7, #28]
    1c38:	2280      	movs	r2, #128	; 0x80
    1c3a:	0292      	lsls	r2, r2, #10
    1c3c:	4313      	orrs	r3, r2
    1c3e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	789b      	ldrb	r3, [r3, #2]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d004      	beq.n	1c52 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1c48:	69fb      	ldr	r3, [r7, #28]
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	02d2      	lsls	r2, r2, #11
    1c4e:	4313      	orrs	r3, r2
    1c50:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	68ba      	ldr	r2, [r7, #8]
    1c56:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	785b      	ldrb	r3, [r3, #1]
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d003      	beq.n	1c68 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c64:	2b02      	cmp	r3, #2
    1c66:	d107      	bne.n	1c78 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1c68:	69fb      	ldr	r3, [r7, #28]
    1c6a:	4a21      	ldr	r2, [pc, #132]	; (1cf0 <_system_pinmux_config+0x108>)
    1c6c:	4013      	ands	r3, r2
    1c6e:	61fb      	str	r3, [r7, #28]
    1c70:	e002      	b.n	1c78 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1c72:	68fb      	ldr	r3, [r7, #12]
    1c74:	68ba      	ldr	r2, [r7, #8]
    1c76:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c78:	68bb      	ldr	r3, [r7, #8]
    1c7a:	041b      	lsls	r3, r3, #16
    1c7c:	0c1b      	lsrs	r3, r3, #16
    1c7e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c80:	68bb      	ldr	r3, [r7, #8]
    1c82:	0c1b      	lsrs	r3, r3, #16
    1c84:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c86:	69ba      	ldr	r2, [r7, #24]
    1c88:	69fb      	ldr	r3, [r7, #28]
    1c8a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c8c:	22a0      	movs	r2, #160	; 0xa0
    1c8e:	05d2      	lsls	r2, r2, #23
    1c90:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c92:	68fb      	ldr	r3, [r7, #12]
    1c94:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c96:	697a      	ldr	r2, [r7, #20]
    1c98:	69fb      	ldr	r3, [r7, #28]
    1c9a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c9c:	22d0      	movs	r2, #208	; 0xd0
    1c9e:	0612      	lsls	r2, r2, #24
    1ca0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ca2:	68fb      	ldr	r3, [r7, #12]
    1ca4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	78db      	ldrb	r3, [r3, #3]
    1caa:	2201      	movs	r2, #1
    1cac:	4053      	eors	r3, r2
    1cae:	b2db      	uxtb	r3, r3
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d01a      	beq.n	1cea <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cb4:	69fa      	ldr	r2, [r7, #28]
    1cb6:	2380      	movs	r3, #128	; 0x80
    1cb8:	02db      	lsls	r3, r3, #11
    1cba:	4013      	ands	r3, r2
    1cbc:	d00a      	beq.n	1cd4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	789b      	ldrb	r3, [r3, #2]
    1cc2:	2b01      	cmp	r3, #1
    1cc4:	d103      	bne.n	1cce <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	68ba      	ldr	r2, [r7, #8]
    1cca:	619a      	str	r2, [r3, #24]
    1ccc:	e002      	b.n	1cd4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1cce:	68fb      	ldr	r3, [r7, #12]
    1cd0:	68ba      	ldr	r2, [r7, #8]
    1cd2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	785b      	ldrb	r3, [r3, #1]
    1cd8:	2b01      	cmp	r3, #1
    1cda:	d003      	beq.n	1ce4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ce0:	2b02      	cmp	r3, #2
    1ce2:	d102      	bne.n	1cea <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1ce4:	68fb      	ldr	r3, [r7, #12]
    1ce6:	68ba      	ldr	r2, [r7, #8]
    1ce8:	609a      	str	r2, [r3, #8]
		}
	}
}
    1cea:	46bd      	mov	sp, r7
    1cec:	b008      	add	sp, #32
    1cee:	bd80      	pop	{r7, pc}
    1cf0:	fffbffff 	.word	0xfffbffff

00001cf4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b084      	sub	sp, #16
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	1c02      	adds	r2, r0, #0
    1cfc:	6039      	str	r1, [r7, #0]
    1cfe:	1dfb      	adds	r3, r7, #7
    1d00:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d02:	1dfb      	adds	r3, r7, #7
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	1c18      	adds	r0, r3, #0
    1d08:	4b0b      	ldr	r3, [pc, #44]	; (1d38 <system_pinmux_pin_set_config+0x44>)
    1d0a:	4798      	blx	r3
    1d0c:	1c03      	adds	r3, r0, #0
    1d0e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d10:	1dfb      	adds	r3, r7, #7
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	221f      	movs	r2, #31
    1d16:	4013      	ands	r3, r2
    1d18:	2201      	movs	r2, #1
    1d1a:	409a      	lsls	r2, r3
    1d1c:	1c13      	adds	r3, r2, #0
    1d1e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1d20:	68f9      	ldr	r1, [r7, #12]
    1d22:	68ba      	ldr	r2, [r7, #8]
    1d24:	683b      	ldr	r3, [r7, #0]
    1d26:	1c08      	adds	r0, r1, #0
    1d28:	1c11      	adds	r1, r2, #0
    1d2a:	1c1a      	adds	r2, r3, #0
    1d2c:	4b03      	ldr	r3, [pc, #12]	; (1d3c <system_pinmux_pin_set_config+0x48>)
    1d2e:	4798      	blx	r3
}
    1d30:	46bd      	mov	sp, r7
    1d32:	b004      	add	sp, #16
    1d34:	bd80      	pop	{r7, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	00001b89 	.word	0x00001b89
    1d3c:	00001be9 	.word	0x00001be9

00001d40 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b084      	sub	sp, #16
    1d44:	af00      	add	r7, sp, #0
    1d46:	60f8      	str	r0, [r7, #12]
    1d48:	60b9      	str	r1, [r7, #8]
    1d4a:	1dfb      	adds	r3, r7, #7
    1d4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1d4e:	1dfb      	adds	r3, r7, #7
    1d50:	781a      	ldrb	r2, [r3, #0]
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	3202      	adds	r2, #2
    1d56:	0092      	lsls	r2, r2, #2
    1d58:	68b9      	ldr	r1, [r7, #8]
    1d5a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1d5c:	1dfb      	adds	r3, r7, #7
    1d5e:	781b      	ldrb	r3, [r3, #0]
    1d60:	2b02      	cmp	r3, #2
    1d62:	d107      	bne.n	1d74 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	7e1b      	ldrb	r3, [r3, #24]
    1d68:	2210      	movs	r2, #16
    1d6a:	4313      	orrs	r3, r2
    1d6c:	b2da      	uxtb	r2, r3
    1d6e:	68fb      	ldr	r3, [r7, #12]
    1d70:	761a      	strb	r2, [r3, #24]
    1d72:	e01a      	b.n	1daa <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1d74:	1dfb      	adds	r3, r7, #7
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	2b03      	cmp	r3, #3
    1d7a:	d107      	bne.n	1d8c <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1d7c:	68fb      	ldr	r3, [r7, #12]
    1d7e:	7e1b      	ldrb	r3, [r3, #24]
    1d80:	2220      	movs	r2, #32
    1d82:	4313      	orrs	r3, r2
    1d84:	b2da      	uxtb	r2, r3
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	761a      	strb	r2, [r3, #24]
    1d8a:	e00e      	b.n	1daa <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1d8c:	68fb      	ldr	r3, [r7, #12]
    1d8e:	7e1b      	ldrb	r3, [r3, #24]
    1d90:	b2d9      	uxtb	r1, r3
    1d92:	1dfb      	adds	r3, r7, #7
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	2201      	movs	r2, #1
    1d98:	409a      	lsls	r2, r3
    1d9a:	1c13      	adds	r3, r2, #0
    1d9c:	b2db      	uxtb	r3, r3
    1d9e:	1c0a      	adds	r2, r1, #0
    1da0:	4313      	orrs	r3, r2
    1da2:	b2db      	uxtb	r3, r3
    1da4:	b2da      	uxtb	r2, r3
    1da6:	68fb      	ldr	r3, [r7, #12]
    1da8:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    1daa:	2300      	movs	r3, #0
}
    1dac:	1c18      	adds	r0, r3, #0
    1dae:	46bd      	mov	sp, r7
    1db0:	b004      	add	sp, #16
    1db2:	bd80      	pop	{r7, pc}

00001db4 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1db4:	b580      	push	{r7, lr}
    1db6:	af00      	add	r7, sp, #0
    1db8:	2000      	movs	r0, #0
    1dba:	4b02      	ldr	r3, [pc, #8]	; (1dc4 <TC0_Handler+0x10>)
    1dbc:	4798      	blx	r3
    1dbe:	46bd      	mov	sp, r7
    1dc0:	bd80      	pop	{r7, pc}
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	00001e55 	.word	0x00001e55

00001dc8 <TC1_Handler>:
    1dc8:	b580      	push	{r7, lr}
    1dca:	af00      	add	r7, sp, #0
    1dcc:	2001      	movs	r0, #1
    1dce:	4b02      	ldr	r3, [pc, #8]	; (1dd8 <TC1_Handler+0x10>)
    1dd0:	4798      	blx	r3
    1dd2:	46bd      	mov	sp, r7
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00001e55 	.word	0x00001e55

00001ddc <TC2_Handler>:
    1ddc:	b580      	push	{r7, lr}
    1dde:	af00      	add	r7, sp, #0
    1de0:	2002      	movs	r0, #2
    1de2:	4b02      	ldr	r3, [pc, #8]	; (1dec <TC2_Handler+0x10>)
    1de4:	4798      	blx	r3
    1de6:	46bd      	mov	sp, r7
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001e55 	.word	0x00001e55

00001df0 <TC3_Handler>:
    1df0:	b580      	push	{r7, lr}
    1df2:	af00      	add	r7, sp, #0
    1df4:	2003      	movs	r0, #3
    1df6:	4b02      	ldr	r3, [pc, #8]	; (1e00 <TC3_Handler+0x10>)
    1df8:	4798      	blx	r3
    1dfa:	46bd      	mov	sp, r7
    1dfc:	bd80      	pop	{r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00001e55 	.word	0x00001e55

00001e04 <TC4_Handler>:
    1e04:	b580      	push	{r7, lr}
    1e06:	af00      	add	r7, sp, #0
    1e08:	2004      	movs	r0, #4
    1e0a:	4b02      	ldr	r3, [pc, #8]	; (1e14 <TC4_Handler+0x10>)
    1e0c:	4798      	blx	r3
    1e0e:	46bd      	mov	sp, r7
    1e10:	bd80      	pop	{r7, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	00001e55 	.word	0x00001e55

00001e18 <TC5_Handler>:
    1e18:	b580      	push	{r7, lr}
    1e1a:	af00      	add	r7, sp, #0
    1e1c:	2005      	movs	r0, #5
    1e1e:	4b02      	ldr	r3, [pc, #8]	; (1e28 <TC5_Handler+0x10>)
    1e20:	4798      	blx	r3
    1e22:	46bd      	mov	sp, r7
    1e24:	bd80      	pop	{r7, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	00001e55 	.word	0x00001e55

00001e2c <TC6_Handler>:
    1e2c:	b580      	push	{r7, lr}
    1e2e:	af00      	add	r7, sp, #0
    1e30:	2006      	movs	r0, #6
    1e32:	4b02      	ldr	r3, [pc, #8]	; (1e3c <TC6_Handler+0x10>)
    1e34:	4798      	blx	r3
    1e36:	46bd      	mov	sp, r7
    1e38:	bd80      	pop	{r7, pc}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	00001e55 	.word	0x00001e55

00001e40 <TC7_Handler>:
    1e40:	b580      	push	{r7, lr}
    1e42:	af00      	add	r7, sp, #0
    1e44:	2007      	movs	r0, #7
    1e46:	4b02      	ldr	r3, [pc, #8]	; (1e50 <TC7_Handler+0x10>)
    1e48:	4798      	blx	r3
    1e4a:	46bd      	mov	sp, r7
    1e4c:	bd80      	pop	{r7, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00001e55 	.word	0x00001e55

00001e54 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1e54:	b580      	push	{r7, lr}
    1e56:	b084      	sub	sp, #16
    1e58:	af00      	add	r7, sp, #0
    1e5a:	1c02      	adds	r2, r0, #0
    1e5c:	1dfb      	adds	r3, r7, #7
    1e5e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1e60:	1dfb      	adds	r3, r7, #7
    1e62:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1e64:	4b28      	ldr	r3, [pc, #160]	; (1f08 <_tc_interrupt_handler+0xb4>)
    1e66:	0092      	lsls	r2, r2, #2
    1e68:	58d3      	ldr	r3, [r2, r3]
    1e6a:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e6c:	68fb      	ldr	r3, [r7, #12]
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	7b9b      	ldrb	r3, [r3, #14]
    1e72:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1e74:	68fa      	ldr	r2, [r7, #12]
    1e76:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e78:	4013      	ands	r3, r2
    1e7a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1e7c:	68fb      	ldr	r3, [r7, #12]
    1e7e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1e80:	230b      	movs	r3, #11
    1e82:	18fb      	adds	r3, r7, r3
    1e84:	400a      	ands	r2, r1
    1e86:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1e88:	230b      	movs	r3, #11
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	2201      	movs	r2, #1
    1e90:	4013      	ands	r3, r2
    1e92:	d008      	beq.n	1ea6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1e94:	68fb      	ldr	r3, [r7, #12]
    1e96:	689b      	ldr	r3, [r3, #8]
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	1c10      	adds	r0, r2, #0
    1e9c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	2201      	movs	r2, #1
    1ea4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1ea6:	230b      	movs	r3, #11
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	781b      	ldrb	r3, [r3, #0]
    1eac:	2202      	movs	r2, #2
    1eae:	4013      	ands	r3, r2
    1eb0:	d008      	beq.n	1ec4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1eb2:	68fb      	ldr	r3, [r7, #12]
    1eb4:	68db      	ldr	r3, [r3, #12]
    1eb6:	68fa      	ldr	r2, [r7, #12]
    1eb8:	1c10      	adds	r0, r2, #0
    1eba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1ebc:	68fb      	ldr	r3, [r7, #12]
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	2202      	movs	r2, #2
    1ec2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ec4:	230b      	movs	r3, #11
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	2210      	movs	r2, #16
    1ecc:	4013      	ands	r3, r2
    1ece:	d008      	beq.n	1ee2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1ed0:	68fb      	ldr	r3, [r7, #12]
    1ed2:	691b      	ldr	r3, [r3, #16]
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	1c10      	adds	r0, r2, #0
    1ed8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1eda:	68fb      	ldr	r3, [r7, #12]
    1edc:	681b      	ldr	r3, [r3, #0]
    1ede:	2210      	movs	r2, #16
    1ee0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ee2:	230b      	movs	r3, #11
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	781b      	ldrb	r3, [r3, #0]
    1ee8:	2220      	movs	r2, #32
    1eea:	4013      	ands	r3, r2
    1eec:	d008      	beq.n	1f00 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1eee:	68fb      	ldr	r3, [r7, #12]
    1ef0:	695b      	ldr	r3, [r3, #20]
    1ef2:	68fa      	ldr	r2, [r7, #12]
    1ef4:	1c10      	adds	r0, r2, #0
    1ef6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1ef8:	68fb      	ldr	r3, [r7, #12]
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	2220      	movs	r2, #32
    1efe:	739a      	strb	r2, [r3, #14]
	}
}
    1f00:	46bd      	mov	sp, r7
    1f02:	b004      	add	sp, #16
    1f04:	bd80      	pop	{r7, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	20000940 	.word	0x20000940

00001f0c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	2200      	movs	r2, #0
    1f18:	701a      	strb	r2, [r3, #0]
}
    1f1a:	46bd      	mov	sp, r7
    1f1c:	b002      	add	sp, #8
    1f1e:	bd80      	pop	{r7, pc}

00001f20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1f20:	b580      	push	{r7, lr}
    1f22:	b082      	sub	sp, #8
    1f24:	af00      	add	r7, sp, #0
    1f26:	1c02      	adds	r2, r0, #0
    1f28:	6039      	str	r1, [r7, #0]
    1f2a:	1dfb      	adds	r3, r7, #7
    1f2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1f2e:	1dfb      	adds	r3, r7, #7
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	2b01      	cmp	r3, #1
    1f34:	d00a      	beq.n	1f4c <system_apb_clock_set_mask+0x2c>
    1f36:	2b02      	cmp	r3, #2
    1f38:	d00f      	beq.n	1f5a <system_apb_clock_set_mask+0x3a>
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d114      	bne.n	1f68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1f3e:	4b0e      	ldr	r3, [pc, #56]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f40:	4a0d      	ldr	r2, [pc, #52]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f42:	6991      	ldr	r1, [r2, #24]
    1f44:	683a      	ldr	r2, [r7, #0]
    1f46:	430a      	orrs	r2, r1
    1f48:	619a      	str	r2, [r3, #24]
			break;
    1f4a:	e00f      	b.n	1f6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1f4c:	4b0a      	ldr	r3, [pc, #40]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f4e:	4a0a      	ldr	r2, [pc, #40]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f50:	69d1      	ldr	r1, [r2, #28]
    1f52:	683a      	ldr	r2, [r7, #0]
    1f54:	430a      	orrs	r2, r1
    1f56:	61da      	str	r2, [r3, #28]
			break;
    1f58:	e008      	b.n	1f6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1f5a:	4b07      	ldr	r3, [pc, #28]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f5c:	4a06      	ldr	r2, [pc, #24]	; (1f78 <system_apb_clock_set_mask+0x58>)
    1f5e:	6a11      	ldr	r1, [r2, #32]
    1f60:	683a      	ldr	r2, [r7, #0]
    1f62:	430a      	orrs	r2, r1
    1f64:	621a      	str	r2, [r3, #32]
			break;
    1f66:	e001      	b.n	1f6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1f68:	2317      	movs	r3, #23
    1f6a:	e000      	b.n	1f6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1f6c:	2300      	movs	r3, #0
}
    1f6e:	1c18      	adds	r0, r3, #0
    1f70:	46bd      	mov	sp, r7
    1f72:	b002      	add	sp, #8
    1f74:	bd80      	pop	{r7, pc}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	40000400 	.word	0x40000400

00001f7c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	af00      	add	r7, sp, #0
    1f82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	2280      	movs	r2, #128	; 0x80
    1f88:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	2200      	movs	r2, #0
    1f8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	2201      	movs	r2, #1
    1f94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	2200      	movs	r2, #0
    1f9a:	70da      	strb	r2, [r3, #3]
}
    1f9c:	46bd      	mov	sp, r7
    1f9e:	b002      	add	sp, #8
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)

00001fa4 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	b084      	sub	sp, #16
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fb2:	68fb      	ldr	r3, [r7, #12]
    1fb4:	7bdb      	ldrb	r3, [r3, #15]
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	1c1a      	adds	r2, r3, #0
    1fba:	2380      	movs	r3, #128	; 0x80
    1fbc:	4013      	ands	r3, r2
    1fbe:	1e5a      	subs	r2, r3, #1
    1fc0:	4193      	sbcs	r3, r2
    1fc2:	b2db      	uxtb	r3, r3
#endif
}
    1fc4:	1c18      	adds	r0, r3, #0
    1fc6:	46bd      	mov	sp, r7
    1fc8:	b004      	add	sp, #16
    1fca:	bd80      	pop	{r7, pc}

00001fcc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1fcc:	b590      	push	{r4, r7, lr}
    1fce:	b08d      	sub	sp, #52	; 0x34
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1fd4:	230c      	movs	r3, #12
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	4a0f      	ldr	r2, [pc, #60]	; (2018 <STACK_SIZE+0x18>)
    1fda:	ca13      	ldmia	r2!, {r0, r1, r4}
    1fdc:	c313      	stmia	r3!, {r0, r1, r4}
    1fde:	ca13      	ldmia	r2!, {r0, r1, r4}
    1fe0:	c313      	stmia	r3!, {r0, r1, r4}
    1fe2:	ca03      	ldmia	r2!, {r0, r1}
    1fe4:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1fe6:	2300      	movs	r3, #0
    1fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    1fea:	e00d      	b.n	2008 <STACK_SIZE+0x8>
		if (hw == tc_modules[i]) {
    1fec:	230c      	movs	r3, #12
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ff2:	0092      	lsls	r2, r2, #2
    1ff4:	58d2      	ldr	r2, [r2, r3]
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	429a      	cmp	r2, r3
    1ffa:	d102      	bne.n	2002 <STACK_SIZE+0x2>
			return i;
    1ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ffe:	b2db      	uxtb	r3, r3
    2000:	e006      	b.n	2010 <STACK_SIZE+0x10>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2004:	3301      	adds	r3, #1
    2006:	62fb      	str	r3, [r7, #44]	; 0x2c
    2008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    200a:	2b07      	cmp	r3, #7
    200c:	d9ee      	bls.n	1fec <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    200e:	2300      	movs	r3, #0
}
    2010:	1c18      	adds	r0, r3, #0
    2012:	46bd      	mov	sp, r7
    2014:	b00d      	add	sp, #52	; 0x34
    2016:	bd90      	pop	{r4, r7, pc}
    2018:	000025b8 	.word	0x000025b8

0000201c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    201c:	b590      	push	{r4, r7, lr}
    201e:	b08f      	sub	sp, #60	; 0x3c
    2020:	af00      	add	r7, sp, #0
    2022:	60f8      	str	r0, [r7, #12]
    2024:	60b9      	str	r1, [r7, #8]
    2026:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    2028:	2336      	movs	r3, #54	; 0x36
    202a:	18fb      	adds	r3, r7, r3
    202c:	2200      	movs	r2, #0
    202e:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    2030:	2335      	movs	r3, #53	; 0x35
    2032:	18fb      	adds	r3, r7, r3
    2034:	2200      	movs	r2, #0
    2036:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    2038:	2334      	movs	r3, #52	; 0x34
    203a:	18fb      	adds	r3, r7, r3
    203c:	2200      	movs	r2, #0
    203e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2040:	2331      	movs	r3, #49	; 0x31
    2042:	18fc      	adds	r4, r7, r3
    2044:	68bb      	ldr	r3, [r7, #8]
    2046:	1c18      	adds	r0, r3, #0
    2048:	4bc0      	ldr	r3, [pc, #768]	; (234c <tc_init+0x330>)
    204a:	4798      	blx	r3
    204c:	1c03      	adds	r3, r0, #0
    204e:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2050:	2328      	movs	r3, #40	; 0x28
    2052:	18fa      	adds	r2, r7, r3
    2054:	4bbe      	ldr	r3, [pc, #760]	; (2350 <tc_init+0x334>)
    2056:	1c11      	adds	r1, r2, #0
    2058:	1c1a      	adds	r2, r3, #0
    205a:	2308      	movs	r3, #8
    205c:	1c08      	adds	r0, r1, #0
    205e:	1c11      	adds	r1, r2, #0
    2060:	1c1a      	adds	r2, r3, #0
    2062:	4bbc      	ldr	r3, [pc, #752]	; (2354 <tc_init+0x338>)
    2064:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2066:	2318      	movs	r3, #24
    2068:	18fa      	adds	r2, r7, r3
    206a:	4bbb      	ldr	r3, [pc, #748]	; (2358 <tc_init+0x33c>)
    206c:	1c11      	adds	r1, r2, #0
    206e:	1c1a      	adds	r2, r3, #0
    2070:	2310      	movs	r3, #16
    2072:	1c08      	adds	r0, r1, #0
    2074:	1c11      	adds	r1, r2, #0
    2076:	1c1a      	adds	r2, r3, #0
    2078:	4bb6      	ldr	r3, [pc, #728]	; (2354 <tc_init+0x338>)
    207a:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    207c:	2333      	movs	r3, #51	; 0x33
    207e:	18fb      	adds	r3, r7, r3
    2080:	2200      	movs	r2, #0
    2082:	701a      	strb	r2, [r3, #0]
    2084:	e00e      	b.n	20a4 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    2086:	2333      	movs	r3, #51	; 0x33
    2088:	18fb      	adds	r3, r7, r3
    208a:	781a      	ldrb	r2, [r3, #0]
    208c:	68fb      	ldr	r3, [r7, #12]
    208e:	3202      	adds	r2, #2
    2090:	0092      	lsls	r2, r2, #2
    2092:	2100      	movs	r1, #0
    2094:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2096:	2333      	movs	r3, #51	; 0x33
    2098:	18fb      	adds	r3, r7, r3
    209a:	781a      	ldrb	r2, [r3, #0]
    209c:	2333      	movs	r3, #51	; 0x33
    209e:	18fb      	adds	r3, r7, r3
    20a0:	3201      	adds	r2, #1
    20a2:	701a      	strb	r2, [r3, #0]
    20a4:	2333      	movs	r3, #51	; 0x33
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b03      	cmp	r3, #3
    20ac:	d9eb      	bls.n	2086 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    20ae:	68fb      	ldr	r3, [r7, #12]
    20b0:	2200      	movs	r2, #0
    20b2:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    20b4:	68fb      	ldr	r3, [r7, #12]
    20b6:	2200      	movs	r2, #0
    20b8:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    20ba:	2331      	movs	r3, #49	; 0x31
    20bc:	18fb      	adds	r3, r7, r3
    20be:	781a      	ldrb	r2, [r3, #0]
    20c0:	4ba6      	ldr	r3, [pc, #664]	; (235c <tc_init+0x340>)
    20c2:	0092      	lsls	r2, r2, #2
    20c4:	68f9      	ldr	r1, [r7, #12]
    20c6:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    20c8:	68fb      	ldr	r3, [r7, #12]
    20ca:	68ba      	ldr	r2, [r7, #8]
    20cc:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	789b      	ldrb	r3, [r3, #2]
    20d2:	2b08      	cmp	r3, #8
    20d4:	d107      	bne.n	20e6 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    20d6:	2331      	movs	r3, #49	; 0x31
    20d8:	18fb      	adds	r3, r7, r3
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	2201      	movs	r2, #1
    20de:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    20e0:	d001      	beq.n	20e6 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    20e2:	2317      	movs	r3, #23
    20e4:	e1c3      	b.n	246e <tc_init+0x452>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	789a      	ldrb	r2, [r3, #2]
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    20ee:	68bb      	ldr	r3, [r7, #8]
    20f0:	881b      	ldrh	r3, [r3, #0]
    20f2:	b29b      	uxth	r3, r3
    20f4:	1c1a      	adds	r2, r3, #0
    20f6:	2301      	movs	r3, #1
    20f8:	4013      	ands	r3, r2
    20fa:	d001      	beq.n	2100 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    20fc:	2305      	movs	r3, #5
    20fe:	e1b6      	b.n	246e <tc_init+0x452>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2100:	68bb      	ldr	r3, [r7, #8]
    2102:	7bdb      	ldrb	r3, [r3, #15]
    2104:	b2db      	uxtb	r3, r3
    2106:	1c1a      	adds	r2, r3, #0
    2108:	2310      	movs	r3, #16
    210a:	4013      	ands	r3, r2
    210c:	d001      	beq.n	2112 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    210e:	231c      	movs	r3, #28
    2110:	e1ad      	b.n	246e <tc_init+0x452>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2112:	68bb      	ldr	r3, [r7, #8]
    2114:	881b      	ldrh	r3, [r3, #0]
    2116:	b29b      	uxth	r3, r3
    2118:	1c1a      	adds	r2, r3, #0
    211a:	2302      	movs	r3, #2
    211c:	4013      	ands	r3, r2
    211e:	d001      	beq.n	2124 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2120:	231c      	movs	r3, #28
    2122:	e1a4      	b.n	246e <tc_init+0x452>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	7c1b      	ldrb	r3, [r3, #16]
    2128:	2b00      	cmp	r3, #0
    212a:	d017      	beq.n	215c <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    212c:	2314      	movs	r3, #20
    212e:	18fb      	adds	r3, r7, r3
    2130:	1c18      	adds	r0, r3, #0
    2132:	4b8b      	ldr	r3, [pc, #556]	; (2360 <tc_init+0x344>)
    2134:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	699b      	ldr	r3, [r3, #24]
    213a:	b2da      	uxtb	r2, r3
    213c:	2314      	movs	r3, #20
    213e:	18fb      	adds	r3, r7, r3
    2140:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2142:	2314      	movs	r3, #20
    2144:	18fb      	adds	r3, r7, r3
    2146:	2201      	movs	r2, #1
    2148:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    214e:	b2da      	uxtb	r2, r3
    2150:	2314      	movs	r3, #20
    2152:	18fb      	adds	r3, r7, r3
    2154:	1c10      	adds	r0, r2, #0
    2156:	1c19      	adds	r1, r3, #0
    2158:	4b82      	ldr	r3, [pc, #520]	; (2364 <tc_init+0x348>)
    215a:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	7f1b      	ldrb	r3, [r3, #28]
    2160:	2b00      	cmp	r3, #0
    2162:	d017      	beq.n	2194 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    2164:	2314      	movs	r3, #20
    2166:	18fb      	adds	r3, r7, r3
    2168:	1c18      	adds	r0, r3, #0
    216a:	4b7d      	ldr	r3, [pc, #500]	; (2360 <tc_init+0x344>)
    216c:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2172:	b2da      	uxtb	r2, r3
    2174:	2314      	movs	r3, #20
    2176:	18fb      	adds	r3, r7, r3
    2178:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    217a:	2314      	movs	r3, #20
    217c:	18fb      	adds	r3, r7, r3
    217e:	2201      	movs	r2, #1
    2180:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2186:	b2da      	uxtb	r2, r3
    2188:	2314      	movs	r3, #20
    218a:	18fb      	adds	r3, r7, r3
    218c:	1c10      	adds	r0, r2, #0
    218e:	1c19      	adds	r1, r3, #0
    2190:	4b74      	ldr	r3, [pc, #464]	; (2364 <tc_init+0x348>)
    2192:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2194:	2331      	movs	r3, #49	; 0x31
    2196:	18fb      	adds	r3, r7, r3
    2198:	781a      	ldrb	r2, [r3, #0]
    219a:	2318      	movs	r3, #24
    219c:	18fb      	adds	r3, r7, r3
    219e:	0052      	lsls	r2, r2, #1
    21a0:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    21a2:	2002      	movs	r0, #2
    21a4:	1c19      	adds	r1, r3, #0
    21a6:	4b70      	ldr	r3, [pc, #448]	; (2368 <tc_init+0x34c>)
    21a8:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	789b      	ldrb	r3, [r3, #2]
    21ae:	2b08      	cmp	r3, #8
    21b0:	d10b      	bne.n	21ca <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    21b2:	2331      	movs	r3, #49	; 0x31
    21b4:	18fb      	adds	r3, r7, r3
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	1c5a      	adds	r2, r3, #1
    21ba:	2318      	movs	r3, #24
    21bc:	18fb      	adds	r3, r7, r3
    21be:	0052      	lsls	r2, r2, #1
    21c0:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    21c2:	2002      	movs	r0, #2
    21c4:	1c19      	adds	r1, r3, #0
    21c6:	4b68      	ldr	r3, [pc, #416]	; (2368 <tc_init+0x34c>)
    21c8:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    21ca:	2310      	movs	r3, #16
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	1c18      	adds	r0, r3, #0
    21d0:	4b66      	ldr	r3, [pc, #408]	; (236c <tc_init+0x350>)
    21d2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	781a      	ldrb	r2, [r3, #0]
    21d8:	2310      	movs	r3, #16
    21da:	18fb      	adds	r3, r7, r3
    21dc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    21de:	2331      	movs	r3, #49	; 0x31
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	2228      	movs	r2, #40	; 0x28
    21e6:	18ba      	adds	r2, r7, r2
    21e8:	5cd2      	ldrb	r2, [r2, r3]
    21ea:	2310      	movs	r3, #16
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	1c10      	adds	r0, r2, #0
    21f0:	1c19      	adds	r1, r3, #0
    21f2:	4b5f      	ldr	r3, [pc, #380]	; (2370 <tc_init+0x354>)
    21f4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    21f6:	2331      	movs	r3, #49	; 0x31
    21f8:	18fb      	adds	r3, r7, r3
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	2228      	movs	r2, #40	; 0x28
    21fe:	18ba      	adds	r2, r7, r2
    2200:	5cd3      	ldrb	r3, [r2, r3]
    2202:	1c18      	adds	r0, r3, #0
    2204:	4b5b      	ldr	r3, [pc, #364]	; (2374 <tc_init+0x358>)
    2206:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    220c:	687b      	ldr	r3, [r7, #4]
    220e:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2210:	4313      	orrs	r3, r2
    2212:	b2db      	uxtb	r3, r3
    2214:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    221a:	4313      	orrs	r3, r2
    221c:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2222:	2336      	movs	r3, #54	; 0x36
    2224:	18fb      	adds	r3, r7, r3
    2226:	430a      	orrs	r2, r1
    2228:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	785b      	ldrb	r3, [r3, #1]
    222e:	2b00      	cmp	r3, #0
    2230:	d008      	beq.n	2244 <tc_init+0x228>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2232:	2336      	movs	r3, #54	; 0x36
    2234:	18fb      	adds	r3, r7, r3
    2236:	2236      	movs	r2, #54	; 0x36
    2238:	18ba      	adds	r2, r7, r2
    223a:	8812      	ldrh	r2, [r2, #0]
    223c:	2180      	movs	r1, #128	; 0x80
    223e:	0109      	lsls	r1, r1, #4
    2240:	430a      	orrs	r2, r1
    2242:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2244:	46c0      	nop			; (mov r8, r8)
    2246:	68fb      	ldr	r3, [r7, #12]
    2248:	1c18      	adds	r0, r3, #0
    224a:	4b4b      	ldr	r3, [pc, #300]	; (2378 <tc_init+0x35c>)
    224c:	4798      	blx	r3
    224e:	1e03      	subs	r3, r0, #0
    2250:	d1f9      	bne.n	2246 <tc_init+0x22a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	2236      	movs	r2, #54	; 0x36
    2256:	18ba      	adds	r2, r7, r2
    2258:	8812      	ldrh	r2, [r2, #0]
    225a:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	7b5b      	ldrb	r3, [r3, #13]
    2260:	2b00      	cmp	r3, #0
    2262:	d003      	beq.n	226c <tc_init+0x250>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2264:	2335      	movs	r3, #53	; 0x35
    2266:	18fb      	adds	r3, r7, r3
    2268:	2204      	movs	r2, #4
    226a:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	7b9b      	ldrb	r3, [r3, #14]
    2270:	2b00      	cmp	r3, #0
    2272:	d007      	beq.n	2284 <tc_init+0x268>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2274:	2335      	movs	r3, #53	; 0x35
    2276:	18fb      	adds	r3, r7, r3
    2278:	2235      	movs	r2, #53	; 0x35
    227a:	18ba      	adds	r2, r7, r2
    227c:	7812      	ldrb	r2, [r2, #0]
    227e:	2101      	movs	r1, #1
    2280:	430a      	orrs	r2, r1
    2282:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2284:	46c0      	nop			; (mov r8, r8)
    2286:	68fb      	ldr	r3, [r7, #12]
    2288:	1c18      	adds	r0, r3, #0
    228a:	4b3b      	ldr	r3, [pc, #236]	; (2378 <tc_init+0x35c>)
    228c:	4798      	blx	r3
    228e:	1e03      	subs	r3, r0, #0
    2290:	d1f9      	bne.n	2286 <tc_init+0x26a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2292:	68bb      	ldr	r3, [r7, #8]
    2294:	22ff      	movs	r2, #255	; 0xff
    2296:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    2298:	2335      	movs	r3, #53	; 0x35
    229a:	18fb      	adds	r3, r7, r3
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d00b      	beq.n	22ba <tc_init+0x29e>
		while (tc_is_syncing(module_inst)) {
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	1c18      	adds	r0, r3, #0
    22a8:	4b33      	ldr	r3, [pc, #204]	; (2378 <tc_init+0x35c>)
    22aa:	4798      	blx	r3
    22ac:	1e03      	subs	r3, r0, #0
    22ae:	d1f9      	bne.n	22a4 <tc_init+0x288>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    22b0:	68bb      	ldr	r3, [r7, #8]
    22b2:	2235      	movs	r2, #53	; 0x35
    22b4:	18ba      	adds	r2, r7, r2
    22b6:	7812      	ldrb	r2, [r2, #0]
    22b8:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    22ba:	2334      	movs	r3, #52	; 0x34
    22bc:	18fb      	adds	r3, r7, r3
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7a92      	ldrb	r2, [r2, #10]
    22c2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    22c4:	2332      	movs	r3, #50	; 0x32
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	2200      	movs	r2, #0
    22ca:	701a      	strb	r2, [r3, #0]
    22cc:	e01c      	b.n	2308 <tc_init+0x2ec>
		if (config->enable_capture_on_channel[i] == true) {
    22ce:	2332      	movs	r3, #50	; 0x32
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	687a      	ldr	r2, [r7, #4]
    22d6:	18d3      	adds	r3, r2, r3
    22d8:	7adb      	ldrb	r3, [r3, #11]
    22da:	2b00      	cmp	r3, #0
    22dc:	d00d      	beq.n	22fa <tc_init+0x2de>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    22de:	2332      	movs	r3, #50	; 0x32
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	2210      	movs	r2, #16
    22e6:	409a      	lsls	r2, r3
    22e8:	1c13      	adds	r3, r2, #0
    22ea:	b2d9      	uxtb	r1, r3
    22ec:	2334      	movs	r3, #52	; 0x34
    22ee:	18fb      	adds	r3, r7, r3
    22f0:	2234      	movs	r2, #52	; 0x34
    22f2:	18ba      	adds	r2, r7, r2
    22f4:	7812      	ldrb	r2, [r2, #0]
    22f6:	430a      	orrs	r2, r1
    22f8:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    22fa:	2332      	movs	r3, #50	; 0x32
    22fc:	18fb      	adds	r3, r7, r3
    22fe:	781a      	ldrb	r2, [r3, #0]
    2300:	2332      	movs	r3, #50	; 0x32
    2302:	18fb      	adds	r3, r7, r3
    2304:	3201      	adds	r2, #1
    2306:	701a      	strb	r2, [r3, #0]
    2308:	2332      	movs	r3, #50	; 0x32
    230a:	18fb      	adds	r3, r7, r3
    230c:	781b      	ldrb	r3, [r3, #0]
    230e:	2b01      	cmp	r3, #1
    2310:	d9dd      	bls.n	22ce <tc_init+0x2b2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	68fb      	ldr	r3, [r7, #12]
    2316:	1c18      	adds	r0, r3, #0
    2318:	4b17      	ldr	r3, [pc, #92]	; (2378 <tc_init+0x35c>)
    231a:	4798      	blx	r3
    231c:	1e03      	subs	r3, r0, #0
    231e:	d1f9      	bne.n	2314 <tc_init+0x2f8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2320:	68bb      	ldr	r3, [r7, #8]
    2322:	2234      	movs	r2, #52	; 0x34
    2324:	18ba      	adds	r2, r7, r2
    2326:	7812      	ldrb	r2, [r2, #0]
    2328:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	68fb      	ldr	r3, [r7, #12]
    232e:	1c18      	adds	r0, r3, #0
    2330:	4b11      	ldr	r3, [pc, #68]	; (2378 <tc_init+0x35c>)
    2332:	4798      	blx	r3
    2334:	1e03      	subs	r3, r0, #0
    2336:	d1f9      	bne.n	232c <tc_init+0x310>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2338:	68fb      	ldr	r3, [r7, #12]
    233a:	791b      	ldrb	r3, [r3, #4]
    233c:	2b04      	cmp	r3, #4
    233e:	d01d      	beq.n	237c <tc_init+0x360>
    2340:	2b08      	cmp	r3, #8
    2342:	d100      	bne.n	2346 <tc_init+0x32a>
    2344:	e06f      	b.n	2426 <tc_init+0x40a>
    2346:	2b00      	cmp	r3, #0
    2348:	d04a      	beq.n	23e0 <tc_init+0x3c4>
    234a:	e08f      	b.n	246c <tc_init+0x450>
    234c:	00001fcd 	.word	0x00001fcd
    2350:	000025d8 	.word	0x000025d8
    2354:	00002565 	.word	0x00002565
    2358:	000025e0 	.word	0x000025e0
    235c:	20000940 	.word	0x20000940
    2360:	00001f7d 	.word	0x00001f7d
    2364:	00001cf5 	.word	0x00001cf5
    2368:	00001f21 	.word	0x00001f21
    236c:	00001f0d 	.word	0x00001f0d
    2370:	00001a65 	.word	0x00001a65
    2374:	00001aa9 	.word	0x00001aa9
    2378:	00001fa5 	.word	0x00001fa5
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	1c18      	adds	r0, r3, #0
    2382:	4b3d      	ldr	r3, [pc, #244]	; (2478 <tc_init+0x45c>)
    2384:	4798      	blx	r3
    2386:	1e03      	subs	r3, r0, #0
    2388:	d1f9      	bne.n	237e <tc_init+0x362>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	2228      	movs	r2, #40	; 0x28
    238e:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    2390:	68bb      	ldr	r3, [r7, #8]
    2392:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    2394:	46c0      	nop			; (mov r8, r8)
    2396:	68fb      	ldr	r3, [r7, #12]
    2398:	1c18      	adds	r0, r3, #0
    239a:	4b37      	ldr	r3, [pc, #220]	; (2478 <tc_init+0x45c>)
    239c:	4798      	blx	r3
    239e:	1e03      	subs	r3, r0, #0
    23a0:	d1f9      	bne.n	2396 <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	2229      	movs	r2, #41	; 0x29
    23a6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    23a8:	68bb      	ldr	r3, [r7, #8]
    23aa:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    23ac:	46c0      	nop			; (mov r8, r8)
    23ae:	68fb      	ldr	r3, [r7, #12]
    23b0:	1c18      	adds	r0, r3, #0
    23b2:	4b31      	ldr	r3, [pc, #196]	; (2478 <tc_init+0x45c>)
    23b4:	4798      	blx	r3
    23b6:	1e03      	subs	r3, r0, #0
    23b8:	d1f9      	bne.n	23ae <tc_init+0x392>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	222a      	movs	r2, #42	; 0x2a
    23be:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    23c0:	68bb      	ldr	r3, [r7, #8]
    23c2:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    23c4:	46c0      	nop			; (mov r8, r8)
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	1c18      	adds	r0, r3, #0
    23ca:	4b2b      	ldr	r3, [pc, #172]	; (2478 <tc_init+0x45c>)
    23cc:	4798      	blx	r3
    23ce:	1e03      	subs	r3, r0, #0
    23d0:	d1f9      	bne.n	23c6 <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	222b      	movs	r2, #43	; 0x2b
    23d6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    23d8:	68bb      	ldr	r3, [r7, #8]
    23da:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    23dc:	2300      	movs	r3, #0
    23de:	e046      	b.n	246e <tc_init+0x452>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    23e0:	46c0      	nop			; (mov r8, r8)
    23e2:	68fb      	ldr	r3, [r7, #12]
    23e4:	1c18      	adds	r0, r3, #0
    23e6:	4b24      	ldr	r3, [pc, #144]	; (2478 <tc_init+0x45c>)
    23e8:	4798      	blx	r3
    23ea:	1e03      	subs	r3, r0, #0
    23ec:	d1f9      	bne.n	23e2 <tc_init+0x3c6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    23f2:	68bb      	ldr	r3, [r7, #8]
    23f4:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	1c18      	adds	r0, r3, #0
    23fc:	4b1e      	ldr	r3, [pc, #120]	; (2478 <tc_init+0x45c>)
    23fe:	4798      	blx	r3
    2400:	1e03      	subs	r3, r0, #0
    2402:	d1f9      	bne.n	23f8 <tc_init+0x3dc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2408:	68bb      	ldr	r3, [r7, #8]
    240a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    240c:	46c0      	nop			; (mov r8, r8)
    240e:	68fb      	ldr	r3, [r7, #12]
    2410:	1c18      	adds	r0, r3, #0
    2412:	4b19      	ldr	r3, [pc, #100]	; (2478 <tc_init+0x45c>)
    2414:	4798      	blx	r3
    2416:	1e03      	subs	r3, r0, #0
    2418:	d1f9      	bne.n	240e <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    241e:	68bb      	ldr	r3, [r7, #8]
    2420:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2422:	2300      	movs	r3, #0
    2424:	e023      	b.n	246e <tc_init+0x452>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	1c18      	adds	r0, r3, #0
    242c:	4b12      	ldr	r3, [pc, #72]	; (2478 <tc_init+0x45c>)
    242e:	4798      	blx	r3
    2430:	1e03      	subs	r3, r0, #0
    2432:	d1f9      	bne.n	2428 <tc_init+0x40c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2438:	68bb      	ldr	r3, [r7, #8]
    243a:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    243c:	46c0      	nop			; (mov r8, r8)
    243e:	68fb      	ldr	r3, [r7, #12]
    2440:	1c18      	adds	r0, r3, #0
    2442:	4b0d      	ldr	r3, [pc, #52]	; (2478 <tc_init+0x45c>)
    2444:	4798      	blx	r3
    2446:	1e03      	subs	r3, r0, #0
    2448:	d1f9      	bne.n	243e <tc_init+0x422>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    244e:	68bb      	ldr	r3, [r7, #8]
    2450:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	68fb      	ldr	r3, [r7, #12]
    2456:	1c18      	adds	r0, r3, #0
    2458:	4b07      	ldr	r3, [pc, #28]	; (2478 <tc_init+0x45c>)
    245a:	4798      	blx	r3
    245c:	1e03      	subs	r3, r0, #0
    245e:	d1f9      	bne.n	2454 <tc_init+0x438>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    2464:	68bb      	ldr	r3, [r7, #8]
    2466:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    2468:	2300      	movs	r3, #0
    246a:	e000      	b.n	246e <tc_init+0x452>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    246c:	2317      	movs	r3, #23
}
    246e:	1c18      	adds	r0, r3, #0
    2470:	46bd      	mov	sp, r7
    2472:	b00f      	add	sp, #60	; 0x3c
    2474:	bd90      	pop	{r4, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	00001fa5 	.word	0x00001fa5

0000247c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    247c:	b580      	push	{r7, lr}
    247e:	b082      	sub	sp, #8
    2480:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2482:	4b19      	ldr	r3, [pc, #100]	; (24e8 <Reset_Handler+0x6c>)
    2484:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2486:	4b19      	ldr	r3, [pc, #100]	; (24ec <Reset_Handler+0x70>)
    2488:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    248a:	687a      	ldr	r2, [r7, #4]
    248c:	683b      	ldr	r3, [r7, #0]
    248e:	429a      	cmp	r2, r3
    2490:	d00c      	beq.n	24ac <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2492:	e007      	b.n	24a4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2494:	683b      	ldr	r3, [r7, #0]
    2496:	1d1a      	adds	r2, r3, #4
    2498:	603a      	str	r2, [r7, #0]
    249a:	687a      	ldr	r2, [r7, #4]
    249c:	1d11      	adds	r1, r2, #4
    249e:	6079      	str	r1, [r7, #4]
    24a0:	6812      	ldr	r2, [r2, #0]
    24a2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    24a4:	683a      	ldr	r2, [r7, #0]
    24a6:	4b12      	ldr	r3, [pc, #72]	; (24f0 <Reset_Handler+0x74>)
    24a8:	429a      	cmp	r2, r3
    24aa:	d3f3      	bcc.n	2494 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    24ac:	4b11      	ldr	r3, [pc, #68]	; (24f4 <Reset_Handler+0x78>)
    24ae:	603b      	str	r3, [r7, #0]
    24b0:	e004      	b.n	24bc <Reset_Handler+0x40>
                *pDest++ = 0;
    24b2:	683b      	ldr	r3, [r7, #0]
    24b4:	1d1a      	adds	r2, r3, #4
    24b6:	603a      	str	r2, [r7, #0]
    24b8:	2200      	movs	r2, #0
    24ba:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    24bc:	683a      	ldr	r2, [r7, #0]
    24be:	4b0e      	ldr	r3, [pc, #56]	; (24f8 <Reset_Handler+0x7c>)
    24c0:	429a      	cmp	r2, r3
    24c2:	d3f6      	bcc.n	24b2 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    24c4:	4b0d      	ldr	r3, [pc, #52]	; (24fc <Reset_Handler+0x80>)
    24c6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    24c8:	4b0d      	ldr	r3, [pc, #52]	; (2500 <Reset_Handler+0x84>)
    24ca:	687a      	ldr	r2, [r7, #4]
    24cc:	21ff      	movs	r1, #255	; 0xff
    24ce:	438a      	bics	r2, r1
    24d0:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    24d2:	4b0c      	ldr	r3, [pc, #48]	; (2504 <Reset_Handler+0x88>)
    24d4:	685a      	ldr	r2, [r3, #4]
    24d6:	2180      	movs	r1, #128	; 0x80
    24d8:	430a      	orrs	r2, r1
    24da:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    24dc:	4b0a      	ldr	r3, [pc, #40]	; (2508 <Reset_Handler+0x8c>)
    24de:	4798      	blx	r3

        /* Branch to main function */
        main();
    24e0:	4b0a      	ldr	r3, [pc, #40]	; (250c <Reset_Handler+0x90>)
    24e2:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    24e4:	e7fe      	b.n	24e4 <Reset_Handler+0x68>
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	00002610 	.word	0x00002610
    24ec:	20000000 	.word	0x20000000
    24f0:	20000010 	.word	0x20000010
    24f4:	20000010 	.word	0x20000010
    24f8:	20000960 	.word	0x20000960
    24fc:	00000000 	.word	0x00000000
    2500:	e000ed00 	.word	0xe000ed00
    2504:	41004000 	.word	0x41004000
    2508:	00002519 	.word	0x00002519
    250c:	000008dd 	.word	0x000008dd

00002510 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2510:	b580      	push	{r7, lr}
    2512:	af00      	add	r7, sp, #0
        while (1) {
        }
    2514:	e7fe      	b.n	2514 <Dummy_Handler+0x4>
    2516:	46c0      	nop			; (mov r8, r8)

00002518 <__libc_init_array>:
    2518:	4b0e      	ldr	r3, [pc, #56]	; (2554 <__libc_init_array+0x3c>)
    251a:	b570      	push	{r4, r5, r6, lr}
    251c:	2500      	movs	r5, #0
    251e:	1c1e      	adds	r6, r3, #0
    2520:	4c0d      	ldr	r4, [pc, #52]	; (2558 <__libc_init_array+0x40>)
    2522:	1ae4      	subs	r4, r4, r3
    2524:	10a4      	asrs	r4, r4, #2
    2526:	42a5      	cmp	r5, r4
    2528:	d004      	beq.n	2534 <__libc_init_array+0x1c>
    252a:	00ab      	lsls	r3, r5, #2
    252c:	58f3      	ldr	r3, [r6, r3]
    252e:	4798      	blx	r3
    2530:	3501      	adds	r5, #1
    2532:	e7f8      	b.n	2526 <__libc_init_array+0xe>
    2534:	f000 f85c 	bl	25f0 <_init>
    2538:	4b08      	ldr	r3, [pc, #32]	; (255c <__libc_init_array+0x44>)
    253a:	2500      	movs	r5, #0
    253c:	1c1e      	adds	r6, r3, #0
    253e:	4c08      	ldr	r4, [pc, #32]	; (2560 <__libc_init_array+0x48>)
    2540:	1ae4      	subs	r4, r4, r3
    2542:	10a4      	asrs	r4, r4, #2
    2544:	42a5      	cmp	r5, r4
    2546:	d004      	beq.n	2552 <__libc_init_array+0x3a>
    2548:	00ab      	lsls	r3, r5, #2
    254a:	58f3      	ldr	r3, [r6, r3]
    254c:	4798      	blx	r3
    254e:	3501      	adds	r5, #1
    2550:	e7f8      	b.n	2544 <__libc_init_array+0x2c>
    2552:	bd70      	pop	{r4, r5, r6, pc}
    2554:	000025fc 	.word	0x000025fc
    2558:	000025fc 	.word	0x000025fc
    255c:	000025fc 	.word	0x000025fc
    2560:	00002600 	.word	0x00002600

00002564 <memcpy>:
    2564:	2300      	movs	r3, #0
    2566:	b510      	push	{r4, lr}
    2568:	4293      	cmp	r3, r2
    256a:	d003      	beq.n	2574 <memcpy+0x10>
    256c:	5ccc      	ldrb	r4, [r1, r3]
    256e:	54c4      	strb	r4, [r0, r3]
    2570:	3301      	adds	r3, #1
    2572:	e7f9      	b.n	2568 <memcpy+0x4>
    2574:	bd10      	pop	{r4, pc}
    2576:	0000      	movs	r0, r0
    2578:	000014e8 	.word	0x000014e8
    257c:	00001522 	.word	0x00001522
    2580:	00001522 	.word	0x00001522
    2584:	0000151e 	.word	0x0000151e
    2588:	000014da 	.word	0x000014da
    258c:	000014fa 	.word	0x000014fa
    2590:	000014ca 	.word	0x000014ca
    2594:	0000150c 	.word	0x0000150c
    2598:	0000156e 	.word	0x0000156e
    259c:	00001584 	.word	0x00001584
    25a0:	00001584 	.word	0x00001584
    25a4:	00001580 	.word	0x00001580
    25a8:	00001568 	.word	0x00001568
    25ac:	00001574 	.word	0x00001574
    25b0:	00001562 	.word	0x00001562
    25b4:	0000157a 	.word	0x0000157a
    25b8:	42002000 	.word	0x42002000
    25bc:	42002400 	.word	0x42002400
    25c0:	42002800 	.word	0x42002800
    25c4:	42002c00 	.word	0x42002c00
    25c8:	42003000 	.word	0x42003000
    25cc:	42003400 	.word	0x42003400
    25d0:	42003800 	.word	0x42003800
    25d4:	42003c00 	.word	0x42003c00
    25d8:	14141313 	.word	0x14141313
    25dc:	16161515 	.word	0x16161515
    25e0:	02000100 	.word	0x02000100
    25e4:	08000400 	.word	0x08000400
    25e8:	20001000 	.word	0x20001000
    25ec:	80004000 	.word	0x80004000

000025f0 <_init>:
    25f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25f6:	bc08      	pop	{r3}
    25f8:	469e      	mov	lr, r3
    25fa:	4770      	bx	lr

000025fc <__init_array_start>:
    25fc:	000000cd 	.word	0x000000cd

00002600 <_fini>:
    2600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2606:	bc08      	pop	{r3}
    2608:	469e      	mov	lr, r3
    260a:	4770      	bx	lr

0000260c <__fini_array_start>:
    260c:	000000a5 	.word	0x000000a5
