
MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  000070cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000720  20000078  00007144  00010078  2**2
                  ALLOC
  3 .stack        00002000  20000798  00007864  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002b211  00000000  00000000  000100fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000411e  00000000  00000000  0003b30c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003efe  00000000  00000000  0003f42a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bc0  00000000  00000000  00043328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a20  00000000  00000000  00043ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000165b0  00000000  00000000  00044908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000126b1  00000000  00000000  0005aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062192  00000000  00000000  0006d569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b64  00000000  00000000  000cf6fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002798 	.word	0x20002798
       4:	00006219 	.word	0x00006219
       8:	000062ad 	.word	0x000062ad
       c:	000062ad 	.word	0x000062ad
	...
      2c:	000062ad 	.word	0x000062ad
	...
      38:	000062ad 	.word	0x000062ad
      3c:	000062ad 	.word	0x000062ad
      40:	000062ad 	.word	0x000062ad
      44:	000062ad 	.word	0x000062ad
      48:	000062ad 	.word	0x000062ad
      4c:	000062ad 	.word	0x000062ad
      50:	000062ad 	.word	0x000062ad
      54:	000062ad 	.word	0x000062ad
      58:	000062ad 	.word	0x000062ad
      5c:	00003e11 	.word	0x00003e11
      60:	00003e25 	.word	0x00003e25
      64:	00003e39 	.word	0x00003e39
      68:	00003e4d 	.word	0x00003e4d
      6c:	00003e61 	.word	0x00003e61
      70:	00003e75 	.word	0x00003e75
      74:	00005b51 	.word	0x00005b51
      78:	00005b65 	.word	0x00005b65
      7c:	00005b79 	.word	0x00005b79
      80:	00005b8d 	.word	0x00005b8d
      84:	00005ba1 	.word	0x00005ba1
      88:	00005bb5 	.word	0x00005bb5
      8c:	00005bc9 	.word	0x00005bc9
      90:	00005bdd 	.word	0x00005bdd
      94:	00003625 	.word	0x00003625
      98:	000062ad 	.word	0x000062ad
      9c:	000062ad 	.word	0x000062ad
      a0:	000062ad 	.word	0x000062ad

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000078 	.word	0x20000078
      c4:	00000000 	.word	0x00000000
      c8:	000070cc 	.word	0x000070cc

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	000070cc 	.word	0x000070cc
      f8:	2000007c 	.word	0x2000007c
      fc:	000070cc 	.word	0x000070cc
     100:	00000000 	.word	0x00000000

00000104 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
     10a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     10c:	687b      	ldr	r3, [r7, #4]
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
}
     112:	46bd      	mov	sp, r7
     114:	b002      	add	sp, #8
     116:	bd80      	pop	{r7, pc}

00000118 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     118:	b580      	push	{r7, lr}
     11a:	b082      	sub	sp, #8
     11c:	af00      	add	r7, sp, #0
     11e:	1c02      	adds	r2, r0, #0
     120:	6039      	str	r1, [r7, #0]
     122:	1dfb      	adds	r3, r7, #7
     124:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     126:	1dfb      	adds	r3, r7, #7
     128:	781b      	ldrb	r3, [r3, #0]
     12a:	2b01      	cmp	r3, #1
     12c:	d00a      	beq.n	144 <system_apb_clock_set_mask+0x2c>
     12e:	2b02      	cmp	r3, #2
     130:	d00f      	beq.n	152 <system_apb_clock_set_mask+0x3a>
     132:	2b00      	cmp	r3, #0
     134:	d114      	bne.n	160 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     136:	4b0e      	ldr	r3, [pc, #56]	; (170 <system_apb_clock_set_mask+0x58>)
     138:	4a0d      	ldr	r2, [pc, #52]	; (170 <system_apb_clock_set_mask+0x58>)
     13a:	6991      	ldr	r1, [r2, #24]
     13c:	683a      	ldr	r2, [r7, #0]
     13e:	430a      	orrs	r2, r1
     140:	619a      	str	r2, [r3, #24]
			break;
     142:	e00f      	b.n	164 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     144:	4b0a      	ldr	r3, [pc, #40]	; (170 <system_apb_clock_set_mask+0x58>)
     146:	4a0a      	ldr	r2, [pc, #40]	; (170 <system_apb_clock_set_mask+0x58>)
     148:	69d1      	ldr	r1, [r2, #28]
     14a:	683a      	ldr	r2, [r7, #0]
     14c:	430a      	orrs	r2, r1
     14e:	61da      	str	r2, [r3, #28]
			break;
     150:	e008      	b.n	164 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     152:	4b07      	ldr	r3, [pc, #28]	; (170 <system_apb_clock_set_mask+0x58>)
     154:	4a06      	ldr	r2, [pc, #24]	; (170 <system_apb_clock_set_mask+0x58>)
     156:	6a11      	ldr	r1, [r2, #32]
     158:	683a      	ldr	r2, [r7, #0]
     15a:	430a      	orrs	r2, r1
     15c:	621a      	str	r2, [r3, #32]
			break;
     15e:	e001      	b.n	164 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     160:	2317      	movs	r3, #23
     162:	e000      	b.n	166 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     164:	2300      	movs	r3, #0
}
     166:	1c18      	adds	r0, r3, #0
     168:	46bd      	mov	sp, r7
     16a:	b002      	add	sp, #8
     16c:	bd80      	pop	{r7, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	40000400 	.word	0x40000400

00000174 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	2280      	movs	r2, #128	; 0x80
     180:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     182:	687b      	ldr	r3, [r7, #4]
     184:	2200      	movs	r2, #0
     186:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	2201      	movs	r2, #1
     18c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     18e:	687b      	ldr	r3, [r7, #4]
     190:	2200      	movs	r2, #0
     192:	70da      	strb	r2, [r3, #3]
}
     194:	46bd      	mov	sp, r7
     196:	b002      	add	sp, #8
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)

0000019c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     19c:	b580      	push	{r7, lr}
     19e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_is_debugger_present+0x1c>)
     1a2:	789b      	ldrb	r3, [r3, #2]
     1a4:	b2db      	uxtb	r3, r3
     1a6:	1c1a      	adds	r2, r3, #0
     1a8:	2302      	movs	r3, #2
     1aa:	4013      	ands	r3, r2
     1ac:	1e5a      	subs	r2, r3, #1
     1ae:	4193      	sbcs	r3, r2
     1b0:	b2db      	uxtb	r3, r3
}
     1b2:	1c18      	adds	r0, r3, #0
     1b4:	46bd      	mov	sp, r7
     1b6:	bd80      	pop	{r7, pc}
     1b8:	41002000 	.word	0x41002000

000001bc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	8a1b      	ldrh	r3, [r3, #16]
     1ce:	b29b      	uxth	r3, r3
     1d0:	1c1a      	adds	r2, r3, #0
     1d2:	2380      	movs	r3, #128	; 0x80
     1d4:	021b      	lsls	r3, r3, #8
     1d6:	4013      	ands	r3, r2
     1d8:	1e5a      	subs	r2, r3, #1
     1da:	4193      	sbcs	r3, r2
     1dc:	b2db      	uxtb	r3, r3
#endif
}
     1de:	1c18      	adds	r0, r3, #0
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)

000001e8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b082      	sub	sp, #8
     1ec:	af00      	add	r7, sp, #0
     1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     1f0:	46c0      	nop			; (mov r8, r8)
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	1c18      	adds	r0, r3, #0
     1f6:	4b03      	ldr	r3, [pc, #12]	; (204 <_usart_wait_for_sync+0x1c>)
     1f8:	4798      	blx	r3
     1fa:	1e03      	subs	r3, r0, #0
     1fc:	d1f9      	bne.n	1f2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     1fe:	46bd      	mov	sp, r7
     200:	b002      	add	sp, #8
     202:	bd80      	pop	{r7, pc}
     204:	000001bd 	.word	0x000001bd

00000208 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	b08f      	sub	sp, #60	; 0x3c
     20c:	af02      	add	r7, sp, #8
     20e:	6078      	str	r0, [r7, #4]
     210:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     212:	687b      	ldr	r3, [r7, #4]
     214:	681b      	ldr	r3, [r3, #0]
     216:	623b      	str	r3, [r7, #32]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	1c18      	adds	r0, r3, #0
     21e:	4b6d      	ldr	r3, [pc, #436]	; (3d4 <_usart_set_config+0x1cc>)
     220:	4798      	blx	r3
     222:	1c03      	adds	r3, r0, #0
     224:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     226:	69fb      	ldr	r3, [r7, #28]
     228:	330d      	adds	r3, #13
     22a:	61bb      	str	r3, [r7, #24]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     22c:	2300      	movs	r3, #0
     22e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ctrlb = 0;
     230:	2300      	movs	r3, #0
     232:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     234:	230e      	movs	r3, #14
     236:	18fb      	adds	r3, r7, r3
     238:	2200      	movs	r2, #0
     23a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     23c:	2317      	movs	r3, #23
     23e:	18fb      	adds	r3, r7, r3
     240:	2200      	movs	r2, #0
     242:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     244:	2316      	movs	r3, #22
     246:	18fb      	adds	r3, r7, r3
     248:	2210      	movs	r2, #16
     24a:	701a      	strb	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     24c:	683b      	ldr	r3, [r7, #0]
     24e:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     250:	683b      	ldr	r3, [r7, #0]
     252:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     254:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     256:	683a      	ldr	r2, [r7, #0]
     258:	7d92      	ldrb	r2, [r2, #22]
     25a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     25c:	4313      	orrs	r3, r2
     25e:	62fb      	str	r3, [r7, #44]	; 0x2c
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     260:	2327      	movs	r3, #39	; 0x27
     262:	18fb      	adds	r3, r7, r3
     264:	2200      	movs	r2, #0
     266:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     268:	683b      	ldr	r3, [r7, #0]
     26a:	685b      	ldr	r3, [r3, #4]
     26c:	613b      	str	r3, [r7, #16]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     26e:	693b      	ldr	r3, [r7, #16]
     270:	2b00      	cmp	r3, #0
     272:	d01f      	beq.n	2b4 <_usart_set_config+0xac>
     274:	2280      	movs	r2, #128	; 0x80
     276:	0552      	lsls	r2, r2, #21
     278:	4293      	cmp	r3, r2
     27a:	d14e      	bne.n	31a <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	7ddb      	ldrb	r3, [r3, #23]
     280:	2201      	movs	r2, #1
     282:	4053      	eors	r3, r2
     284:	b2db      	uxtb	r3, r3
     286:	2b00      	cmp	r3, #0
     288:	d013      	beq.n	2b2 <_usart_set_config+0xaa>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     28a:	683b      	ldr	r3, [r7, #0]
     28c:	691d      	ldr	r5, [r3, #16]
     28e:	69bb      	ldr	r3, [r7, #24]
     290:	b2db      	uxtb	r3, r3
     292:	1c18      	adds	r0, r3, #0
     294:	4b50      	ldr	r3, [pc, #320]	; (3d8 <_usart_set_config+0x1d0>)
     296:	4798      	blx	r3
     298:	1c02      	adds	r2, r0, #0
     29a:	2327      	movs	r3, #39	; 0x27
     29c:	18fc      	adds	r4, r7, r3
     29e:	230e      	movs	r3, #14
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	1c28      	adds	r0, r5, #0
     2a4:	1c11      	adds	r1, r2, #0
     2a6:	1c1a      	adds	r2, r3, #0
     2a8:	4b4c      	ldr	r3, [pc, #304]	; (3dc <_usart_set_config+0x1d4>)
     2aa:	4798      	blx	r3
     2ac:	1c03      	adds	r3, r0, #0
     2ae:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     2b0:	e033      	b.n	31a <_usart_set_config+0x112>
     2b2:	e032      	b.n	31a <_usart_set_config+0x112>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     2b4:	683b      	ldr	r3, [r7, #0]
     2b6:	7ddb      	ldrb	r3, [r3, #23]
     2b8:	2b00      	cmp	r3, #0
     2ba:	d014      	beq.n	2e6 <_usart_set_config+0xde>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     2bc:	683b      	ldr	r3, [r7, #0]
     2be:	6918      	ldr	r0, [r3, #16]
     2c0:	683b      	ldr	r3, [r7, #0]
     2c2:	6999      	ldr	r1, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
     2c4:	2327      	movs	r3, #39	; 0x27
     2c6:	18fc      	adds	r4, r7, r3
     2c8:	230e      	movs	r3, #14
     2ca:	18fa      	adds	r2, r7, r3
     2cc:	2317      	movs	r3, #23
     2ce:	18fb      	adds	r3, r7, r3
     2d0:	781d      	ldrb	r5, [r3, #0]
     2d2:	2316      	movs	r3, #22
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	9300      	str	r3, [sp, #0]
     2da:	1c2b      	adds	r3, r5, #0
     2dc:	4d40      	ldr	r5, [pc, #256]	; (3e0 <_usart_set_config+0x1d8>)
     2de:	47a8      	blx	r5
     2e0:	1c03      	adds	r3, r0, #0
     2e2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     2e4:	e018      	b.n	318 <_usart_set_config+0x110>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     2e6:	683b      	ldr	r3, [r7, #0]
     2e8:	691e      	ldr	r6, [r3, #16]
     2ea:	69bb      	ldr	r3, [r7, #24]
     2ec:	b2db      	uxtb	r3, r3
     2ee:	1c18      	adds	r0, r3, #0
     2f0:	4b39      	ldr	r3, [pc, #228]	; (3d8 <_usart_set_config+0x1d0>)
     2f2:	4798      	blx	r3
     2f4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     2f6:	2327      	movs	r3, #39	; 0x27
     2f8:	18fc      	adds	r4, r7, r3
     2fa:	230e      	movs	r3, #14
     2fc:	18fa      	adds	r2, r7, r3
     2fe:	2317      	movs	r3, #23
     300:	18fb      	adds	r3, r7, r3
     302:	781d      	ldrb	r5, [r3, #0]
     304:	2316      	movs	r3, #22
     306:	18fb      	adds	r3, r7, r3
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	9300      	str	r3, [sp, #0]
     30c:	1c30      	adds	r0, r6, #0
     30e:	1c2b      	adds	r3, r5, #0
     310:	4d33      	ldr	r5, [pc, #204]	; (3e0 <_usart_set_config+0x1d8>)
     312:	47a8      	blx	r5
     314:	1c03      	adds	r3, r0, #0
     316:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     318:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     31a:	2327      	movs	r3, #39	; 0x27
     31c:	18fb      	adds	r3, r7, r3
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	2b00      	cmp	r3, #0
     322:	d003      	beq.n	32c <_usart_set_config+0x124>
		/* Abort */
		return status_code;
     324:	2327      	movs	r3, #39	; 0x27
     326:	18fb      	adds	r3, r7, r3
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	e04f      	b.n	3cc <_usart_set_config+0x1c4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	1c18      	adds	r0, r3, #0
     330:	4b2c      	ldr	r3, [pc, #176]	; (3e4 <_usart_set_config+0x1dc>)
     332:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     334:	230e      	movs	r3, #14
     336:	18fb      	adds	r3, r7, r3
     338:	881a      	ldrh	r2, [r3, #0]
     33a:	6a3b      	ldr	r3, [r7, #32]
     33c:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= transfer_mode;
     33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     340:	693b      	ldr	r3, [r7, #16]
     342:	4313      	orrs	r3, r2
     344:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (config->use_external_clock == false) {
     346:	683b      	ldr	r3, [r7, #0]
     348:	7ddb      	ldrb	r3, [r3, #23]
     34a:	2201      	movs	r2, #1
     34c:	4053      	eors	r3, r2
     34e:	b2db      	uxtb	r3, r3
     350:	2b00      	cmp	r3, #0
     352:	d003      	beq.n	35c <_usart_set_config+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     356:	2204      	movs	r2, #4
     358:	4313      	orrs	r3, r2
     35a:	62fb      	str	r3, [r7, #44]	; 0x2c
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     35c:	683b      	ldr	r3, [r7, #0]
     35e:	7d1b      	ldrb	r3, [r3, #20]
     360:	045a      	lsls	r2, r3, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     362:	683b      	ldr	r3, [r7, #0]
     364:	7d5b      	ldrb	r3, [r3, #21]
     366:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     368:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     36a:	62bb      	str	r3, [r7, #40]	; 0x28
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     36c:	683b      	ldr	r3, [r7, #0]
     36e:	7adb      	ldrb	r3, [r3, #11]
     370:	1c1a      	adds	r2, r3, #0
     372:	6abb      	ldr	r3, [r7, #40]	; 0x28
     374:	4313      	orrs	r3, r2
     376:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     378:	683b      	ldr	r3, [r7, #0]
     37a:	891b      	ldrh	r3, [r3, #8]
     37c:	2bff      	cmp	r3, #255	; 0xff
     37e:	d00a      	beq.n	396 <_usart_set_config+0x18e>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     382:	2280      	movs	r2, #128	; 0x80
     384:	0452      	lsls	r2, r2, #17
     386:	4313      	orrs	r3, r2
     388:	62fb      	str	r3, [r7, #44]	; 0x2c
		ctrlb |= config->parity;
     38a:	683b      	ldr	r3, [r7, #0]
     38c:	891b      	ldrh	r3, [r3, #8]
     38e:	1c1a      	adds	r2, r3, #0
     390:	6abb      	ldr	r3, [r7, #40]	; 0x28
     392:	4313      	orrs	r3, r2
     394:	62bb      	str	r3, [r7, #40]	; 0x28
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     396:	683b      	ldr	r3, [r7, #0]
     398:	7f1b      	ldrb	r3, [r3, #28]
     39a:	2b00      	cmp	r3, #0
     39c:	d103      	bne.n	3a6 <_usart_set_config+0x19e>
     39e:	4b12      	ldr	r3, [pc, #72]	; (3e8 <_usart_set_config+0x1e0>)
     3a0:	4798      	blx	r3
     3a2:	1e03      	subs	r3, r0, #0
     3a4:	d003      	beq.n	3ae <_usart_set_config+0x1a6>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3a8:	2280      	movs	r2, #128	; 0x80
     3aa:	4313      	orrs	r3, r2
     3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	1c18      	adds	r0, r3, #0
     3b2:	4b0c      	ldr	r3, [pc, #48]	; (3e4 <_usart_set_config+0x1dc>)
     3b4:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     3b6:	6a3b      	ldr	r3, [r7, #32]
     3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
     3ba:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	1c18      	adds	r0, r3, #0
     3c0:	4b08      	ldr	r3, [pc, #32]	; (3e4 <_usart_set_config+0x1dc>)
     3c2:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     3c4:	6a3b      	ldr	r3, [r7, #32]
     3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     3c8:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
     3ca:	2300      	movs	r3, #0
}
     3cc:	1c18      	adds	r0, r3, #0
     3ce:	46bd      	mov	sp, r7
     3d0:	b00d      	add	sp, #52	; 0x34
     3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d4:	00003cf1 	.word	0x00003cf1
     3d8:	000058c9 	.word	0x000058c9
     3dc:	0000383d 	.word	0x0000383d
     3e0:	000038b9 	.word	0x000038b9
     3e4:	000001e9 	.word	0x000001e9
     3e8:	0000019d 	.word	0x0000019d

000003ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     3ec:	b590      	push	{r4, r7, lr}
     3ee:	b093      	sub	sp, #76	; 0x4c
     3f0:	af00      	add	r7, sp, #0
     3f2:	60f8      	str	r0, [r7, #12]
     3f4:	60b9      	str	r1, [r7, #8]
     3f6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
     3f8:	233b      	movs	r3, #59	; 0x3b
     3fa:	18fb      	adds	r3, r7, r3
     3fc:	2200      	movs	r2, #0
     3fe:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     400:	68fb      	ldr	r3, [r7, #12]
     402:	68ba      	ldr	r2, [r7, #8]
     404:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     406:	68fb      	ldr	r3, [r7, #12]
     408:	681b      	ldr	r3, [r3, #0]
     40a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	1c18      	adds	r0, r3, #0
     412:	4b7f      	ldr	r3, [pc, #508]	; (610 <usart_init+0x224>)
     414:	4798      	blx	r3
     416:	1c03      	adds	r3, r0, #0
     418:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     41c:	3302      	adds	r3, #2
     41e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     422:	330d      	adds	r3, #13
     424:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     428:	681b      	ldr	r3, [r3, #0]
     42a:	2201      	movs	r2, #1
     42c:	4013      	ands	r3, r2
     42e:	d001      	beq.n	434 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     430:	2305      	movs	r3, #5
     432:	e0e8      	b.n	606 <usart_init+0x21a>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     436:	681b      	ldr	r3, [r3, #0]
     438:	2202      	movs	r2, #2
     43a:	4013      	ands	r3, r2
     43c:	d001      	beq.n	442 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     43e:	231c      	movs	r3, #28
     440:	e0e1      	b.n	606 <usart_init+0x21a>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     444:	2201      	movs	r2, #1
     446:	409a      	lsls	r2, r3
     448:	1c13      	adds	r3, r2, #0
     44a:	2002      	movs	r0, #2
     44c:	1c19      	adds	r1, r3, #0
     44e:	4b71      	ldr	r3, [pc, #452]	; (614 <usart_init+0x228>)
     450:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     452:	2324      	movs	r3, #36	; 0x24
     454:	18fb      	adds	r3, r7, r3
     456:	1c18      	adds	r0, r3, #0
     458:	4b6f      	ldr	r3, [pc, #444]	; (618 <usart_init+0x22c>)
     45a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	7f5a      	ldrb	r2, [r3, #29]
     460:	2324      	movs	r3, #36	; 0x24
     462:	18fb      	adds	r3, r7, r3
     464:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     466:	6abb      	ldr	r3, [r7, #40]	; 0x28
     468:	b2da      	uxtb	r2, r3
     46a:	2324      	movs	r3, #36	; 0x24
     46c:	18fb      	adds	r3, r7, r3
     46e:	1c10      	adds	r0, r2, #0
     470:	1c19      	adds	r1, r3, #0
     472:	4b6a      	ldr	r3, [pc, #424]	; (61c <usart_init+0x230>)
     474:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     476:	6abb      	ldr	r3, [r7, #40]	; 0x28
     478:	b2db      	uxtb	r3, r3
     47a:	1c18      	adds	r0, r3, #0
     47c:	4b68      	ldr	r3, [pc, #416]	; (620 <usart_init+0x234>)
     47e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     480:	687b      	ldr	r3, [r7, #4]
     482:	7f5b      	ldrb	r3, [r3, #29]
     484:	1c18      	adds	r0, r3, #0
     486:	2100      	movs	r1, #0
     488:	4b66      	ldr	r3, [pc, #408]	; (624 <usart_init+0x238>)
     48a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	7ada      	ldrb	r2, [r3, #11]
     490:	68fb      	ldr	r3, [r7, #12]
     492:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     494:	687b      	ldr	r3, [r7, #4]
     496:	7d1a      	ldrb	r2, [r3, #20]
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	7d5a      	ldrb	r2, [r3, #21]
     4a0:	68fb      	ldr	r3, [r7, #12]
     4a2:	71da      	strb	r2, [r3, #7]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
     4a4:	233b      	movs	r3, #59	; 0x3b
     4a6:	18fc      	adds	r4, r7, r3
     4a8:	68fa      	ldr	r2, [r7, #12]
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	1c10      	adds	r0, r2, #0
     4ae:	1c19      	adds	r1, r3, #0
     4b0:	4b5d      	ldr	r3, [pc, #372]	; (628 <usart_init+0x23c>)
     4b2:	4798      	blx	r3
     4b4:	1c03      	adds	r3, r0, #0
     4b6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
     4b8:	233b      	movs	r3, #59	; 0x3b
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	2b00      	cmp	r3, #0
     4c0:	d003      	beq.n	4ca <usart_init+0xde>
		return status_code;
     4c2:	233b      	movs	r3, #59	; 0x3b
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	781b      	ldrb	r3, [r3, #0]
     4c8:	e09d      	b.n	606 <usart_init+0x21a>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     4ca:	2320      	movs	r3, #32
     4cc:	18fb      	adds	r3, r7, r3
     4ce:	1c18      	adds	r0, r3, #0
     4d0:	4b56      	ldr	r3, [pc, #344]	; (62c <usart_init+0x240>)
     4d2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4d4:	2320      	movs	r3, #32
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	2200      	movs	r2, #0
     4da:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     4dc:	2320      	movs	r3, #32
     4de:	18fb      	adds	r3, r7, r3
     4e0:	2200      	movs	r2, #0
     4e2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	6a1a      	ldr	r2, [r3, #32]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     4e8:	2310      	movs	r3, #16
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     4f2:	2310      	movs	r3, #16
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     4fc:	2310      	movs	r3, #16
     4fe:	18fb      	adds	r3, r7, r3
     500:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     502:	687b      	ldr	r3, [r7, #4]
     504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     506:	2310      	movs	r3, #16
     508:	18fb      	adds	r3, r7, r3
     50a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     50c:	2347      	movs	r3, #71	; 0x47
     50e:	18fb      	adds	r3, r7, r3
     510:	2200      	movs	r2, #0
     512:	701a      	strb	r2, [r3, #0]
     514:	e02c      	b.n	570 <usart_init+0x184>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     516:	2347      	movs	r3, #71	; 0x47
     518:	18fb      	adds	r3, r7, r3
     51a:	781a      	ldrb	r2, [r3, #0]
     51c:	2310      	movs	r3, #16
     51e:	18fb      	adds	r3, r7, r3
     520:	0092      	lsls	r2, r2, #2
     522:	58d3      	ldr	r3, [r2, r3]
     524:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     528:	2b00      	cmp	r3, #0
     52a:	d109      	bne.n	540 <usart_init+0x154>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     52c:	68ba      	ldr	r2, [r7, #8]
     52e:	2347      	movs	r3, #71	; 0x47
     530:	18fb      	adds	r3, r7, r3
     532:	781b      	ldrb	r3, [r3, #0]
     534:	1c10      	adds	r0, r2, #0
     536:	1c19      	adds	r1, r3, #0
     538:	4b3d      	ldr	r3, [pc, #244]	; (630 <usart_init+0x244>)
     53a:	4798      	blx	r3
     53c:	1c03      	adds	r3, r0, #0
     53e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     542:	3301      	adds	r3, #1
     544:	d00d      	beq.n	562 <usart_init+0x176>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     548:	b2da      	uxtb	r2, r3
     54a:	2320      	movs	r3, #32
     54c:	18fb      	adds	r3, r7, r3
     54e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     552:	0c1b      	lsrs	r3, r3, #16
     554:	b2da      	uxtb	r2, r3
     556:	2320      	movs	r3, #32
     558:	18fb      	adds	r3, r7, r3
     55a:	1c10      	adds	r0, r2, #0
     55c:	1c19      	adds	r1, r3, #0
     55e:	4b35      	ldr	r3, [pc, #212]	; (634 <usart_init+0x248>)
     560:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     562:	2347      	movs	r3, #71	; 0x47
     564:	18fb      	adds	r3, r7, r3
     566:	781a      	ldrb	r2, [r3, #0]
     568:	2347      	movs	r3, #71	; 0x47
     56a:	18fb      	adds	r3, r7, r3
     56c:	3201      	adds	r2, #1
     56e:	701a      	strb	r2, [r3, #0]
     570:	2347      	movs	r3, #71	; 0x47
     572:	18fb      	adds	r3, r7, r3
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b03      	cmp	r3, #3
     578:	d9cd      	bls.n	516 <usart_init+0x12a>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     57a:	2300      	movs	r3, #0
     57c:	63fb      	str	r3, [r7, #60]	; 0x3c
     57e:	e008      	b.n	592 <usart_init+0x1a6>
		module->callback[i]            = NULL;
     580:	68fb      	ldr	r3, [r7, #12]
     582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     584:	3202      	adds	r2, #2
     586:	0092      	lsls	r2, r2, #2
     588:	2100      	movs	r1, #0
     58a:	50d1      	str	r1, [r2, r3]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     58e:	3301      	adds	r3, #1
     590:	63fb      	str	r3, [r7, #60]	; 0x3c
     592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     594:	2b02      	cmp	r3, #2
     596:	d9f3      	bls.n	580 <usart_init+0x194>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
     598:	68fb      	ldr	r3, [r7, #12]
     59a:	2200      	movs	r2, #0
     59c:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
     59e:	68fb      	ldr	r3, [r7, #12]
     5a0:	2200      	movs	r2, #0
     5a2:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
     5a4:	68fb      	ldr	r3, [r7, #12]
     5a6:	2200      	movs	r2, #0
     5a8:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
     5aa:	68fb      	ldr	r3, [r7, #12]
     5ac:	2200      	movs	r2, #0
     5ae:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	2220      	movs	r2, #32
     5b4:	2100      	movs	r1, #0
     5b6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	2221      	movs	r2, #33	; 0x21
     5bc:	2100      	movs	r1, #0
     5be:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
     5c0:	68fb      	ldr	r3, [r7, #12]
     5c2:	2222      	movs	r2, #34	; 0x22
     5c4:	2100      	movs	r1, #0
     5c6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
     5c8:	68fb      	ldr	r3, [r7, #12]
     5ca:	2223      	movs	r2, #35	; 0x23
     5cc:	2100      	movs	r1, #0
     5ce:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     5d0:	68fb      	ldr	r3, [r7, #12]
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	2227      	movs	r2, #39	; 0x27
     5d6:	18bc      	adds	r4, r7, r2
     5d8:	1c18      	adds	r0, r3, #0
     5da:	4b0d      	ldr	r3, [pc, #52]	; (610 <usart_init+0x224>)
     5dc:	4798      	blx	r3
     5de:	1c03      	adds	r3, r0, #0
     5e0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     5e2:	2327      	movs	r3, #39	; 0x27
     5e4:	18fb      	adds	r3, r7, r3
     5e6:	781a      	ldrb	r2, [r3, #0]
     5e8:	4b13      	ldr	r3, [pc, #76]	; (638 <usart_init+0x24c>)
     5ea:	1c10      	adds	r0, r2, #0
     5ec:	1c19      	adds	r1, r3, #0
     5ee:	4b13      	ldr	r3, [pc, #76]	; (63c <usart_init+0x250>)
     5f0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     5f2:	2327      	movs	r3, #39	; 0x27
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	781a      	ldrb	r2, [r3, #0]
     5f8:	4b11      	ldr	r3, [pc, #68]	; (640 <usart_init+0x254>)
     5fa:	0092      	lsls	r2, r2, #2
     5fc:	68f9      	ldr	r1, [r7, #12]
     5fe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
     600:	233b      	movs	r3, #59	; 0x3b
     602:	18fb      	adds	r3, r7, r3
     604:	781b      	ldrb	r3, [r3, #0]
}
     606:	1c18      	adds	r0, r3, #0
     608:	46bd      	mov	sp, r7
     60a:	b013      	add	sp, #76	; 0x4c
     60c:	bd90      	pop	{r4, r7, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00003cf1 	.word	0x00003cf1
     614:	00000119 	.word	0x00000119
     618:	00000105 	.word	0x00000105
     61c:	000057a5 	.word	0x000057a5
     620:	000057e9 	.word	0x000057e9
     624:	00003aa9 	.word	0x00003aa9
     628:	00000209 	.word	0x00000209
     62c:	00000175 	.word	0x00000175
     630:	00003b35 	.word	0x00003b35
     634:	00005a91 	.word	0x00005a91
     638:	00000a21 	.word	0x00000a21
     63c:	00003d51 	.word	0x00003d51
     640:	20000758 	.word	0x20000758

00000644 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     644:	b580      	push	{r7, lr}
     646:	b084      	sub	sp, #16
     648:	af00      	add	r7, sp, #0
     64a:	6078      	str	r0, [r7, #4]
     64c:	1c0a      	adds	r2, r1, #0
     64e:	1cbb      	adds	r3, r7, #2
     650:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     652:	687b      	ldr	r3, [r7, #4]
     654:	681b      	ldr	r3, [r3, #0]
     656:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     658:	687b      	ldr	r3, [r7, #4]
     65a:	79db      	ldrb	r3, [r3, #7]
     65c:	2201      	movs	r2, #1
     65e:	4053      	eors	r3, r2
     660:	b2db      	uxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d001      	beq.n	66a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
     666:	231c      	movs	r3, #28
     668:	e017      	b.n	69a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	8bdb      	ldrh	r3, [r3, #30]
     66e:	b29b      	uxth	r3, r3
     670:	2b00      	cmp	r3, #0
     672:	d001      	beq.n	678 <usart_write_wait+0x34>
		return STATUS_BUSY;
     674:	2305      	movs	r3, #5
     676:	e010      	b.n	69a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     678:	687b      	ldr	r3, [r7, #4]
     67a:	1c18      	adds	r0, r3, #0
     67c:	4b09      	ldr	r3, [pc, #36]	; (6a4 <usart_write_wait+0x60>)
     67e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     680:	68fb      	ldr	r3, [r7, #12]
     682:	1cba      	adds	r2, r7, #2
     684:	8812      	ldrh	r2, [r2, #0]
     686:	831a      	strh	r2, [r3, #24]

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     688:	46c0      	nop			; (mov r8, r8)
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	7b9b      	ldrb	r3, [r3, #14]
     68e:	b2db      	uxtb	r3, r3
     690:	1c1a      	adds	r2, r3, #0
     692:	2302      	movs	r3, #2
     694:	4013      	ands	r3, r2
     696:	d0f8      	beq.n	68a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     698:	2300      	movs	r3, #0
}
     69a:	1c18      	adds	r0, r3, #0
     69c:	46bd      	mov	sp, r7
     69e:	b004      	add	sp, #16
     6a0:	bd80      	pop	{r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	000001e9 	.word	0x000001e9

000006a8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b08a      	sub	sp, #40	; 0x28
     6ac:	af00      	add	r7, sp, #0
     6ae:	60f8      	str	r0, [r7, #12]
     6b0:	60b9      	str	r1, [r7, #8]
     6b2:	1dbb      	adds	r3, r7, #6
     6b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     6b6:	1dbb      	adds	r3, r7, #6
     6b8:	881b      	ldrh	r3, [r3, #0]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d101      	bne.n	6c2 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     6be:	2317      	movs	r3, #23
     6c0:	e07b      	b.n	7ba <usart_write_buffer_wait+0x112>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     6c2:	68fb      	ldr	r3, [r7, #12]
     6c4:	79db      	ldrb	r3, [r3, #7]
     6c6:	2201      	movs	r2, #1
     6c8:	4053      	eors	r3, r2
     6ca:	b2db      	uxtb	r3, r3
     6cc:	2b00      	cmp	r3, #0
     6ce:	d001      	beq.n	6d4 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
     6d0:	231c      	movs	r3, #28
     6d2:	e072      	b.n	7ba <usart_write_buffer_wait+0x112>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6d4:	68fb      	ldr	r3, [r7, #12]
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     6da:	68fb      	ldr	r3, [r7, #12]
     6dc:	1c18      	adds	r0, r3, #0
     6de:	4b39      	ldr	r3, [pc, #228]	; (7c4 <usart_write_buffer_wait+0x11c>)
     6e0:	4798      	blx	r3

	uint16_t tx_pos = 0;
     6e2:	2326      	movs	r3, #38	; 0x26
     6e4:	18fb      	adds	r3, r7, r3
     6e6:	2200      	movs	r2, #0
     6e8:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
     6ea:	e046      	b.n	77a <usart_write_buffer_wait+0xd2>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     6ec:	2300      	movs	r3, #0
     6ee:	623b      	str	r3, [r7, #32]
     6f0:	e010      	b.n	714 <usart_write_buffer_wait+0x6c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     6f2:	697b      	ldr	r3, [r7, #20]
     6f4:	7b9b      	ldrb	r3, [r3, #14]
     6f6:	b2db      	uxtb	r3, r3
     6f8:	1c1a      	adds	r2, r3, #0
     6fa:	2301      	movs	r3, #1
     6fc:	4013      	ands	r3, r2
     6fe:	d000      	beq.n	702 <usart_write_buffer_wait+0x5a>
				break;
     700:	e00c      	b.n	71c <usart_write_buffer_wait+0x74>
			} else if (i == USART_TIMEOUT) {
     702:	6a3b      	ldr	r3, [r7, #32]
     704:	4a30      	ldr	r2, [pc, #192]	; (7c8 <usart_write_buffer_wait+0x120>)
     706:	4293      	cmp	r3, r2
     708:	d101      	bne.n	70e <usart_write_buffer_wait+0x66>
				return STATUS_ERR_TIMEOUT;
     70a:	2312      	movs	r3, #18
     70c:	e055      	b.n	7ba <usart_write_buffer_wait+0x112>

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     70e:	6a3b      	ldr	r3, [r7, #32]
     710:	3301      	adds	r3, #1
     712:	623b      	str	r3, [r7, #32]
     714:	6a3b      	ldr	r3, [r7, #32]
     716:	4a2c      	ldr	r2, [pc, #176]	; (7c8 <usart_write_buffer_wait+0x120>)
     718:	4293      	cmp	r3, r2
     71a:	d9ea      	bls.n	6f2 <usart_write_buffer_wait+0x4a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     71c:	2326      	movs	r3, #38	; 0x26
     71e:	18fb      	adds	r3, r7, r3
     720:	881b      	ldrh	r3, [r3, #0]
     722:	2226      	movs	r2, #38	; 0x26
     724:	18ba      	adds	r2, r7, r2
     726:	1c59      	adds	r1, r3, #1
     728:	8011      	strh	r1, [r2, #0]
     72a:	1c1a      	adds	r2, r3, #0
     72c:	68bb      	ldr	r3, [r7, #8]
     72e:	189b      	adds	r3, r3, r2
     730:	781a      	ldrb	r2, [r3, #0]
     732:	231e      	movs	r3, #30
     734:	18fb      	adds	r3, r7, r3
     736:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     738:	68fb      	ldr	r3, [r7, #12]
     73a:	795b      	ldrb	r3, [r3, #5]
     73c:	2b01      	cmp	r3, #1
     73e:	d114      	bne.n	76a <usart_write_buffer_wait+0xc2>
			data_to_send |= (tx_data[tx_pos++] << 8);
     740:	2326      	movs	r3, #38	; 0x26
     742:	18fb      	adds	r3, r7, r3
     744:	881b      	ldrh	r3, [r3, #0]
     746:	2226      	movs	r2, #38	; 0x26
     748:	18ba      	adds	r2, r7, r2
     74a:	1c59      	adds	r1, r3, #1
     74c:	8011      	strh	r1, [r2, #0]
     74e:	1c1a      	adds	r2, r3, #0
     750:	68bb      	ldr	r3, [r7, #8]
     752:	189b      	adds	r3, r3, r2
     754:	781b      	ldrb	r3, [r3, #0]
     756:	021b      	lsls	r3, r3, #8
     758:	b29a      	uxth	r2, r3
     75a:	231e      	movs	r3, #30
     75c:	18fb      	adds	r3, r7, r3
     75e:	881b      	ldrh	r3, [r3, #0]
     760:	4313      	orrs	r3, r2
     762:	b29a      	uxth	r2, r3
     764:	231e      	movs	r3, #30
     766:	18fb      	adds	r3, r7, r3
     768:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     76a:	68fa      	ldr	r2, [r7, #12]
     76c:	231e      	movs	r3, #30
     76e:	18fb      	adds	r3, r7, r3
     770:	881b      	ldrh	r3, [r3, #0]
     772:	1c10      	adds	r0, r2, #0
     774:	1c19      	adds	r1, r3, #0
     776:	4b15      	ldr	r3, [pc, #84]	; (7cc <usart_write_buffer_wait+0x124>)
     778:	4798      	blx	r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     77a:	1dbb      	adds	r3, r7, #6
     77c:	881b      	ldrh	r3, [r3, #0]
     77e:	1dba      	adds	r2, r7, #6
     780:	1e59      	subs	r1, r3, #1
     782:	8011      	strh	r1, [r2, #0]
     784:	2b00      	cmp	r3, #0
     786:	d1b1      	bne.n	6ec <usart_write_buffer_wait+0x44>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     788:	2300      	movs	r3, #0
     78a:	61bb      	str	r3, [r7, #24]
     78c:	e010      	b.n	7b0 <usart_write_buffer_wait+0x108>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     78e:	697b      	ldr	r3, [r7, #20]
     790:	7b9b      	ldrb	r3, [r3, #14]
     792:	b2db      	uxtb	r3, r3
     794:	1c1a      	adds	r2, r3, #0
     796:	2302      	movs	r3, #2
     798:	4013      	ands	r3, r2
     79a:	d000      	beq.n	79e <usart_write_buffer_wait+0xf6>
			break;
     79c:	e00c      	b.n	7b8 <usart_write_buffer_wait+0x110>
		} else if (i == USART_TIMEOUT) {
     79e:	69bb      	ldr	r3, [r7, #24]
     7a0:	4a09      	ldr	r2, [pc, #36]	; (7c8 <usart_write_buffer_wait+0x120>)
     7a2:	4293      	cmp	r3, r2
     7a4:	d101      	bne.n	7aa <usart_write_buffer_wait+0x102>
			return STATUS_ERR_TIMEOUT;
     7a6:	2312      	movs	r3, #18
     7a8:	e007      	b.n	7ba <usart_write_buffer_wait+0x112>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     7aa:	69bb      	ldr	r3, [r7, #24]
     7ac:	3301      	adds	r3, #1
     7ae:	61bb      	str	r3, [r7, #24]
     7b0:	69bb      	ldr	r3, [r7, #24]
     7b2:	4a05      	ldr	r2, [pc, #20]	; (7c8 <usart_write_buffer_wait+0x120>)
     7b4:	4293      	cmp	r3, r2
     7b6:	d9ea      	bls.n	78e <usart_write_buffer_wait+0xe6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     7b8:	2300      	movs	r3, #0
}
     7ba:	1c18      	adds	r0, r3, #0
     7bc:	46bd      	mov	sp, r7
     7be:	b00a      	add	sp, #40	; 0x28
     7c0:	bd80      	pop	{r7, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	000001e9 	.word	0x000001e9
     7c8:	0000ffff 	.word	0x0000ffff
     7cc:	00000645 	.word	0x00000645

000007d0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     7d4:	4b01      	ldr	r3, [pc, #4]	; (7dc <system_interrupt_enter_critical_section+0xc>)
     7d6:	4798      	blx	r3
}
     7d8:	46bd      	mov	sp, r7
     7da:	bd80      	pop	{r7, pc}
     7dc:	00003639 	.word	0x00003639

000007e0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     7e0:	b580      	push	{r7, lr}
     7e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     7e4:	4b01      	ldr	r3, [pc, #4]	; (7ec <system_interrupt_leave_critical_section+0xc>)
     7e6:	4798      	blx	r3
}
     7e8:	46bd      	mov	sp, r7
     7ea:	bd80      	pop	{r7, pc}
     7ec:	00003689 	.word	0x00003689

000007f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b084      	sub	sp, #16
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	8a1b      	ldrh	r3, [r3, #16]
     802:	b29b      	uxth	r3, r3
     804:	1c1a      	adds	r2, r3, #0
     806:	2380      	movs	r3, #128	; 0x80
     808:	021b      	lsls	r3, r3, #8
     80a:	4013      	ands	r3, r2
     80c:	1e5a      	subs	r2, r3, #1
     80e:	4193      	sbcs	r3, r2
     810:	b2db      	uxtb	r3, r3
#endif
}
     812:	1c18      	adds	r0, r3, #0
     814:	46bd      	mov	sp, r7
     816:	b004      	add	sp, #16
     818:	bd80      	pop	{r7, pc}
     81a:	46c0      	nop			; (mov r8, r8)

0000081c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     824:	46c0      	nop			; (mov r8, r8)
     826:	687b      	ldr	r3, [r7, #4]
     828:	1c18      	adds	r0, r3, #0
     82a:	4b03      	ldr	r3, [pc, #12]	; (838 <_usart_wait_for_sync+0x1c>)
     82c:	4798      	blx	r3
     82e:	1e03      	subs	r3, r0, #0
     830:	d1f9      	bne.n	826 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}
     838:	000007f1 	.word	0x000007f1

0000083c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     83c:	b580      	push	{r7, lr}
     83e:	b086      	sub	sp, #24
     840:	af00      	add	r7, sp, #0
     842:	60f8      	str	r0, [r7, #12]
     844:	60b9      	str	r1, [r7, #8]
     846:	1dbb      	adds	r3, r7, #6
     848:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
     850:	4b0f      	ldr	r3, [pc, #60]	; (890 <_usart_write_buffer+0x54>)
     852:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     854:	68fb      	ldr	r3, [r7, #12]
     856:	8bdb      	ldrh	r3, [r3, #30]
     858:	b29b      	uxth	r3, r3
     85a:	2b00      	cmp	r3, #0
     85c:	d003      	beq.n	866 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
     85e:	4b0d      	ldr	r3, [pc, #52]	; (894 <_usart_write_buffer+0x58>)
     860:	4798      	blx	r3
		return STATUS_BUSY;
     862:	2305      	movs	r3, #5
     864:	e010      	b.n	888 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     866:	68fb      	ldr	r3, [r7, #12]
     868:	1dba      	adds	r2, r7, #6
     86a:	8812      	ldrh	r2, [r2, #0]
     86c:	83da      	strh	r2, [r3, #30]

	system_interrupt_leave_critical_section();
     86e:	4b09      	ldr	r3, [pc, #36]	; (894 <_usart_write_buffer+0x58>)
     870:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
     872:	68fb      	ldr	r3, [r7, #12]
     874:	68ba      	ldr	r2, [r7, #8]
     876:	619a      	str	r2, [r3, #24]
	module->tx_status                  = STATUS_BUSY;
     878:	68fb      	ldr	r3, [r7, #12]
     87a:	2223      	movs	r2, #35	; 0x23
     87c:	2105      	movs	r1, #5
     87e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     880:	697b      	ldr	r3, [r7, #20]
     882:	2201      	movs	r2, #1
     884:	735a      	strb	r2, [r3, #13]

	return STATUS_OK;
     886:	2300      	movs	r3, #0
}
     888:	1c18      	adds	r0, r3, #0
     88a:	46bd      	mov	sp, r7
     88c:	b006      	add	sp, #24
     88e:	bd80      	pop	{r7, pc}
     890:	000007d1 	.word	0x000007d1
     894:	000007e1 	.word	0x000007e1

00000898 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     898:	b580      	push	{r7, lr}
     89a:	b086      	sub	sp, #24
     89c:	af00      	add	r7, sp, #0
     89e:	60f8      	str	r0, [r7, #12]
     8a0:	60b9      	str	r1, [r7, #8]
     8a2:	1dbb      	adds	r3, r7, #6
     8a4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
     8ac:	4b0f      	ldr	r3, [pc, #60]	; (8ec <_usart_read_buffer+0x54>)
     8ae:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     8b0:	68fb      	ldr	r3, [r7, #12]
     8b2:	8b9b      	ldrh	r3, [r3, #28]
     8b4:	b29b      	uxth	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	d003      	beq.n	8c2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
     8ba:	4b0d      	ldr	r3, [pc, #52]	; (8f0 <_usart_read_buffer+0x58>)
     8bc:	4798      	blx	r3
		return STATUS_BUSY;
     8be:	2305      	movs	r3, #5
     8c0:	e010      	b.n	8e4 <_usart_read_buffer+0x4c>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     8c2:	68fb      	ldr	r3, [r7, #12]
     8c4:	1dba      	adds	r2, r7, #6
     8c6:	8812      	ldrh	r2, [r2, #0]
     8c8:	839a      	strh	r2, [r3, #28]

	system_interrupt_leave_critical_section();
     8ca:	4b09      	ldr	r3, [pc, #36]	; (8f0 <_usart_read_buffer+0x58>)
     8cc:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
     8ce:	68fb      	ldr	r3, [r7, #12]
     8d0:	68ba      	ldr	r2, [r7, #8]
     8d2:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	2222      	movs	r2, #34	; 0x22
     8d8:	2105      	movs	r1, #5
     8da:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     8dc:	697b      	ldr	r3, [r7, #20]
     8de:	2204      	movs	r2, #4
     8e0:	735a      	strb	r2, [r3, #13]
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     8e2:	2300      	movs	r3, #0
}
     8e4:	1c18      	adds	r0, r3, #0
     8e6:	46bd      	mov	sp, r7
     8e8:	b006      	add	sp, #24
     8ea:	bd80      	pop	{r7, pc}
     8ec:	000007d1 	.word	0x000007d1
     8f0:	000007e1 	.word	0x000007e1

000008f4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	af00      	add	r7, sp, #0
     8fa:	60f8      	str	r0, [r7, #12]
     8fc:	60b9      	str	r1, [r7, #8]
     8fe:	1dfb      	adds	r3, r7, #7
     900:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     902:	1dfb      	adds	r3, r7, #7
     904:	781a      	ldrb	r2, [r3, #0]
     906:	68fb      	ldr	r3, [r7, #12]
     908:	3202      	adds	r2, #2
     90a:	0092      	lsls	r2, r2, #2
     90c:	68b9      	ldr	r1, [r7, #8]
     90e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     910:	68fb      	ldr	r3, [r7, #12]
     912:	2220      	movs	r2, #32
     914:	5c9b      	ldrb	r3, [r3, r2]
     916:	b2d9      	uxtb	r1, r3
     918:	1dfb      	adds	r3, r7, #7
     91a:	781b      	ldrb	r3, [r3, #0]
     91c:	2201      	movs	r2, #1
     91e:	409a      	lsls	r2, r3
     920:	1c13      	adds	r3, r2, #0
     922:	b2db      	uxtb	r3, r3
     924:	1c0a      	adds	r2, r1, #0
     926:	4313      	orrs	r3, r2
     928:	b2db      	uxtb	r3, r3
     92a:	b2d9      	uxtb	r1, r3
     92c:	68fb      	ldr	r3, [r7, #12]
     92e:	2220      	movs	r2, #32
     930:	5499      	strb	r1, [r3, r2]
}
     932:	46bd      	mov	sp, r7
     934:	b004      	add	sp, #16
     936:	bd80      	pop	{r7, pc}

00000938 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     938:	b580      	push	{r7, lr}
     93a:	b084      	sub	sp, #16
     93c:	af00      	add	r7, sp, #0
     93e:	60f8      	str	r0, [r7, #12]
     940:	60b9      	str	r1, [r7, #8]
     942:	1dbb      	adds	r3, r7, #6
     944:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     946:	1dbb      	adds	r3, r7, #6
     948:	881b      	ldrh	r3, [r3, #0]
     94a:	2b00      	cmp	r3, #0
     94c:	d101      	bne.n	952 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
     94e:	2317      	movs	r3, #23
     950:	e012      	b.n	978 <usart_write_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     952:	68fb      	ldr	r3, [r7, #12]
     954:	79db      	ldrb	r3, [r3, #7]
     956:	2201      	movs	r2, #1
     958:	4053      	eors	r3, r2
     95a:	b2db      	uxtb	r3, r3
     95c:	2b00      	cmp	r3, #0
     95e:	d001      	beq.n	964 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
     960:	231c      	movs	r3, #28
     962:	e009      	b.n	978 <usart_write_buffer_job+0x40>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
     964:	68f9      	ldr	r1, [r7, #12]
     966:	68ba      	ldr	r2, [r7, #8]
     968:	1dbb      	adds	r3, r7, #6
     96a:	881b      	ldrh	r3, [r3, #0]
     96c:	1c08      	adds	r0, r1, #0
     96e:	1c11      	adds	r1, r2, #0
     970:	1c1a      	adds	r2, r3, #0
     972:	4b03      	ldr	r3, [pc, #12]	; (980 <usart_write_buffer_job+0x48>)
     974:	4798      	blx	r3
     976:	1c03      	adds	r3, r0, #0
}
     978:	1c18      	adds	r0, r3, #0
     97a:	46bd      	mov	sp, r7
     97c:	b004      	add	sp, #16
     97e:	bd80      	pop	{r7, pc}
     980:	0000083d 	.word	0x0000083d

00000984 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     984:	b580      	push	{r7, lr}
     986:	b084      	sub	sp, #16
     988:	af00      	add	r7, sp, #0
     98a:	60f8      	str	r0, [r7, #12]
     98c:	60b9      	str	r1, [r7, #8]
     98e:	1dbb      	adds	r3, r7, #6
     990:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     992:	1dbb      	adds	r3, r7, #6
     994:	881b      	ldrh	r3, [r3, #0]
     996:	2b00      	cmp	r3, #0
     998:	d101      	bne.n	99e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e012      	b.n	9c4 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     99e:	68fb      	ldr	r3, [r7, #12]
     9a0:	799b      	ldrb	r3, [r3, #6]
     9a2:	2201      	movs	r2, #1
     9a4:	4053      	eors	r3, r2
     9a6:	b2db      	uxtb	r3, r3
     9a8:	2b00      	cmp	r3, #0
     9aa:	d001      	beq.n	9b0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
     9ac:	231c      	movs	r3, #28
     9ae:	e009      	b.n	9c4 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     9b0:	68f9      	ldr	r1, [r7, #12]
     9b2:	68ba      	ldr	r2, [r7, #8]
     9b4:	1dbb      	adds	r3, r7, #6
     9b6:	881b      	ldrh	r3, [r3, #0]
     9b8:	1c08      	adds	r0, r1, #0
     9ba:	1c11      	adds	r1, r2, #0
     9bc:	1c1a      	adds	r2, r3, #0
     9be:	4b03      	ldr	r3, [pc, #12]	; (9cc <usart_read_buffer_job+0x48>)
     9c0:	4798      	blx	r3
     9c2:	1c03      	adds	r3, r0, #0
}
     9c4:	1c18      	adds	r0, r3, #0
     9c6:	46bd      	mov	sp, r7
     9c8:	b004      	add	sp, #16
     9ca:	bd80      	pop	{r7, pc}
     9cc:	00000899 	.word	0x00000899

000009d0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	b084      	sub	sp, #16
     9d4:	af00      	add	r7, sp, #0
     9d6:	6078      	str	r0, [r7, #4]
     9d8:	1c0a      	adds	r2, r1, #0
     9da:	1cfb      	adds	r3, r7, #3
     9dc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     9de:	1cfb      	adds	r3, r7, #3
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d002      	beq.n	9ec <usart_get_job_status+0x1c>
     9e6:	2b01      	cmp	r3, #1
     9e8:	d007      	beq.n	9fa <usart_get_job_status+0x2a>
     9ea:	e00d      	b.n	a08 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
     9ec:	230f      	movs	r3, #15
     9ee:	18fb      	adds	r3, r7, r3
     9f0:	687a      	ldr	r2, [r7, #4]
     9f2:	2122      	movs	r1, #34	; 0x22
     9f4:	5c52      	ldrb	r2, [r2, r1]
     9f6:	701a      	strb	r2, [r3, #0]
			break;
     9f8:	e00b      	b.n	a12 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
     9fa:	230f      	movs	r3, #15
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	687a      	ldr	r2, [r7, #4]
     a00:	2123      	movs	r1, #35	; 0x23
     a02:	5c52      	ldrb	r2, [r2, r1]
     a04:	701a      	strb	r2, [r3, #0]
			break;
     a06:	e004      	b.n	a12 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     a08:	230f      	movs	r3, #15
     a0a:	18fb      	adds	r3, r7, r3
     a0c:	2217      	movs	r2, #23
     a0e:	701a      	strb	r2, [r3, #0]
			break;
     a10:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
     a12:	230f      	movs	r3, #15
     a14:	18fb      	adds	r3, r7, r3
     a16:	781b      	ldrb	r3, [r3, #0]
}
     a18:	1c18      	adds	r0, r3, #0
     a1a:	46bd      	mov	sp, r7
     a1c:	b004      	add	sp, #16
     a1e:	bd80      	pop	{r7, pc}

00000a20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a20:	b580      	push	{r7, lr}
     a22:	b088      	sub	sp, #32
     a24:	af00      	add	r7, sp, #0
     a26:	1c02      	adds	r2, r0, #0
     a28:	1dfb      	adds	r3, r7, #7
     a2a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
     a2c:	1dfb      	adds	r3, r7, #7
     a2e:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a30:	4b99      	ldr	r3, [pc, #612]	; (c98 <_usart_interrupt_handler+0x278>)
     a32:	0092      	lsls	r2, r2, #2
     a34:	58d3      	ldr	r3, [r2, r3]
     a36:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a38:	69bb      	ldr	r3, [r7, #24]
     a3a:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
     a3c:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
     a3e:	69bb      	ldr	r3, [r7, #24]
     a40:	1c18      	adds	r0, r3, #0
     a42:	4b96      	ldr	r3, [pc, #600]	; (c9c <_usart_interrupt_handler+0x27c>)
     a44:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a46:	697b      	ldr	r3, [r7, #20]
     a48:	7b9b      	ldrb	r3, [r3, #14]
     a4a:	b2da      	uxtb	r2, r3
     a4c:	2312      	movs	r3, #18
     a4e:	18fb      	adds	r3, r7, r3
     a50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
     a52:	697b      	ldr	r3, [r7, #20]
     a54:	7b5b      	ldrb	r3, [r3, #13]
     a56:	b2db      	uxtb	r3, r3
     a58:	b29a      	uxth	r2, r3
     a5a:	2312      	movs	r3, #18
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	2112      	movs	r1, #18
     a60:	1879      	adds	r1, r7, r1
     a62:	8809      	ldrh	r1, [r1, #0]
     a64:	400a      	ands	r2, r1
     a66:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
     a68:	69bb      	ldr	r3, [r7, #24]
     a6a:	2220      	movs	r2, #32
     a6c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
     a6e:	69ba      	ldr	r2, [r7, #24]
     a70:	2121      	movs	r1, #33	; 0x21
     a72:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     a74:	4013      	ands	r3, r2
     a76:	b2da      	uxtb	r2, r3
     a78:	2310      	movs	r3, #16
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a7e:	2312      	movs	r3, #18
     a80:	18fb      	adds	r3, r7, r3
     a82:	881b      	ldrh	r3, [r3, #0]
     a84:	2201      	movs	r2, #1
     a86:	4013      	ands	r3, r2
     a88:	d044      	beq.n	b14 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
     a8a:	69bb      	ldr	r3, [r7, #24]
     a8c:	8bdb      	ldrh	r3, [r3, #30]
     a8e:	b29b      	uxth	r3, r3
     a90:	2b00      	cmp	r3, #0
     a92:	d03c      	beq.n	b0e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a94:	69bb      	ldr	r3, [r7, #24]
     a96:	699b      	ldr	r3, [r3, #24]
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	b2da      	uxtb	r2, r3
     a9c:	231e      	movs	r3, #30
     a9e:	18fb      	adds	r3, r7, r3
     aa0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     aa2:	69bb      	ldr	r3, [r7, #24]
     aa4:	699b      	ldr	r3, [r3, #24]
     aa6:	1c5a      	adds	r2, r3, #1
     aa8:	69bb      	ldr	r3, [r7, #24]
     aaa:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     aac:	69bb      	ldr	r3, [r7, #24]
     aae:	795b      	ldrb	r3, [r3, #5]
     ab0:	2b01      	cmp	r3, #1
     ab2:	d112      	bne.n	ada <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ab4:	69bb      	ldr	r3, [r7, #24]
     ab6:	699b      	ldr	r3, [r3, #24]
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	b2db      	uxtb	r3, r3
     abc:	021b      	lsls	r3, r3, #8
     abe:	b29a      	uxth	r2, r3
     ac0:	231e      	movs	r3, #30
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	881b      	ldrh	r3, [r3, #0]
     ac6:	4313      	orrs	r3, r2
     ac8:	b29a      	uxth	r2, r3
     aca:	231e      	movs	r3, #30
     acc:	18fb      	adds	r3, r7, r3
     ace:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     ad0:	69bb      	ldr	r3, [r7, #24]
     ad2:	699b      	ldr	r3, [r3, #24]
     ad4:	1c5a      	adds	r2, r3, #1
     ad6:	69bb      	ldr	r3, [r7, #24]
     ad8:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     ada:	231e      	movs	r3, #30
     adc:	18fb      	adds	r3, r7, r3
     ade:	881b      	ldrh	r3, [r3, #0]
     ae0:	05db      	lsls	r3, r3, #23
     ae2:	0ddb      	lsrs	r3, r3, #23
     ae4:	b29a      	uxth	r2, r3
     ae6:	697b      	ldr	r3, [r7, #20]
     ae8:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     aea:	69bb      	ldr	r3, [r7, #24]
     aec:	8bdb      	ldrh	r3, [r3, #30]
     aee:	b29b      	uxth	r3, r3
     af0:	3b01      	subs	r3, #1
     af2:	b29b      	uxth	r3, r3
     af4:	69ba      	ldr	r2, [r7, #24]
     af6:	1c19      	adds	r1, r3, #0
     af8:	83d1      	strh	r1, [r2, #30]
     afa:	2b00      	cmp	r3, #0
     afc:	d106      	bne.n	b0c <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     afe:	697b      	ldr	r3, [r7, #20]
     b00:	2201      	movs	r2, #1
     b02:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b04:	697b      	ldr	r3, [r7, #20]
     b06:	2202      	movs	r2, #2
     b08:	735a      	strb	r2, [r3, #13]
     b0a:	e003      	b.n	b14 <_usart_interrupt_handler+0xf4>
     b0c:	e002      	b.n	b14 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b0e:	697b      	ldr	r3, [r7, #20]
     b10:	2201      	movs	r2, #1
     b12:	731a      	strb	r2, [r3, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b14:	2312      	movs	r3, #18
     b16:	18fb      	adds	r3, r7, r3
     b18:	881b      	ldrh	r3, [r3, #0]
     b1a:	2202      	movs	r2, #2
     b1c:	4013      	ands	r3, r2
     b1e:	d011      	beq.n	b44 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b20:	697b      	ldr	r3, [r7, #20]
     b22:	2202      	movs	r2, #2
     b24:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
     b26:	69bb      	ldr	r3, [r7, #24]
     b28:	2223      	movs	r2, #35	; 0x23
     b2a:	2100      	movs	r1, #0
     b2c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b2e:	2310      	movs	r3, #16
     b30:	18fb      	adds	r3, r7, r3
     b32:	881b      	ldrh	r3, [r3, #0]
     b34:	2201      	movs	r2, #1
     b36:	4013      	ands	r3, r2
     b38:	d004      	beq.n	b44 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b3a:	69bb      	ldr	r3, [r7, #24]
     b3c:	689b      	ldr	r3, [r3, #8]
     b3e:	69ba      	ldr	r2, [r7, #24]
     b40:	1c10      	adds	r0, r2, #0
     b42:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b44:	2312      	movs	r3, #18
     b46:	18fb      	adds	r3, r7, r3
     b48:	881b      	ldrh	r3, [r3, #0]
     b4a:	2204      	movs	r2, #4
     b4c:	4013      	ands	r3, r2
     b4e:	d100      	bne.n	b52 <_usart_interrupt_handler+0x132>
     b50:	e09e      	b.n	c90 <_usart_interrupt_handler+0x270>

		if (module->remaining_rx_buffer_length) {
     b52:	69bb      	ldr	r3, [r7, #24]
     b54:	8b9b      	ldrh	r3, [r3, #28]
     b56:	b29b      	uxth	r3, r3
     b58:	2b00      	cmp	r3, #0
     b5a:	d100      	bne.n	b5e <_usart_interrupt_handler+0x13e>
     b5c:	e095      	b.n	c8a <_usart_interrupt_handler+0x26a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b5e:	697b      	ldr	r3, [r7, #20]
     b60:	8a1b      	ldrh	r3, [r3, #16]
     b62:	b29b      	uxth	r3, r3
     b64:	b2da      	uxtb	r2, r3
     b66:	230f      	movs	r3, #15
     b68:	18fb      	adds	r3, r7, r3
     b6a:	2107      	movs	r1, #7
     b6c:	400a      	ands	r2, r1
     b6e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b70:	230f      	movs	r3, #15
     b72:	18fb      	adds	r3, r7, r3
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d043      	beq.n	c02 <_usart_interrupt_handler+0x1e2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b7a:	230f      	movs	r3, #15
     b7c:	18fb      	adds	r3, r7, r3
     b7e:	781b      	ldrb	r3, [r3, #0]
     b80:	2202      	movs	r2, #2
     b82:	4013      	ands	r3, r2
     b84:	d00c      	beq.n	ba0 <_usart_interrupt_handler+0x180>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b86:	69bb      	ldr	r3, [r7, #24]
     b88:	2222      	movs	r2, #34	; 0x22
     b8a:	211a      	movs	r1, #26
     b8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     b8e:	697b      	ldr	r3, [r7, #20]
     b90:	8a1b      	ldrh	r3, [r3, #16]
     b92:	b29b      	uxth	r3, r3
     b94:	2202      	movs	r2, #2
     b96:	4313      	orrs	r3, r2
     b98:	b29a      	uxth	r2, r3
     b9a:	697b      	ldr	r3, [r7, #20]
     b9c:	821a      	strh	r2, [r3, #16]
     b9e:	e024      	b.n	bea <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ba0:	230f      	movs	r3, #15
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	2204      	movs	r2, #4
     ba8:	4013      	ands	r3, r2
     baa:	d00c      	beq.n	bc6 <_usart_interrupt_handler+0x1a6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     bac:	69bb      	ldr	r3, [r7, #24]
     bae:	2222      	movs	r2, #34	; 0x22
     bb0:	211e      	movs	r1, #30
     bb2:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     bb4:	697b      	ldr	r3, [r7, #20]
     bb6:	8a1b      	ldrh	r3, [r3, #16]
     bb8:	b29b      	uxth	r3, r3
     bba:	2204      	movs	r2, #4
     bbc:	4313      	orrs	r3, r2
     bbe:	b29a      	uxth	r2, r3
     bc0:	697b      	ldr	r3, [r7, #20]
     bc2:	821a      	strh	r2, [r3, #16]
     bc4:	e011      	b.n	bea <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bc6:	230f      	movs	r3, #15
     bc8:	18fb      	adds	r3, r7, r3
     bca:	781b      	ldrb	r3, [r3, #0]
     bcc:	2201      	movs	r2, #1
     bce:	4013      	ands	r3, r2
     bd0:	d00b      	beq.n	bea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     bd2:	69bb      	ldr	r3, [r7, #24]
     bd4:	2222      	movs	r2, #34	; 0x22
     bd6:	2113      	movs	r1, #19
     bd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     bda:	697b      	ldr	r3, [r7, #20]
     bdc:	8a1b      	ldrh	r3, [r3, #16]
     bde:	b29b      	uxth	r3, r3
     be0:	2201      	movs	r2, #1
     be2:	4313      	orrs	r3, r2
     be4:	b29a      	uxth	r2, r3
     be6:	697b      	ldr	r3, [r7, #20]
     be8:	821a      	strh	r2, [r3, #16]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
     bea:	2310      	movs	r3, #16
     bec:	18fb      	adds	r3, r7, r3
     bee:	881b      	ldrh	r3, [r3, #0]
     bf0:	2204      	movs	r2, #4
     bf2:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     bf4:	d04c      	beq.n	c90 <_usart_interrupt_handler+0x270>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     bf6:	69bb      	ldr	r3, [r7, #24]
     bf8:	691b      	ldr	r3, [r3, #16]
     bfa:	69ba      	ldr	r2, [r7, #24]
     bfc:	1c10      	adds	r0, r2, #0
     bfe:	4798      	blx	r3
     c00:	e046      	b.n	c90 <_usart_interrupt_handler+0x270>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c02:	697b      	ldr	r3, [r7, #20]
     c04:	8b1b      	ldrh	r3, [r3, #24]
     c06:	b29a      	uxth	r2, r3
     c08:	230c      	movs	r3, #12
     c0a:	18fb      	adds	r3, r7, r3
     c0c:	05d2      	lsls	r2, r2, #23
     c0e:	0dd2      	lsrs	r2, r2, #23
     c10:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     c12:	69bb      	ldr	r3, [r7, #24]
     c14:	695b      	ldr	r3, [r3, #20]
     c16:	220c      	movs	r2, #12
     c18:	18ba      	adds	r2, r7, r2
     c1a:	8812      	ldrh	r2, [r2, #0]
     c1c:	b2d2      	uxtb	r2, r2
     c1e:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     c20:	69bb      	ldr	r3, [r7, #24]
     c22:	695b      	ldr	r3, [r3, #20]
     c24:	1c5a      	adds	r2, r3, #1
     c26:	69bb      	ldr	r3, [r7, #24]
     c28:	615a      	str	r2, [r3, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c2a:	69bb      	ldr	r3, [r7, #24]
     c2c:	795b      	ldrb	r3, [r3, #5]
     c2e:	2b01      	cmp	r3, #1
     c30:	d10d      	bne.n	c4e <_usart_interrupt_handler+0x22e>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c32:	69bb      	ldr	r3, [r7, #24]
     c34:	695b      	ldr	r3, [r3, #20]
     c36:	220c      	movs	r2, #12
     c38:	18ba      	adds	r2, r7, r2
     c3a:	8812      	ldrh	r2, [r2, #0]
     c3c:	0a12      	lsrs	r2, r2, #8
     c3e:	b292      	uxth	r2, r2
     c40:	b2d2      	uxtb	r2, r2
     c42:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     c44:	69bb      	ldr	r3, [r7, #24]
     c46:	695b      	ldr	r3, [r3, #20]
     c48:	1c5a      	adds	r2, r3, #1
     c4a:	69bb      	ldr	r3, [r7, #24]
     c4c:	615a      	str	r2, [r3, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     c4e:	69bb      	ldr	r3, [r7, #24]
     c50:	8b9b      	ldrh	r3, [r3, #28]
     c52:	b29b      	uxth	r3, r3
     c54:	3b01      	subs	r3, #1
     c56:	b29b      	uxth	r3, r3
     c58:	69ba      	ldr	r2, [r7, #24]
     c5a:	1c19      	adds	r1, r3, #0
     c5c:	8391      	strh	r1, [r2, #28]
     c5e:	2b00      	cmp	r3, #0
     c60:	d112      	bne.n	c88 <_usart_interrupt_handler+0x268>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c62:	697b      	ldr	r3, [r7, #20]
     c64:	2204      	movs	r2, #4
     c66:	731a      	strb	r2, [r3, #12]
					module->rx_status = STATUS_OK;
     c68:	69bb      	ldr	r3, [r7, #24]
     c6a:	2222      	movs	r2, #34	; 0x22
     c6c:	2100      	movs	r1, #0
     c6e:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
     c70:	2310      	movs	r3, #16
     c72:	18fb      	adds	r3, r7, r3
     c74:	881b      	ldrh	r3, [r3, #0]
     c76:	2202      	movs	r2, #2
     c78:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
     c7a:	d005      	beq.n	c88 <_usart_interrupt_handler+0x268>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c7c:	69bb      	ldr	r3, [r7, #24]
     c7e:	68db      	ldr	r3, [r3, #12]
     c80:	69ba      	ldr	r2, [r7, #24]
     c82:	1c10      	adds	r0, r2, #0
     c84:	4798      	blx	r3
     c86:	e003      	b.n	c90 <_usart_interrupt_handler+0x270>
     c88:	e002      	b.n	c90 <_usart_interrupt_handler+0x270>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c8a:	697b      	ldr	r3, [r7, #20]
     c8c:	2204      	movs	r2, #4
     c8e:	731a      	strb	r2, [r3, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c90:	46bd      	mov	sp, r7
     c92:	b008      	add	sp, #32
     c94:	bd80      	pop	{r7, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	20000758 	.word	0x20000758
     c9c:	0000081d 	.word	0x0000081d

00000ca0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	b084      	sub	sp, #16
     ca4:	af00      	add	r7, sp, #0
     ca6:	1c02      	adds	r2, r0, #0
     ca8:	1dfb      	adds	r3, r7, #7
     caa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     cac:	230f      	movs	r3, #15
     cae:	18fb      	adds	r3, r7, r3
     cb0:	1dfa      	adds	r2, r7, #7
     cb2:	7812      	ldrb	r2, [r2, #0]
     cb4:	09d2      	lsrs	r2, r2, #7
     cb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     cb8:	230e      	movs	r3, #14
     cba:	18fb      	adds	r3, r7, r3
     cbc:	1dfa      	adds	r2, r7, #7
     cbe:	7812      	ldrb	r2, [r2, #0]
     cc0:	0952      	lsrs	r2, r2, #5
     cc2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     cc4:	4b0d      	ldr	r3, [pc, #52]	; (cfc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     cc6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     cc8:	230f      	movs	r3, #15
     cca:	18fb      	adds	r3, r7, r3
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d10f      	bne.n	cf2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     cd2:	230f      	movs	r3, #15
     cd4:	18fb      	adds	r3, r7, r3
     cd6:	781b      	ldrb	r3, [r3, #0]
     cd8:	009b      	lsls	r3, r3, #2
     cda:	2210      	movs	r2, #16
     cdc:	4694      	mov	ip, r2
     cde:	44bc      	add	ip, r7
     ce0:	4463      	add	r3, ip
     ce2:	3b08      	subs	r3, #8
     ce4:	681a      	ldr	r2, [r3, #0]
     ce6:	230e      	movs	r3, #14
     ce8:	18fb      	adds	r3, r7, r3
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	01db      	lsls	r3, r3, #7
     cee:	18d3      	adds	r3, r2, r3
     cf0:	e000      	b.n	cf4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     cf2:	2300      	movs	r3, #0
	}
}
     cf4:	1c18      	adds	r0, r3, #0
     cf6:	46bd      	mov	sp, r7
     cf8:	b004      	add	sp, #16
     cfa:	bd80      	pop	{r7, pc}
     cfc:	41004400 	.word	0x41004400

00000d00 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     d00:	b580      	push	{r7, lr}
     d02:	b082      	sub	sp, #8
     d04:	af00      	add	r7, sp, #0
     d06:	1c02      	adds	r2, r0, #0
     d08:	1dfb      	adds	r3, r7, #7
     d0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     d0c:	1dfb      	adds	r3, r7, #7
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	1c18      	adds	r0, r3, #0
     d12:	4b03      	ldr	r3, [pc, #12]	; (d20 <port_get_group_from_gpio_pin+0x20>)
     d14:	4798      	blx	r3
     d16:	1c03      	adds	r3, r0, #0
}
     d18:	1c18      	adds	r0, r3, #0
     d1a:	46bd      	mov	sp, r7
     d1c:	b002      	add	sp, #8
     d1e:	bd80      	pop	{r7, pc}
     d20:	00000ca1 	.word	0x00000ca1

00000d24 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     d24:	b580      	push	{r7, lr}
     d26:	b084      	sub	sp, #16
     d28:	af00      	add	r7, sp, #0
     d2a:	1c02      	adds	r2, r0, #0
     d2c:	1dfb      	adds	r3, r7, #7
     d2e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     d30:	1dfb      	adds	r3, r7, #7
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	1c18      	adds	r0, r3, #0
     d36:	4b0b      	ldr	r3, [pc, #44]	; (d64 <port_pin_get_input_level+0x40>)
     d38:	4798      	blx	r3
     d3a:	1c03      	adds	r3, r0, #0
     d3c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d3e:	1dfb      	adds	r3, r7, #7
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	221f      	movs	r2, #31
     d44:	4013      	ands	r3, r2
     d46:	2201      	movs	r2, #1
     d48:	409a      	lsls	r2, r3
     d4a:	1c13      	adds	r3, r2, #0
     d4c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     d4e:	68fb      	ldr	r3, [r7, #12]
     d50:	6a1b      	ldr	r3, [r3, #32]
     d52:	68ba      	ldr	r2, [r7, #8]
     d54:	4013      	ands	r3, r2
     d56:	1e5a      	subs	r2, r3, #1
     d58:	4193      	sbcs	r3, r2
     d5a:	b2db      	uxtb	r3, r3
}
     d5c:	1c18      	adds	r0, r3, #0
     d5e:	46bd      	mov	sp, r7
     d60:	b004      	add	sp, #16
     d62:	bd80      	pop	{r7, pc}
     d64:	00000d01 	.word	0x00000d01

00000d68 <ck_SSP_mode>:
extern struct FPtxQ_def FPledQ;

uint32_t volatile ck_SSP_modeCnt1;

void ck_SSP_mode(void)
{
     d68:	b580      	push	{r7, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	af00      	add	r7, sp, #0
		// check that BT is in SSP mode
	MIDI_in_SSP_mode = port_pin_get_input_level(WT41_MIDI_CARRIER_DETECT_PIN);
     d6e:	2016      	movs	r0, #22
     d70:	4b25      	ldr	r3, [pc, #148]	; (e08 <ck_SSP_mode+0xa0>)
     d72:	4798      	blx	r3
     d74:	1c03      	adds	r3, r0, #0
     d76:	1c1a      	adds	r2, r3, #0
     d78:	4b24      	ldr	r3, [pc, #144]	; (e0c <ck_SSP_mode+0xa4>)
     d7a:	701a      	strb	r2, [r3, #0]
	Android_in_SSP_mode = 	port_pin_get_input_level(WT41_TABLET_CARRIER_DETECT_PIN);
     d7c:	2017      	movs	r0, #23
     d7e:	4b22      	ldr	r3, [pc, #136]	; (e08 <ck_SSP_mode+0xa0>)
     d80:	4798      	blx	r3
     d82:	1c03      	adds	r3, r0, #0
     d84:	1c1a      	adds	r2, r3, #0
     d86:	4b22      	ldr	r3, [pc, #136]	; (e10 <ck_SSP_mode+0xa8>)
     d88:	701a      	strb	r2, [r3, #0]




		// carrier detect LEDs logic
		if (FPledQ.length == 0)				// only send when nothing else to send
     d8a:	4b22      	ldr	r3, [pc, #136]	; (e14 <ck_SSP_mode+0xac>)
     d8c:	789b      	ldrb	r3, [r3, #2]
     d8e:	2b00      	cmp	r3, #0
     d90:	d137      	bne.n	e02 <ck_SSP_mode+0x9a>
		{	uint8_t val=0;
     d92:	1dfb      	adds	r3, r7, #7
     d94:	2200      	movs	r2, #0
     d96:	701a      	strb	r2, [r3, #0]

ck_SSP_modeCnt1++;
     d98:	4b1f      	ldr	r3, [pc, #124]	; (e18 <ck_SSP_mode+0xb0>)
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	1c5a      	adds	r2, r3, #1
     d9e:	4b1e      	ldr	r3, [pc, #120]	; (e18 <ck_SSP_mode+0xb0>)
     da0:	601a      	str	r2, [r3, #0]

			if (MIDI_in_SSP_mode)	val=2;
     da2:	4b1a      	ldr	r3, [pc, #104]	; (e0c <ck_SSP_mode+0xa4>)
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	2b00      	cmp	r3, #0
     da8:	d002      	beq.n	db0 <ck_SSP_mode+0x48>
     daa:	1dfb      	adds	r3, r7, #7
     dac:	2202      	movs	r2, #2
     dae:	701a      	strb	r2, [r3, #0]
			if (Android_in_SSP_mode) val++;
     db0:	4b17      	ldr	r3, [pc, #92]	; (e10 <ck_SSP_mode+0xa8>)
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	2b00      	cmp	r3, #0
     db6:	d004      	beq.n	dc2 <ck_SSP_mode+0x5a>
     db8:	1dfb      	adds	r3, r7, #7
     dba:	781a      	ldrb	r2, [r3, #0]
     dbc:	1dfb      	adds	r3, r7, #7
     dbe:	3201      	adds	r2, #1
     dc0:	701a      	strb	r2, [r3, #0]
			switch (val) 
     dc2:	1dfb      	adds	r3, r7, #7
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	2b02      	cmp	r3, #2
     dc8:	d00d      	beq.n	de6 <ck_SSP_mode+0x7e>
     dca:	dc02      	bgt.n	dd2 <ck_SSP_mode+0x6a>
     dcc:	2b00      	cmp	r3, #0
     dce:	db18      	blt.n	e02 <ck_SSP_mode+0x9a>
     dd0:	e002      	b.n	dd8 <ck_SSP_mode+0x70>
     dd2:	2b03      	cmp	r3, #3
     dd4:	d00e      	beq.n	df4 <ck_SSP_mode+0x8c>
     dd6:	e014      	b.n	e02 <ck_SSP_mode+0x9a>
			{	case 0:
				case 1:
					put_FP_ledQ(62);		// red - no midi carrier
     dd8:	203e      	movs	r0, #62	; 0x3e
     dda:	4b10      	ldr	r3, [pc, #64]	; (e1c <ck_SSP_mode+0xb4>)
     ddc:	4798      	blx	r3
					put_FP_ledQ(63 | FP_LED_OFF_FLAG);
     dde:	20bf      	movs	r0, #191	; 0xbf
     de0:	4b0e      	ldr	r3, [pc, #56]	; (e1c <ck_SSP_mode+0xb4>)
     de2:	4798      	blx	r3
					break;
     de4:	e00d      	b.n	e02 <ck_SSP_mode+0x9a>
				case 2:
					put_FP_ledQ(63);		// only midi carrier - orange
     de6:	203f      	movs	r0, #63	; 0x3f
     de8:	4b0c      	ldr	r3, [pc, #48]	; (e1c <ck_SSP_mode+0xb4>)
     dea:	4798      	blx	r3
					put_FP_ledQ(62);
     dec:	203e      	movs	r0, #62	; 0x3e
     dee:	4b0b      	ldr	r3, [pc, #44]	; (e1c <ck_SSP_mode+0xb4>)
     df0:	4798      	blx	r3
					break;
     df2:	e006      	b.n	e02 <ck_SSP_mode+0x9a>
				case 3:							
					put_FP_ledQ(63);		// green - both carriers	// turn on 63
     df4:	203f      	movs	r0, #63	; 0x3f
     df6:	4b09      	ldr	r3, [pc, #36]	; (e1c <ck_SSP_mode+0xb4>)
     df8:	4798      	blx	r3
					put_FP_ledQ(62 | FP_LED_OFF_FLAG);	// turn off 62
     dfa:	20be      	movs	r0, #190	; 0xbe
     dfc:	4b07      	ldr	r3, [pc, #28]	; (e1c <ck_SSP_mode+0xb4>)
     dfe:	4798      	blx	r3
					break;
     e00:	46c0      	nop			; (mov r8, r8)
			}
		}


}
     e02:	46bd      	mov	sp, r7
     e04:	b002      	add	sp, #8
     e06:	bd80      	pop	{r7, pc}
     e08:	00000d25 	.word	0x00000d25
     e0c:	20000094 	.word	0x20000094
     e10:	20000095 	.word	0x20000095
     e14:	200000ec 	.word	0x200000ec
     e18:	200000e4 	.word	0x200000e4
     e1c:	0000131d 	.word	0x0000131d

00000e20 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
     e20:	b580      	push	{r7, lr}
     e22:	b082      	sub	sp, #8
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2201      	movs	r2, #1
     e2c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2200      	movs	r2, #0
     e32:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2206      	movs	r2, #6
     e38:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	2200      	movs	r2, #0
     e3e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	2200      	movs	r2, #0
     e44:	725a      	strb	r2, [r3, #9]
}
     e46:	46bd      	mov	sp, r7
     e48:	b002      	add	sp, #8
     e4a:	bd80      	pop	{r7, pc}

00000e4c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
     e4c:	b580      	push	{r7, lr}
     e4e:	b082      	sub	sp, #8
     e50:	af00      	add	r7, sp, #0
     e52:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	2200      	movs	r2, #0
     e58:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	2200      	movs	r2, #0
     e5e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	2200      	movs	r2, #0
     e64:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	2200      	movs	r2, #0
     e6a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	2200      	movs	r2, #0
     e70:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	2201      	movs	r2, #1
     e76:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	2207      	movs	r2, #7
     e7c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	223f      	movs	r2, #63	; 0x3f
     e82:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	2201      	movs	r2, #1
     e88:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	2201      	movs	r2, #1
     e8e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	2206      	movs	r2, #6
     e94:	821a      	strh	r2, [r3, #16]
}
     e96:	46bd      	mov	sp, r7
     e98:	b002      	add	sp, #8
     e9a:	bd80      	pop	{r7, pc}

00000e9c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	af00      	add	r7, sp, #0
     ea2:	1c02      	adds	r2, r0, #0
     ea4:	1dfb      	adds	r3, r7, #7
     ea6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ea8:	4b08      	ldr	r3, [pc, #32]	; (ecc <system_flash_set_waitstates+0x30>)
     eaa:	1dfa      	adds	r2, r7, #7
     eac:	7812      	ldrb	r2, [r2, #0]
     eae:	210f      	movs	r1, #15
     eb0:	400a      	ands	r2, r1
     eb2:	b2d2      	uxtb	r2, r2
     eb4:	210f      	movs	r1, #15
     eb6:	400a      	ands	r2, r1
     eb8:	0052      	lsls	r2, r2, #1
     eba:	6859      	ldr	r1, [r3, #4]
     ebc:	201e      	movs	r0, #30
     ebe:	4381      	bics	r1, r0
     ec0:	430a      	orrs	r2, r1
     ec2:	605a      	str	r2, [r3, #4]
}
     ec4:	46bd      	mov	sp, r7
     ec6:	b002      	add	sp, #8
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	41004000 	.word	0x41004000

00000ed0 <configure_dfll_open_loop>:
#include <asf.h>
void configure_dfll_open_loop(void);
void clock_dfll(void);

void configure_dfll_open_loop(void)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b086      	sub	sp, #24
     ed4:	af00      	add	r7, sp, #0
	//! [config_dfll_config]
	struct system_clock_source_dfll_config config_dfll;
	//! [config_dfll_config]
	//! [config_dfll_get_defaults]
	system_clock_source_dfll_get_config_defaults(&config_dfll);
     ed6:	1d3b      	adds	r3, r7, #4
     ed8:	1c18      	adds	r0, r3, #0
     eda:	4b04      	ldr	r3, [pc, #16]	; (eec <configure_dfll_open_loop+0x1c>)
     edc:	4798      	blx	r3
	//! [config_dfll_get_defaults]

	//! [config_dfll_set_config]
	system_clock_source_dfll_set_config(&config_dfll);
     ede:	1d3b      	adds	r3, r7, #4
     ee0:	1c18      	adds	r0, r3, #0
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <configure_dfll_open_loop+0x20>)
     ee4:	4798      	blx	r3
	//! [config_dfll_set_config]
}
     ee6:	46bd      	mov	sp, r7
     ee8:	b006      	add	sp, #24
     eea:	bd80      	pop	{r7, pc}
     eec:	00000e4d 	.word	0x00000e4d
     ef0:	00004f75 	.word	0x00004f75

00000ef4 <clock_dfll>:


void clock_dfll(void)		 {
     ef4:	b590      	push	{r4, r7, lr}
     ef6:	b085      	sub	sp, #20
     ef8:	af00      	add	r7, sp, #0
	/* Configure the DFLL in open loop mode using default values */
	//! [config_dfll_main]
	configure_dfll_open_loop();
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <clock_dfll+0x44>)
     efc:	4798      	blx	r3
	//! [config_dfll_main]

	/* Enable the DFLL oscillator */
	//! [enable_dfll_main]
	enum status_code dfll_status =
     efe:	230f      	movs	r3, #15
     f00:	18fc      	adds	r4, r7, r3
     f02:	2007      	movs	r0, #7
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <clock_dfll+0x48>)
     f06:	4798      	blx	r3
     f08:	1c03      	adds	r3, r0, #0
     f0a:	7023      	strb	r3, [r4, #0]
	}
	//! [enable_dfll_main]

	/* Configure flash wait states before switching to high frequency clock */
	//! [set_sys_wait_states]
	system_flash_set_waitstates(2);
     f0c:	2002      	movs	r0, #2
     f0e:	4b0c      	ldr	r3, [pc, #48]	; (f40 <clock_dfll+0x4c>)
     f10:	4798      	blx	r3
	//! [set_sys_wait_states]

	/* Change system clock to DFLL */
	//! [set_sys_clk_src]
	struct system_gclk_gen_config config_gclock_gen;
	system_gclk_gen_get_config_defaults(&config_gclock_gen);
     f12:	1c3b      	adds	r3, r7, #0
     f14:	1c18      	adds	r0, r3, #0
     f16:	4b0b      	ldr	r3, [pc, #44]	; (f44 <clock_dfll+0x50>)
     f18:	4798      	blx	r3
	config_gclock_gen.source_clock    = SYSTEM_CLOCK_SOURCE_DFLL;
     f1a:	1c3b      	adds	r3, r7, #0
     f1c:	2207      	movs	r2, #7
     f1e:	701a      	strb	r2, [r3, #0]
	config_gclock_gen.division_factor = 1;
     f20:	1c3b      	adds	r3, r7, #0
     f22:	2201      	movs	r2, #1
     f24:	605a      	str	r2, [r3, #4]
	
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &config_gclock_gen);
     f26:	1c3b      	adds	r3, r7, #0
     f28:	2000      	movs	r0, #0
     f2a:	1c19      	adds	r1, r3, #0
     f2c:	4b06      	ldr	r3, [pc, #24]	; (f48 <clock_dfll+0x54>)
     f2e:	4798      	blx	r3
	
}
     f30:	46bd      	mov	sp, r7
     f32:	b005      	add	sp, #20
     f34:	bd90      	pop	{r4, r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000ed1 	.word	0x00000ed1
     f3c:	00005071 	.word	0x00005071
     f40:	00000e9d 	.word	0x00000e9d
     f44:	00000e21 	.word	0x00000e21
     f48:	00005545 	.word	0x00005545

00000f4c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f4c:	b580      	push	{r7, lr}
     f4e:	b084      	sub	sp, #16
     f50:	af00      	add	r7, sp, #0
     f52:	1c02      	adds	r2, r0, #0
     f54:	1dfb      	adds	r3, r7, #7
     f56:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f58:	230f      	movs	r3, #15
     f5a:	18fb      	adds	r3, r7, r3
     f5c:	1dfa      	adds	r2, r7, #7
     f5e:	7812      	ldrb	r2, [r2, #0]
     f60:	09d2      	lsrs	r2, r2, #7
     f62:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     f64:	230e      	movs	r3, #14
     f66:	18fb      	adds	r3, r7, r3
     f68:	1dfa      	adds	r2, r7, #7
     f6a:	7812      	ldrb	r2, [r2, #0]
     f6c:	0952      	lsrs	r2, r2, #5
     f6e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     f70:	4b0d      	ldr	r3, [pc, #52]	; (fa8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     f72:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     f74:	230f      	movs	r3, #15
     f76:	18fb      	adds	r3, r7, r3
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d10f      	bne.n	f9e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     f7e:	230f      	movs	r3, #15
     f80:	18fb      	adds	r3, r7, r3
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	009b      	lsls	r3, r3, #2
     f86:	2210      	movs	r2, #16
     f88:	4694      	mov	ip, r2
     f8a:	44bc      	add	ip, r7
     f8c:	4463      	add	r3, ip
     f8e:	3b08      	subs	r3, #8
     f90:	681a      	ldr	r2, [r3, #0]
     f92:	230e      	movs	r3, #14
     f94:	18fb      	adds	r3, r7, r3
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	01db      	lsls	r3, r3, #7
     f9a:	18d3      	adds	r3, r2, r3
     f9c:	e000      	b.n	fa0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     f9e:	2300      	movs	r3, #0
	}
}
     fa0:	1c18      	adds	r0, r3, #0
     fa2:	46bd      	mov	sp, r7
     fa4:	b004      	add	sp, #16
     fa6:	bd80      	pop	{r7, pc}
     fa8:	41004400 	.word	0x41004400

00000fac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     fac:	b580      	push	{r7, lr}
     fae:	b082      	sub	sp, #8
     fb0:	af00      	add	r7, sp, #0
     fb2:	1c02      	adds	r2, r0, #0
     fb4:	1dfb      	adds	r3, r7, #7
     fb6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fb8:	4b06      	ldr	r3, [pc, #24]	; (fd4 <system_interrupt_enable+0x28>)
     fba:	1dfa      	adds	r2, r7, #7
     fbc:	7812      	ldrb	r2, [r2, #0]
     fbe:	1c11      	adds	r1, r2, #0
     fc0:	221f      	movs	r2, #31
     fc2:	400a      	ands	r2, r1
     fc4:	2101      	movs	r1, #1
     fc6:	4091      	lsls	r1, r2
     fc8:	1c0a      	adds	r2, r1, #0
     fca:	601a      	str	r2, [r3, #0]
}
     fcc:	46bd      	mov	sp, r7
     fce:	b002      	add	sp, #8
     fd0:	bd80      	pop	{r7, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	e000e100 	.word	0xe000e100

00000fd8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     fd8:	b580      	push	{r7, lr}
     fda:	b082      	sub	sp, #8
     fdc:	af00      	add	r7, sp, #0
     fde:	1c02      	adds	r2, r0, #0
     fe0:	1dfb      	adds	r3, r7, #7
     fe2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     fe4:	1dfb      	adds	r3, r7, #7
     fe6:	781b      	ldrb	r3, [r3, #0]
     fe8:	1c18      	adds	r0, r3, #0
     fea:	4b03      	ldr	r3, [pc, #12]	; (ff8 <port_get_group_from_gpio_pin+0x20>)
     fec:	4798      	blx	r3
     fee:	1c03      	adds	r3, r0, #0
}
     ff0:	1c18      	adds	r0, r3, #0
     ff2:	46bd      	mov	sp, r7
     ff4:	b002      	add	sp, #8
     ff6:	bd80      	pop	{r7, pc}
     ff8:	00000f4d 	.word	0x00000f4d

00000ffc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	2200      	movs	r2, #0
    1008:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	2201      	movs	r2, #1
    100e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	2200      	movs	r2, #0
    1014:	709a      	strb	r2, [r3, #2]
}
    1016:	46bd      	mov	sp, r7
    1018:	b002      	add	sp, #8
    101a:	bd80      	pop	{r7, pc}

0000101c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    101c:	b580      	push	{r7, lr}
    101e:	b084      	sub	sp, #16
    1020:	af00      	add	r7, sp, #0
    1022:	1c02      	adds	r2, r0, #0
    1024:	1dfb      	adds	r3, r7, #7
    1026:	701a      	strb	r2, [r3, #0]
    1028:	1dbb      	adds	r3, r7, #6
    102a:	1c0a      	adds	r2, r1, #0
    102c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    102e:	1dfb      	adds	r3, r7, #7
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	1c18      	adds	r0, r3, #0
    1034:	4b0c      	ldr	r3, [pc, #48]	; (1068 <port_pin_set_output_level+0x4c>)
    1036:	4798      	blx	r3
    1038:	1c03      	adds	r3, r0, #0
    103a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    103c:	1dfb      	adds	r3, r7, #7
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	221f      	movs	r2, #31
    1042:	4013      	ands	r3, r2
    1044:	2201      	movs	r2, #1
    1046:	409a      	lsls	r2, r3
    1048:	1c13      	adds	r3, r2, #0
    104a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    104c:	1dbb      	adds	r3, r7, #6
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	2b00      	cmp	r3, #0
    1052:	d003      	beq.n	105c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	68ba      	ldr	r2, [r7, #8]
    1058:	619a      	str	r2, [r3, #24]
    105a:	e002      	b.n	1062 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	68ba      	ldr	r2, [r7, #8]
    1060:	615a      	str	r2, [r3, #20]
	}
}
    1062:	46bd      	mov	sp, r7
    1064:	b004      	add	sp, #16
    1066:	bd80      	pop	{r7, pc}
    1068:	00000fd9 	.word	0x00000fd9

0000106c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    106c:	b580      	push	{r7, lr}
    106e:	b084      	sub	sp, #16
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    107a:	68fb      	ldr	r3, [r7, #12]
    107c:	8a1b      	ldrh	r3, [r3, #16]
    107e:	b29b      	uxth	r3, r3
    1080:	1c1a      	adds	r2, r3, #0
    1082:	2380      	movs	r3, #128	; 0x80
    1084:	021b      	lsls	r3, r3, #8
    1086:	4013      	ands	r3, r2
    1088:	1e5a      	subs	r2, r3, #1
    108a:	4193      	sbcs	r3, r2
    108c:	b2db      	uxtb	r3, r3
#  endif
}
    108e:	1c18      	adds	r0, r3, #0
    1090:	46bd      	mov	sp, r7
    1092:	b004      	add	sp, #16
    1094:	bd80      	pop	{r7, pc}
    1096:	46c0      	nop			; (mov r8, r8)

00001098 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1098:	b580      	push	{r7, lr}
    109a:	b082      	sub	sp, #8
    109c:	af00      	add	r7, sp, #0
    109e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	2201      	movs	r2, #1
    10a4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	2200      	movs	r2, #0
    10aa:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	2200      	movs	r2, #0
    10b0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	22c0      	movs	r2, #192	; 0xc0
    10b6:	0392      	lsls	r2, r2, #14
    10b8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	2200      	movs	r2, #0
    10be:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	2200      	movs	r2, #0
    10c4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	2201      	movs	r2, #1
    10ca:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	2220      	movs	r2, #32
    10d0:	2100      	movs	r1, #0
    10d2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	3314      	adds	r3, #20
    10d8:	1c18      	adds	r0, r3, #0
    10da:	2100      	movs	r1, #0
    10dc:	220c      	movs	r2, #12
    10de:	4b0a      	ldr	r3, [pc, #40]	; (1108 <spi_get_config_defaults+0x70>)
    10e0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	4a09      	ldr	r2, [pc, #36]	; (110c <spi_get_config_defaults+0x74>)
    10e6:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	2200      	movs	r2, #0
    10ec:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	2200      	movs	r2, #0
    10f2:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	2200      	movs	r2, #0
    10f8:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	2200      	movs	r2, #0
    10fe:	631a      	str	r2, [r3, #48]	; 0x30

};
    1100:	46bd      	mov	sp, r7
    1102:	b002      	add	sp, #8
    1104:	bd80      	pop	{r7, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00006637 	.word	0x00006637
    110c:	000186a0 	.word	0x000186a0

00001110 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1110:	b580      	push	{r7, lr}
    1112:	b082      	sub	sp, #8
    1114:	af00      	add	r7, sp, #0
    1116:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	220a      	movs	r2, #10
    111c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	2200      	movs	r2, #0
    1122:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	2200      	movs	r2, #0
    1128:	709a      	strb	r2, [r3, #2]
}
    112a:	46bd      	mov	sp, r7
    112c:	b002      	add	sp, #8
    112e:	bd80      	pop	{r7, pc}

00001130 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    1130:	b580      	push	{r7, lr}
    1132:	b084      	sub	sp, #16
    1134:	af00      	add	r7, sp, #0
    1136:	6078      	str	r0, [r7, #4]
    1138:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	781a      	ldrb	r2, [r3, #0]
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1142:	683b      	ldr	r3, [r7, #0]
    1144:	785a      	ldrb	r2, [r3, #1]
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    114a:	683b      	ldr	r3, [r7, #0]
    114c:	789a      	ldrb	r2, [r3, #2]
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1152:	230c      	movs	r3, #12
    1154:	18fb      	adds	r3, r7, r3
    1156:	1c18      	adds	r0, r3, #0
    1158:	4b0b      	ldr	r3, [pc, #44]	; (1188 <spi_attach_slave+0x58>)
    115a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    115c:	230c      	movs	r3, #12
    115e:	18fb      	adds	r3, r7, r3
    1160:	2201      	movs	r2, #1
    1162:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	781a      	ldrb	r2, [r3, #0]
    1168:	230c      	movs	r3, #12
    116a:	18fb      	adds	r3, r7, r3
    116c:	1c10      	adds	r0, r2, #0
    116e:	1c19      	adds	r1, r3, #0
    1170:	4b06      	ldr	r3, [pc, #24]	; (118c <spi_attach_slave+0x5c>)
    1172:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	1c18      	adds	r0, r3, #0
    117a:	2101      	movs	r1, #1
    117c:	4b04      	ldr	r3, [pc, #16]	; (1190 <spi_attach_slave+0x60>)
    117e:	4798      	blx	r3
}
    1180:	46bd      	mov	sp, r7
    1182:	b004      	add	sp, #16
    1184:	bd80      	pop	{r7, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00000ffd 	.word	0x00000ffd
    118c:	000036ed 	.word	0x000036ed
    1190:	0000101d 	.word	0x0000101d

00001194 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1194:	b580      	push	{r7, lr}
    1196:	b084      	sub	sp, #16
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	1c18      	adds	r0, r3, #0
    11a8:	4b0a      	ldr	r3, [pc, #40]	; (11d4 <spi_enable+0x40>)
    11aa:	4798      	blx	r3
    11ac:	1c03      	adds	r3, r0, #0
    11ae:	1c18      	adds	r0, r3, #0
    11b0:	4b09      	ldr	r3, [pc, #36]	; (11d8 <spi_enable+0x44>)
    11b2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	1c18      	adds	r0, r3, #0
    11ba:	4b08      	ldr	r3, [pc, #32]	; (11dc <spi_enable+0x48>)
    11bc:	4798      	blx	r3
    11be:	1e03      	subs	r3, r0, #0
    11c0:	d1f9      	bne.n	11b6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	2202      	movs	r2, #2
    11c8:	431a      	orrs	r2, r3
    11ca:	68fb      	ldr	r3, [r7, #12]
    11cc:	601a      	str	r2, [r3, #0]
}
    11ce:	46bd      	mov	sp, r7
    11d0:	b004      	add	sp, #16
    11d2:	bd80      	pop	{r7, pc}
    11d4:	00003dbd 	.word	0x00003dbd
    11d8:	00000fad 	.word	0x00000fad
    11dc:	0000106d 	.word	0x0000106d

000011e0 <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	1c0a      	adds	r2, r1, #0
    11ea:	1cfb      	adds	r3, r7, #3
    11ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	222f      	movs	r2, #47	; 0x2f
    11f2:	5c9b      	ldrb	r3, [r3, r2]
    11f4:	b2d9      	uxtb	r1, r3
    11f6:	1cfb      	adds	r3, r7, #3
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	2201      	movs	r2, #1
    11fc:	409a      	lsls	r2, r3
    11fe:	1c13      	adds	r3, r2, #0
    1200:	b2db      	uxtb	r3, r3
    1202:	1c0a      	adds	r2, r1, #0
    1204:	4313      	orrs	r3, r2
    1206:	b2db      	uxtb	r3, r3
    1208:	b2d9      	uxtb	r1, r3
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	222f      	movs	r2, #47	; 0x2f
    120e:	5499      	strb	r1, [r3, r2]
}
    1210:	46bd      	mov	sp, r7
    1212:	b002      	add	sp, #8
    1214:	bd80      	pop	{r7, pc}
    1216:	46c0      	nop			; (mov r8, r8)

00001218 <do_FP_SPI>:

struct spi_module spi_master_to_FP_instance;
struct spi_slave_inst FP_slave_instance;

void do_FP_SPI(void)
 {
    1218:	b598      	push	{r3, r4, r7, lr}
    121a:	af00      	add	r7, sp, #0
	
	if (transfer_complete_spi_master_to_FP && spiFreqTimer>1)  // waiting the spiFreqTimer to be < 0 if it was signed
    121c:	4b16      	ldr	r3, [pc, #88]	; (1278 <do_FP_SPI+0x60>)
    121e:	781b      	ldrb	r3, [r3, #0]
    1220:	b2db      	uxtb	r3, r3
    1222:	2b00      	cmp	r3, #0
    1224:	d026      	beq.n	1274 <do_FP_SPI+0x5c>
    1226:	4b15      	ldr	r3, [pc, #84]	; (127c <do_FP_SPI+0x64>)
    1228:	781b      	ldrb	r3, [r3, #0]
    122a:	b2db      	uxtb	r3, r3
    122c:	2b01      	cmp	r3, #1
    122e:	d921      	bls.n	1274 <do_FP_SPI+0x5c>
																
																// the CS turns off before the clock was done, on final clk pulse, after the rising, before the falling
																// seems to work ok but leaves a concern
	{
//TEST BY TURNING AN LED MATCHING THE SWITCH
		if (FPledQ.length >0) 
    1230:	4b13      	ldr	r3, [pc, #76]	; (1280 <do_FP_SPI+0x68>)
    1232:	789b      	ldrb	r3, [r3, #2]
    1234:	2b00      	cmp	r3, #0
    1236:	d004      	beq.n	1242 <do_FP_SPI+0x2a>
			_get_FP_ledQ(FP_tx_buffer);
    1238:	4b12      	ldr	r3, [pc, #72]	; (1284 <do_FP_SPI+0x6c>)
    123a:	1c18      	adds	r0, r3, #0
    123c:	4b12      	ldr	r3, [pc, #72]	; (1288 <do_FP_SPI+0x70>)
    123e:	4798      	blx	r3
    1240:	e002      	b.n	1248 <do_FP_SPI+0x30>
		else FP_tx_buffer[0] = FP_LED_NO_CHANGE;
    1242:	4b10      	ldr	r3, [pc, #64]	; (1284 <do_FP_SPI+0x6c>)
    1244:	22f7      	movs	r2, #247	; 0xf7
    1246:	701a      	strb	r2, [r3, #0]
			
	// start the next transfer
		spi_select_slave(&spi_master_to_FP_instance, &FP_slave_instance, true);				 //! [select_slave]
    1248:	4a10      	ldr	r2, [pc, #64]	; (128c <do_FP_SPI+0x74>)
    124a:	4b11      	ldr	r3, [pc, #68]	; (1290 <do_FP_SPI+0x78>)
    124c:	1c10      	adds	r0, r2, #0
    124e:	1c19      	adds	r1, r3, #0
    1250:	2201      	movs	r2, #1
    1252:	4b10      	ldr	r3, [pc, #64]	; (1294 <do_FP_SPI+0x7c>)
    1254:	4798      	blx	r3
//			port_pin_set_output_level(TREBLE_CS0,0);
		transfer_complete_spi_master_to_FP = false;
    1256:	4b08      	ldr	r3, [pc, #32]	; (1278 <do_FP_SPI+0x60>)
    1258:	2200      	movs	r2, #0
    125a:	701a      	strb	r2, [r3, #0]
		spi_transceive_buffer_job(&spi_master_to_FP_instance,FP_tx_buffer,FP_rx_buffer ,1);
    125c:	490b      	ldr	r1, [pc, #44]	; (128c <do_FP_SPI+0x74>)
    125e:	4a09      	ldr	r2, [pc, #36]	; (1284 <do_FP_SPI+0x6c>)
    1260:	4b0d      	ldr	r3, [pc, #52]	; (1298 <do_FP_SPI+0x80>)
    1262:	1c08      	adds	r0, r1, #0
    1264:	1c11      	adds	r1, r2, #0
    1266:	1c1a      	adds	r2, r3, #0
    1268:	2301      	movs	r3, #1
    126a:	4c0c      	ldr	r4, [pc, #48]	; (129c <do_FP_SPI+0x84>)
    126c:	47a0      	blx	r4
		spiFreqTimer = 1;	// limit xfers to 50-100 per second
    126e:	4b03      	ldr	r3, [pc, #12]	; (127c <do_FP_SPI+0x64>)
    1270:	2201      	movs	r2, #1
    1272:	701a      	strb	r2, [r3, #0]
	}
}
    1274:	46bd      	mov	sp, r7
    1276:	bd98      	pop	{r3, r4, r7, pc}
    1278:	20000134 	.word	0x20000134
    127c:	20000730 	.word	0x20000730
    1280:	200000ec 	.word	0x200000ec
    1284:	200000e8 	.word	0x200000e8
    1288:	00001385 	.word	0x00001385
    128c:	20000100 	.word	0x20000100
    1290:	20000150 	.word	0x20000150
    1294:	0000450d 	.word	0x0000450d
    1298:	20000138 	.word	0x20000138
    129c:	0000469d 	.word	0x0000469d

000012a0 <_put_mFP_swQ>:


uint32_t volatile put_mFP_swQCnt1, put_mFP_swQCnt2;
void _put_mFP_swQ (void)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	af00      	add	r7, sp, #0
	 put_mFP_swQCnt1++;
    12a4:	4b19      	ldr	r3, [pc, #100]	; (130c <_put_mFP_swQ+0x6c>)
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	1c5a      	adds	r2, r3, #1
    12aa:	4b18      	ldr	r3, [pc, #96]	; (130c <_put_mFP_swQ+0x6c>)
    12ac:	601a      	str	r2, [r3, #0]
	 
	if (FPswQ.length < FP_QUE_SIZE-1)
    12ae:	4b18      	ldr	r3, [pc, #96]	; (1310 <_put_mFP_swQ+0x70>)
    12b0:	789b      	ldrb	r3, [r3, #2]
    12b2:	2b0e      	cmp	r3, #14
    12b4:	d828      	bhi.n	1308 <_put_mFP_swQ+0x68>
	{
		put_mFP_swQCnt2++;
    12b6:	4b17      	ldr	r3, [pc, #92]	; (1314 <_put_mFP_swQ+0x74>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	1c5a      	adds	r2, r3, #1
    12bc:	4b15      	ldr	r3, [pc, #84]	; (1314 <_put_mFP_swQ+0x74>)
    12be:	601a      	str	r2, [r3, #0]
		FPswQ.val[FPswQ.buff_in] = FP_rx_buffer[0];
    12c0:	4b13      	ldr	r3, [pc, #76]	; (1310 <_put_mFP_swQ+0x70>)
    12c2:	781b      	ldrb	r3, [r3, #0]
    12c4:	1c19      	adds	r1, r3, #0
    12c6:	4b14      	ldr	r3, [pc, #80]	; (1318 <_put_mFP_swQ+0x78>)
    12c8:	781a      	ldrb	r2, [r3, #0]
    12ca:	4b11      	ldr	r3, [pc, #68]	; (1310 <_put_mFP_swQ+0x70>)
    12cc:	185b      	adds	r3, r3, r1
    12ce:	70da      	strb	r2, [r3, #3]
		FPswQ.buff_in++;
    12d0:	4b0f      	ldr	r3, [pc, #60]	; (1310 <_put_mFP_swQ+0x70>)
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	3301      	adds	r3, #1
    12d6:	b2da      	uxtb	r2, r3
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <_put_mFP_swQ+0x70>)
    12da:	701a      	strb	r2, [r3, #0]
		FPswQ.buff_in = FPswQ.buff_in & (FP_QUE_SIZE-1);			// wrap at 
    12dc:	4b0c      	ldr	r3, [pc, #48]	; (1310 <_put_mFP_swQ+0x70>)
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	220f      	movs	r2, #15
    12e2:	4013      	ands	r3, r2
    12e4:	b2da      	uxtb	r2, r3
    12e6:	4b0a      	ldr	r3, [pc, #40]	; (1310 <_put_mFP_swQ+0x70>)
    12e8:	701a      	strb	r2, [r3, #0]
		FPswQ.length = FPswQ.buff_in - FPswQ.buff_out;	// can be negative
    12ea:	4b09      	ldr	r3, [pc, #36]	; (1310 <_put_mFP_swQ+0x70>)
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	4b08      	ldr	r3, [pc, #32]	; (1310 <_put_mFP_swQ+0x70>)
    12f0:	785b      	ldrb	r3, [r3, #1]
    12f2:	1ad3      	subs	r3, r2, r3
    12f4:	b2da      	uxtb	r2, r3
    12f6:	4b06      	ldr	r3, [pc, #24]	; (1310 <_put_mFP_swQ+0x70>)
    12f8:	709a      	strb	r2, [r3, #2]
		FPswQ.length = FPswQ.length & (FP_QUE_SIZE-1);				// make sure positive
    12fa:	4b05      	ldr	r3, [pc, #20]	; (1310 <_put_mFP_swQ+0x70>)
    12fc:	789b      	ldrb	r3, [r3, #2]
    12fe:	220f      	movs	r2, #15
    1300:	4013      	ands	r3, r2
    1302:	b2da      	uxtb	r2, r3
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <_put_mFP_swQ+0x70>)
    1306:	709a      	strb	r2, [r3, #2]
	}
}
    1308:	46bd      	mov	sp, r7
    130a:	bd80      	pop	{r7, pc}
    130c:	20000154 	.word	0x20000154
    1310:	2000013c 	.word	0x2000013c
    1314:	20000158 	.word	0x20000158
    1318:	20000138 	.word	0x20000138

0000131c <put_FP_ledQ>:

void put_FP_ledQ (uint8_t val)
{
    131c:	b580      	push	{r7, lr}
    131e:	b082      	sub	sp, #8
    1320:	af00      	add	r7, sp, #0
    1322:	1c02      	adds	r2, r0, #0
    1324:	1dfb      	adds	r3, r7, #7
    1326:	701a      	strb	r2, [r3, #0]
	if (FPledQ.length < FP_QUE_SIZE-1)
    1328:	4b15      	ldr	r3, [pc, #84]	; (1380 <put_FP_ledQ+0x64>)
    132a:	789b      	ldrb	r3, [r3, #2]
    132c:	2b0e      	cmp	r3, #14
    132e:	d823      	bhi.n	1378 <put_FP_ledQ+0x5c>
	{
		FPledQ.val[FPledQ.buff_in] = val;
    1330:	4b13      	ldr	r3, [pc, #76]	; (1380 <put_FP_ledQ+0x64>)
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	1c19      	adds	r1, r3, #0
    1336:	4b12      	ldr	r3, [pc, #72]	; (1380 <put_FP_ledQ+0x64>)
    1338:	1dfa      	adds	r2, r7, #7
    133a:	185b      	adds	r3, r3, r1
    133c:	7812      	ldrb	r2, [r2, #0]
    133e:	70da      	strb	r2, [r3, #3]
		FPledQ.buff_in++;
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <put_FP_ledQ+0x64>)
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	3301      	adds	r3, #1
    1346:	b2da      	uxtb	r2, r3
    1348:	4b0d      	ldr	r3, [pc, #52]	; (1380 <put_FP_ledQ+0x64>)
    134a:	701a      	strb	r2, [r3, #0]
		FPledQ.buff_in = FPledQ.buff_in & (FP_QUE_SIZE-1);			// wrap at 
    134c:	4b0c      	ldr	r3, [pc, #48]	; (1380 <put_FP_ledQ+0x64>)
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	220f      	movs	r2, #15
    1352:	4013      	ands	r3, r2
    1354:	b2da      	uxtb	r2, r3
    1356:	4b0a      	ldr	r3, [pc, #40]	; (1380 <put_FP_ledQ+0x64>)
    1358:	701a      	strb	r2, [r3, #0]
		FPledQ.length = FPledQ.buff_in - FPledQ.buff_out;	// can be negative
    135a:	4b09      	ldr	r3, [pc, #36]	; (1380 <put_FP_ledQ+0x64>)
    135c:	781a      	ldrb	r2, [r3, #0]
    135e:	4b08      	ldr	r3, [pc, #32]	; (1380 <put_FP_ledQ+0x64>)
    1360:	785b      	ldrb	r3, [r3, #1]
    1362:	1ad3      	subs	r3, r2, r3
    1364:	b2da      	uxtb	r2, r3
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <put_FP_ledQ+0x64>)
    1368:	709a      	strb	r2, [r3, #2]
		FPledQ.length = FPledQ.length & (FP_QUE_SIZE-1);				// make sure positive
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <put_FP_ledQ+0x64>)
    136c:	789b      	ldrb	r3, [r3, #2]
    136e:	220f      	movs	r2, #15
    1370:	4013      	ands	r3, r2
    1372:	b2da      	uxtb	r2, r3
    1374:	4b02      	ldr	r3, [pc, #8]	; (1380 <put_FP_ledQ+0x64>)
    1376:	709a      	strb	r2, [r3, #2]
	}
}
    1378:	46bd      	mov	sp, r7
    137a:	b002      	add	sp, #8
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	200000ec 	.word	0x200000ec

00001384 <_get_FP_ledQ>:

void _get_FP_ledQ(uint8_t *ptr)				 // only used in this file
{
    1384:	b580      	push	{r7, lr}
    1386:	b082      	sub	sp, #8
    1388:	af00      	add	r7, sp, #0
    138a:	6078      	str	r0, [r7, #4]
	if (FPledQ.length >0)
    138c:	4b15      	ldr	r3, [pc, #84]	; (13e4 <_get_FP_ledQ+0x60>)
    138e:	789b      	ldrb	r3, [r3, #2]
    1390:	2b00      	cmp	r3, #0
    1392:	d023      	beq.n	13dc <_get_FP_ledQ+0x58>
	{
		*ptr = FPledQ.val[FPledQ.buff_out];
    1394:	4b13      	ldr	r3, [pc, #76]	; (13e4 <_get_FP_ledQ+0x60>)
    1396:	785b      	ldrb	r3, [r3, #1]
    1398:	1c1a      	adds	r2, r3, #0
    139a:	4b12      	ldr	r3, [pc, #72]	; (13e4 <_get_FP_ledQ+0x60>)
    139c:	189b      	adds	r3, r3, r2
    139e:	78da      	ldrb	r2, [r3, #3]
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	701a      	strb	r2, [r3, #0]
		FPledQ.buff_out++;
    13a4:	4b0f      	ldr	r3, [pc, #60]	; (13e4 <_get_FP_ledQ+0x60>)
    13a6:	785b      	ldrb	r3, [r3, #1]
    13a8:	3301      	adds	r3, #1
    13aa:	b2da      	uxtb	r2, r3
    13ac:	4b0d      	ldr	r3, [pc, #52]	; (13e4 <_get_FP_ledQ+0x60>)
    13ae:	705a      	strb	r2, [r3, #1]
		FPledQ.buff_out = FPledQ.buff_out & (FP_QUE_SIZE-1);
    13b0:	4b0c      	ldr	r3, [pc, #48]	; (13e4 <_get_FP_ledQ+0x60>)
    13b2:	785b      	ldrb	r3, [r3, #1]
    13b4:	220f      	movs	r2, #15
    13b6:	4013      	ands	r3, r2
    13b8:	b2da      	uxtb	r2, r3
    13ba:	4b0a      	ldr	r3, [pc, #40]	; (13e4 <_get_FP_ledQ+0x60>)
    13bc:	705a      	strb	r2, [r3, #1]
		FPledQ.length = FPledQ.buff_in - FPledQ.buff_out;			// can be negative
    13be:	4b09      	ldr	r3, [pc, #36]	; (13e4 <_get_FP_ledQ+0x60>)
    13c0:	781a      	ldrb	r2, [r3, #0]
    13c2:	4b08      	ldr	r3, [pc, #32]	; (13e4 <_get_FP_ledQ+0x60>)
    13c4:	785b      	ldrb	r3, [r3, #1]
    13c6:	1ad3      	subs	r3, r2, r3
    13c8:	b2da      	uxtb	r2, r3
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <_get_FP_ledQ+0x60>)
    13cc:	709a      	strb	r2, [r3, #2]
		FPledQ.length = FPledQ.length & (FP_QUE_SIZE-1);		// make sure positive
    13ce:	4b05      	ldr	r3, [pc, #20]	; (13e4 <_get_FP_ledQ+0x60>)
    13d0:	789b      	ldrb	r3, [r3, #2]
    13d2:	220f      	movs	r2, #15
    13d4:	4013      	ands	r3, r2
    13d6:	b2da      	uxtb	r2, r3
    13d8:	4b02      	ldr	r3, [pc, #8]	; (13e4 <_get_FP_ledQ+0x60>)
    13da:	709a      	strb	r2, [r3, #2]
	}
}
    13dc:	46bd      	mov	sp, r7
    13de:	b002      	add	sp, #8
    13e0:	bd80      	pop	{r7, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	200000ec 	.word	0x200000ec

000013e8 <get_FP_swQ>:

void get_FP_swQ(uint8_t *ptr)				// pull FP switch data
{
    13e8:	b580      	push	{r7, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	af00      	add	r7, sp, #0
    13ee:	6078      	str	r0, [r7, #4]
	if (FPswQ.length >0)
    13f0:	4b17      	ldr	r3, [pc, #92]	; (1450 <get_FP_swQ+0x68>)
    13f2:	789b      	ldrb	r3, [r3, #2]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d024      	beq.n	1442 <get_FP_swQ+0x5a>
	{
		*ptr = FPswQ.val[FPswQ.buff_out];
    13f8:	4b15      	ldr	r3, [pc, #84]	; (1450 <get_FP_swQ+0x68>)
    13fa:	785b      	ldrb	r3, [r3, #1]
    13fc:	1c1a      	adds	r2, r3, #0
    13fe:	4b14      	ldr	r3, [pc, #80]	; (1450 <get_FP_swQ+0x68>)
    1400:	189b      	adds	r3, r3, r2
    1402:	78da      	ldrb	r2, [r3, #3]
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	701a      	strb	r2, [r3, #0]
		FPswQ.buff_out++;
    1408:	4b11      	ldr	r3, [pc, #68]	; (1450 <get_FP_swQ+0x68>)
    140a:	785b      	ldrb	r3, [r3, #1]
    140c:	3301      	adds	r3, #1
    140e:	b2da      	uxtb	r2, r3
    1410:	4b0f      	ldr	r3, [pc, #60]	; (1450 <get_FP_swQ+0x68>)
    1412:	705a      	strb	r2, [r3, #1]
		FPswQ.buff_out = FPswQ.buff_out & (FP_QUE_SIZE-1);
    1414:	4b0e      	ldr	r3, [pc, #56]	; (1450 <get_FP_swQ+0x68>)
    1416:	785b      	ldrb	r3, [r3, #1]
    1418:	220f      	movs	r2, #15
    141a:	4013      	ands	r3, r2
    141c:	b2da      	uxtb	r2, r3
    141e:	4b0c      	ldr	r3, [pc, #48]	; (1450 <get_FP_swQ+0x68>)
    1420:	705a      	strb	r2, [r3, #1]
		FPswQ.length = FPswQ.buff_in - FPswQ.buff_out;			// can be negative
    1422:	4b0b      	ldr	r3, [pc, #44]	; (1450 <get_FP_swQ+0x68>)
    1424:	781a      	ldrb	r2, [r3, #0]
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <get_FP_swQ+0x68>)
    1428:	785b      	ldrb	r3, [r3, #1]
    142a:	1ad3      	subs	r3, r2, r3
    142c:	b2da      	uxtb	r2, r3
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <get_FP_swQ+0x68>)
    1430:	709a      	strb	r2, [r3, #2]
		FPswQ.length = FPswQ.length & (FP_QUE_SIZE-1);		// make sure positive
    1432:	4b07      	ldr	r3, [pc, #28]	; (1450 <get_FP_swQ+0x68>)
    1434:	789b      	ldrb	r3, [r3, #2]
    1436:	220f      	movs	r2, #15
    1438:	4013      	ands	r3, r2
    143a:	b2da      	uxtb	r2, r3
    143c:	4b04      	ldr	r3, [pc, #16]	; (1450 <get_FP_swQ+0x68>)
    143e:	709a      	strb	r2, [r3, #2]
    1440:	e002      	b.n	1448 <get_FP_swQ+0x60>
	}
	else *ptr = FP_SW_NO_CHANGE;
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	22f7      	movs	r2, #247	; 0xf7
    1446:	701a      	strb	r2, [r3, #0]
}
    1448:	46bd      	mov	sp, r7
    144a:	b002      	add	sp, #8
    144c:	bd80      	pop	{r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	2000013c 	.word	0x2000013c

00001454 <spi_master_to_FP_callback>:


//! [callback]
static void spi_master_to_FP_callback(struct spi_module *const module)
{
    1454:	b580      	push	{r7, lr}
    1456:	b082      	sub	sp, #8
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
	// finish this transfer
	transfer_complete_spi_master_to_FP = true;
    145c:	4b09      	ldr	r3, [pc, #36]	; (1484 <spi_master_to_FP_callback+0x30>)
    145e:	2201      	movs	r2, #1
    1460:	701a      	strb	r2, [r3, #0]
	if(FP_rx_buffer[0]!=FP_SW_NO_CHANGE) _put_mFP_swQ();
    1462:	4b09      	ldr	r3, [pc, #36]	; (1488 <spi_master_to_FP_callback+0x34>)
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	2bf7      	cmp	r3, #247	; 0xf7
    1468:	d001      	beq.n	146e <spi_master_to_FP_callback+0x1a>
    146a:	4b08      	ldr	r3, [pc, #32]	; (148c <spi_master_to_FP_callback+0x38>)
    146c:	4798      	blx	r3
	spi_select_slave(&spi_master_to_FP_instance, &FP_slave_instance, false);				 //! [deselect_slave]
    146e:	4a08      	ldr	r2, [pc, #32]	; (1490 <spi_master_to_FP_callback+0x3c>)
    1470:	4b08      	ldr	r3, [pc, #32]	; (1494 <spi_master_to_FP_callback+0x40>)
    1472:	1c10      	adds	r0, r2, #0
    1474:	1c19      	adds	r1, r3, #0
    1476:	2200      	movs	r2, #0
    1478:	4b07      	ldr	r3, [pc, #28]	; (1498 <spi_master_to_FP_callback+0x44>)
    147a:	4798      	blx	r3

}
    147c:	46bd      	mov	sp, r7
    147e:	b002      	add	sp, #8
    1480:	bd80      	pop	{r7, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	20000134 	.word	0x20000134
    1488:	20000138 	.word	0x20000138
    148c:	000012a1 	.word	0x000012a1
    1490:	20000100 	.word	0x20000100
    1494:	20000150 	.word	0x20000150
    1498:	0000450d 	.word	0x0000450d

0000149c <configure_spi_master_to_FP_callbacks>:


//! [conf_callback]
void configure_spi_master_to_FP_callbacks(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	spi_register_callback(&spi_master_to_FP_instance, spi_master_to_FP_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    14a0:	4a06      	ldr	r2, [pc, #24]	; (14bc <configure_spi_master_to_FP_callbacks+0x20>)
    14a2:	4b07      	ldr	r3, [pc, #28]	; (14c0 <configure_spi_master_to_FP_callbacks+0x24>)
    14a4:	1c10      	adds	r0, r2, #0
    14a6:	1c19      	adds	r1, r3, #0
    14a8:	2202      	movs	r2, #2
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <configure_spi_master_to_FP_callbacks+0x28>)
    14ac:	4798      	blx	r3
	spi_enable_callback(&spi_master_to_FP_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    14ae:	4b03      	ldr	r3, [pc, #12]	; (14bc <configure_spi_master_to_FP_callbacks+0x20>)
    14b0:	1c18      	adds	r0, r3, #0
    14b2:	2102      	movs	r1, #2
    14b4:	4b04      	ldr	r3, [pc, #16]	; (14c8 <configure_spi_master_to_FP_callbacks+0x2c>)
    14b6:	4798      	blx	r3
}
    14b8:	46bd      	mov	sp, r7
    14ba:	bd80      	pop	{r7, pc}
    14bc:	20000100 	.word	0x20000100
    14c0:	00001455 	.word	0x00001455
    14c4:	00004655 	.word	0x00004655
    14c8:	000011e1 	.word	0x000011e1

000014cc <configure_spi_master_to_FP>:
//! [conf_callback]


//! [configure_spi]
void configure_spi_master_to_FP(void)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b08e      	sub	sp, #56	; 0x38
    14d0:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;

	spi_slave_inst_get_config_defaults(&slave_dev_config);
    14d2:	1c3b      	adds	r3, r7, #0
    14d4:	1c18      	adds	r0, r3, #0
    14d6:	4b1c      	ldr	r3, [pc, #112]	; (1548 <configure_spi_master_to_FP+0x7c>)
    14d8:	4798      	blx	r3
																// setup 3 slave cs
	slave_dev_config.ss_pin = MASTERtoFP_SPI_CS_PIN;
    14da:	1c3b      	adds	r3, r7, #0
    14dc:	2211      	movs	r2, #17
    14de:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&FP_slave_instance, &slave_dev_config);
    14e0:	4a1a      	ldr	r2, [pc, #104]	; (154c <configure_spi_master_to_FP+0x80>)
    14e2:	1c3b      	adds	r3, r7, #0
    14e4:	1c10      	adds	r0, r2, #0
    14e6:	1c19      	adds	r1, r3, #0
    14e8:	4b19      	ldr	r3, [pc, #100]	; (1550 <configure_spi_master_to_FP+0x84>)
    14ea:	4798      	blx	r3

	spi_get_config_defaults(&config_spi_master);
    14ec:	1d3b      	adds	r3, r7, #4
    14ee:	1c18      	adds	r0, r3, #0
    14f0:	4b18      	ldr	r3, [pc, #96]	; (1554 <configure_spi_master_to_FP+0x88>)
    14f2:	4798      	blx	r3
	config_spi_master.generator_source = GCLK_GENERATOR_3;							// generator 3 has a 10 prescaler
    14f4:	1d3b      	adds	r3, r7, #4
    14f6:	2220      	movs	r2, #32
    14f8:	2103      	movs	r1, #3
    14fa:	5499      	strb	r1, [r3, r2]
	config_spi_master.mode_specific.master.baudrate = 10000;  
    14fc:	1d3b      	adds	r3, r7, #4
    14fe:	4a16      	ldr	r2, [pc, #88]	; (1558 <configure_spi_master_to_FP+0x8c>)
    1500:	615a      	str	r2, [r3, #20]
	
	config_spi_master.mux_setting = MASTERtoFP_SPI_SERCOM_MUX_SETTING;
    1502:	1d3b      	adds	r3, r7, #4
    1504:	2280      	movs	r2, #128	; 0x80
    1506:	0252      	lsls	r2, r2, #9
    1508:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = MASTERtoFP_SPI_SERCOM_PINMUX_PAD0;
    150a:	1d3b      	adds	r3, r7, #4
    150c:	4a13      	ldr	r2, [pc, #76]	; (155c <configure_spi_master_to_FP+0x90>)
    150e:	625a      	str	r2, [r3, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;;
    1510:	1d3b      	adds	r3, r7, #4
    1512:	2201      	movs	r2, #1
    1514:	4252      	negs	r2, r2
    1516:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad2 = MASTERtoFP_SPI_SERCOM_PINMUX_PAD2;
    1518:	1d3b      	adds	r3, r7, #4
    151a:	4a11      	ldr	r2, [pc, #68]	; (1560 <configure_spi_master_to_FP+0x94>)
    151c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = MASTERtoFP_SPI_SERCOM_PINMUX_PAD3;
    151e:	1d3b      	adds	r3, r7, #4
    1520:	4a10      	ldr	r2, [pc, #64]	; (1564 <configure_spi_master_to_FP+0x98>)
    1522:	631a      	str	r2, [r3, #48]	; 0x30
	spi_init(&spi_master_to_FP_instance, MASTERtoFP_SPI_MODULE, &config_spi_master);
    1524:	4a10      	ldr	r2, [pc, #64]	; (1568 <configure_spi_master_to_FP+0x9c>)
    1526:	4911      	ldr	r1, [pc, #68]	; (156c <configure_spi_master_to_FP+0xa0>)
    1528:	1d3b      	adds	r3, r7, #4
    152a:	1c10      	adds	r0, r2, #0
    152c:	1c1a      	adds	r2, r3, #0
    152e:	4b10      	ldr	r3, [pc, #64]	; (1570 <configure_spi_master_to_FP+0xa4>)
    1530:	4798      	blx	r3
	spi_enable(&spi_master_to_FP_instance);
    1532:	4b0d      	ldr	r3, [pc, #52]	; (1568 <configure_spi_master_to_FP+0x9c>)
    1534:	1c18      	adds	r0, r3, #0
    1536:	4b0f      	ldr	r3, [pc, #60]	; (1574 <configure_spi_master_to_FP+0xa8>)
    1538:	4798      	blx	r3

	FP_tx_buffer[0]	= FP_LED_ALL_OFF;
    153a:	4b0f      	ldr	r3, [pc, #60]	; (1578 <configure_spi_master_to_FP+0xac>)
    153c:	22fa      	movs	r2, #250	; 0xfa
    153e:	701a      	strb	r2, [r3, #0]
}
    1540:	46bd      	mov	sp, r7
    1542:	b00e      	add	sp, #56	; 0x38
    1544:	bd80      	pop	{r7, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	00001111 	.word	0x00001111
    154c:	20000150 	.word	0x20000150
    1550:	00001131 	.word	0x00001131
    1554:	00001099 	.word	0x00001099
    1558:	00002710 	.word	0x00002710
    155c:	00100002 	.word	0x00100002
    1560:	00120002 	.word	0x00120002
    1564:	00130002 	.word	0x00130002
    1568:	20000100 	.word	0x20000100
    156c:	42000c00 	.word	0x42000c00
    1570:	00004369 	.word	0x00004369
    1574:	00001195 	.word	0x00001195
    1578:	200000e8 	.word	0x200000e8

0000157c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    157c:	b580      	push	{r7, lr}
    157e:	b084      	sub	sp, #16
    1580:	af00      	add	r7, sp, #0
    1582:	1c02      	adds	r2, r0, #0
    1584:	1dfb      	adds	r3, r7, #7
    1586:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1588:	230f      	movs	r3, #15
    158a:	18fb      	adds	r3, r7, r3
    158c:	1dfa      	adds	r2, r7, #7
    158e:	7812      	ldrb	r2, [r2, #0]
    1590:	09d2      	lsrs	r2, r2, #7
    1592:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1594:	230e      	movs	r3, #14
    1596:	18fb      	adds	r3, r7, r3
    1598:	1dfa      	adds	r2, r7, #7
    159a:	7812      	ldrb	r2, [r2, #0]
    159c:	0952      	lsrs	r2, r2, #5
    159e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    15a0:	4b0d      	ldr	r3, [pc, #52]	; (15d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    15a2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    15a4:	230f      	movs	r3, #15
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d10f      	bne.n	15ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    15ae:	230f      	movs	r3, #15
    15b0:	18fb      	adds	r3, r7, r3
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	009b      	lsls	r3, r3, #2
    15b6:	2210      	movs	r2, #16
    15b8:	4694      	mov	ip, r2
    15ba:	44bc      	add	ip, r7
    15bc:	4463      	add	r3, ip
    15be:	3b08      	subs	r3, #8
    15c0:	681a      	ldr	r2, [r3, #0]
    15c2:	230e      	movs	r3, #14
    15c4:	18fb      	adds	r3, r7, r3
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	01db      	lsls	r3, r3, #7
    15ca:	18d3      	adds	r3, r2, r3
    15cc:	e000      	b.n	15d0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    15ce:	2300      	movs	r3, #0
	}
}
    15d0:	1c18      	adds	r0, r3, #0
    15d2:	46bd      	mov	sp, r7
    15d4:	b004      	add	sp, #16
    15d6:	bd80      	pop	{r7, pc}
    15d8:	41004400 	.word	0x41004400

000015dc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    15dc:	b580      	push	{r7, lr}
    15de:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    15e0:	4b03      	ldr	r3, [pc, #12]	; (15f0 <system_interrupt_enable_global+0x14>)
    15e2:	2201      	movs	r2, #1
    15e4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    15e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    15ea:	b662      	cpsie	i
}
    15ec:	46bd      	mov	sp, r7
    15ee:	bd80      	pop	{r7, pc}
    15f0:	20000010 	.word	0x20000010

000015f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	b082      	sub	sp, #8
    15f8:	af00      	add	r7, sp, #0
    15fa:	1c02      	adds	r2, r0, #0
    15fc:	1dfb      	adds	r3, r7, #7
    15fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1600:	1dfb      	adds	r3, r7, #7
    1602:	781b      	ldrb	r3, [r3, #0]
    1604:	1c18      	adds	r0, r3, #0
    1606:	4b03      	ldr	r3, [pc, #12]	; (1614 <port_get_group_from_gpio_pin+0x20>)
    1608:	4798      	blx	r3
    160a:	1c03      	adds	r3, r0, #0
}
    160c:	1c18      	adds	r0, r3, #0
    160e:	46bd      	mov	sp, r7
    1610:	b002      	add	sp, #8
    1612:	bd80      	pop	{r7, pc}
    1614:	0000157d 	.word	0x0000157d

00001618 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	2200      	movs	r2, #0
    1624:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	2201      	movs	r2, #1
    162a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	2200      	movs	r2, #0
    1630:	709a      	strb	r2, [r3, #2]
}
    1632:	46bd      	mov	sp, r7
    1634:	b002      	add	sp, #8
    1636:	bd80      	pop	{r7, pc}

00001638 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1638:	b580      	push	{r7, lr}
    163a:	b084      	sub	sp, #16
    163c:	af00      	add	r7, sp, #0
    163e:	1c02      	adds	r2, r0, #0
    1640:	1dfb      	adds	r3, r7, #7
    1642:	701a      	strb	r2, [r3, #0]
    1644:	1dbb      	adds	r3, r7, #6
    1646:	1c0a      	adds	r2, r1, #0
    1648:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    164a:	1dfb      	adds	r3, r7, #7
    164c:	781b      	ldrb	r3, [r3, #0]
    164e:	1c18      	adds	r0, r3, #0
    1650:	4b0c      	ldr	r3, [pc, #48]	; (1684 <port_pin_set_output_level+0x4c>)
    1652:	4798      	blx	r3
    1654:	1c03      	adds	r3, r0, #0
    1656:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1658:	1dfb      	adds	r3, r7, #7
    165a:	781b      	ldrb	r3, [r3, #0]
    165c:	221f      	movs	r2, #31
    165e:	4013      	ands	r3, r2
    1660:	2201      	movs	r2, #1
    1662:	409a      	lsls	r2, r3
    1664:	1c13      	adds	r3, r2, #0
    1666:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1668:	1dbb      	adds	r3, r7, #6
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	2b00      	cmp	r3, #0
    166e:	d003      	beq.n	1678 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	68ba      	ldr	r2, [r7, #8]
    1674:	619a      	str	r2, [r3, #24]
    1676:	e002      	b.n	167e <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	68ba      	ldr	r2, [r7, #8]
    167c:	615a      	str	r2, [r3, #20]
	}
}
    167e:	46bd      	mov	sp, r7
    1680:	b004      	add	sp, #16
    1682:	bd80      	pop	{r7, pc}
    1684:	000015f5 	.word	0x000015f5

00001688 <init>:
uint16_t volatile length;
extern uint8_t volatile spiFreqTimer;


void init(void) 
{
    1688:	b590      	push	{r4, r7, lr}
    168a:	b091      	sub	sp, #68	; 0x44
    168c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    168e:	2334      	movs	r3, #52	; 0x34
    1690:	18fb      	adds	r3, r7, r3
    1692:	1c18      	adds	r0, r3, #0
    1694:	4b7c      	ldr	r3, [pc, #496]	; (1888 <init+0x200>)
    1696:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1698:	2334      	movs	r3, #52	; 0x34
    169a:	18fb      	adds	r3, r7, r3
    169c:	2201      	movs	r2, #1
    169e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RUN_LED, &pin_conf);
    16a0:	2334      	movs	r3, #52	; 0x34
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	2000      	movs	r0, #0
    16a6:	1c19      	adds	r1, r3, #0
    16a8:	4b78      	ldr	r3, [pc, #480]	; (188c <init+0x204>)
    16aa:	4798      	blx	r3
	port_pin_set_output_level(RUN_LED, 0);
    16ac:	2000      	movs	r0, #0
    16ae:	2100      	movs	r1, #0
    16b0:	4b77      	ldr	r3, [pc, #476]	; (1890 <init+0x208>)
    16b2:	4798      	blx	r3

	port_pin_set_config(LOOP_IND, &pin_conf);
    16b4:	2334      	movs	r3, #52	; 0x34
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	2008      	movs	r0, #8
    16ba:	1c19      	adds	r1, r3, #0
    16bc:	4b73      	ldr	r3, [pc, #460]	; (188c <init+0x204>)
    16be:	4798      	blx	r3
		
	port_pin_set_config(Reset_BT_PIN, &pin_conf);
    16c0:	2334      	movs	r3, #52	; 0x34
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	2014      	movs	r0, #20
    16c6:	1c19      	adds	r1, r3, #0
    16c8:	4b70      	ldr	r3, [pc, #448]	; (188c <init+0x204>)
    16ca:	4798      	blx	r3
	port_pin_set_output_level(Reset_BT_PIN, 1);
    16cc:	2014      	movs	r0, #20
    16ce:	2101      	movs	r1, #1
    16d0:	4b6f      	ldr	r3, [pc, #444]	; (1890 <init+0x208>)
    16d2:	4798      	blx	r3
	port_pin_set_config(MASTERtoFP_SPI_CS_PIN, &pin_conf);
    16d4:	2334      	movs	r3, #52	; 0x34
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	2011      	movs	r0, #17
    16da:	1c19      	adds	r1, r3, #0
    16dc:	4b6b      	ldr	r3, [pc, #428]	; (188c <init+0x204>)
    16de:	4798      	blx	r3
	port_pin_set_output_level(MASTERtoFP_SPI_CS_PIN, 1);
    16e0:	2011      	movs	r0, #17
    16e2:	2101      	movs	r1, #1
    16e4:	4b6a      	ldr	r3, [pc, #424]	; (1890 <init+0x208>)
    16e6:	4798      	blx	r3
	
	port_pin_set_config(TREBLE_CS0,&pin_conf);
    16e8:	2334      	movs	r3, #52	; 0x34
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	2005      	movs	r0, #5
    16ee:	1c19      	adds	r1, r3, #0
    16f0:	4b66      	ldr	r3, [pc, #408]	; (188c <init+0x204>)
    16f2:	4798      	blx	r3
 	port_pin_set_output_level(TREBLE_CS0, 1);
    16f4:	2005      	movs	r0, #5
    16f6:	2101      	movs	r1, #1
    16f8:	4b65      	ldr	r3, [pc, #404]	; (1890 <init+0x208>)
    16fa:	4798      	blx	r3
	port_pin_set_config(TREBLE_CS1,&pin_conf);
    16fc:	2334      	movs	r3, #52	; 0x34
    16fe:	18fb      	adds	r3, r7, r3
    1700:	2028      	movs	r0, #40	; 0x28
    1702:	1c19      	adds	r1, r3, #0
    1704:	4b61      	ldr	r3, [pc, #388]	; (188c <init+0x204>)
    1706:	4798      	blx	r3
 	port_pin_set_output_level(TREBLE_CS1, 1);
    1708:	2028      	movs	r0, #40	; 0x28
    170a:	2101      	movs	r1, #1
    170c:	4b60      	ldr	r3, [pc, #384]	; (1890 <init+0x208>)
    170e:	4798      	blx	r3
	port_pin_set_config(TREBLE_CS2,&pin_conf);
    1710:	2334      	movs	r3, #52	; 0x34
    1712:	18fb      	adds	r3, r7, r3
    1714:	2029      	movs	r0, #41	; 0x29
    1716:	1c19      	adds	r1, r3, #0
    1718:	4b5c      	ldr	r3, [pc, #368]	; (188c <init+0x204>)
    171a:	4798      	blx	r3
 	port_pin_set_output_level(TREBLE_CS2, 1);
    171c:	2029      	movs	r0, #41	; 0x29
    171e:	2101      	movs	r1, #1
    1720:	4b5b      	ldr	r3, [pc, #364]	; (1890 <init+0x208>)
    1722:	4798      	blx	r3


	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1724:	2334      	movs	r3, #52	; 0x34
    1726:	18fb      	adds	r3, r7, r3
    1728:	2200      	movs	r2, #0
    172a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;			
    172c:	2334      	movs	r3, #52	; 0x34
    172e:	18fb      	adds	r3, r7, r3
    1730:	2201      	movs	r2, #1
    1732:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(WT41_TABLET_CARRIER_DETECT_PIN, &pin_conf);
    1734:	2334      	movs	r3, #52	; 0x34
    1736:	18fb      	adds	r3, r7, r3
    1738:	2017      	movs	r0, #23
    173a:	1c19      	adds	r1, r3, #0
    173c:	4b53      	ldr	r3, [pc, #332]	; (188c <init+0x204>)
    173e:	4798      	blx	r3
	port_pin_set_config(WT41_MIDI_CARRIER_DETECT_PIN, &pin_conf);
    1740:	2334      	movs	r3, #52	; 0x34
    1742:	18fb      	adds	r3, r7, r3
    1744:	2016      	movs	r0, #22
    1746:	1c19      	adds	r1, r3, #0
    1748:	4b50      	ldr	r3, [pc, #320]	; (188c <init+0x204>)
    174a:	4798      	blx	r3
	
	
	system_clock_init();
    174c:	4b51      	ldr	r3, [pc, #324]	; (1894 <init+0x20c>)
    174e:	4798      	blx	r3
	

	// setup timer
	configure_tc();
    1750:	4b51      	ldr	r3, [pc, #324]	; (1898 <init+0x210>)
    1752:	4798      	blx	r3
	configure_tc_callbacks();
    1754:	4b51      	ldr	r3, [pc, #324]	; (189c <init+0x214>)
    1756:	4798      	blx	r3
	system_interrupt_enable_global();
    1758:	4b51      	ldr	r3, [pc, #324]	; (18a0 <init+0x218>)
    175a:	4798      	blx	r3


	// spi for treble
	configure_spi_master_to_treble();
    175c:	4b51      	ldr	r3, [pc, #324]	; (18a4 <init+0x21c>)
    175e:	4798      	blx	r3
	configure_spi_master_to_treble_callbacks();
    1760:	4b51      	ldr	r3, [pc, #324]	; (18a8 <init+0x220>)
    1762:	4798      	blx	r3
	spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance+2, true);
    1764:	4a51      	ldr	r2, [pc, #324]	; (18ac <init+0x224>)
    1766:	4b52      	ldr	r3, [pc, #328]	; (18b0 <init+0x228>)
    1768:	1c10      	adds	r0, r2, #0
    176a:	1c19      	adds	r1, r3, #0
    176c:	2201      	movs	r2, #1
    176e:	4b51      	ldr	r3, [pc, #324]	; (18b4 <init+0x22c>)
    1770:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_to_treble_instance, trebleTxBuff,trebleRdBuff,1);
    1772:	494e      	ldr	r1, [pc, #312]	; (18ac <init+0x224>)
    1774:	4a50      	ldr	r2, [pc, #320]	; (18b8 <init+0x230>)
    1776:	4b51      	ldr	r3, [pc, #324]	; (18bc <init+0x234>)
    1778:	1c08      	adds	r0, r1, #0
    177a:	1c11      	adds	r1, r2, #0
    177c:	1c1a      	adds	r2, r3, #0
    177e:	2301      	movs	r3, #1
    1780:	4c4f      	ldr	r4, [pc, #316]	; (18c0 <init+0x238>)
    1782:	47a0      	blx	r4
	
	// spi for FP (front panel	)
	configure_spi_master_to_FP();
    1784:	4b4f      	ldr	r3, [pc, #316]	; (18c4 <init+0x23c>)
    1786:	4798      	blx	r3
	configure_spi_master_to_FP_callbacks();
    1788:	4b4f      	ldr	r3, [pc, #316]	; (18c8 <init+0x240>)
    178a:	4798      	blx	r3
	// Start xfers;
	spiFreqTimer = 2;	// limit xfers to 50-100 per second
    178c:	4b4f      	ldr	r3, [pc, #316]	; (18cc <init+0x244>)
    178e:	2202      	movs	r2, #2
    1790:	701a      	strb	r2, [r3, #0]
	FP_tx_buffer[0] = FP_LED_NO_CHANGE;
    1792:	4b4f      	ldr	r3, [pc, #316]	; (18d0 <init+0x248>)
    1794:	22f7      	movs	r2, #247	; 0xf7
    1796:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_to_FP_instance, &FP_slave_instance, true);
    1798:	4a4e      	ldr	r2, [pc, #312]	; (18d4 <init+0x24c>)
    179a:	4b4f      	ldr	r3, [pc, #316]	; (18d8 <init+0x250>)
    179c:	1c10      	adds	r0, r2, #0
    179e:	1c19      	adds	r1, r3, #0
    17a0:	2201      	movs	r2, #1
    17a2:	4b44      	ldr	r3, [pc, #272]	; (18b4 <init+0x22c>)
    17a4:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_to_FP_instance, FP_tx_buffer,FP_rx_buffer,1);
    17a6:	494b      	ldr	r1, [pc, #300]	; (18d4 <init+0x24c>)
    17a8:	4a49      	ldr	r2, [pc, #292]	; (18d0 <init+0x248>)
    17aa:	4b4c      	ldr	r3, [pc, #304]	; (18dc <init+0x254>)
    17ac:	1c08      	adds	r0, r1, #0
    17ae:	1c11      	adds	r1, r2, #0
    17b0:	1c1a      	adds	r2, r3, #0
    17b2:	2301      	movs	r3, #1
    17b4:	4c42      	ldr	r4, [pc, #264]	; (18c0 <init+0x238>)
    17b6:	47a0      	blx	r4


	struct usartQdef *usartQptr;
	

	usartQptr = &midiQ;
    17b8:	4b49      	ldr	r3, [pc, #292]	; (18e0 <init+0x258>)
    17ba:	63bb      	str	r3, [r7, #56]	; 0x38
	init_usart_Qs(usartQptr);
    17bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17be:	1c18      	adds	r0, r3, #0
    17c0:	4b48      	ldr	r3, [pc, #288]	; (18e4 <init+0x25c>)
    17c2:	4798      	blx	r3
	usartQptr = &androidQ;
    17c4:	4b48      	ldr	r3, [pc, #288]	; (18e8 <init+0x260>)
    17c6:	63bb      	str	r3, [r7, #56]	; 0x38
	init_usart_Qs(usartQptr);
    17c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17ca:	1c18      	adds	r0, r3, #0
    17cc:	4b45      	ldr	r3, [pc, #276]	; (18e4 <init+0x25c>)
    17ce:	4798      	blx	r3
	
	configure_MIDI_usart();
    17d0:	4b46      	ldr	r3, [pc, #280]	; (18ec <init+0x264>)
    17d2:	4798      	blx	r3
	configure_MIDI_usart_callbacks();
    17d4:	4b46      	ldr	r3, [pc, #280]	; (18f0 <init+0x268>)
    17d6:	4798      	blx	r3

	configure_ANDROID_usart();
    17d8:	4b46      	ldr	r3, [pc, #280]	; (18f4 <init+0x26c>)
    17da:	4798      	blx	r3
	configure_ANDROID_usart_callbacks();
    17dc:	4b46      	ldr	r3, [pc, #280]	; (18f8 <init+0x270>)
    17de:	4798      	blx	r3
	

	//ANDROID_usart_instance.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX	
	//MIDI_usart_instance.hw->USART.INTENCLR.reg = SERCOM_USART_INTFLAG_TXC; // disable TX

	MIDI_in_SSP_mode =  true;				// let data go into rx q on callbacks during init
    17e0:	4b46      	ldr	r3, [pc, #280]	; (18fc <init+0x274>)
    17e2:	2201      	movs	r2, #1
    17e4:	701a      	strb	r2, [r3, #0]
	Android_in_SSP_mode = 	true;
    17e6:	4b46      	ldr	r3, [pc, #280]	; (1900 <init+0x278>)
    17e8:	2201      	movs	r2, #1
    17ea:	701a      	strb	r2, [r3, #0]

	reset_BT();
    17ec:	4b45      	ldr	r3, [pc, #276]	; (1904 <init+0x27c>)
    17ee:	4798      	blx	r3
		
	uint8_t rx_buffer_M[2], rx_buffer_A[2];
	usart_read_buffer_job(&ANDROID_usart_instance,(uint8_t *)rx_buffer_A, 1);				// start RX jobs
    17f0:	4a45      	ldr	r2, [pc, #276]	; (1908 <init+0x280>)
    17f2:	232c      	movs	r3, #44	; 0x2c
    17f4:	18fb      	adds	r3, r7, r3
    17f6:	1c10      	adds	r0, r2, #0
    17f8:	1c19      	adds	r1, r3, #0
    17fa:	2201      	movs	r2, #1
    17fc:	4b43      	ldr	r3, [pc, #268]	; (190c <init+0x284>)
    17fe:	4798      	blx	r3
	usart_read_buffer_job(&MIDI_usart_instance,(uint8_t *)rx_buffer_M, 1);
    1800:	4a43      	ldr	r2, [pc, #268]	; (1910 <init+0x288>)
    1802:	2330      	movs	r3, #48	; 0x30
    1804:	18fb      	adds	r3, r7, r3
    1806:	1c10      	adds	r0, r2, #0
    1808:	1c19      	adds	r1, r3, #0
    180a:	2201      	movs	r2, #1
    180c:	4b3f      	ldr	r3, [pc, #252]	; (190c <init+0x284>)
    180e:	4798      	blx	r3
	
	wait_10msSec(3);	
    1810:	2003      	movs	r0, #3
    1812:	4b40      	ldr	r3, [pc, #256]	; (1914 <init+0x28c>)
    1814:	4798      	blx	r3

// prime the pump

	uint8_t btStr[40] = "at\r\n";
    1816:	1d39      	adds	r1, r7, #4
    1818:	4a3f      	ldr	r2, [pc, #252]	; (1918 <init+0x290>)
    181a:	1c0b      	adds	r3, r1, #0
    181c:	6810      	ldr	r0, [r2, #0]
    181e:	6018      	str	r0, [r3, #0]
    1820:	7912      	ldrb	r2, [r2, #4]
    1822:	711a      	strb	r2, [r3, #4]
    1824:	2305      	movs	r3, #5
    1826:	18cb      	adds	r3, r1, r3
    1828:	2223      	movs	r2, #35	; 0x23
    182a:	1c18      	adds	r0, r3, #0
    182c:	2100      	movs	r1, #0
    182e:	4b3b      	ldr	r3, [pc, #236]	; (191c <init+0x294>)
    1830:	4798      	blx	r3
//	put_tx_Q(&midiQ,btStr,strlen((char *)btStr));
//	put_tx_Q(&androidQ,btStr,strlen((char *)btStr));
	usart_write_buffer_wait(&ANDROID_usart_instance, btStr, strlen((char *)btStr));
    1832:	1d3b      	adds	r3, r7, #4
    1834:	1c18      	adds	r0, r3, #0
    1836:	4b3a      	ldr	r3, [pc, #232]	; (1920 <init+0x298>)
    1838:	4798      	blx	r3
    183a:	1c03      	adds	r3, r0, #0
    183c:	b29b      	uxth	r3, r3
    183e:	4932      	ldr	r1, [pc, #200]	; (1908 <init+0x280>)
    1840:	1d3a      	adds	r2, r7, #4
    1842:	1c08      	adds	r0, r1, #0
    1844:	1c11      	adds	r1, r2, #0
    1846:	1c1a      	adds	r2, r3, #0
    1848:	4b36      	ldr	r3, [pc, #216]	; (1924 <init+0x29c>)
    184a:	4798      	blx	r3
	usart_write_buffer_wait(&MIDI_usart_instance, btStr, strlen((char *)btStr));  
    184c:	1d3b      	adds	r3, r7, #4
    184e:	1c18      	adds	r0, r3, #0
    1850:	4b33      	ldr	r3, [pc, #204]	; (1920 <init+0x298>)
    1852:	4798      	blx	r3
    1854:	1c03      	adds	r3, r0, #0
    1856:	b29b      	uxth	r3, r3
    1858:	492d      	ldr	r1, [pc, #180]	; (1910 <init+0x288>)
    185a:	1d3a      	adds	r2, r7, #4
    185c:	1c08      	adds	r0, r1, #0
    185e:	1c11      	adds	r1, r2, #0
    1860:	1c1a      	adds	r2, r3, #0
    1862:	4b30      	ldr	r3, [pc, #192]	; (1924 <init+0x29c>)
    1864:	4798      	blx	r3

	// GET BUTTON PUSHES FROM FP
	//	   if 2 buttons pushed - initialize		33 & 25 (21h & 19h)
		wait_10msSec(100);	//{do_FP_SPI();}				// wait for FP xfer
    1866:	2064      	movs	r0, #100	; 0x64
    1868:	4b2a      	ldr	r3, [pc, #168]	; (1914 <init+0x28c>)
    186a:	4798      	blx	r3

		bool hex19found = false;						// check if the 2 buttons are pushed
    186c:	233f      	movs	r3, #63	; 0x3f
    186e:	18fb      	adds	r3, r7, r3
    1870:	2200      	movs	r2, #0
    1872:	701a      	strb	r2, [r3, #0]
		bool hex21found = false;
    1874:	233e      	movs	r3, #62	; 0x3e
    1876:	18fb      	adds	r3, r7, r3
    1878:	2200      	movs	r2, #0
    187a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i<10; i++)
    187c:	233d      	movs	r3, #61	; 0x3d
    187e:	18fb      	adds	r3, r7, r3
    1880:	2200      	movs	r2, #0
    1882:	701a      	strb	r2, [r3, #0]
    1884:	e06f      	b.n	1966 <init+0x2de>
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	00001619 	.word	0x00001619
    188c:	000036ed 	.word	0x000036ed
    1890:	00001639 	.word	0x00001639
    1894:	000051a9 	.word	0x000051a9
    1898:	000033d5 	.word	0x000033d5
    189c:	00003431 	.word	0x00003431
    18a0:	000015dd 	.word	0x000015dd
    18a4:	00002ea9 	.word	0x00002ea9
    18a8:	00002e79 	.word	0x00002e79
    18ac:	20000668 	.word	0x20000668
    18b0:	20000662 	.word	0x20000662
    18b4:	0000450d 	.word	0x0000450d
    18b8:	20000004 	.word	0x20000004
    18bc:	20000658 	.word	0x20000658
    18c0:	0000469d 	.word	0x0000469d
    18c4:	000014cd 	.word	0x000014cd
    18c8:	0000149d 	.word	0x0000149d
    18cc:	20000730 	.word	0x20000730
    18d0:	200000e8 	.word	0x200000e8
    18d4:	20000100 	.word	0x20000100
    18d8:	20000150 	.word	0x20000150
    18dc:	20000138 	.word	0x20000138
    18e0:	200003ac 	.word	0x200003ac
    18e4:	00001e71 	.word	0x00001e71
    18e8:	200001a8 	.word	0x200001a8
    18ec:	00001f5d 	.word	0x00001f5d
    18f0:	00002111 	.word	0x00002111
    18f4:	00001edd 	.word	0x00001edd
    18f8:	0000215d 	.word	0x0000215d
    18fc:	20000094 	.word	0x20000094
    1900:	20000095 	.word	0x20000095
    1904:	000025d1 	.word	0x000025d1
    1908:	20000160 	.word	0x20000160
    190c:	00000985 	.word	0x00000985
    1910:	20000184 	.word	0x20000184
    1914:	00003361 	.word	0x00003361
    1918:	00006ed8 	.word	0x00006ed8
    191c:	00006637 	.word	0x00006637
    1920:	000066a7 	.word	0x000066a7
    1924:	000006a9 	.word	0x000006a9
		{	if (FPswQ.val[i] == 0x19) hex19found = true;
    1928:	233d      	movs	r3, #61	; 0x3d
    192a:	18fb      	adds	r3, r7, r3
    192c:	781b      	ldrb	r3, [r3, #0]
    192e:	4a7d      	ldr	r2, [pc, #500]	; (1b24 <init+0x49c>)
    1930:	18d3      	adds	r3, r2, r3
    1932:	78db      	ldrb	r3, [r3, #3]
    1934:	2b19      	cmp	r3, #25
    1936:	d103      	bne.n	1940 <init+0x2b8>
    1938:	233f      	movs	r3, #63	; 0x3f
    193a:	18fb      	adds	r3, r7, r3
    193c:	2201      	movs	r2, #1
    193e:	701a      	strb	r2, [r3, #0]
			if (FPswQ.val[i] == 0x21) hex21found = true;
    1940:	233d      	movs	r3, #61	; 0x3d
    1942:	18fb      	adds	r3, r7, r3
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	4a77      	ldr	r2, [pc, #476]	; (1b24 <init+0x49c>)
    1948:	18d3      	adds	r3, r2, r3
    194a:	78db      	ldrb	r3, [r3, #3]
    194c:	2b21      	cmp	r3, #33	; 0x21
    194e:	d103      	bne.n	1958 <init+0x2d0>
    1950:	233e      	movs	r3, #62	; 0x3e
    1952:	18fb      	adds	r3, r7, r3
    1954:	2201      	movs	r2, #1
    1956:	701a      	strb	r2, [r3, #0]
	//	   if 2 buttons pushed - initialize		33 & 25 (21h & 19h)
		wait_10msSec(100);	//{do_FP_SPI();}				// wait for FP xfer

		bool hex19found = false;						// check if the 2 buttons are pushed
		bool hex21found = false;
		for(uint8_t i = 0; i<10; i++)
    1958:	233d      	movs	r3, #61	; 0x3d
    195a:	18fb      	adds	r3, r7, r3
    195c:	781a      	ldrb	r2, [r3, #0]
    195e:	233d      	movs	r3, #61	; 0x3d
    1960:	18fb      	adds	r3, r7, r3
    1962:	3201      	adds	r2, #1
    1964:	701a      	strb	r2, [r3, #0]
    1966:	233d      	movs	r3, #61	; 0x3d
    1968:	18fb      	adds	r3, r7, r3
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	2b09      	cmp	r3, #9
    196e:	d9db      	bls.n	1928 <init+0x2a0>
		{	if (FPswQ.val[i] == 0x19) hex19found = true;
			if (FPswQ.val[i] == 0x21) hex21found = true;
		}
		if (hex19found && hex21found)					// unpair the WT41's and send the initialization info
    1970:	233f      	movs	r3, #63	; 0x3f
    1972:	18fb      	adds	r3, r7, r3
    1974:	781b      	ldrb	r3, [r3, #0]
    1976:	2b00      	cmp	r3, #0
    1978:	d100      	bne.n	197c <init+0x2f4>
    197a:	e0ca      	b.n	1b12 <init+0x48a>
    197c:	233e      	movs	r3, #62	; 0x3e
    197e:	18fb      	adds	r3, r7, r3
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	2b00      	cmp	r3, #0
    1984:	d100      	bne.n	1988 <init+0x300>
    1986:	e0c4      	b.n	1b12 <init+0x48a>
		{
			put_FP_ledQ(40);	// light the LEDs			
    1988:	2028      	movs	r0, #40	; 0x28
    198a:	4b67      	ldr	r3, [pc, #412]	; (1b28 <init+0x4a0>)
    198c:	4798      	blx	r3
			put_FP_ledQ(32);
    198e:	2020      	movs	r0, #32
    1990:	4b65      	ldr	r3, [pc, #404]	; (1b28 <init+0x4a0>)
    1992:	4798      	blx	r3
			put_FP_ledQ(24);
    1994:	2018      	movs	r0, #24
    1996:	4b64      	ldr	r3, [pc, #400]	; (1b28 <init+0x4a0>)
    1998:	4798      	blx	r3
			put_FP_ledQ(16);
    199a:	2010      	movs	r0, #16
    199c:	4b62      	ldr	r3, [pc, #392]	; (1b28 <init+0x4a0>)
    199e:	4798      	blx	r3
//			wait_10msSec(100);	// wait .1 sec above to be sent
			
			MIDI_in_SSP_mode =  true;				// lets data go into rx q on callbacks
    19a0:	4b62      	ldr	r3, [pc, #392]	; (1b2c <init+0x4a4>)
    19a2:	2201      	movs	r2, #1
    19a4:	701a      	strb	r2, [r3, #0]
			Android_in_SSP_mode = 	true;
    19a6:	4b62      	ldr	r3, [pc, #392]	; (1b30 <init+0x4a8>)
    19a8:	2201      	movs	r2, #1
    19aa:	701a      	strb	r2, [r3, #0]
			unpair_WT41(&midiQ);
    19ac:	4b61      	ldr	r3, [pc, #388]	; (1b34 <init+0x4ac>)
    19ae:	1c18      	adds	r0, r3, #0
    19b0:	4b61      	ldr	r3, [pc, #388]	; (1b38 <init+0x4b0>)
    19b2:	4798      	blx	r3
			unpair_WT41(&androidQ);
    19b4:	4b61      	ldr	r3, [pc, #388]	; (1b3c <init+0x4b4>)
    19b6:	1c18      	adds	r0, r3, #0
    19b8:	4b5f      	ldr	r3, [pc, #380]	; (1b38 <init+0x4b0>)
    19ba:	4798      	blx	r3
	
			strcpy((char *)btStr,"at\r\nat\r\nset bt name ");		// rename
    19bc:	1d3b      	adds	r3, r7, #4
    19be:	4a60      	ldr	r2, [pc, #384]	; (1b40 <init+0x4b8>)
    19c0:	ca13      	ldmia	r2!, {r0, r1, r4}
    19c2:	c313      	stmia	r3!, {r0, r1, r4}
    19c4:	ca03      	ldmia	r2!, {r0, r1}
    19c6:	c303      	stmia	r3!, {r0, r1}
    19c8:	7812      	ldrb	r2, [r2, #0]
    19ca:	701a      	strb	r2, [r3, #0]
			strcat((char *)btStr,BT_NAME_MIDI_SLAVE);
    19cc:	1d3b      	adds	r3, r7, #4
    19ce:	1c18      	adds	r0, r3, #0
    19d0:	4b5c      	ldr	r3, [pc, #368]	; (1b44 <init+0x4bc>)
    19d2:	4798      	blx	r3
    19d4:	1c03      	adds	r3, r0, #0
    19d6:	1c1a      	adds	r2, r3, #0
    19d8:	1d3b      	adds	r3, r7, #4
    19da:	189a      	adds	r2, r3, r2
    19dc:	4b5a      	ldr	r3, [pc, #360]	; (1b48 <init+0x4c0>)
    19de:	1c11      	adds	r1, r2, #0
    19e0:	1c1a      	adds	r2, r3, #0
    19e2:	2308      	movs	r3, #8
    19e4:	1c08      	adds	r0, r1, #0
    19e6:	1c11      	adds	r1, r2, #0
    19e8:	1c1a      	adds	r2, r3, #0
    19ea:	4b58      	ldr	r3, [pc, #352]	; (1b4c <init+0x4c4>)
    19ec:	4798      	blx	r3
			strcat((char *)btStr,"\r\n");
    19ee:	1d3b      	adds	r3, r7, #4
    19f0:	1c18      	adds	r0, r3, #0
    19f2:	4b54      	ldr	r3, [pc, #336]	; (1b44 <init+0x4bc>)
    19f4:	4798      	blx	r3
    19f6:	1c03      	adds	r3, r0, #0
    19f8:	1c1a      	adds	r2, r3, #0
    19fa:	1d3b      	adds	r3, r7, #4
    19fc:	189a      	adds	r2, r3, r2
    19fe:	4b54      	ldr	r3, [pc, #336]	; (1b50 <init+0x4c8>)
    1a00:	1c11      	adds	r1, r2, #0
    1a02:	1c1a      	adds	r2, r3, #0
    1a04:	2303      	movs	r3, #3
    1a06:	1c08      	adds	r0, r1, #0
    1a08:	1c11      	adds	r1, r2, #0
    1a0a:	1c1a      	adds	r2, r3, #0
    1a0c:	4b4f      	ldr	r3, [pc, #316]	; (1b4c <init+0x4c4>)
    1a0e:	4798      	blx	r3
			put_tx_Q(&midiQ,btStr,strlen((char *)btStr));
    1a10:	1d3b      	adds	r3, r7, #4
    1a12:	1c18      	adds	r0, r3, #0
    1a14:	4b4b      	ldr	r3, [pc, #300]	; (1b44 <init+0x4bc>)
    1a16:	4798      	blx	r3
    1a18:	1c03      	adds	r3, r0, #0
    1a1a:	b2db      	uxtb	r3, r3
    1a1c:	4945      	ldr	r1, [pc, #276]	; (1b34 <init+0x4ac>)
    1a1e:	1d3a      	adds	r2, r7, #4
    1a20:	1c08      	adds	r0, r1, #0
    1a22:	1c11      	adds	r1, r2, #0
    1a24:	1c1a      	adds	r2, r3, #0
    1a26:	4b4b      	ldr	r3, [pc, #300]	; (1b54 <init+0x4cc>)
    1a28:	4798      	blx	r3
			wait_10msSec(10);	// wait .1 sec above to be sent
    1a2a:	200a      	movs	r0, #10
    1a2c:	4b4a      	ldr	r3, [pc, #296]	; (1b58 <init+0x4d0>)
    1a2e:	4798      	blx	r3

			strcpy((char *)btStr,"at\r\nat\r\nset bt name ");		// rename
    1a30:	1d3b      	adds	r3, r7, #4
    1a32:	4a43      	ldr	r2, [pc, #268]	; (1b40 <init+0x4b8>)
    1a34:	ca13      	ldmia	r2!, {r0, r1, r4}
    1a36:	c313      	stmia	r3!, {r0, r1, r4}
    1a38:	ca03      	ldmia	r2!, {r0, r1}
    1a3a:	c303      	stmia	r3!, {r0, r1}
    1a3c:	7812      	ldrb	r2, [r2, #0]
    1a3e:	701a      	strb	r2, [r3, #0]
			length = strlen((char *)btStr);
    1a40:	1d3b      	adds	r3, r7, #4
    1a42:	1c18      	adds	r0, r3, #0
    1a44:	4b3f      	ldr	r3, [pc, #252]	; (1b44 <init+0x4bc>)
    1a46:	4798      	blx	r3
    1a48:	1c03      	adds	r3, r0, #0
    1a4a:	b29a      	uxth	r2, r3
    1a4c:	4b43      	ldr	r3, [pc, #268]	; (1b5c <init+0x4d4>)
    1a4e:	801a      	strh	r2, [r3, #0]
			strcat((char *)btStr,BT_NAME_TABLET_SLAVE);
    1a50:	1d3b      	adds	r3, r7, #4
    1a52:	1c18      	adds	r0, r3, #0
    1a54:	4b3b      	ldr	r3, [pc, #236]	; (1b44 <init+0x4bc>)
    1a56:	4798      	blx	r3
    1a58:	1c03      	adds	r3, r0, #0
    1a5a:	1c1a      	adds	r2, r3, #0
    1a5c:	1d3b      	adds	r3, r7, #4
    1a5e:	189a      	adds	r2, r3, r2
    1a60:	4b3f      	ldr	r3, [pc, #252]	; (1b60 <init+0x4d8>)
    1a62:	1c11      	adds	r1, r2, #0
    1a64:	1c1a      	adds	r2, r3, #0
    1a66:	2308      	movs	r3, #8
    1a68:	1c08      	adds	r0, r1, #0
    1a6a:	1c11      	adds	r1, r2, #0
    1a6c:	1c1a      	adds	r2, r3, #0
    1a6e:	4b37      	ldr	r3, [pc, #220]	; (1b4c <init+0x4c4>)
    1a70:	4798      	blx	r3
			length = strlen((char *)btStr);
    1a72:	1d3b      	adds	r3, r7, #4
    1a74:	1c18      	adds	r0, r3, #0
    1a76:	4b33      	ldr	r3, [pc, #204]	; (1b44 <init+0x4bc>)
    1a78:	4798      	blx	r3
    1a7a:	1c03      	adds	r3, r0, #0
    1a7c:	b29a      	uxth	r2, r3
    1a7e:	4b37      	ldr	r3, [pc, #220]	; (1b5c <init+0x4d4>)
    1a80:	801a      	strh	r2, [r3, #0]
			strcat((char *)btStr,"\r\n");
    1a82:	1d3b      	adds	r3, r7, #4
    1a84:	1c18      	adds	r0, r3, #0
    1a86:	4b2f      	ldr	r3, [pc, #188]	; (1b44 <init+0x4bc>)
    1a88:	4798      	blx	r3
    1a8a:	1c03      	adds	r3, r0, #0
    1a8c:	1c1a      	adds	r2, r3, #0
    1a8e:	1d3b      	adds	r3, r7, #4
    1a90:	189a      	adds	r2, r3, r2
    1a92:	4b2f      	ldr	r3, [pc, #188]	; (1b50 <init+0x4c8>)
    1a94:	1c11      	adds	r1, r2, #0
    1a96:	1c1a      	adds	r2, r3, #0
    1a98:	2303      	movs	r3, #3
    1a9a:	1c08      	adds	r0, r1, #0
    1a9c:	1c11      	adds	r1, r2, #0
    1a9e:	1c1a      	adds	r2, r3, #0
    1aa0:	4b2a      	ldr	r3, [pc, #168]	; (1b4c <init+0x4c4>)
    1aa2:	4798      	blx	r3
			put_tx_Q(&androidQ,btStr,strlen((char *)btStr));
    1aa4:	1d3b      	adds	r3, r7, #4
    1aa6:	1c18      	adds	r0, r3, #0
    1aa8:	4b26      	ldr	r3, [pc, #152]	; (1b44 <init+0x4bc>)
    1aaa:	4798      	blx	r3
    1aac:	1c03      	adds	r3, r0, #0
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	4922      	ldr	r1, [pc, #136]	; (1b3c <init+0x4b4>)
    1ab2:	1d3a      	adds	r2, r7, #4
    1ab4:	1c08      	adds	r0, r1, #0
    1ab6:	1c11      	adds	r1, r2, #0
    1ab8:	1c1a      	adds	r2, r3, #0
    1aba:	4b26      	ldr	r3, [pc, #152]	; (1b54 <init+0x4cc>)
    1abc:	4798      	blx	r3
			wait_10msSec(10);	// wait .1 sec above to be sent
    1abe:	200a      	movs	r0, #10
    1ac0:	4b25      	ldr	r3, [pc, #148]	; (1b58 <init+0x4d0>)
    1ac2:	4798      	blx	r3
	
			strcpy((char *)btStr,WT41_CARRIER_DETECT_CMD);		
    1ac4:	1d3b      	adds	r3, r7, #4
    1ac6:	4a27      	ldr	r2, [pc, #156]	; (1b64 <init+0x4dc>)
    1ac8:	ca13      	ldmia	r2!, {r0, r1, r4}
    1aca:	c313      	stmia	r3!, {r0, r1, r4}
    1acc:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ace:	c313      	stmia	r3!, {r0, r1, r4}
    1ad0:	8811      	ldrh	r1, [r2, #0]
    1ad2:	8019      	strh	r1, [r3, #0]
    1ad4:	7892      	ldrb	r2, [r2, #2]
    1ad6:	709a      	strb	r2, [r3, #2]
			put_tx_Q(&midiQ,btStr,strlen((char *)btStr));
    1ad8:	1d3b      	adds	r3, r7, #4
    1ada:	1c18      	adds	r0, r3, #0
    1adc:	4b19      	ldr	r3, [pc, #100]	; (1b44 <init+0x4bc>)
    1ade:	4798      	blx	r3
    1ae0:	1c03      	adds	r3, r0, #0
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	4913      	ldr	r1, [pc, #76]	; (1b34 <init+0x4ac>)
    1ae6:	1d3a      	adds	r2, r7, #4
    1ae8:	1c08      	adds	r0, r1, #0
    1aea:	1c11      	adds	r1, r2, #0
    1aec:	1c1a      	adds	r2, r3, #0
    1aee:	4b19      	ldr	r3, [pc, #100]	; (1b54 <init+0x4cc>)
    1af0:	4798      	blx	r3
			put_tx_Q(&androidQ,btStr,strlen((char *)btStr));
    1af2:	1d3b      	adds	r3, r7, #4
    1af4:	1c18      	adds	r0, r3, #0
    1af6:	4b13      	ldr	r3, [pc, #76]	; (1b44 <init+0x4bc>)
    1af8:	4798      	blx	r3
    1afa:	1c03      	adds	r3, r0, #0
    1afc:	b2db      	uxtb	r3, r3
    1afe:	490f      	ldr	r1, [pc, #60]	; (1b3c <init+0x4b4>)
    1b00:	1d3a      	adds	r2, r7, #4
    1b02:	1c08      	adds	r0, r1, #0
    1b04:	1c11      	adds	r1, r2, #0
    1b06:	1c1a      	adds	r2, r3, #0
    1b08:	4b12      	ldr	r3, [pc, #72]	; (1b54 <init+0x4cc>)
    1b0a:	4798      	blx	r3
			wait_10msSec(50);	// wait .5 sec above to be sent and responses received
    1b0c:	2032      	movs	r0, #50	; 0x32
    1b0e:	4b12      	ldr	r3, [pc, #72]	; (1b58 <init+0x4d0>)
    1b10:	4798      	blx	r3
	
		}																				 

	// BT
	clock_dfll(); // ramp up gen 0 speed - measured at a gain of x3.6 which would equal about 29MHz	 (did not go higher using the 12M clk)
    1b12:	4b15      	ldr	r3, [pc, #84]	; (1b68 <init+0x4e0>)
    1b14:	4798      	blx	r3
	init_usart_Qs(usartQptr);
	MIDI_in_SSP_mode =  false;		// only when true lets data go into rx q on callbacks
	Android_in_SSP_mode = 	false;*/

	
			wait_10msSec(50);	// wait .5 sec above to be sent and responses received
    1b16:	2032      	movs	r0, #50	; 0x32
    1b18:	4b0f      	ldr	r3, [pc, #60]	; (1b58 <init+0x4d0>)
    1b1a:	4798      	blx	r3


	
}
    1b1c:	46bd      	mov	sp, r7
    1b1e:	b011      	add	sp, #68	; 0x44
    1b20:	bd90      	pop	{r4, r7, pc}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	2000013c 	.word	0x2000013c
    1b28:	0000131d 	.word	0x0000131d
    1b2c:	20000094 	.word	0x20000094
    1b30:	20000095 	.word	0x20000095
    1b34:	200003ac 	.word	0x200003ac
    1b38:	000024ed 	.word	0x000024ed
    1b3c:	200001a8 	.word	0x200001a8
    1b40:	00006e90 	.word	0x00006e90
    1b44:	000066a7 	.word	0x000066a7
    1b48:	00006ea8 	.word	0x00006ea8
    1b4c:	000065f1 	.word	0x000065f1
    1b50:	00006eb0 	.word	0x00006eb0
    1b54:	00001d55 	.word	0x00001d55
    1b58:	00003361 	.word	0x00003361
    1b5c:	2000015c 	.word	0x2000015c
    1b60:	00006eb4 	.word	0x00006eb4
    1b64:	00006ebc 	.word	0x00006ebc
    1b68:	00000ef5 	.word	0x00000ef5

00001b6c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <system_interrupt_enable_global+0x14>)
    1b72:	2201      	movs	r2, #1
    1b74:	701a      	strb	r2, [r3, #0]
    1b76:	f3bf 8f5f 	dmb	sy
    1b7a:	b662      	cpsie	i
}
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	20000010 	.word	0x20000010

00001b84 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1b84:	b580      	push	{r7, lr}
    1b86:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b88:	b672      	cpsid	i
    1b8a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b8e:	4b02      	ldr	r3, [pc, #8]	; (1b98 <system_interrupt_disable_global+0x14>)
    1b90:	2200      	movs	r2, #0
    1b92:	701a      	strb	r2, [r3, #0]
}
    1b94:	46bd      	mov	sp, r7
    1b96:	bd80      	pop	{r7, pc}
    1b98:	20000010 	.word	0x20000010

00001b9c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	1c02      	adds	r2, r0, #0
    1ba4:	1dfb      	adds	r3, r7, #7
    1ba6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <system_interrupt_enable+0x28>)
    1baa:	1dfa      	adds	r2, r7, #7
    1bac:	7812      	ldrb	r2, [r2, #0]
    1bae:	1c11      	adds	r1, r2, #0
    1bb0:	221f      	movs	r2, #31
    1bb2:	400a      	ands	r2, r1
    1bb4:	2101      	movs	r1, #1
    1bb6:	4091      	lsls	r1, r2
    1bb8:	1c0a      	adds	r2, r1, #0
    1bba:	601a      	str	r2, [r3, #0]
}
    1bbc:	46bd      	mov	sp, r7
    1bbe:	b002      	add	sp, #8
    1bc0:	bd80      	pop	{r7, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	e000e100 	.word	0xe000e100

00001bc8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b084      	sub	sp, #16
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1bd6:	68fb      	ldr	r3, [r7, #12]
    1bd8:	8a1b      	ldrh	r3, [r3, #16]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	1c1a      	adds	r2, r3, #0
    1bde:	2380      	movs	r3, #128	; 0x80
    1be0:	021b      	lsls	r3, r3, #8
    1be2:	4013      	ands	r3, r2
    1be4:	1e5a      	subs	r2, r3, #1
    1be6:	4193      	sbcs	r3, r2
    1be8:	b2db      	uxtb	r3, r3
#endif
}
    1bea:	1c18      	adds	r0, r3, #0
    1bec:	46bd      	mov	sp, r7
    1bee:	b004      	add	sp, #16
    1bf0:	bd80      	pop	{r7, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)

00001bf4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b082      	sub	sp, #8
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	1c18      	adds	r0, r3, #0
    1c02:	4b03      	ldr	r3, [pc, #12]	; (1c10 <_usart_wait_for_sync+0x1c>)
    1c04:	4798      	blx	r3
    1c06:	1e03      	subs	r3, r0, #0
    1c08:	d1f9      	bne.n	1bfe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1c0a:	46bd      	mov	sp, r7
    1c0c:	b002      	add	sp, #8
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	00001bc9 	.word	0x00001bc9

00001c14 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b082      	sub	sp, #8
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	2280      	movs	r2, #128	; 0x80
    1c20:	05d2      	lsls	r2, r2, #23
    1c22:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	2200      	movs	r2, #0
    1c28:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	22ff      	movs	r2, #255	; 0xff
    1c2e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	2200      	movs	r2, #0
    1c34:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	2200      	movs	r2, #0
    1c3a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	2296      	movs	r2, #150	; 0x96
    1c40:	0192      	lsls	r2, r2, #6
    1c42:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	2201      	movs	r2, #1
    1c48:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	2201      	movs	r2, #1
    1c4e:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	2200      	movs	r2, #0
    1c54:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	2200      	movs	r2, #0
    1c5a:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	2200      	movs	r2, #0
    1c60:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	2288      	movs	r2, #136	; 0x88
    1c66:	0352      	lsls	r2, r2, #13
    1c68:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	2200      	movs	r2, #0
    1c6e:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	2200      	movs	r2, #0
    1c74:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	2200      	movs	r2, #0
    1c7a:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	2200      	movs	r2, #0
    1c80:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	2200      	movs	r2, #0
    1c86:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	2200      	movs	r2, #0
    1c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	config->collision_detection_enable              = false;
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1c8e:	46bd      	mov	sp, r7
    1c90:	b002      	add	sp, #8
    1c92:	bd80      	pop	{r7, pc}

00001c94 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b084      	sub	sp, #16
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	681b      	ldr	r3, [r3, #0]
    1ca0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	1c18      	adds	r0, r3, #0
    1ca8:	4b09      	ldr	r3, [pc, #36]	; (1cd0 <usart_enable+0x3c>)
    1caa:	4798      	blx	r3
    1cac:	1c03      	adds	r3, r0, #0
    1cae:	1c18      	adds	r0, r3, #0
    1cb0:	4b08      	ldr	r3, [pc, #32]	; (1cd4 <usart_enable+0x40>)
    1cb2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	1c18      	adds	r0, r3, #0
    1cb8:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <usart_enable+0x44>)
    1cba:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	681b      	ldr	r3, [r3, #0]
    1cc0:	2202      	movs	r2, #2
    1cc2:	431a      	orrs	r2, r3
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	601a      	str	r2, [r3, #0]
}
    1cc8:	46bd      	mov	sp, r7
    1cca:	b004      	add	sp, #16
    1ccc:	bd80      	pop	{r7, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	00003dbd 	.word	0x00003dbd
    1cd4:	00001b9d 	.word	0x00001b9d
    1cd8:	00001bf5 	.word	0x00001bf5

00001cdc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b082      	sub	sp, #8
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	6078      	str	r0, [r7, #4]
    1ce4:	1c0a      	adds	r2, r1, #0
    1ce6:	1cfb      	adds	r3, r7, #3
    1ce8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	2221      	movs	r2, #33	; 0x21
    1cee:	5c9b      	ldrb	r3, [r3, r2]
    1cf0:	b2d9      	uxtb	r1, r3
    1cf2:	1cfb      	adds	r3, r7, #3
    1cf4:	781b      	ldrb	r3, [r3, #0]
    1cf6:	2201      	movs	r2, #1
    1cf8:	409a      	lsls	r2, r3
    1cfa:	1c13      	adds	r3, r2, #0
    1cfc:	b2db      	uxtb	r3, r3
    1cfe:	1c0a      	adds	r2, r1, #0
    1d00:	4313      	orrs	r3, r2
    1d02:	b2db      	uxtb	r3, r3
    1d04:	b2d9      	uxtb	r1, r3
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	2221      	movs	r2, #33	; 0x21
    1d0a:	5499      	strb	r1, [r3, r2]

}
    1d0c:	46bd      	mov	sp, r7
    1d0e:	b002      	add	sp, #8
    1d10:	bd80      	pop	{r7, pc}
    1d12:	46c0      	nop			; (mov r8, r8)

00001d14 <midi_tx_Q_length>:

extern bool MIDI_in_SSP_mode, Android_in_SSP_mode;


static inline uint8_t midi_tx_Q_length (void)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	af00      	add	r7, sp, #0
	return (midiQ.tx_in - midiQ.tx_out);
    1d18:	4b05      	ldr	r3, [pc, #20]	; (1d30 <midi_tx_Q_length+0x1c>)
    1d1a:	781b      	ldrb	r3, [r3, #0]
    1d1c:	b2da      	uxtb	r2, r3
    1d1e:	4b04      	ldr	r3, [pc, #16]	; (1d30 <midi_tx_Q_length+0x1c>)
    1d20:	785b      	ldrb	r3, [r3, #1]
    1d22:	b2db      	uxtb	r3, r3
    1d24:	1ad3      	subs	r3, r2, r3
    1d26:	b2db      	uxtb	r3, r3
}
    1d28:	1c18      	adds	r0, r3, #0
    1d2a:	46bd      	mov	sp, r7
    1d2c:	bd80      	pop	{r7, pc}
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	200003ac 	.word	0x200003ac

00001d34 <android_tx_Q_length>:
static inline uint8_t android_rx_Q_length (void)
{
	return (androidQ.rx_in - androidQ.rx_out);
}
static inline uint8_t android_tx_Q_length (void)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	af00      	add	r7, sp, #0
	return (androidQ.tx_in - androidQ.tx_out);
    1d38:	4b05      	ldr	r3, [pc, #20]	; (1d50 <android_tx_Q_length+0x1c>)
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	b2da      	uxtb	r2, r3
    1d3e:	4b04      	ldr	r3, [pc, #16]	; (1d50 <android_tx_Q_length+0x1c>)
    1d40:	785b      	ldrb	r3, [r3, #1]
    1d42:	b2db      	uxtb	r3, r3
    1d44:	1ad3      	subs	r3, r2, r3
    1d46:	b2db      	uxtb	r3, r3
}
    1d48:	1c18      	adds	r0, r3, #0
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	200001a8 	.word	0x200001a8

00001d54 <put_tx_Q>:

/*-----------------------------------------------------------------------------
PUT INTO Qs
------------------------------------------------------------------------------*/
enum status_code put_tx_Q (struct usartQdef *usartQptr, uint8_t *dataPtr, uint8_t dataLen)  // puts byte in the USART transmit Q
{	uint8_t i;
    1d54:	b580      	push	{r7, lr}
    1d56:	b086      	sub	sp, #24
    1d58:	af00      	add	r7, sp, #0
    1d5a:	60f8      	str	r0, [r7, #12]
    1d5c:	60b9      	str	r1, [r7, #8]
    1d5e:	1dfb      	adds	r3, r7, #7
    1d60:	701a      	strb	r2, [r3, #0]
	if ((midiQ.tx_in - midiQ.tx_out) < (MIDI_Q_SIZE-dataLen))
    1d62:	4b20      	ldr	r3, [pc, #128]	; (1de4 <put_tx_Q+0x90>)
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	b2db      	uxtb	r3, r3
    1d68:	1c1a      	adds	r2, r3, #0
    1d6a:	4b1e      	ldr	r3, [pc, #120]	; (1de4 <put_tx_Q+0x90>)
    1d6c:	785b      	ldrb	r3, [r3, #1]
    1d6e:	b2db      	uxtb	r3, r3
    1d70:	1ad2      	subs	r2, r2, r3
    1d72:	1dfb      	adds	r3, r7, #7
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	2180      	movs	r1, #128	; 0x80
    1d78:	0049      	lsls	r1, r1, #1
    1d7a:	1acb      	subs	r3, r1, r3
    1d7c:	429a      	cmp	r2, r3
    1d7e:	da2c      	bge.n	1dda <put_tx_Q+0x86>
	{
		for (i=0; i<dataLen; i++) 
    1d80:	2317      	movs	r3, #23
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	2200      	movs	r2, #0
    1d86:	701a      	strb	r2, [r3, #0]
    1d88:	e01e      	b.n	1dc8 <put_tx_Q+0x74>
		{	usartQptr->tx[usartQptr->tx_in] = *(dataPtr+i);
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	b2db      	uxtb	r3, r3
    1d90:	1c18      	adds	r0, r3, #0
    1d92:	2317      	movs	r3, #23
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	68ba      	ldr	r2, [r7, #8]
    1d9a:	18d3      	adds	r3, r2, r3
    1d9c:	7819      	ldrb	r1, [r3, #0]
    1d9e:	68fa      	ldr	r2, [r7, #12]
    1da0:	2380      	movs	r3, #128	; 0x80
    1da2:	005b      	lsls	r3, r3, #1
    1da4:	1812      	adds	r2, r2, r0
    1da6:	18d3      	adds	r3, r2, r3
    1da8:	1c0a      	adds	r2, r1, #0
    1daa:	711a      	strb	r2, [r3, #4]
			usartQptr->tx_in++;
    1dac:	68fb      	ldr	r3, [r7, #12]
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	b2db      	uxtb	r3, r3
    1db2:	3301      	adds	r3, #1
    1db4:	b2da      	uxtb	r2, r3
    1db6:	68fb      	ldr	r3, [r7, #12]
    1db8:	701a      	strb	r2, [r3, #0]
------------------------------------------------------------------------------*/
enum status_code put_tx_Q (struct usartQdef *usartQptr, uint8_t *dataPtr, uint8_t dataLen)  // puts byte in the USART transmit Q
{	uint8_t i;
	if ((midiQ.tx_in - midiQ.tx_out) < (MIDI_Q_SIZE-dataLen))
	{
		for (i=0; i<dataLen; i++) 
    1dba:	2317      	movs	r3, #23
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	781a      	ldrb	r2, [r3, #0]
    1dc0:	2317      	movs	r3, #23
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	3201      	adds	r2, #1
    1dc6:	701a      	strb	r2, [r3, #0]
    1dc8:	2317      	movs	r3, #23
    1dca:	18fa      	adds	r2, r7, r3
    1dcc:	1dfb      	adds	r3, r7, #7
    1dce:	7812      	ldrb	r2, [r2, #0]
    1dd0:	781b      	ldrb	r3, [r3, #0]
    1dd2:	429a      	cmp	r2, r3
    1dd4:	d3d9      	bcc.n	1d8a <put_tx_Q+0x36>
		{	usartQptr->tx[usartQptr->tx_in] = *(dataPtr+i);
			usartQptr->tx_in++;
		}
			
		return STATUS_OK;													                    
    1dd6:	2300      	movs	r3, #0
    1dd8:	e000      	b.n	1ddc <put_tx_Q+0x88>
	}
	else return STATUS_BUSY;
    1dda:	2305      	movs	r3, #5
}
    1ddc:	1c18      	adds	r0, r3, #0
    1dde:	46bd      	mov	sp, r7
    1de0:	b006      	add	sp, #24
    1de2:	bd80      	pop	{r7, pc}
    1de4:	200003ac 	.word	0x200003ac

00001de8 <put_rx_Q>:

enum status_code put_rx_Q (struct usartQdef *usartQptr, uint8_t *dataPtr, uint8_t dataLen)        // puts byte in the USART transmit Q
{	uint8_t i;
    1de8:	b580      	push	{r7, lr}
    1dea:	b086      	sub	sp, #24
    1dec:	af00      	add	r7, sp, #0
    1dee:	60f8      	str	r0, [r7, #12]
    1df0:	60b9      	str	r1, [r7, #8]
    1df2:	1dfb      	adds	r3, r7, #7
    1df4:	701a      	strb	r2, [r3, #0]
	if ((midiQ.rx_in - midiQ.rx_out) < (MIDI_Q_SIZE-dataLen)) 
    1df6:	4b1d      	ldr	r3, [pc, #116]	; (1e6c <put_rx_Q+0x84>)
    1df8:	789b      	ldrb	r3, [r3, #2]
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	1c1a      	adds	r2, r3, #0
    1dfe:	4b1b      	ldr	r3, [pc, #108]	; (1e6c <put_rx_Q+0x84>)
    1e00:	78db      	ldrb	r3, [r3, #3]
    1e02:	b2db      	uxtb	r3, r3
    1e04:	1ad2      	subs	r2, r2, r3
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	2180      	movs	r1, #128	; 0x80
    1e0c:	0049      	lsls	r1, r1, #1
    1e0e:	1acb      	subs	r3, r1, r3
    1e10:	429a      	cmp	r2, r3
    1e12:	da25      	bge.n	1e60 <put_rx_Q+0x78>
	{
		for (i=0; i<dataLen; i++) usartQptr->rx[usartQptr->rx_in++] = *(dataPtr+i);
    1e14:	2317      	movs	r3, #23
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	2200      	movs	r2, #0
    1e1a:	701a      	strb	r2, [r3, #0]
    1e1c:	e017      	b.n	1e4e <put_rx_Q+0x66>
    1e1e:	68fb      	ldr	r3, [r7, #12]
    1e20:	789b      	ldrb	r3, [r3, #2]
    1e22:	b2db      	uxtb	r3, r3
    1e24:	1c5a      	adds	r2, r3, #1
    1e26:	b2d1      	uxtb	r1, r2
    1e28:	68fa      	ldr	r2, [r7, #12]
    1e2a:	7091      	strb	r1, [r2, #2]
    1e2c:	1c19      	adds	r1, r3, #0
    1e2e:	2317      	movs	r3, #23
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	781b      	ldrb	r3, [r3, #0]
    1e34:	68ba      	ldr	r2, [r7, #8]
    1e36:	18d3      	adds	r3, r2, r3
    1e38:	781a      	ldrb	r2, [r3, #0]
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	185b      	adds	r3, r3, r1
    1e3e:	711a      	strb	r2, [r3, #4]
    1e40:	2317      	movs	r3, #23
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	781a      	ldrb	r2, [r3, #0]
    1e46:	2317      	movs	r3, #23
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	3201      	adds	r2, #1
    1e4c:	701a      	strb	r2, [r3, #0]
    1e4e:	2317      	movs	r3, #23
    1e50:	18fa      	adds	r2, r7, r3
    1e52:	1dfb      	adds	r3, r7, #7
    1e54:	7812      	ldrb	r2, [r2, #0]
    1e56:	781b      	ldrb	r3, [r3, #0]
    1e58:	429a      	cmp	r2, r3
    1e5a:	d3e0      	bcc.n	1e1e <put_rx_Q+0x36>
		return STATUS_OK;
    1e5c:	2300      	movs	r3, #0
    1e5e:	e000      	b.n	1e62 <put_rx_Q+0x7a>
	}
	else return STATUS_BUSY;
    1e60:	2305      	movs	r3, #5
}
    1e62:	1c18      	adds	r0, r3, #0
    1e64:	46bd      	mov	sp, r7
    1e66:	b006      	add	sp, #24
    1e68:	bd80      	pop	{r7, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	200003ac 	.word	0x200003ac

00001e70 <init_usart_Qs>:

/*-----------------------------------------------------------------------------
INIT/SET Qs TO 0
------------------------------------------------------------------------------*/
void init_usart_Qs(struct usartQdef *usartQptr)
{	uint8_t i;
    1e70:	b580      	push	{r7, lr}
    1e72:	b084      	sub	sp, #16
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
	for (i=0; i<255; i++)
    1e78:	230f      	movs	r3, #15
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	2200      	movs	r2, #0
    1e7e:	701a      	strb	r2, [r3, #0]
    1e80:	e018      	b.n	1eb4 <init_usart_Qs+0x44>
	{
		usartQptr->tx[i] = usartQptr->rx[i] = 0;
    1e82:	230f      	movs	r3, #15
    1e84:	18fb      	adds	r3, r7, r3
    1e86:	781a      	ldrb	r2, [r3, #0]
    1e88:	230f      	movs	r3, #15
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	2000      	movs	r0, #0
    1e90:	6879      	ldr	r1, [r7, #4]
    1e92:	18cb      	adds	r3, r1, r3
    1e94:	1c01      	adds	r1, r0, #0
    1e96:	7119      	strb	r1, [r3, #4]
    1e98:	6879      	ldr	r1, [r7, #4]
    1e9a:	2380      	movs	r3, #128	; 0x80
    1e9c:	005b      	lsls	r3, r3, #1
    1e9e:	188a      	adds	r2, r1, r2
    1ea0:	18d3      	adds	r3, r2, r3
    1ea2:	1c02      	adds	r2, r0, #0
    1ea4:	711a      	strb	r2, [r3, #4]
/*-----------------------------------------------------------------------------
INIT/SET Qs TO 0
------------------------------------------------------------------------------*/
void init_usart_Qs(struct usartQdef *usartQptr)
{	uint8_t i;
	for (i=0; i<255; i++)
    1ea6:	230f      	movs	r3, #15
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	781a      	ldrb	r2, [r3, #0]
    1eac:	230f      	movs	r3, #15
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	3201      	adds	r2, #1
    1eb2:	701a      	strb	r2, [r3, #0]
    1eb4:	230f      	movs	r3, #15
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	2bff      	cmp	r3, #255	; 0xff
    1ebc:	d1e1      	bne.n	1e82 <init_usart_Qs+0x12>
	{
		usartQptr->tx[i] = usartQptr->rx[i] = 0;
	}
	usartQptr->tx_in = 0;
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	2200      	movs	r2, #0
    1ec2:	701a      	strb	r2, [r3, #0]
	usartQptr->tx_out = 0;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	2200      	movs	r2, #0
    1ec8:	705a      	strb	r2, [r3, #1]
	usartQptr->rx_in = 0;
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	2200      	movs	r2, #0
    1ece:	709a      	strb	r2, [r3, #2]
	usartQptr->rx_out = 0;
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	2200      	movs	r2, #0
    1ed4:	70da      	strb	r2, [r3, #3]
}
    1ed6:	46bd      	mov	sp, r7
    1ed8:	b004      	add	sp, #16
    1eda:	bd80      	pop	{r7, pc}

00001edc <configure_ANDROID_usart>:


//enum status_code _usart_write_SERCOM(struct usart_module *const module, const uint8_t tx_data);
//! [setup]
void configure_ANDROID_usart(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b08c      	sub	sp, #48	; 0x30
    1ee0:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
    1ee2:	1c3b      	adds	r3, r7, #0
    1ee4:	1c18      	adds	r0, r3, #0
    1ee6:	4b16      	ldr	r3, [pc, #88]	; (1f40 <configure_ANDROID_usart+0x64>)
    1ee8:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 115200;  // midi
    1eea:	1c3b      	adds	r3, r7, #0
    1eec:	22e1      	movs	r2, #225	; 0xe1
    1eee:	0252      	lsls	r2, r2, #9
    1ef0:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_4;
    1ef2:	1c3b      	adds	r3, r7, #0
    1ef4:	2204      	movs	r2, #4
    1ef6:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1ef8:	1c3b      	adds	r3, r7, #0
    1efa:	22c4      	movs	r2, #196	; 0xc4
    1efc:	0392      	lsls	r2, r2, #14
    1efe:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;  // unused
    1f00:	1c3b      	adds	r3, r7, #0
    1f02:	2201      	movs	r2, #1
    1f04:	4252      	negs	r2, r2
    1f06:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;  // unused
    1f08:	1c3b      	adds	r3, r7, #0
    1f0a:	2201      	movs	r2, #1
    1f0c:	4252      	negs	r2, r2
    1f0e:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    1f10:	1c3b      	adds	r3, r7, #0
    1f12:	4a0c      	ldr	r2, [pc, #48]	; (1f44 <configure_ANDROID_usart+0x68>)
    1f14:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;	
    1f16:	1c3b      	adds	r3, r7, #0
    1f18:	4a0b      	ldr	r2, [pc, #44]	; (1f48 <configure_ANDROID_usart+0x6c>)
    1f1a:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&ANDROID_usart_instance,	SERCOM4, &config_usart) != STATUS_OK) {
    1f1c:	46c0      	nop			; (mov r8, r8)
    1f1e:	4a0b      	ldr	r2, [pc, #44]	; (1f4c <configure_ANDROID_usart+0x70>)
    1f20:	490b      	ldr	r1, [pc, #44]	; (1f50 <configure_ANDROID_usart+0x74>)
    1f22:	1c3b      	adds	r3, r7, #0
    1f24:	1c10      	adds	r0, r2, #0
    1f26:	1c1a      	adds	r2, r3, #0
    1f28:	4b0a      	ldr	r3, [pc, #40]	; (1f54 <configure_ANDROID_usart+0x78>)
    1f2a:	4798      	blx	r3
    1f2c:	1e03      	subs	r3, r0, #0
    1f2e:	d1f6      	bne.n	1f1e <configure_ANDROID_usart+0x42>
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&ANDROID_usart_instance);
    1f30:	4b06      	ldr	r3, [pc, #24]	; (1f4c <configure_ANDROID_usart+0x70>)
    1f32:	1c18      	adds	r0, r3, #0
    1f34:	4b08      	ldr	r3, [pc, #32]	; (1f58 <configure_ANDROID_usart+0x7c>)
    1f36:	4798      	blx	r3
	//! [setup_enable]
}
    1f38:	46bd      	mov	sp, r7
    1f3a:	b00c      	add	sp, #48	; 0x30
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001c15 	.word	0x00001c15
    1f44:	002a0003 	.word	0x002a0003
    1f48:	002b0003 	.word	0x002b0003
    1f4c:	20000160 	.word	0x20000160
    1f50:	42001800 	.word	0x42001800
    1f54:	000003ed 	.word	0x000003ed
    1f58:	00001c95 	.word	0x00001c95

00001f5c <configure_MIDI_usart>:
//! [setup]
void configure_MIDI_usart(void)
{	    
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b08c      	sub	sp, #48	; 0x30
    1f60:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct usart_config config_usart;
	//! [setup_config]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
    1f62:	1c3b      	adds	r3, r7, #0
    1f64:	1c18      	adds	r0, r3, #0
    1f66:	4b15      	ldr	r3, [pc, #84]	; (1fbc <configure_MIDI_usart+0x60>)
    1f68:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config] SERCOM
	config_usart.baudrate    = 115200;
    1f6a:	1c3b      	adds	r3, r7, #0
    1f6c:	22e1      	movs	r2, #225	; 0xe1
    1f6e:	0252      	lsls	r2, r2, #9
    1f70:	611a      	str	r2, [r3, #16]
	config_usart.generator_source = GCLK_GENERATOR_4; 
    1f72:	1c3b      	adds	r3, r7, #0
    1f74:	2204      	movs	r2, #4
    1f76:	775a      	strb	r2, [r3, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1; // USART_RX_3_TX_2_XCK_3; //USART_RX_1_TX_0_XCK_1
    1f78:	1c3b      	adds	r3, r7, #0
    1f7a:	2280      	movs	r2, #128	; 0x80
    1f7c:	0352      	lsls	r2, r2, #13
    1f7e:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PB16C_SERCOM5_PAD0;  // TX
    1f80:	1c3b      	adds	r3, r7, #0
    1f82:	4a0f      	ldr	r2, [pc, #60]	; (1fc0 <configure_MIDI_usart+0x64>)
    1f84:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = PINMUX_PB17C_SERCOM5_PAD1;  // RX
    1f86:	1c3b      	adds	r3, r7, #0
    1f88:	4a0e      	ldr	r2, [pc, #56]	; (1fc4 <configure_MIDI_usart+0x68>)
    1f8a:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// UNUSED
    1f8c:	1c3b      	adds	r3, r7, #0
    1f8e:	4a0e      	ldr	r2, [pc, #56]	; (1fc8 <configure_MIDI_usart+0x6c>)
    1f90:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// UNUSED
    1f92:	1c3b      	adds	r3, r7, #0
    1f94:	4a0d      	ldr	r2, [pc, #52]	; (1fcc <configure_MIDI_usart+0x70>)
    1f96:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MIDI_usart_instance, SERCOM5, &config_usart) != STATUS_OK) {
    1f98:	46c0      	nop			; (mov r8, r8)
    1f9a:	4a0d      	ldr	r2, [pc, #52]	; (1fd0 <configure_MIDI_usart+0x74>)
    1f9c:	490d      	ldr	r1, [pc, #52]	; (1fd4 <configure_MIDI_usart+0x78>)
    1f9e:	1c3b      	adds	r3, r7, #0
    1fa0:	1c10      	adds	r0, r2, #0
    1fa2:	1c1a      	adds	r2, r3, #0
    1fa4:	4b0c      	ldr	r3, [pc, #48]	; (1fd8 <configure_MIDI_usart+0x7c>)
    1fa6:	4798      	blx	r3
    1fa8:	1e03      	subs	r3, r0, #0
    1faa:	d1f6      	bne.n	1f9a <configure_MIDI_usart+0x3e>
	}
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&MIDI_usart_instance);
    1fac:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <configure_MIDI_usart+0x74>)
    1fae:	1c18      	adds	r0, r3, #0
    1fb0:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <configure_MIDI_usart+0x80>)
    1fb2:	4798      	blx	r3
	//! [setup_enable]
}
    1fb4:	46bd      	mov	sp, r7
    1fb6:	b00c      	add	sp, #48	; 0x30
    1fb8:	bd80      	pop	{r7, pc}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	00001c15 	.word	0x00001c15
    1fc0:	00300002 	.word	0x00300002
    1fc4:	00310002 	.word	0x00310002
    1fc8:	00360003 	.word	0x00360003
    1fcc:	00370003 	.word	0x00370003
    1fd0:	20000184 	.word	0x20000184
    1fd4:	42001c00 	.word	0x42001c00
    1fd8:	000003ed 	.word	0x000003ed
    1fdc:	00001c95 	.word	0x00001c95

00001fe0 <_MIDI_usart_read_callback>:

uint8_t ANDROID_usartTimeout=0;				
uint8_t MIDI_usartTimeout=0;

void _MIDI_usart_read_callback(struct usart_module *const usart_module)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b084      	sub	sp, #16
    1fe4:	af00      	add	r7, sp, #0
    1fe6:	6078      	str	r0, [r7, #4]
	MIDI_usart_rx_done = true;
    1fe8:	4b17      	ldr	r3, [pc, #92]	; (2048 <STACK_SIZE+0x48>)
    1fea:	2201      	movs	r2, #1
    1fec:	701a      	strb	r2, [r3, #0]
	uint8_t received_data = *((usart_module->rx_buffer_ptr)-1);
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	695a      	ldr	r2, [r3, #20]
    1ff2:	230f      	movs	r3, #15
    1ff4:	18fb      	adds	r3, r7, r3
    1ff6:	3a01      	subs	r2, #1
    1ff8:	7812      	ldrb	r2, [r2, #0]
    1ffa:	701a      	strb	r2, [r3, #0]
	if (MIDI_in_SSP_mode)						// write only if in_SSP_mode
    1ffc:	4b13      	ldr	r3, [pc, #76]	; (204c <STACK_SIZE+0x4c>)
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	2b00      	cmp	r3, #0
    2002:	d01d      	beq.n	2040 <STACK_SIZE+0x40>
	{
		MIDI_usartTimeout = 0;									// reset it - data moving
    2004:	4b12      	ldr	r3, [pc, #72]	; (2050 <STACK_SIZE+0x50>)
    2006:	2200      	movs	r2, #0
    2008:	701a      	strb	r2, [r3, #0]
		system_interrupt_disable_global();
    200a:	4b12      	ldr	r3, [pc, #72]	; (2054 <STACK_SIZE+0x54>)
    200c:	4798      	blx	r3
		if ((midiQ.rx_in + 1) != midiQ.rx_out) midiQ.rx[midiQ.rx_in++] = received_data;
    200e:	4b12      	ldr	r3, [pc, #72]	; (2058 <STACK_SIZE+0x58>)
    2010:	789b      	ldrb	r3, [r3, #2]
    2012:	b2db      	uxtb	r3, r3
    2014:	3301      	adds	r3, #1
    2016:	4a10      	ldr	r2, [pc, #64]	; (2058 <STACK_SIZE+0x58>)
    2018:	78d2      	ldrb	r2, [r2, #3]
    201a:	b2d2      	uxtb	r2, r2
    201c:	4293      	cmp	r3, r2
    201e:	d00d      	beq.n	203c <STACK_SIZE+0x3c>
    2020:	4b0d      	ldr	r3, [pc, #52]	; (2058 <STACK_SIZE+0x58>)
    2022:	789b      	ldrb	r3, [r3, #2]
    2024:	b2db      	uxtb	r3, r3
    2026:	1c5a      	adds	r2, r3, #1
    2028:	b2d1      	uxtb	r1, r2
    202a:	4a0b      	ldr	r2, [pc, #44]	; (2058 <STACK_SIZE+0x58>)
    202c:	7091      	strb	r1, [r2, #2]
    202e:	1c19      	adds	r1, r3, #0
    2030:	4b09      	ldr	r3, [pc, #36]	; (2058 <STACK_SIZE+0x58>)
    2032:	220f      	movs	r2, #15
    2034:	18ba      	adds	r2, r7, r2
    2036:	185b      	adds	r3, r3, r1
    2038:	7812      	ldrb	r2, [r2, #0]
    203a:	711a      	strb	r2, [r3, #4]
		system_interrupt_enable_global();
    203c:	4b07      	ldr	r3, [pc, #28]	; (205c <STACK_SIZE+0x5c>)
    203e:	4798      	blx	r3
	}

}
    2040:	46bd      	mov	sp, r7
    2042:	b004      	add	sp, #16
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	20000001 	.word	0x20000001
    204c:	20000094 	.word	0x20000094
    2050:	20000097 	.word	0x20000097
    2054:	00001b85 	.word	0x00001b85
    2058:	200003ac 	.word	0x200003ac
    205c:	00001b6d 	.word	0x00001b6d

00002060 <_ANDROID_usart_read_callback>:

void _ANDROID_usart_read_callback(struct usart_module *const usart_module)
{
    2060:	b580      	push	{r7, lr}
    2062:	b084      	sub	sp, #16
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	ANDROID_usart_rx_done = true;
    2068:	4b17      	ldr	r3, [pc, #92]	; (20c8 <_ANDROID_usart_read_callback+0x68>)
    206a:	2201      	movs	r2, #1
    206c:	701a      	strb	r2, [r3, #0]
	
	uint8_t received_data = *((usart_module->rx_buffer_ptr)-1);
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	695a      	ldr	r2, [r3, #20]
    2072:	230f      	movs	r3, #15
    2074:	18fb      	adds	r3, r7, r3
    2076:	3a01      	subs	r2, #1
    2078:	7812      	ldrb	r2, [r2, #0]
    207a:	701a      	strb	r2, [r3, #0]
	if (Android_in_SSP_mode)						// write only if in_SSP_mode
    207c:	4b13      	ldr	r3, [pc, #76]	; (20cc <_ANDROID_usart_read_callback+0x6c>)
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	2b00      	cmp	r3, #0
    2082:	d01d      	beq.n	20c0 <_ANDROID_usart_read_callback+0x60>
	{
		ANDROID_usartTimeout = 0;									// reset it - data moving
    2084:	4b12      	ldr	r3, [pc, #72]	; (20d0 <_ANDROID_usart_read_callback+0x70>)
    2086:	2200      	movs	r2, #0
    2088:	701a      	strb	r2, [r3, #0]
		system_interrupt_disable_global();
    208a:	4b12      	ldr	r3, [pc, #72]	; (20d4 <_ANDROID_usart_read_callback+0x74>)
    208c:	4798      	blx	r3
		if ((androidQ.rx_in + 1) != androidQ.rx_out) androidQ.rx[androidQ.rx_in++] = received_data;
    208e:	4b12      	ldr	r3, [pc, #72]	; (20d8 <_ANDROID_usart_read_callback+0x78>)
    2090:	789b      	ldrb	r3, [r3, #2]
    2092:	b2db      	uxtb	r3, r3
    2094:	3301      	adds	r3, #1
    2096:	4a10      	ldr	r2, [pc, #64]	; (20d8 <_ANDROID_usart_read_callback+0x78>)
    2098:	78d2      	ldrb	r2, [r2, #3]
    209a:	b2d2      	uxtb	r2, r2
    209c:	4293      	cmp	r3, r2
    209e:	d00d      	beq.n	20bc <_ANDROID_usart_read_callback+0x5c>
    20a0:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <_ANDROID_usart_read_callback+0x78>)
    20a2:	789b      	ldrb	r3, [r3, #2]
    20a4:	b2db      	uxtb	r3, r3
    20a6:	1c5a      	adds	r2, r3, #1
    20a8:	b2d1      	uxtb	r1, r2
    20aa:	4a0b      	ldr	r2, [pc, #44]	; (20d8 <_ANDROID_usart_read_callback+0x78>)
    20ac:	7091      	strb	r1, [r2, #2]
    20ae:	1c19      	adds	r1, r3, #0
    20b0:	4b09      	ldr	r3, [pc, #36]	; (20d8 <_ANDROID_usart_read_callback+0x78>)
    20b2:	220f      	movs	r2, #15
    20b4:	18ba      	adds	r2, r7, r2
    20b6:	185b      	adds	r3, r3, r1
    20b8:	7812      	ldrb	r2, [r2, #0]
    20ba:	711a      	strb	r2, [r3, #4]
		system_interrupt_enable_global();
    20bc:	4b07      	ldr	r3, [pc, #28]	; (20dc <_ANDROID_usart_read_callback+0x7c>)
    20be:	4798      	blx	r3
	}
}
    20c0:	46bd      	mov	sp, r7
    20c2:	b004      	add	sp, #16
    20c4:	bd80      	pop	{r7, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	20000003 	.word	0x20000003
    20cc:	20000095 	.word	0x20000095
    20d0:	20000096 	.word	0x20000096
    20d4:	00001b85 	.word	0x00001b85
    20d8:	200001a8 	.word	0x200001a8
    20dc:	00001b6d 	.word	0x00001b6d

000020e0 <_MIDI_usart_write_callback>:

void _MIDI_usart_write_callback(struct usart_module *const usart_module)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
    20e6:	6078      	str	r0, [r7, #4]
	//	port_pin_set_output_level(PIN_PB16, 1);
	MIDI_usart_tx_done = true;
    20e8:	4b02      	ldr	r3, [pc, #8]	; (20f4 <_MIDI_usart_write_callback+0x14>)
    20ea:	2201      	movs	r2, #1
    20ec:	701a      	strb	r2, [r3, #0]
}
    20ee:	46bd      	mov	sp, r7
    20f0:	b002      	add	sp, #8
    20f2:	bd80      	pop	{r7, pc}
    20f4:	20000000 	.word	0x20000000

000020f8 <_ANDROID_usart_write_callback>:

void _ANDROID_usart_write_callback(struct usart_module *const usart_module)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	//	port_pin_set_output_level(PIN_PB16, 1);
	ANDROID_usart_tx_done = true;
    2100:	4b02      	ldr	r3, [pc, #8]	; (210c <_ANDROID_usart_write_callback+0x14>)
    2102:	2201      	movs	r2, #1
    2104:	701a      	strb	r2, [r3, #0]
}
    2106:	46bd      	mov	sp, r7
    2108:	b002      	add	sp, #8
    210a:	bd80      	pop	{r7, pc}
    210c:	20000002 	.word	0x20000002

00002110 <configure_MIDI_usart_callbacks>:


void configure_MIDI_usart_callbacks(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	af00      	add	r7, sp, #0
	//! [setup_register_callbacks]
	usart_register_callback(&MIDI_usart_instance,_MIDI_usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    2114:	4a0c      	ldr	r2, [pc, #48]	; (2148 <configure_MIDI_usart_callbacks+0x38>)
    2116:	4b0d      	ldr	r3, [pc, #52]	; (214c <configure_MIDI_usart_callbacks+0x3c>)
    2118:	1c10      	adds	r0, r2, #0
    211a:	1c19      	adds	r1, r3, #0
    211c:	2200      	movs	r2, #0
    211e:	4b0c      	ldr	r3, [pc, #48]	; (2150 <configure_MIDI_usart_callbacks+0x40>)
    2120:	4798      	blx	r3
	usart_register_callback(&MIDI_usart_instance,_MIDI_usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2122:	4a09      	ldr	r2, [pc, #36]	; (2148 <configure_MIDI_usart_callbacks+0x38>)
    2124:	4b0b      	ldr	r3, [pc, #44]	; (2154 <configure_MIDI_usart_callbacks+0x44>)
    2126:	1c10      	adds	r0, r2, #0
    2128:	1c19      	adds	r1, r3, #0
    212a:	2201      	movs	r2, #1
    212c:	4b08      	ldr	r3, [pc, #32]	; (2150 <configure_MIDI_usart_callbacks+0x40>)
    212e:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&MIDI_usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    2130:	4b05      	ldr	r3, [pc, #20]	; (2148 <configure_MIDI_usart_callbacks+0x38>)
    2132:	1c18      	adds	r0, r3, #0
    2134:	2100      	movs	r1, #0
    2136:	4b08      	ldr	r3, [pc, #32]	; (2158 <configure_MIDI_usart_callbacks+0x48>)
    2138:	4798      	blx	r3
	usart_enable_callback(&MIDI_usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    213a:	4b03      	ldr	r3, [pc, #12]	; (2148 <configure_MIDI_usart_callbacks+0x38>)
    213c:	1c18      	adds	r0, r3, #0
    213e:	2101      	movs	r1, #1
    2140:	4b05      	ldr	r3, [pc, #20]	; (2158 <configure_MIDI_usart_callbacks+0x48>)
    2142:	4798      	blx	r3
	//! [setup_enable_callbacks]
}
    2144:	46bd      	mov	sp, r7
    2146:	bd80      	pop	{r7, pc}
    2148:	20000184 	.word	0x20000184
    214c:	000020e1 	.word	0x000020e1
    2150:	000008f5 	.word	0x000008f5
    2154:	00001fe1 	.word	0x00001fe1
    2158:	00001cdd 	.word	0x00001cdd

0000215c <configure_ANDROID_usart_callbacks>:

void configure_ANDROID_usart_callbacks(void)
{
    215c:	b580      	push	{r7, lr}
    215e:	af00      	add	r7, sp, #0
	//! [setup_register_callbacks]
	usart_register_callback(&ANDROID_usart_instance,_ANDROID_usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    2160:	4a0c      	ldr	r2, [pc, #48]	; (2194 <configure_ANDROID_usart_callbacks+0x38>)
    2162:	4b0d      	ldr	r3, [pc, #52]	; (2198 <configure_ANDROID_usart_callbacks+0x3c>)
    2164:	1c10      	adds	r0, r2, #0
    2166:	1c19      	adds	r1, r3, #0
    2168:	2200      	movs	r2, #0
    216a:	4b0c      	ldr	r3, [pc, #48]	; (219c <configure_ANDROID_usart_callbacks+0x40>)
    216c:	4798      	blx	r3
	usart_register_callback(&ANDROID_usart_instance,_ANDROID_usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    216e:	4a09      	ldr	r2, [pc, #36]	; (2194 <configure_ANDROID_usart_callbacks+0x38>)
    2170:	4b0b      	ldr	r3, [pc, #44]	; (21a0 <configure_ANDROID_usart_callbacks+0x44>)
    2172:	1c10      	adds	r0, r2, #0
    2174:	1c19      	adds	r1, r3, #0
    2176:	2201      	movs	r2, #1
    2178:	4b08      	ldr	r3, [pc, #32]	; (219c <configure_ANDROID_usart_callbacks+0x40>)
    217a:	4798      	blx	r3
	//! [setup_register_callbacks]

	//! [setup_enable_callbacks]
	usart_enable_callback(&ANDROID_usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    217c:	4b05      	ldr	r3, [pc, #20]	; (2194 <configure_ANDROID_usart_callbacks+0x38>)
    217e:	1c18      	adds	r0, r3, #0
    2180:	2100      	movs	r1, #0
    2182:	4b08      	ldr	r3, [pc, #32]	; (21a4 <configure_ANDROID_usart_callbacks+0x48>)
    2184:	4798      	blx	r3
	usart_enable_callback(&ANDROID_usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <configure_ANDROID_usart_callbacks+0x38>)
    2188:	1c18      	adds	r0, r3, #0
    218a:	2101      	movs	r1, #1
    218c:	4b05      	ldr	r3, [pc, #20]	; (21a4 <configure_ANDROID_usart_callbacks+0x48>)
    218e:	4798      	blx	r3
	//! [setup_enable_callbacks]
}
    2190:	46bd      	mov	sp, r7
    2192:	bd80      	pop	{r7, pc}
    2194:	20000160 	.word	0x20000160
    2198:	000020f9 	.word	0x000020f9
    219c:	000008f5 	.word	0x000008f5
    21a0:	00002061 	.word	0x00002061
    21a4:	00001cdd 	.word	0x00001cdd

000021a8 <TX_usart_Qs>:
}*/

uint8_t tx_data;
	
void TX_usart_Qs(void)											// TX function - call often
{	enum status_code status_code;
    21a8:	b590      	push	{r4, r7, lr}
    21aa:	b083      	sub	sp, #12
    21ac:	af00      	add	r7, sp, #0
	
			// note - only writing one at a time - should slow speed down  
			the baud rate here is 115200 but into the sound card its 31250 

	*/
	txPtr = &tx_data;
    21ae:	4b28      	ldr	r3, [pc, #160]	; (2250 <TX_usart_Qs+0xa8>)
    21b0:	607b      	str	r3, [r7, #4]
	
	if (android_tx_Q_length()>0)	{
    21b2:	4b28      	ldr	r3, [pc, #160]	; (2254 <TX_usart_Qs+0xac>)
    21b4:	4798      	blx	r3
    21b6:	1e03      	subs	r3, r0, #0
    21b8:	d021      	beq.n	21fe <TX_usart_Qs+0x56>
		tx_data = androidQ.tx[androidQ.tx_out];
    21ba:	4b27      	ldr	r3, [pc, #156]	; (2258 <TX_usart_Qs+0xb0>)
    21bc:	785b      	ldrb	r3, [r3, #1]
    21be:	b2db      	uxtb	r3, r3
    21c0:	1c19      	adds	r1, r3, #0
    21c2:	4a25      	ldr	r2, [pc, #148]	; (2258 <TX_usart_Qs+0xb0>)
    21c4:	2380      	movs	r3, #128	; 0x80
    21c6:	005b      	lsls	r3, r3, #1
    21c8:	1852      	adds	r2, r2, r1
    21ca:	18d3      	adds	r3, r2, r3
    21cc:	791b      	ldrb	r3, [r3, #4]
    21ce:	b2da      	uxtb	r2, r3
    21d0:	4b1f      	ldr	r3, [pc, #124]	; (2250 <TX_usart_Qs+0xa8>)
    21d2:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_buffer_job(&ANDROID_usart_instance, txPtr,1);
    21d4:	1cfc      	adds	r4, r7, #3
    21d6:	4a21      	ldr	r2, [pc, #132]	; (225c <TX_usart_Qs+0xb4>)
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	1c10      	adds	r0, r2, #0
    21dc:	1c19      	adds	r1, r3, #0
    21de:	2201      	movs	r2, #1
    21e0:	4b1f      	ldr	r3, [pc, #124]	; (2260 <TX_usart_Qs+0xb8>)
    21e2:	4798      	blx	r3
    21e4:	1c03      	adds	r3, r0, #0
    21e6:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK)
    21e8:	1cfb      	adds	r3, r7, #3
    21ea:	781b      	ldrb	r3, [r3, #0]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d106      	bne.n	21fe <TX_usart_Qs+0x56>
		{
			androidQ.tx_out++;			// write ok, inc ptr
    21f0:	4b19      	ldr	r3, [pc, #100]	; (2258 <TX_usart_Qs+0xb0>)
    21f2:	785b      	ldrb	r3, [r3, #1]
    21f4:	b2db      	uxtb	r3, r3
    21f6:	3301      	adds	r3, #1
    21f8:	b2da      	uxtb	r2, r3
    21fa:	4b17      	ldr	r3, [pc, #92]	; (2258 <TX_usart_Qs+0xb0>)
    21fc:	705a      	strb	r2, [r3, #1]
		}
	}


	if (midi_tx_Q_length()>0)	{
    21fe:	4b19      	ldr	r3, [pc, #100]	; (2264 <TX_usart_Qs+0xbc>)
    2200:	4798      	blx	r3
    2202:	1e03      	subs	r3, r0, #0
    2204:	d021      	beq.n	224a <TX_usart_Qs+0xa2>
		tx_data = midiQ.tx[midiQ.tx_out];
    2206:	4b18      	ldr	r3, [pc, #96]	; (2268 <TX_usart_Qs+0xc0>)
    2208:	785b      	ldrb	r3, [r3, #1]
    220a:	b2db      	uxtb	r3, r3
    220c:	1c19      	adds	r1, r3, #0
    220e:	4a16      	ldr	r2, [pc, #88]	; (2268 <TX_usart_Qs+0xc0>)
    2210:	2380      	movs	r3, #128	; 0x80
    2212:	005b      	lsls	r3, r3, #1
    2214:	1852      	adds	r2, r2, r1
    2216:	18d3      	adds	r3, r2, r3
    2218:	791b      	ldrb	r3, [r3, #4]
    221a:	b2da      	uxtb	r2, r3
    221c:	4b0c      	ldr	r3, [pc, #48]	; (2250 <TX_usart_Qs+0xa8>)
    221e:	701a      	strb	r2, [r3, #0]
		status_code  = usart_write_buffer_job(&MIDI_usart_instance, txPtr,1);
    2220:	1cfc      	adds	r4, r7, #3
    2222:	4a12      	ldr	r2, [pc, #72]	; (226c <TX_usart_Qs+0xc4>)
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	1c10      	adds	r0, r2, #0
    2228:	1c19      	adds	r1, r3, #0
    222a:	2201      	movs	r2, #1
    222c:	4b0c      	ldr	r3, [pc, #48]	; (2260 <TX_usart_Qs+0xb8>)
    222e:	4798      	blx	r3
    2230:	1c03      	adds	r3, r0, #0
    2232:	7023      	strb	r3, [r4, #0]
		if (status_code == STATUS_OK) {
    2234:	1cfb      	adds	r3, r7, #3
    2236:	781b      	ldrb	r3, [r3, #0]
    2238:	2b00      	cmp	r3, #0
    223a:	d106      	bne.n	224a <TX_usart_Qs+0xa2>
			midiQ.tx_out++;			// write ok, inc ptr
    223c:	4b0a      	ldr	r3, [pc, #40]	; (2268 <TX_usart_Qs+0xc0>)
    223e:	785b      	ldrb	r3, [r3, #1]
    2240:	b2db      	uxtb	r3, r3
    2242:	3301      	adds	r3, #1
    2244:	b2da      	uxtb	r2, r3
    2246:	4b08      	ldr	r3, [pc, #32]	; (2268 <TX_usart_Qs+0xc0>)
    2248:	705a      	strb	r2, [r3, #1]
		}
	}
}
    224a:	46bd      	mov	sp, r7
    224c:	b003      	add	sp, #12
    224e:	bd90      	pop	{r4, r7, pc}
    2250:	200005b0 	.word	0x200005b0
    2254:	00001d35 	.word	0x00001d35
    2258:	200001a8 	.word	0x200001a8
    225c:	20000160 	.word	0x20000160
    2260:	00000939 	.word	0x00000939
    2264:	00001d15 	.word	0x00001d15
    2268:	200003ac 	.word	0x200003ac
    226c:	20000184 	.word	0x20000184

00002270 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	1c02      	adds	r2, r0, #0
    2278:	1dfb      	adds	r3, r7, #7
    227a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    227c:	230f      	movs	r3, #15
    227e:	18fb      	adds	r3, r7, r3
    2280:	1dfa      	adds	r2, r7, #7
    2282:	7812      	ldrb	r2, [r2, #0]
    2284:	09d2      	lsrs	r2, r2, #7
    2286:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2288:	230e      	movs	r3, #14
    228a:	18fb      	adds	r3, r7, r3
    228c:	1dfa      	adds	r2, r7, #7
    228e:	7812      	ldrb	r2, [r2, #0]
    2290:	0952      	lsrs	r2, r2, #5
    2292:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2294:	4b0d      	ldr	r3, [pc, #52]	; (22cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2296:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2298:	230f      	movs	r3, #15
    229a:	18fb      	adds	r3, r7, r3
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d10f      	bne.n	22c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    22a2:	230f      	movs	r3, #15
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	009b      	lsls	r3, r3, #2
    22aa:	2210      	movs	r2, #16
    22ac:	4694      	mov	ip, r2
    22ae:	44bc      	add	ip, r7
    22b0:	4463      	add	r3, ip
    22b2:	3b08      	subs	r3, #8
    22b4:	681a      	ldr	r2, [r3, #0]
    22b6:	230e      	movs	r3, #14
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	01db      	lsls	r3, r3, #7
    22be:	18d3      	adds	r3, r2, r3
    22c0:	e000      	b.n	22c4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    22c2:	2300      	movs	r3, #0
	}
}
    22c4:	1c18      	adds	r0, r3, #0
    22c6:	46bd      	mov	sp, r7
    22c8:	b004      	add	sp, #16
    22ca:	bd80      	pop	{r7, pc}
    22cc:	41004400 	.word	0x41004400

000022d0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    22d4:	4b01      	ldr	r3, [pc, #4]	; (22dc <system_interrupt_enter_critical_section+0xc>)
    22d6:	4798      	blx	r3
}
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}
    22dc:	00003639 	.word	0x00003639

000022e0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    22e4:	4b01      	ldr	r3, [pc, #4]	; (22ec <system_interrupt_leave_critical_section+0xc>)
    22e6:	4798      	blx	r3
}
    22e8:	46bd      	mov	sp, r7
    22ea:	bd80      	pop	{r7, pc}
    22ec:	00003689 	.word	0x00003689

000022f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b082      	sub	sp, #8
    22f4:	af00      	add	r7, sp, #0
    22f6:	1c02      	adds	r2, r0, #0
    22f8:	1dfb      	adds	r3, r7, #7
    22fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    22fc:	1dfb      	adds	r3, r7, #7
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	1c18      	adds	r0, r3, #0
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <port_get_group_from_gpio_pin+0x20>)
    2304:	4798      	blx	r3
    2306:	1c03      	adds	r3, r0, #0
}
    2308:	1c18      	adds	r0, r3, #0
    230a:	46bd      	mov	sp, r7
    230c:	b002      	add	sp, #8
    230e:	bd80      	pop	{r7, pc}
    2310:	00002271 	.word	0x00002271

00002314 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2314:	b580      	push	{r7, lr}
    2316:	b084      	sub	sp, #16
    2318:	af00      	add	r7, sp, #0
    231a:	1c02      	adds	r2, r0, #0
    231c:	1dfb      	adds	r3, r7, #7
    231e:	701a      	strb	r2, [r3, #0]
    2320:	1dbb      	adds	r3, r7, #6
    2322:	1c0a      	adds	r2, r1, #0
    2324:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2326:	1dfb      	adds	r3, r7, #7
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	1c18      	adds	r0, r3, #0
    232c:	4b0c      	ldr	r3, [pc, #48]	; (2360 <port_pin_set_output_level+0x4c>)
    232e:	4798      	blx	r3
    2330:	1c03      	adds	r3, r0, #0
    2332:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2334:	1dfb      	adds	r3, r7, #7
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	221f      	movs	r2, #31
    233a:	4013      	ands	r3, r2
    233c:	2201      	movs	r2, #1
    233e:	409a      	lsls	r2, r3
    2340:	1c13      	adds	r3, r2, #0
    2342:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2344:	1dbb      	adds	r3, r7, #6
    2346:	781b      	ldrb	r3, [r3, #0]
    2348:	2b00      	cmp	r3, #0
    234a:	d003      	beq.n	2354 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	68ba      	ldr	r2, [r7, #8]
    2350:	619a      	str	r2, [r3, #24]
    2352:	e002      	b.n	235a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	68ba      	ldr	r2, [r7, #8]
    2358:	615a      	str	r2, [r3, #20]
	}
}
    235a:	46bd      	mov	sp, r7
    235c:	b004      	add	sp, #16
    235e:	bd80      	pop	{r7, pc}
    2360:	000022f1 	.word	0x000022f1

00002364 <load_iWrap_Cmd>:

char cStr[100];


void load_iWrap_Cmd(struct usartQdef *usartQptr, uint8_t *str)
{
    2364:	b580      	push	{r7, lr}
    2366:	b082      	sub	sp, #8
    2368:	af00      	add	r7, sp, #0
    236a:	6078      	str	r0, [r7, #4]
    236c:	6039      	str	r1, [r7, #0]

//	len = strlen((const char*)str);
//	for (i = 0; i < len; i++)
	{
		system_interrupt_enter_critical_section();
    236e:	4b0b      	ldr	r3, [pc, #44]	; (239c <load_iWrap_Cmd+0x38>)
    2370:	4798      	blx	r3
		put_tx_Q(usartQptr, str, strlen((char *)str));
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	1c18      	adds	r0, r3, #0
    2376:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <load_iWrap_Cmd+0x3c>)
    2378:	4798      	blx	r3
    237a:	1c03      	adds	r3, r0, #0
    237c:	b2db      	uxtb	r3, r3
    237e:	6879      	ldr	r1, [r7, #4]
    2380:	683a      	ldr	r2, [r7, #0]
    2382:	1c08      	adds	r0, r1, #0
    2384:	1c11      	adds	r1, r2, #0
    2386:	1c1a      	adds	r2, r3, #0
    2388:	4b06      	ldr	r3, [pc, #24]	; (23a4 <load_iWrap_Cmd+0x40>)
    238a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
    238c:	4b06      	ldr	r3, [pc, #24]	; (23a8 <load_iWrap_Cmd+0x44>)
    238e:	4798      	blx	r3
		str++;
    2390:	683b      	ldr	r3, [r7, #0]
    2392:	3301      	adds	r3, #1
    2394:	603b      	str	r3, [r7, #0]
	}
}
    2396:	46bd      	mov	sp, r7
    2398:	b002      	add	sp, #8
    239a:	bd80      	pop	{r7, pc}
    239c:	000022d1 	.word	0x000022d1
    23a0:	000066a7 	.word	0x000066a7
    23a4:	00001d55 	.word	0x00001d55
    23a8:	000022e1 	.word	0x000022e1

000023ac <exit_SSP_WT41>:


void exit_SSP_WT41(struct usartQdef *usartQptr)
{
    23ac:	b580      	push	{r7, lr}
    23ae:	b082      	sub	sp, #8
    23b0:	af00      	add	r7, sp, #0
    23b2:	6078      	str	r0, [r7, #4]
	msCounter = 120;
    23b4:	4b10      	ldr	r3, [pc, #64]	; (23f8 <exit_SSP_WT41+0x4c>)
    23b6:	2278      	movs	r2, #120	; 0x78
    23b8:	601a      	str	r2, [r3, #0]
	while(msCounter>0){
    23ba:	e001      	b.n	23c0 <exit_SSP_WT41+0x14>
		do_FP_SPI();
    23bc:	4b0f      	ldr	r3, [pc, #60]	; (23fc <exit_SSP_WT41+0x50>)
    23be:	4798      	blx	r3


void exit_SSP_WT41(struct usartQdef *usartQptr)
{
	msCounter = 120;
	while(msCounter>0){
    23c0:	4b0d      	ldr	r3, [pc, #52]	; (23f8 <exit_SSP_WT41+0x4c>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d1f9      	bne.n	23bc <exit_SSP_WT41+0x10>
		do_FP_SPI();
		}   // wait 1.2 sec - don't run serial usarts - go quite
	init_usart_Qs(usartQptr);	
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	1c18      	adds	r0, r3, #0
    23cc:	4b0c      	ldr	r3, [pc, #48]	; (2400 <exit_SSP_WT41+0x54>)
    23ce:	4798      	blx	r3
	load_iWrap_Cmd(usartQptr, (uint8_t*) "+++");
    23d0:	687a      	ldr	r2, [r7, #4]
    23d2:	4b0c      	ldr	r3, [pc, #48]	; (2404 <exit_SSP_WT41+0x58>)
    23d4:	1c10      	adds	r0, r2, #0
    23d6:	1c19      	adds	r1, r3, #0
    23d8:	4b0b      	ldr	r3, [pc, #44]	; (2408 <exit_SSP_WT41+0x5c>)
    23da:	4798      	blx	r3
	msCounter = 120;			
    23dc:	4b06      	ldr	r3, [pc, #24]	; (23f8 <exit_SSP_WT41+0x4c>)
    23de:	2278      	movs	r2, #120	; 0x78
    23e0:	601a      	str	r2, [r3, #0]
	while(msCounter>0){
    23e2:	e001      	b.n	23e8 <exit_SSP_WT41+0x3c>
				do_FP_SPI();
    23e4:	4b05      	ldr	r3, [pc, #20]	; (23fc <exit_SSP_WT41+0x50>)
    23e6:	4798      	blx	r3
		do_FP_SPI();
		}   // wait 1.2 sec - don't run serial usarts - go quite
	init_usart_Qs(usartQptr);	
	load_iWrap_Cmd(usartQptr, (uint8_t*) "+++");
	msCounter = 120;			
	while(msCounter>0){
    23e8:	4b03      	ldr	r3, [pc, #12]	; (23f8 <exit_SSP_WT41+0x4c>)
    23ea:	681b      	ldr	r3, [r3, #0]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d1f9      	bne.n	23e4 <exit_SSP_WT41+0x38>
				do_FP_SPI();
		}   // wait 1.2 sec - don't run serial - go quite
}
    23f0:	46bd      	mov	sp, r7
    23f2:	b002      	add	sp, #8
    23f4:	bd80      	pop	{r7, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	20000734 	.word	0x20000734
    23fc:	00001219 	.word	0x00001219
    2400:	00001e71 	.word	0x00001e71
    2404:	00006f00 	.word	0x00006f00
    2408:	00002365 	.word	0x00002365

0000240c <check_WT41_paired>:

enum status_code check_WT41_paired(struct usartQdef *usartQptr)
{// check if pair and get pair
    240c:	b5b0      	push	{r4, r5, r7, lr}
    240e:	b084      	sub	sp, #16
    2410:	af00      	add	r7, sp, #0
    2412:	6078      	str	r0, [r7, #4]
	uint8_t *ptr;


	init_usart_Qs(usartQptr);
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	1c18      	adds	r0, r3, #0
    2418:	4b27      	ldr	r3, [pc, #156]	; (24b8 <check_WT41_paired+0xac>)
    241a:	4798      	blx	r3
	load_iWrap_Cmd(usartQptr, (uint8_t*) "set bt pair\r\n");
    241c:	687a      	ldr	r2, [r7, #4]
    241e:	4b27      	ldr	r3, [pc, #156]	; (24bc <check_WT41_paired+0xb0>)
    2420:	1c10      	adds	r0, r2, #0
    2422:	1c19      	adds	r1, r3, #0
    2424:	4b26      	ldr	r3, [pc, #152]	; (24c0 <check_WT41_paired+0xb4>)
    2426:	4798      	blx	r3

	msCounter = 200;	// wait 2 sec
    2428:	4b26      	ldr	r3, [pc, #152]	; (24c4 <check_WT41_paired+0xb8>)
    242a:	22c8      	movs	r2, #200	; 0xc8
    242c:	601a      	str	r2, [r3, #0]
	while (msCounter > 0)	
    242e:	e039      	b.n	24a4 <check_WT41_paired+0x98>
	{
		do_FP_SPI();
    2430:	4b25      	ldr	r3, [pc, #148]	; (24c8 <check_WT41_paired+0xbc>)
    2432:	4798      	blx	r3
		TX_usart_Qs();
    2434:	4b25      	ldr	r3, [pc, #148]	; (24cc <check_WT41_paired+0xc0>)
    2436:	4798      	blx	r3
		
		strcpy(cStr,"SET BT PAIR");
    2438:	4a25      	ldr	r2, [pc, #148]	; (24d0 <check_WT41_paired+0xc4>)
    243a:	4b26      	ldr	r3, [pc, #152]	; (24d4 <check_WT41_paired+0xc8>)
    243c:	1c11      	adds	r1, r2, #0
    243e:	1c1a      	adds	r2, r3, #0
    2440:	230c      	movs	r3, #12
    2442:	1c08      	adds	r0, r1, #0
    2444:	1c11      	adds	r1, r2, #0
    2446:	1c1a      	adds	r2, r3, #0
    2448:	4b23      	ldr	r3, [pc, #140]	; (24d8 <check_WT41_paired+0xcc>)
    244a:	4798      	blx	r3
		ptr = memmem((char *)(usartQptr->rx),100, cStr,strlen(cStr));
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	1d1c      	adds	r4, r3, #4
    2450:	4b1f      	ldr	r3, [pc, #124]	; (24d0 <check_WT41_paired+0xc4>)
    2452:	1c18      	adds	r0, r3, #0
    2454:	4b21      	ldr	r3, [pc, #132]	; (24dc <check_WT41_paired+0xd0>)
    2456:	4798      	blx	r3
    2458:	1c05      	adds	r5, r0, #0
    245a:	4b1d      	ldr	r3, [pc, #116]	; (24d0 <check_WT41_paired+0xc4>)
    245c:	1c20      	adds	r0, r4, #0
    245e:	2164      	movs	r1, #100	; 0x64
    2460:	1c1a      	adds	r2, r3, #0
    2462:	1c2b      	adds	r3, r5, #0
    2464:	4c1e      	ldr	r4, [pc, #120]	; (24e0 <check_WT41_paired+0xd4>)
    2466:	47a0      	blx	r4
    2468:	1c03      	adds	r3, r0, #0
    246a:	60fb      	str	r3, [r7, #12]

		if(ptr) {
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	2b00      	cmp	r3, #0
    2470:	d00f      	beq.n	2492 <check_WT41_paired+0x86>
				wait_10msSec(50);				// wait for pair addr
    2472:	2032      	movs	r0, #50	; 0x32
    2474:	4b1b      	ldr	r3, [pc, #108]	; (24e4 <check_WT41_paired+0xd8>)
    2476:	4798      	blx	r3
				memcpy(pair_addr,ptr+12,17);
    2478:	68fb      	ldr	r3, [r7, #12]
    247a:	330c      	adds	r3, #12
    247c:	4a1a      	ldr	r2, [pc, #104]	; (24e8 <check_WT41_paired+0xdc>)
    247e:	1c10      	adds	r0, r2, #0
    2480:	1c19      	adds	r1, r3, #0
    2482:	2211      	movs	r2, #17
    2484:	4b14      	ldr	r3, [pc, #80]	; (24d8 <check_WT41_paired+0xcc>)
    2486:	4798      	blx	r3
				pair_addr[17] = 0;
    2488:	4b17      	ldr	r3, [pc, #92]	; (24e8 <check_WT41_paired+0xdc>)
    248a:	2200      	movs	r2, #0
    248c:	745a      	strb	r2, [r3, #17]

				return STATUS_OK;
    248e:	2300      	movs	r3, #0
    2490:	e00d      	b.n	24ae <check_WT41_paired+0xa2>
			}

			else if (!msCounter)	// exit if timed out
    2492:	4b0c      	ldr	r3, [pc, #48]	; (24c4 <check_WT41_paired+0xb8>)
    2494:	681b      	ldr	r3, [r3, #0]
    2496:	2b00      	cmp	r3, #0
    2498:	d104      	bne.n	24a4 <check_WT41_paired+0x98>
			{
				pair_addr[0]=0;
    249a:	4b13      	ldr	r3, [pc, #76]	; (24e8 <check_WT41_paired+0xdc>)
    249c:	2200      	movs	r2, #0
    249e:	701a      	strb	r2, [r3, #0]
				return STATUS_ERR_DENIED;
    24a0:	231c      	movs	r3, #28
    24a2:	e004      	b.n	24ae <check_WT41_paired+0xa2>

	init_usart_Qs(usartQptr);
	load_iWrap_Cmd(usartQptr, (uint8_t*) "set bt pair\r\n");

	msCounter = 200;	// wait 2 sec
	while (msCounter > 0)	
    24a4:	4b07      	ldr	r3, [pc, #28]	; (24c4 <check_WT41_paired+0xb8>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d1c1      	bne.n	2430 <check_WT41_paired+0x24>
				pair_addr[0]=0;
				return STATUS_ERR_DENIED;
			}

	}
	return STATUS_ERR_DENIED;
    24ac:	231c      	movs	r3, #28
}
    24ae:	1c18      	adds	r0, r3, #0
    24b0:	46bd      	mov	sp, r7
    24b2:	b004      	add	sp, #16
    24b4:	bdb0      	pop	{r4, r5, r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00001e71 	.word	0x00001e71
    24bc:	00006f04 	.word	0x00006f04
    24c0:	00002365 	.word	0x00002365
    24c4:	20000734 	.word	0x20000734
    24c8:	00001219 	.word	0x00001219
    24cc:	000021a9 	.word	0x000021a9
    24d0:	200005b4 	.word	0x200005b4
    24d4:	00006f14 	.word	0x00006f14
    24d8:	000065f1 	.word	0x000065f1
    24dc:	000066a7 	.word	0x000066a7
    24e0:	00006603 	.word	0x00006603
    24e4:	00003361 	.word	0x00003361
    24e8:	20000618 	.word	0x20000618

000024ec <unpair_WT41>:
	}
	return STATUS_ERR_DENIED;
}

enum status_code unpair_WT41(struct usartQdef *usartQptr)
{
    24ec:	b580      	push	{r7, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]


	// exit SSP mode   (if in it)
	pair_addr[0] = 0;
    24f4:	4b29      	ldr	r3, [pc, #164]	; (259c <unpair_WT41+0xb0>)
    24f6:	2200      	movs	r2, #0
    24f8:	701a      	strb	r2, [r3, #0]
	
	exit_SSP_WT41(usartQptr);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	1c18      	adds	r0, r3, #0
    24fe:	4b28      	ldr	r3, [pc, #160]	; (25a0 <unpair_WT41+0xb4>)
    2500:	4798      	blx	r3

	check_WT41_paired(usartQptr);
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	1c18      	adds	r0, r3, #0
    2506:	4b27      	ldr	r3, [pc, #156]	; (25a4 <unpair_WT41+0xb8>)
    2508:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    250a:	4b24      	ldr	r3, [pc, #144]	; (259c <unpair_WT41+0xb0>)
    250c:	781b      	ldrb	r3, [r3, #0]
    250e:	2b00      	cmp	r3, #0
    2510:	d101      	bne.n	2516 <unpair_WT41+0x2a>
		return STATUS_OK;
    2512:	2300      	movs	r3, #0
    2514:	e03d      	b.n	2592 <unpair_WT41+0xa6>
	
	cStr[0]=0;							
    2516:	4b24      	ldr	r3, [pc, #144]	; (25a8 <unpair_WT41+0xbc>)
    2518:	2200      	movs	r2, #0
    251a:	701a      	strb	r2, [r3, #0]
	strcpy(cStr, "at\r\nset bt pair ");
    251c:	4a22      	ldr	r2, [pc, #136]	; (25a8 <unpair_WT41+0xbc>)
    251e:	4b23      	ldr	r3, [pc, #140]	; (25ac <unpair_WT41+0xc0>)
    2520:	1c11      	adds	r1, r2, #0
    2522:	1c1a      	adds	r2, r3, #0
    2524:	2311      	movs	r3, #17
    2526:	1c08      	adds	r0, r1, #0
    2528:	1c11      	adds	r1, r2, #0
    252a:	1c1a      	adds	r2, r3, #0
    252c:	4b20      	ldr	r3, [pc, #128]	; (25b0 <unpair_WT41+0xc4>)
    252e:	4798      	blx	r3
	strcat(cStr,pair_addr);
    2530:	4a1d      	ldr	r2, [pc, #116]	; (25a8 <unpair_WT41+0xbc>)
    2532:	4b1a      	ldr	r3, [pc, #104]	; (259c <unpair_WT41+0xb0>)
    2534:	1c10      	adds	r0, r2, #0
    2536:	1c19      	adds	r1, r3, #0
    2538:	4b1e      	ldr	r3, [pc, #120]	; (25b4 <unpair_WT41+0xc8>)
    253a:	4798      	blx	r3
	strcat(cStr,"\r\n");
    253c:	4b1a      	ldr	r3, [pc, #104]	; (25a8 <unpair_WT41+0xbc>)
    253e:	1c18      	adds	r0, r3, #0
    2540:	4b1d      	ldr	r3, [pc, #116]	; (25b8 <unpair_WT41+0xcc>)
    2542:	4798      	blx	r3
    2544:	1c03      	adds	r3, r0, #0
    2546:	1c1a      	adds	r2, r3, #0
    2548:	4b17      	ldr	r3, [pc, #92]	; (25a8 <unpair_WT41+0xbc>)
    254a:	18d2      	adds	r2, r2, r3
    254c:	4b1b      	ldr	r3, [pc, #108]	; (25bc <unpair_WT41+0xd0>)
    254e:	1c11      	adds	r1, r2, #0
    2550:	1c1a      	adds	r2, r3, #0
    2552:	2303      	movs	r3, #3
    2554:	1c08      	adds	r0, r1, #0
    2556:	1c11      	adds	r1, r2, #0
    2558:	1c1a      	adds	r2, r3, #0
    255a:	4b15      	ldr	r3, [pc, #84]	; (25b0 <unpair_WT41+0xc4>)
    255c:	4798      	blx	r3
	init_usart_Qs(usartQptr);
    255e:	687b      	ldr	r3, [r7, #4]
    2560:	1c18      	adds	r0, r3, #0
    2562:	4b17      	ldr	r3, [pc, #92]	; (25c0 <unpair_WT41+0xd4>)
    2564:	4798      	blx	r3
	load_iWrap_Cmd(usartQptr, (uint8_t*) cStr);	// send command to remove pairing
    2566:	687a      	ldr	r2, [r7, #4]
    2568:	4b0f      	ldr	r3, [pc, #60]	; (25a8 <unpair_WT41+0xbc>)
    256a:	1c10      	adds	r0, r2, #0
    256c:	1c19      	adds	r1, r3, #0
    256e:	4b15      	ldr	r3, [pc, #84]	; (25c4 <unpair_WT41+0xd8>)
    2570:	4798      	blx	r3
	
	wait_10msSec(100);
    2572:	2064      	movs	r0, #100	; 0x64
    2574:	4b14      	ldr	r3, [pc, #80]	; (25c8 <unpair_WT41+0xdc>)
    2576:	4798      	blx	r3
	
	check_WT41_paired(usartQptr);
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	1c18      	adds	r0, r3, #0
    257c:	4b09      	ldr	r3, [pc, #36]	; (25a4 <unpair_WT41+0xb8>)
    257e:	4798      	blx	r3
	if(pair_addr[0] == 0)				// not paired - return
    2580:	4b06      	ldr	r3, [pc, #24]	; (259c <unpair_WT41+0xb0>)
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	2b00      	cmp	r3, #0
    2586:	d101      	bne.n	258c <unpair_WT41+0xa0>
	{

		return STATUS_OK;
    2588:	2300      	movs	r3, #0
    258a:	e002      	b.n	2592 <unpair_WT41+0xa6>
	}
	else 
	{
		reset_BT();
    258c:	4b0f      	ldr	r3, [pc, #60]	; (25cc <unpair_WT41+0xe0>)
    258e:	4798      	blx	r3
		return STATUS_ERR_DENIED; 	
    2590:	231c      	movs	r3, #28
	}
}
    2592:	1c18      	adds	r0, r3, #0
    2594:	46bd      	mov	sp, r7
    2596:	b002      	add	sp, #8
    2598:	bd80      	pop	{r7, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	20000618 	.word	0x20000618
    25a0:	000023ad 	.word	0x000023ad
    25a4:	0000240d 	.word	0x0000240d
    25a8:	200005b4 	.word	0x200005b4
    25ac:	00006f34 	.word	0x00006f34
    25b0:	000065f1 	.word	0x000065f1
    25b4:	0000668d 	.word	0x0000668d
    25b8:	000066a7 	.word	0x000066a7
    25bc:	00006f48 	.word	0x00006f48
    25c0:	00001e71 	.word	0x00001e71
    25c4:	00002365 	.word	0x00002365
    25c8:	00003361 	.word	0x00003361
    25cc:	000025d1 	.word	0x000025d1

000025d0 <reset_BT>:



  // Reset BT module
void reset_BT(void)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	af00      	add	r7, sp, #0

 	port_pin_set_output_level(Reset_BT_PIN,0);
    25d4:	2014      	movs	r0, #20
    25d6:	2100      	movs	r1, #0
    25d8:	4b0d      	ldr	r3, [pc, #52]	; (2610 <reset_BT+0x40>)
    25da:	4798      	blx	r3
	
	msCounter=10;
    25dc:	4b0d      	ldr	r3, [pc, #52]	; (2614 <reset_BT+0x44>)
    25de:	220a      	movs	r2, #10
    25e0:	601a      	str	r2, [r3, #0]
	while (msCounter){
    25e2:	e001      	b.n	25e8 <reset_BT+0x18>
		do_FP_SPI();
    25e4:	4b0c      	ldr	r3, [pc, #48]	; (2618 <reset_BT+0x48>)
    25e6:	4798      	blx	r3
{

 	port_pin_set_output_level(Reset_BT_PIN,0);
	
	msCounter=10;
	while (msCounter){
    25e8:	4b0a      	ldr	r3, [pc, #40]	; (2614 <reset_BT+0x44>)
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d1f9      	bne.n	25e4 <reset_BT+0x14>
		do_FP_SPI();
	}
		
	port_pin_set_output_level(Reset_BT_PIN,1);
    25f0:	2014      	movs	r0, #20
    25f2:	2101      	movs	r1, #1
    25f4:	4b06      	ldr	r3, [pc, #24]	; (2610 <reset_BT+0x40>)
    25f6:	4798      	blx	r3
	
	msCounter=50;
    25f8:	4b06      	ldr	r3, [pc, #24]	; (2614 <reset_BT+0x44>)
    25fa:	2232      	movs	r2, #50	; 0x32
    25fc:	601a      	str	r2, [r3, #0]
	while (msCounter){
    25fe:	e001      	b.n	2604 <reset_BT+0x34>
		do_FP_SPI();
    2600:	4b05      	ldr	r3, [pc, #20]	; (2618 <reset_BT+0x48>)
    2602:	4798      	blx	r3
	}
		
	port_pin_set_output_level(Reset_BT_PIN,1);
	
	msCounter=50;
	while (msCounter){
    2604:	4b03      	ldr	r3, [pc, #12]	; (2614 <reset_BT+0x44>)
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	2b00      	cmp	r3, #0
    260a:	d1f9      	bne.n	2600 <reset_BT+0x30>
		do_FP_SPI();
	}
}
    260c:	46bd      	mov	sp, r7
    260e:	bd80      	pop	{r7, pc}
    2610:	00002315 	.word	0x00002315
    2614:	20000734 	.word	0x20000734
    2618:	00001219 	.word	0x00001219

0000261c <do_music_mode>:

uint8_t lastSW;
uint8_t volatile rx_buffer_MIDI[3];
	
void do_music_mode(void)
{	uint8_t nextSW;
    261c:	b590      	push	{r4, r7, lr}
    261e:	b083      	sub	sp, #12
    2620:	af00      	add	r7, sp, #0

	// handle midi in from MRU  -- USART DATA
	if (MIDI_usart_rx_done)
    2622:	4b28      	ldr	r3, [pc, #160]	; (26c4 <do_music_mode+0xa8>)
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d011      	beq.n	264e <do_music_mode+0x32>
	{	
		usart_read_buffer_job(&MIDI_usart_instance,(uint8_t *)rx_buffer_MIDI, 1);
    262a:	4a27      	ldr	r2, [pc, #156]	; (26c8 <do_music_mode+0xac>)
    262c:	4b27      	ldr	r3, [pc, #156]	; (26cc <do_music_mode+0xb0>)
    262e:	1c10      	adds	r0, r2, #0
    2630:	1c19      	adds	r1, r3, #0
    2632:	2201      	movs	r2, #1
    2634:	4b26      	ldr	r3, [pc, #152]	; (26d0 <do_music_mode+0xb4>)
    2636:	4798      	blx	r3
		put_rx_Q(&midiQ, rx_buffer_MIDI, 1);		// put in Q for processing
    2638:	4a26      	ldr	r2, [pc, #152]	; (26d4 <do_music_mode+0xb8>)
    263a:	4b24      	ldr	r3, [pc, #144]	; (26cc <do_music_mode+0xb0>)
    263c:	1c10      	adds	r0, r2, #0
    263e:	1c19      	adds	r1, r3, #0
    2640:	2201      	movs	r2, #1
    2642:	4b25      	ldr	r3, [pc, #148]	; (26d8 <do_music_mode+0xbc>)
    2644:	4798      	blx	r3
		
		MIDI_usart_rx_done = false;
    2646:	4b1f      	ldr	r3, [pc, #124]	; (26c4 <do_music_mode+0xa8>)
    2648:	2200      	movs	r2, #0
    264a:	701a      	strb	r2, [r3, #0]
    264c:	e015      	b.n	267a <do_music_mode+0x5e>
	}
	else
	{	uint8_t code = usart_get_job_status(&MIDI_usart_instance,USART_TRANSCEIVER_RX);
    264e:	1dfc      	adds	r4, r7, #7
    2650:	4b1d      	ldr	r3, [pc, #116]	; (26c8 <do_music_mode+0xac>)
    2652:	1c18      	adds	r0, r3, #0
    2654:	2100      	movs	r1, #0
    2656:	4b21      	ldr	r3, [pc, #132]	; (26dc <do_music_mode+0xc0>)
    2658:	4798      	blx	r3
    265a:	1c03      	adds	r3, r0, #0
    265c:	7023      	strb	r3, [r4, #0]
		if (code != STATUS_BUSY) 
    265e:	1dfb      	adds	r3, r7, #7
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	2b05      	cmp	r3, #5
    2664:	d009      	beq.n	267a <do_music_mode+0x5e>
		{ 	usart_read_buffer_job(&MIDI_usart_instance,(uint8_t *)rx_buffer_MIDI, 1);
    2666:	4a18      	ldr	r2, [pc, #96]	; (26c8 <do_music_mode+0xac>)
    2668:	4b18      	ldr	r3, [pc, #96]	; (26cc <do_music_mode+0xb0>)
    266a:	1c10      	adds	r0, r2, #0
    266c:	1c19      	adds	r1, r3, #0
    266e:	2201      	movs	r2, #1
    2670:	4b17      	ldr	r3, [pc, #92]	; (26d0 <do_music_mode+0xb4>)
    2672:	4798      	blx	r3
			MIDI_usart_rx_done = false;
    2674:	4b13      	ldr	r3, [pc, #76]	; (26c4 <do_music_mode+0xa8>)
    2676:	2200      	movs	r2, #0
    2678:	701a      	strb	r2, [r3, #0]
	}


	// handle the FP switch inputs
		
		get_FP_swQ(&nextSW);
    267a:	1dbb      	adds	r3, r7, #6
    267c:	1c18      	adds	r0, r3, #0
    267e:	4b18      	ldr	r3, [pc, #96]	; (26e0 <do_music_mode+0xc4>)
    2680:	4798      	blx	r3
//TEST***************************************************************
		if (nextSW != FP_SW_NO_CHANGE)
    2682:	1dbb      	adds	r3, r7, #6
    2684:	781b      	ldrb	r3, [r3, #0]
    2686:	2bf7      	cmp	r3, #247	; 0xf7
    2688:	d019      	beq.n	26be <do_music_mode+0xa2>
		{
				if (nextSW>0)
    268a:	1dbb      	adds	r3, r7, #6
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d015      	beq.n	26be <do_music_mode+0xa2>
				{	if (nextSW<80)
    2692:	1dbb      	adds	r3, r7, #6
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b4f      	cmp	r3, #79	; 0x4f
    2698:	d811      	bhi.n	26be <do_music_mode+0xa2>
					{	// switch pushed
						put_FP_ledQ (lastSW| FP_LED_OFF_FLAG);		 // turn off last push
    269a:	4b12      	ldr	r3, [pc, #72]	; (26e4 <do_music_mode+0xc8>)
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	2280      	movs	r2, #128	; 0x80
    26a0:	4252      	negs	r2, r2
    26a2:	4313      	orrs	r3, r2
    26a4:	b2db      	uxtb	r3, r3
    26a6:	1c18      	adds	r0, r3, #0
    26a8:	4b0f      	ldr	r3, [pc, #60]	; (26e8 <do_music_mode+0xcc>)
    26aa:	4798      	blx	r3
						lastSW = nextSW;
    26ac:	1dbb      	adds	r3, r7, #6
    26ae:	781a      	ldrb	r2, [r3, #0]
    26b0:	4b0c      	ldr	r3, [pc, #48]	; (26e4 <do_music_mode+0xc8>)
    26b2:	701a      	strb	r2, [r3, #0]
						put_FP_ledQ(nextSW);						// turn on this one
    26b4:	1dbb      	adds	r3, r7, #6
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	1c18      	adds	r0, r3, #0
    26ba:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <do_music_mode+0xcc>)
    26bc:	4798      	blx	r3

	
	// handle Android commands - could add Android input into FP switch Q
	
	
}							 
    26be:	46bd      	mov	sp, r7
    26c0:	b003      	add	sp, #12
    26c2:	bd90      	pop	{r4, r7, pc}
    26c4:	20000001 	.word	0x20000001
    26c8:	20000184 	.word	0x20000184
    26cc:	20000630 	.word	0x20000630
    26d0:	00000985 	.word	0x00000985
    26d4:	200003ac 	.word	0x200003ac
    26d8:	00001de9 	.word	0x00001de9
    26dc:	000009d1 	.word	0x000009d1
    26e0:	000013e9 	.word	0x000013e9
    26e4:	2000062c 	.word	0x2000062c
    26e8:	0000131d 	.word	0x0000131d

000026ec <do_music_notes>:
	return (midiQ.tx_in - midiQ.tx_out);
}

	
void do_music_notes(void)
{	uint8_t	tx_buffer[2], midiStr[5];
    26ec:	b590      	push	{r4, r7, lr}
    26ee:	b08b      	sub	sp, #44	; 0x2c
    26f0:	af00      	add	r7, sp, #0

	if (((midiQ.tx_in - midiQ.tx_out)+3 < MIDI_Q_SIZE) && (keyQ.length>=1)) 		   // MUST CHECK THAT IT WILL FIT BEFORE CALLING put_tx_Q
    26f2:	4b5f      	ldr	r3, [pc, #380]	; (2870 <do_music_notes+0x184>)
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	b2db      	uxtb	r3, r3
    26f8:	1c1a      	adds	r2, r3, #0
    26fa:	4b5d      	ldr	r3, [pc, #372]	; (2870 <do_music_notes+0x184>)
    26fc:	785b      	ldrb	r3, [r3, #1]
    26fe:	b2db      	uxtb	r3, r3
    2700:	1ad3      	subs	r3, r2, r3
    2702:	3303      	adds	r3, #3
    2704:	2bff      	cmp	r3, #255	; 0xff
    2706:	dd00      	ble.n	270a <do_music_notes+0x1e>
    2708:	e0ae      	b.n	2868 <do_music_notes+0x17c>
    270a:	4b5a      	ldr	r3, [pc, #360]	; (2874 <do_music_notes+0x188>)
    270c:	789b      	ldrb	r3, [r3, #2]
    270e:	b2db      	uxtb	r3, r3
    2710:	2b00      	cmp	r3, #0
    2712:	d100      	bne.n	2716 <do_music_notes+0x2a>
    2714:	e0a8      	b.n	2868 <do_music_notes+0x17c>
	{
		key_get_keyQ(tx_buffer);			// get key to process
    2716:	2324      	movs	r3, #36	; 0x24
    2718:	18fb      	adds	r3, r7, r3
    271a:	1c18      	adds	r0, r3, #0
    271c:	4b56      	ldr	r3, [pc, #344]	; (2878 <do_music_notes+0x18c>)
    271e:	4798      	blx	r3
		if (tx_buffer[1]>1) 					// process key	   (treble will send a velocity of 1 to turn off note)
    2720:	2324      	movs	r3, #36	; 0x24
    2722:	18fb      	adds	r3, r7, r3
    2724:	785b      	ldrb	r3, [r3, #1]
    2726:	2b01      	cmp	r3, #1
    2728:	d910      	bls.n	274c <do_music_notes+0x60>
 		{
			midiStr[0] = 0x90;
    272a:	231c      	movs	r3, #28
    272c:	18fb      	adds	r3, r7, r3
    272e:	2290      	movs	r2, #144	; 0x90
    2730:	701a      	strb	r2, [r3, #0]
			midiStr[1] = tx_buffer[0];
    2732:	2324      	movs	r3, #36	; 0x24
    2734:	18fb      	adds	r3, r7, r3
    2736:	781a      	ldrb	r2, [r3, #0]
    2738:	231c      	movs	r3, #28
    273a:	18fb      	adds	r3, r7, r3
    273c:	705a      	strb	r2, [r3, #1]
			midiStr[2] = tx_buffer[1];
    273e:	2324      	movs	r3, #36	; 0x24
    2740:	18fb      	adds	r3, r7, r3
    2742:	785a      	ldrb	r2, [r3, #1]
    2744:	231c      	movs	r3, #28
    2746:	18fb      	adds	r3, r7, r3
    2748:	709a      	strb	r2, [r3, #2]
    274a:	e00d      	b.n	2768 <do_music_notes+0x7c>
		}
		else
		{
			midiStr[0] = 0x80;
    274c:	231c      	movs	r3, #28
    274e:	18fb      	adds	r3, r7, r3
    2750:	2280      	movs	r2, #128	; 0x80
    2752:	701a      	strb	r2, [r3, #0]
			midiStr[1] = tx_buffer[0];
    2754:	2324      	movs	r3, #36	; 0x24
    2756:	18fb      	adds	r3, r7, r3
    2758:	781a      	ldrb	r2, [r3, #0]
    275a:	231c      	movs	r3, #28
    275c:	18fb      	adds	r3, r7, r3
    275e:	705a      	strb	r2, [r3, #1]
			midiStr[2] = 0;						// velocity of zero
    2760:	231c      	movs	r3, #28
    2762:	18fb      	adds	r3, r7, r3
    2764:	2200      	movs	r2, #0
    2766:	709a      	strb	r2, [r3, #2]
		}
		put_tx_Q(&midiQ, midiStr, 3);
    2768:	4a41      	ldr	r2, [pc, #260]	; (2870 <do_music_notes+0x184>)
    276a:	231c      	movs	r3, #28
    276c:	18fb      	adds	r3, r7, r3
    276e:	1c10      	adds	r0, r2, #0
    2770:	1c19      	adds	r1, r3, #0
    2772:	2203      	movs	r2, #3
    2774:	4b41      	ldr	r3, [pc, #260]	; (287c <do_music_notes+0x190>)
    2776:	4798      	blx	r3
		
		#ifdef DEBUG_MIDI_TO_TABLET
				char myStr[15],myStrChar[10];
				sprintf(myStr, "%02x",midiStr[0]);
    2778:	231c      	movs	r3, #28
    277a:	18fb      	adds	r3, r7, r3
    277c:	781b      	ldrb	r3, [r3, #0]
    277e:	1c1c      	adds	r4, r3, #0
    2780:	230c      	movs	r3, #12
    2782:	18fa      	adds	r2, r7, r3
    2784:	4b3e      	ldr	r3, [pc, #248]	; (2880 <do_music_notes+0x194>)
    2786:	1c10      	adds	r0, r2, #0
    2788:	1c19      	adds	r1, r3, #0
    278a:	1c22      	adds	r2, r4, #0
    278c:	4b3d      	ldr	r3, [pc, #244]	; (2884 <do_music_notes+0x198>)
    278e:	4798      	blx	r3
				sprintf(myStrChar, "%02x",midiStr[1]);
    2790:	231c      	movs	r3, #28
    2792:	18fb      	adds	r3, r7, r3
    2794:	785b      	ldrb	r3, [r3, #1]
    2796:	1c1c      	adds	r4, r3, #0
    2798:	1c3a      	adds	r2, r7, #0
    279a:	4b39      	ldr	r3, [pc, #228]	; (2880 <do_music_notes+0x194>)
    279c:	1c10      	adds	r0, r2, #0
    279e:	1c19      	adds	r1, r3, #0
    27a0:	1c22      	adds	r2, r4, #0
    27a2:	4b38      	ldr	r3, [pc, #224]	; (2884 <do_music_notes+0x198>)
    27a4:	4798      	blx	r3
				strcat(myStr,",");
    27a6:	230c      	movs	r3, #12
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	1c18      	adds	r0, r3, #0
    27ac:	4b36      	ldr	r3, [pc, #216]	; (2888 <do_music_notes+0x19c>)
    27ae:	4798      	blx	r3
    27b0:	1c03      	adds	r3, r0, #0
    27b2:	1c1a      	adds	r2, r3, #0
    27b4:	230c      	movs	r3, #12
    27b6:	18fb      	adds	r3, r7, r3
    27b8:	189a      	adds	r2, r3, r2
    27ba:	4b34      	ldr	r3, [pc, #208]	; (288c <do_music_notes+0x1a0>)
    27bc:	1c11      	adds	r1, r2, #0
    27be:	1c1a      	adds	r2, r3, #0
    27c0:	2302      	movs	r3, #2
    27c2:	1c08      	adds	r0, r1, #0
    27c4:	1c11      	adds	r1, r2, #0
    27c6:	1c1a      	adds	r2, r3, #0
    27c8:	4b31      	ldr	r3, [pc, #196]	; (2890 <do_music_notes+0x1a4>)
    27ca:	4798      	blx	r3
				strcat(myStr,myStrChar);
    27cc:	230c      	movs	r3, #12
    27ce:	18fa      	adds	r2, r7, r3
    27d0:	1c3b      	adds	r3, r7, #0
    27d2:	1c10      	adds	r0, r2, #0
    27d4:	1c19      	adds	r1, r3, #0
    27d6:	4b2f      	ldr	r3, [pc, #188]	; (2894 <do_music_notes+0x1a8>)
    27d8:	4798      	blx	r3
				strcat(myStr,",");
    27da:	230c      	movs	r3, #12
    27dc:	18fb      	adds	r3, r7, r3
    27de:	1c18      	adds	r0, r3, #0
    27e0:	4b29      	ldr	r3, [pc, #164]	; (2888 <do_music_notes+0x19c>)
    27e2:	4798      	blx	r3
    27e4:	1c03      	adds	r3, r0, #0
    27e6:	1c1a      	adds	r2, r3, #0
    27e8:	230c      	movs	r3, #12
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	189a      	adds	r2, r3, r2
    27ee:	4b27      	ldr	r3, [pc, #156]	; (288c <do_music_notes+0x1a0>)
    27f0:	1c11      	adds	r1, r2, #0
    27f2:	1c1a      	adds	r2, r3, #0
    27f4:	2302      	movs	r3, #2
    27f6:	1c08      	adds	r0, r1, #0
    27f8:	1c11      	adds	r1, r2, #0
    27fa:	1c1a      	adds	r2, r3, #0
    27fc:	4b24      	ldr	r3, [pc, #144]	; (2890 <do_music_notes+0x1a4>)
    27fe:	4798      	blx	r3
				sprintf(myStrChar, "%02x",midiStr[2]);
    2800:	231c      	movs	r3, #28
    2802:	18fb      	adds	r3, r7, r3
    2804:	789b      	ldrb	r3, [r3, #2]
    2806:	1c1c      	adds	r4, r3, #0
    2808:	1c3a      	adds	r2, r7, #0
    280a:	4b1d      	ldr	r3, [pc, #116]	; (2880 <do_music_notes+0x194>)
    280c:	1c10      	adds	r0, r2, #0
    280e:	1c19      	adds	r1, r3, #0
    2810:	1c22      	adds	r2, r4, #0
    2812:	4b1c      	ldr	r3, [pc, #112]	; (2884 <do_music_notes+0x198>)
    2814:	4798      	blx	r3
				strcat(myStr,myStrChar);
    2816:	230c      	movs	r3, #12
    2818:	18fa      	adds	r2, r7, r3
    281a:	1c3b      	adds	r3, r7, #0
    281c:	1c10      	adds	r0, r2, #0
    281e:	1c19      	adds	r1, r3, #0
    2820:	4b1c      	ldr	r3, [pc, #112]	; (2894 <do_music_notes+0x1a8>)
    2822:	4798      	blx	r3
				strcat(myStr,"\r\n");
    2824:	230c      	movs	r3, #12
    2826:	18fb      	adds	r3, r7, r3
    2828:	1c18      	adds	r0, r3, #0
    282a:	4b17      	ldr	r3, [pc, #92]	; (2888 <do_music_notes+0x19c>)
    282c:	4798      	blx	r3
    282e:	1c03      	adds	r3, r0, #0
    2830:	1c1a      	adds	r2, r3, #0
    2832:	230c      	movs	r3, #12
    2834:	18fb      	adds	r3, r7, r3
    2836:	189a      	adds	r2, r3, r2
    2838:	4b17      	ldr	r3, [pc, #92]	; (2898 <do_music_notes+0x1ac>)
    283a:	1c11      	adds	r1, r2, #0
    283c:	1c1a      	adds	r2, r3, #0
    283e:	2303      	movs	r3, #3
    2840:	1c08      	adds	r0, r1, #0
    2842:	1c11      	adds	r1, r2, #0
    2844:	1c1a      	adds	r2, r3, #0
    2846:	4b12      	ldr	r3, [pc, #72]	; (2890 <do_music_notes+0x1a4>)
    2848:	4798      	blx	r3
				put_tx_Q(&androidQ,(uint8_t *) myStr,strlen(myStr));
    284a:	230c      	movs	r3, #12
    284c:	18fb      	adds	r3, r7, r3
    284e:	1c18      	adds	r0, r3, #0
    2850:	4b0d      	ldr	r3, [pc, #52]	; (2888 <do_music_notes+0x19c>)
    2852:	4798      	blx	r3
    2854:	1c03      	adds	r3, r0, #0
    2856:	b2db      	uxtb	r3, r3
    2858:	4910      	ldr	r1, [pc, #64]	; (289c <do_music_notes+0x1b0>)
    285a:	220c      	movs	r2, #12
    285c:	18ba      	adds	r2, r7, r2
    285e:	1c08      	adds	r0, r1, #0
    2860:	1c11      	adds	r1, r2, #0
    2862:	1c1a      	adds	r2, r3, #0
    2864:	4b05      	ldr	r3, [pc, #20]	; (287c <do_music_notes+0x190>)
    2866:	4798      	blx	r3
		#endif


 	}
}
    2868:	46bd      	mov	sp, r7
    286a:	b00b      	add	sp, #44	; 0x2c
    286c:	bd90      	pop	{r4, r7, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	200003ac 	.word	0x200003ac
    2874:	2000069c 	.word	0x2000069c
    2878:	00002b8d 	.word	0x00002b8d
    287c:	00001d55 	.word	0x00001d55
    2880:	00006f4c 	.word	0x00006f4c
    2884:	00006649 	.word	0x00006649
    2888:	000066a7 	.word	0x000066a7
    288c:	00006f54 	.word	0x00006f54
    2890:	000065f1 	.word	0x000065f1
    2894:	0000668d 	.word	0x0000668d
    2898:	00006f58 	.word	0x00006f58
    289c:	200001a8 	.word	0x200001a8

000028a0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b084      	sub	sp, #16
    28a4:	af00      	add	r7, sp, #0
    28a6:	1c02      	adds	r2, r0, #0
    28a8:	1dfb      	adds	r3, r7, #7
    28aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    28ac:	230f      	movs	r3, #15
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	1dfa      	adds	r2, r7, #7
    28b2:	7812      	ldrb	r2, [r2, #0]
    28b4:	09d2      	lsrs	r2, r2, #7
    28b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    28b8:	230e      	movs	r3, #14
    28ba:	18fb      	adds	r3, r7, r3
    28bc:	1dfa      	adds	r2, r7, #7
    28be:	7812      	ldrb	r2, [r2, #0]
    28c0:	0952      	lsrs	r2, r2, #5
    28c2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    28c4:	4b0d      	ldr	r3, [pc, #52]	; (28fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    28c6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    28c8:	230f      	movs	r3, #15
    28ca:	18fb      	adds	r3, r7, r3
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d10f      	bne.n	28f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    28d2:	230f      	movs	r3, #15
    28d4:	18fb      	adds	r3, r7, r3
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	009b      	lsls	r3, r3, #2
    28da:	2210      	movs	r2, #16
    28dc:	4694      	mov	ip, r2
    28de:	44bc      	add	ip, r7
    28e0:	4463      	add	r3, ip
    28e2:	3b08      	subs	r3, #8
    28e4:	681a      	ldr	r2, [r3, #0]
    28e6:	230e      	movs	r3, #14
    28e8:	18fb      	adds	r3, r7, r3
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	01db      	lsls	r3, r3, #7
    28ee:	18d3      	adds	r3, r2, r3
    28f0:	e000      	b.n	28f4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    28f2:	2300      	movs	r3, #0
	}
}
    28f4:	1c18      	adds	r0, r3, #0
    28f6:	46bd      	mov	sp, r7
    28f8:	b004      	add	sp, #16
    28fa:	bd80      	pop	{r7, pc}
    28fc:	41004400 	.word	0x41004400

00002900 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2900:	b580      	push	{r7, lr}
    2902:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2904:	4b01      	ldr	r3, [pc, #4]	; (290c <system_interrupt_enter_critical_section+0xc>)
    2906:	4798      	blx	r3
}
    2908:	46bd      	mov	sp, r7
    290a:	bd80      	pop	{r7, pc}
    290c:	00003639 	.word	0x00003639

00002910 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2910:	b580      	push	{r7, lr}
    2912:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2914:	4b01      	ldr	r3, [pc, #4]	; (291c <system_interrupt_leave_critical_section+0xc>)
    2916:	4798      	blx	r3
}
    2918:	46bd      	mov	sp, r7
    291a:	bd80      	pop	{r7, pc}
    291c:	00003689 	.word	0x00003689

00002920 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2920:	b580      	push	{r7, lr}
    2922:	b082      	sub	sp, #8
    2924:	af00      	add	r7, sp, #0
    2926:	1c02      	adds	r2, r0, #0
    2928:	1dfb      	adds	r3, r7, #7
    292a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    292c:	4b06      	ldr	r3, [pc, #24]	; (2948 <system_interrupt_enable+0x28>)
    292e:	1dfa      	adds	r2, r7, #7
    2930:	7812      	ldrb	r2, [r2, #0]
    2932:	1c11      	adds	r1, r2, #0
    2934:	221f      	movs	r2, #31
    2936:	400a      	ands	r2, r1
    2938:	2101      	movs	r1, #1
    293a:	4091      	lsls	r1, r2
    293c:	1c0a      	adds	r2, r1, #0
    293e:	601a      	str	r2, [r3, #0]
}
    2940:	46bd      	mov	sp, r7
    2942:	b002      	add	sp, #8
    2944:	bd80      	pop	{r7, pc}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	e000e100 	.word	0xe000e100

0000294c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    294c:	b580      	push	{r7, lr}
    294e:	b082      	sub	sp, #8
    2950:	af00      	add	r7, sp, #0
    2952:	1c02      	adds	r2, r0, #0
    2954:	1dfb      	adds	r3, r7, #7
    2956:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2958:	1dfb      	adds	r3, r7, #7
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	1c18      	adds	r0, r3, #0
    295e:	4b03      	ldr	r3, [pc, #12]	; (296c <port_get_group_from_gpio_pin+0x20>)
    2960:	4798      	blx	r3
    2962:	1c03      	adds	r3, r0, #0
}
    2964:	1c18      	adds	r0, r3, #0
    2966:	46bd      	mov	sp, r7
    2968:	b002      	add	sp, #8
    296a:	bd80      	pop	{r7, pc}
    296c:	000028a1 	.word	0x000028a1

00002970 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2970:	b580      	push	{r7, lr}
    2972:	b082      	sub	sp, #8
    2974:	af00      	add	r7, sp, #0
    2976:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	2200      	movs	r2, #0
    297c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	2201      	movs	r2, #1
    2982:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	2200      	movs	r2, #0
    2988:	709a      	strb	r2, [r3, #2]
}
    298a:	46bd      	mov	sp, r7
    298c:	b002      	add	sp, #8
    298e:	bd80      	pop	{r7, pc}

00002990 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2990:	b580      	push	{r7, lr}
    2992:	b084      	sub	sp, #16
    2994:	af00      	add	r7, sp, #0
    2996:	1c02      	adds	r2, r0, #0
    2998:	1dfb      	adds	r3, r7, #7
    299a:	701a      	strb	r2, [r3, #0]
    299c:	1dbb      	adds	r3, r7, #6
    299e:	1c0a      	adds	r2, r1, #0
    29a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    29a2:	1dfb      	adds	r3, r7, #7
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	1c18      	adds	r0, r3, #0
    29a8:	4b0c      	ldr	r3, [pc, #48]	; (29dc <port_pin_set_output_level+0x4c>)
    29aa:	4798      	blx	r3
    29ac:	1c03      	adds	r3, r0, #0
    29ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    29b0:	1dfb      	adds	r3, r7, #7
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	221f      	movs	r2, #31
    29b6:	4013      	ands	r3, r2
    29b8:	2201      	movs	r2, #1
    29ba:	409a      	lsls	r2, r3
    29bc:	1c13      	adds	r3, r2, #0
    29be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    29c0:	1dbb      	adds	r3, r7, #6
    29c2:	781b      	ldrb	r3, [r3, #0]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d003      	beq.n	29d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    29c8:	68fb      	ldr	r3, [r7, #12]
    29ca:	68ba      	ldr	r2, [r7, #8]
    29cc:	619a      	str	r2, [r3, #24]
    29ce:	e002      	b.n	29d6 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	68ba      	ldr	r2, [r7, #8]
    29d4:	615a      	str	r2, [r3, #20]
	}
}
    29d6:	46bd      	mov	sp, r7
    29d8:	b004      	add	sp, #16
    29da:	bd80      	pop	{r7, pc}
    29dc:	0000294d 	.word	0x0000294d

000029e0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    29e0:	b580      	push	{r7, lr}
    29e2:	b084      	sub	sp, #16
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	681b      	ldr	r3, [r3, #0]
    29ec:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    29ee:	68fb      	ldr	r3, [r7, #12]
    29f0:	8a1b      	ldrh	r3, [r3, #16]
    29f2:	b29b      	uxth	r3, r3
    29f4:	1c1a      	adds	r2, r3, #0
    29f6:	2380      	movs	r3, #128	; 0x80
    29f8:	021b      	lsls	r3, r3, #8
    29fa:	4013      	ands	r3, r2
    29fc:	1e5a      	subs	r2, r3, #1
    29fe:	4193      	sbcs	r3, r2
    2a00:	b2db      	uxtb	r3, r3
#  endif
}
    2a02:	1c18      	adds	r0, r3, #0
    2a04:	46bd      	mov	sp, r7
    2a06:	b004      	add	sp, #16
    2a08:	bd80      	pop	{r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)

00002a0c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	2201      	movs	r2, #1
    2a18:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	2200      	movs	r2, #0
    2a1e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	2200      	movs	r2, #0
    2a24:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	22c0      	movs	r2, #192	; 0xc0
    2a2a:	0392      	lsls	r2, r2, #14
    2a2c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	2200      	movs	r2, #0
    2a32:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2200      	movs	r2, #0
    2a38:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	2201      	movs	r2, #1
    2a3e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	2220      	movs	r2, #32
    2a44:	2100      	movs	r1, #0
    2a46:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	3314      	adds	r3, #20
    2a4c:	1c18      	adds	r0, r3, #0
    2a4e:	2100      	movs	r1, #0
    2a50:	220c      	movs	r2, #12
    2a52:	4b0a      	ldr	r3, [pc, #40]	; (2a7c <spi_get_config_defaults+0x70>)
    2a54:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	4a09      	ldr	r2, [pc, #36]	; (2a80 <spi_get_config_defaults+0x74>)
    2a5a:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	2200      	movs	r2, #0
    2a60:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	2200      	movs	r2, #0
    2a66:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	2200      	movs	r2, #0
    2a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	2200      	movs	r2, #0
    2a72:	631a      	str	r2, [r3, #48]	; 0x30

};
    2a74:	46bd      	mov	sp, r7
    2a76:	b002      	add	sp, #8
    2a78:	bd80      	pop	{r7, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	00006637 	.word	0x00006637
    2a80:	000186a0 	.word	0x000186a0

00002a84 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2a84:	b580      	push	{r7, lr}
    2a86:	b082      	sub	sp, #8
    2a88:	af00      	add	r7, sp, #0
    2a8a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	220a      	movs	r2, #10
    2a90:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	2200      	movs	r2, #0
    2a96:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	2200      	movs	r2, #0
    2a9c:	709a      	strb	r2, [r3, #2]
}
    2a9e:	46bd      	mov	sp, r7
    2aa0:	b002      	add	sp, #8
    2aa2:	bd80      	pop	{r7, pc}

00002aa4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b084      	sub	sp, #16
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
    2aac:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2aae:	683b      	ldr	r3, [r7, #0]
    2ab0:	781a      	ldrb	r2, [r3, #0]
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2ab6:	683b      	ldr	r3, [r7, #0]
    2ab8:	785a      	ldrb	r2, [r3, #1]
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2abe:	683b      	ldr	r3, [r7, #0]
    2ac0:	789a      	ldrb	r2, [r3, #2]
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2ac6:	230c      	movs	r3, #12
    2ac8:	18fb      	adds	r3, r7, r3
    2aca:	1c18      	adds	r0, r3, #0
    2acc:	4b0b      	ldr	r3, [pc, #44]	; (2afc <spi_attach_slave+0x58>)
    2ace:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2ad0:	230c      	movs	r3, #12
    2ad2:	18fb      	adds	r3, r7, r3
    2ad4:	2201      	movs	r2, #1
    2ad6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	781a      	ldrb	r2, [r3, #0]
    2adc:	230c      	movs	r3, #12
    2ade:	18fb      	adds	r3, r7, r3
    2ae0:	1c10      	adds	r0, r2, #0
    2ae2:	1c19      	adds	r1, r3, #0
    2ae4:	4b06      	ldr	r3, [pc, #24]	; (2b00 <spi_attach_slave+0x5c>)
    2ae6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	781b      	ldrb	r3, [r3, #0]
    2aec:	1c18      	adds	r0, r3, #0
    2aee:	2101      	movs	r1, #1
    2af0:	4b04      	ldr	r3, [pc, #16]	; (2b04 <spi_attach_slave+0x60>)
    2af2:	4798      	blx	r3
}
    2af4:	46bd      	mov	sp, r7
    2af6:	b004      	add	sp, #16
    2af8:	bd80      	pop	{r7, pc}
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	00002971 	.word	0x00002971
    2b00:	000036ed 	.word	0x000036ed
    2b04:	00002991 	.word	0x00002991

00002b08 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b084      	sub	sp, #16
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	1c18      	adds	r0, r3, #0
    2b1c:	4b0a      	ldr	r3, [pc, #40]	; (2b48 <spi_enable+0x40>)
    2b1e:	4798      	blx	r3
    2b20:	1c03      	adds	r3, r0, #0
    2b22:	1c18      	adds	r0, r3, #0
    2b24:	4b09      	ldr	r3, [pc, #36]	; (2b4c <spi_enable+0x44>)
    2b26:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2b28:	46c0      	nop			; (mov r8, r8)
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	1c18      	adds	r0, r3, #0
    2b2e:	4b08      	ldr	r3, [pc, #32]	; (2b50 <spi_enable+0x48>)
    2b30:	4798      	blx	r3
    2b32:	1e03      	subs	r3, r0, #0
    2b34:	d1f9      	bne.n	2b2a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b36:	68fb      	ldr	r3, [r7, #12]
    2b38:	681b      	ldr	r3, [r3, #0]
    2b3a:	2202      	movs	r2, #2
    2b3c:	431a      	orrs	r2, r3
    2b3e:	68fb      	ldr	r3, [r7, #12]
    2b40:	601a      	str	r2, [r3, #0]
}
    2b42:	46bd      	mov	sp, r7
    2b44:	b004      	add	sp, #16
    2b46:	bd80      	pop	{r7, pc}
    2b48:	00003dbd 	.word	0x00003dbd
    2b4c:	00002921 	.word	0x00002921
    2b50:	000029e1 	.word	0x000029e1

00002b54 <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b082      	sub	sp, #8
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	1c0a      	adds	r2, r1, #0
    2b5e:	1cfb      	adds	r3, r7, #3
    2b60:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	222f      	movs	r2, #47	; 0x2f
    2b66:	5c9b      	ldrb	r3, [r3, r2]
    2b68:	b2d9      	uxtb	r1, r3
    2b6a:	1cfb      	adds	r3, r7, #3
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	2201      	movs	r2, #1
    2b70:	409a      	lsls	r2, r3
    2b72:	1c13      	adds	r3, r2, #0
    2b74:	b2db      	uxtb	r3, r3
    2b76:	1c0a      	adds	r2, r1, #0
    2b78:	4313      	orrs	r3, r2
    2b7a:	b2db      	uxtb	r3, r3
    2b7c:	b2d9      	uxtb	r1, r3
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	222f      	movs	r2, #47	; 0x2f
    2b82:	5499      	strb	r1, [r3, r2]
}
    2b84:	46bd      	mov	sp, r7
    2b86:	b002      	add	sp, #8
    2b88:	bd80      	pop	{r7, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)

00002b8c <key_get_keyQ>:
struct keyQ_def keyQ;								// contains the key data (after data is processed from the trebleRxQs			
uint8_t treble_cs_cnt = 0;


void key_get_keyQ(uint8_t *ptr)					// pulls data from the treble&bass key Q
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
	*ptr = keyQ.key[keyQ.buff_out];
    2b94:	4b1d      	ldr	r3, [pc, #116]	; (2c0c <key_get_keyQ+0x80>)
    2b96:	785b      	ldrb	r3, [r3, #1]
    2b98:	b2db      	uxtb	r3, r3
    2b9a:	1c1a      	adds	r2, r3, #0
    2b9c:	4b1b      	ldr	r3, [pc, #108]	; (2c0c <key_get_keyQ+0x80>)
    2b9e:	189b      	adds	r3, r3, r2
    2ba0:	78db      	ldrb	r3, [r3, #3]
    2ba2:	b2da      	uxtb	r2, r3
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	701a      	strb	r2, [r3, #0]
	*(ptr+1) = keyQ.vel[keyQ.buff_out];
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	3301      	adds	r3, #1
    2bac:	4a17      	ldr	r2, [pc, #92]	; (2c0c <key_get_keyQ+0x80>)
    2bae:	7852      	ldrb	r2, [r2, #1]
    2bb0:	b2d2      	uxtb	r2, r2
    2bb2:	1c10      	adds	r0, r2, #0
    2bb4:	4a15      	ldr	r2, [pc, #84]	; (2c0c <key_get_keyQ+0x80>)
    2bb6:	2120      	movs	r1, #32
    2bb8:	1812      	adds	r2, r2, r0
    2bba:	1852      	adds	r2, r2, r1
    2bbc:	78d2      	ldrb	r2, [r2, #3]
    2bbe:	b2d2      	uxtb	r2, r2
    2bc0:	701a      	strb	r2, [r3, #0]
	keyQ.buff_out++;
    2bc2:	4b12      	ldr	r3, [pc, #72]	; (2c0c <key_get_keyQ+0x80>)
    2bc4:	785b      	ldrb	r3, [r3, #1]
    2bc6:	b2db      	uxtb	r3, r3
    2bc8:	3301      	adds	r3, #1
    2bca:	b2da      	uxtb	r2, r3
    2bcc:	4b0f      	ldr	r3, [pc, #60]	; (2c0c <key_get_keyQ+0x80>)
    2bce:	705a      	strb	r2, [r3, #1]
	keyQ.buff_out = keyQ.buff_out & (KEY_QUE_SIZE-1);
    2bd0:	4b0e      	ldr	r3, [pc, #56]	; (2c0c <key_get_keyQ+0x80>)
    2bd2:	785b      	ldrb	r3, [r3, #1]
    2bd4:	b2db      	uxtb	r3, r3
    2bd6:	221f      	movs	r2, #31
    2bd8:	4013      	ands	r3, r2
    2bda:	b2da      	uxtb	r2, r3
    2bdc:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <key_get_keyQ+0x80>)
    2bde:	705a      	strb	r2, [r3, #1]
	keyQ.length = keyQ.buff_in - keyQ.buff_out;			// can be negative
    2be0:	4b0a      	ldr	r3, [pc, #40]	; (2c0c <key_get_keyQ+0x80>)
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	b2da      	uxtb	r2, r3
    2be6:	4b09      	ldr	r3, [pc, #36]	; (2c0c <key_get_keyQ+0x80>)
    2be8:	785b      	ldrb	r3, [r3, #1]
    2bea:	b2db      	uxtb	r3, r3
    2bec:	1ad3      	subs	r3, r2, r3
    2bee:	b2da      	uxtb	r2, r3
    2bf0:	4b06      	ldr	r3, [pc, #24]	; (2c0c <key_get_keyQ+0x80>)
    2bf2:	709a      	strb	r2, [r3, #2]
	keyQ.length = keyQ.length & (KEY_QUE_SIZE-1);		// make sure positive
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <key_get_keyQ+0x80>)
    2bf6:	789b      	ldrb	r3, [r3, #2]
    2bf8:	b2db      	uxtb	r3, r3
    2bfa:	221f      	movs	r2, #31
    2bfc:	4013      	ands	r3, r2
    2bfe:	b2da      	uxtb	r2, r3
    2c00:	4b02      	ldr	r3, [pc, #8]	; (2c0c <key_get_keyQ+0x80>)
    2c02:	709a      	strb	r2, [r3, #2]
}
    2c04:	46bd      	mov	sp, r7
    2c06:	b002      	add	sp, #8
    2c08:	bd80      	pop	{r7, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	2000069c 	.word	0x2000069c

00002c10 <_do_treble_spi>:
//! [callback]

uint32_t cnt7f;

void _do_treble_spi(void)			// runs the treble SPI
{
    2c10:	b598      	push	{r3, r4, r7, lr}
    2c12:	af00      	add	r7, sp, #0
	
		// get treble values
	switch(treble_cs_cnt)			
    2c14:	4b4a      	ldr	r3, [pc, #296]	; (2d40 <_do_treble_spi+0x130>)
    2c16:	781b      	ldrb	r3, [r3, #0]
    2c18:	2b02      	cmp	r3, #2
    2c1a:	d02e      	beq.n	2c7a <_do_treble_spi+0x6a>
    2c1c:	2b03      	cmp	r3, #3
    2c1e:	d060      	beq.n	2ce2 <_do_treble_spi+0xd2>
    2c20:	2b01      	cmp	r3, #1
    2c22:	d000      	beq.n	2c26 <_do_treble_spi+0x16>
    2c24:	e08a      	b.n	2d3c <_do_treble_spi+0x12c>
	{
		case 1:		// finish treble 2, start treble 0
			// finish last read
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance+2, false);	 //! [deselect_slave]
    2c26:	4a47      	ldr	r2, [pc, #284]	; (2d44 <_do_treble_spi+0x134>)
    2c28:	4b47      	ldr	r3, [pc, #284]	; (2d48 <_do_treble_spi+0x138>)
    2c2a:	1c10      	adds	r0, r2, #0
    2c2c:	1c19      	adds	r1, r3, #0
    2c2e:	2200      	movs	r2, #0
    2c30:	4b46      	ldr	r3, [pc, #280]	; (2d4c <_do_treble_spi+0x13c>)
    2c32:	4798      	blx	r3
			if ((*trebleRdBuff != 0) && (*trebleRdBuff != 0x80) && (*trebleRdBuff != 0xff))
    2c34:	4b46      	ldr	r3, [pc, #280]	; (2d50 <_do_treble_spi+0x140>)
    2c36:	781b      	ldrb	r3, [r3, #0]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d00d      	beq.n	2c58 <_do_treble_spi+0x48>
    2c3c:	4b44      	ldr	r3, [pc, #272]	; (2d50 <_do_treble_spi+0x140>)
    2c3e:	781b      	ldrb	r3, [r3, #0]
    2c40:	2b80      	cmp	r3, #128	; 0x80
    2c42:	d009      	beq.n	2c58 <_do_treble_spi+0x48>
    2c44:	4b42      	ldr	r3, [pc, #264]	; (2d50 <_do_treble_spi+0x140>)
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	2bff      	cmp	r3, #255	; 0xff
    2c4a:	d005      	beq.n	2c58 <_do_treble_spi+0x48>
				 _put_trebleRxQ(&trebleRxQ3,trebleRdBuff);
    2c4c:	4a41      	ldr	r2, [pc, #260]	; (2d54 <_do_treble_spi+0x144>)
    2c4e:	4b40      	ldr	r3, [pc, #256]	; (2d50 <_do_treble_spi+0x140>)
    2c50:	1c10      	adds	r0, r2, #0
    2c52:	1c19      	adds	r1, r3, #0
    2c54:	4b40      	ldr	r3, [pc, #256]	; (2d58 <_do_treble_spi+0x148>)
    2c56:	4798      	blx	r3
			// start next read - 1st processor
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance, true);
    2c58:	4a3a      	ldr	r2, [pc, #232]	; (2d44 <_do_treble_spi+0x134>)
    2c5a:	4b40      	ldr	r3, [pc, #256]	; (2d5c <_do_treble_spi+0x14c>)
    2c5c:	1c10      	adds	r0, r2, #0
    2c5e:	1c19      	adds	r1, r3, #0
    2c60:	2201      	movs	r2, #1
    2c62:	4b3a      	ldr	r3, [pc, #232]	; (2d4c <_do_treble_spi+0x13c>)
    2c64:	4798      	blx	r3
			spi_transceive_buffer_job(&spi_master_to_treble_instance, trebleTxBuff,trebleRdBuff,1);
    2c66:	4937      	ldr	r1, [pc, #220]	; (2d44 <_do_treble_spi+0x134>)
    2c68:	4a3d      	ldr	r2, [pc, #244]	; (2d60 <_do_treble_spi+0x150>)
    2c6a:	4b39      	ldr	r3, [pc, #228]	; (2d50 <_do_treble_spi+0x140>)
    2c6c:	1c08      	adds	r0, r1, #0
    2c6e:	1c11      	adds	r1, r2, #0
    2c70:	1c1a      	adds	r2, r3, #0
    2c72:	2301      	movs	r3, #1
    2c74:	4c3b      	ldr	r4, [pc, #236]	; (2d64 <_do_treble_spi+0x154>)
    2c76:	47a0      	blx	r4
			break;
    2c78:	e060      	b.n	2d3c <_do_treble_spi+0x12c>

		case 2:		// treble 1
			// finish last read
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance, false);	 //! [deselect_slave]
    2c7a:	4a32      	ldr	r2, [pc, #200]	; (2d44 <_do_treble_spi+0x134>)
    2c7c:	4b37      	ldr	r3, [pc, #220]	; (2d5c <_do_treble_spi+0x14c>)
    2c7e:	1c10      	adds	r0, r2, #0
    2c80:	1c19      	adds	r1, r3, #0
    2c82:	2200      	movs	r2, #0
    2c84:	4b31      	ldr	r3, [pc, #196]	; (2d4c <_do_treble_spi+0x13c>)
    2c86:	4798      	blx	r3
			if ((*trebleRdBuff != 0) && (*trebleRdBuff != 0x80) && (*trebleRdBuff != 0xff))
    2c88:	4b31      	ldr	r3, [pc, #196]	; (2d50 <_do_treble_spi+0x140>)
    2c8a:	781b      	ldrb	r3, [r3, #0]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d00d      	beq.n	2cac <_do_treble_spi+0x9c>
    2c90:	4b2f      	ldr	r3, [pc, #188]	; (2d50 <_do_treble_spi+0x140>)
    2c92:	781b      	ldrb	r3, [r3, #0]
    2c94:	2b80      	cmp	r3, #128	; 0x80
    2c96:	d009      	beq.n	2cac <_do_treble_spi+0x9c>
    2c98:	4b2d      	ldr	r3, [pc, #180]	; (2d50 <_do_treble_spi+0x140>)
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	2bff      	cmp	r3, #255	; 0xff
    2c9e:	d005      	beq.n	2cac <_do_treble_spi+0x9c>
				_put_trebleRxQ(&trebleRxQ1,trebleRdBuff);
    2ca0:	4a31      	ldr	r2, [pc, #196]	; (2d68 <_do_treble_spi+0x158>)
    2ca2:	4b2b      	ldr	r3, [pc, #172]	; (2d50 <_do_treble_spi+0x140>)
    2ca4:	1c10      	adds	r0, r2, #0
    2ca6:	1c19      	adds	r1, r3, #0
    2ca8:	4b2b      	ldr	r3, [pc, #172]	; (2d58 <_do_treble_spi+0x148>)
    2caa:	4798      	blx	r3
		// start next read
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance+1, true);
    2cac:	4a25      	ldr	r2, [pc, #148]	; (2d44 <_do_treble_spi+0x134>)
    2cae:	4b2f      	ldr	r3, [pc, #188]	; (2d6c <_do_treble_spi+0x15c>)
    2cb0:	1c10      	adds	r0, r2, #0
    2cb2:	1c19      	adds	r1, r3, #0
    2cb4:	2201      	movs	r2, #1
    2cb6:	4b25      	ldr	r3, [pc, #148]	; (2d4c <_do_treble_spi+0x13c>)
    2cb8:	4798      	blx	r3
			spi_transceive_buffer_job(&spi_master_to_treble_instance, trebleTxBuff,trebleRdBuff,1);
    2cba:	4922      	ldr	r1, [pc, #136]	; (2d44 <_do_treble_spi+0x134>)
    2cbc:	4a28      	ldr	r2, [pc, #160]	; (2d60 <_do_treble_spi+0x150>)
    2cbe:	4b24      	ldr	r3, [pc, #144]	; (2d50 <_do_treble_spi+0x140>)
    2cc0:	1c08      	adds	r0, r1, #0
    2cc2:	1c11      	adds	r1, r2, #0
    2cc4:	1c1a      	adds	r2, r3, #0
    2cc6:	2301      	movs	r3, #1
    2cc8:	4c26      	ldr	r4, [pc, #152]	; (2d64 <_do_treble_spi+0x154>)
    2cca:	47a0      	blx	r4
			if (trebleRdBuff[0]==0x7f)	cnt7f++;
    2ccc:	4b20      	ldr	r3, [pc, #128]	; (2d50 <_do_treble_spi+0x140>)
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	2b7f      	cmp	r3, #127	; 0x7f
    2cd2:	d105      	bne.n	2ce0 <_do_treble_spi+0xd0>
    2cd4:	4b26      	ldr	r3, [pc, #152]	; (2d70 <_do_treble_spi+0x160>)
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	1c5a      	adds	r2, r3, #1
    2cda:	4b25      	ldr	r3, [pc, #148]	; (2d70 <_do_treble_spi+0x160>)
    2cdc:	601a      	str	r2, [r3, #0]
			break;
    2cde:	e02d      	b.n	2d3c <_do_treble_spi+0x12c>
    2ce0:	e02c      	b.n	2d3c <_do_treble_spi+0x12c>

		case 3:		// treble 2
			// finish last read
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance+1, false);	 //! [deselect_slave]
    2ce2:	4a18      	ldr	r2, [pc, #96]	; (2d44 <_do_treble_spi+0x134>)
    2ce4:	4b21      	ldr	r3, [pc, #132]	; (2d6c <_do_treble_spi+0x15c>)
    2ce6:	1c10      	adds	r0, r2, #0
    2ce8:	1c19      	adds	r1, r3, #0
    2cea:	2200      	movs	r2, #0
    2cec:	4b17      	ldr	r3, [pc, #92]	; (2d4c <_do_treble_spi+0x13c>)
    2cee:	4798      	blx	r3
			if ((*trebleRdBuff != 0) && (*trebleRdBuff != 0x80) && (*trebleRdBuff != 0xff))
    2cf0:	4b17      	ldr	r3, [pc, #92]	; (2d50 <_do_treble_spi+0x140>)
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d00d      	beq.n	2d14 <_do_treble_spi+0x104>
    2cf8:	4b15      	ldr	r3, [pc, #84]	; (2d50 <_do_treble_spi+0x140>)
    2cfa:	781b      	ldrb	r3, [r3, #0]
    2cfc:	2b80      	cmp	r3, #128	; 0x80
    2cfe:	d009      	beq.n	2d14 <_do_treble_spi+0x104>
    2d00:	4b13      	ldr	r3, [pc, #76]	; (2d50 <_do_treble_spi+0x140>)
    2d02:	781b      	ldrb	r3, [r3, #0]
    2d04:	2bff      	cmp	r3, #255	; 0xff
    2d06:	d005      	beq.n	2d14 <_do_treble_spi+0x104>
				_put_trebleRxQ(&trebleRxQ2,trebleRdBuff);
    2d08:	4a1a      	ldr	r2, [pc, #104]	; (2d74 <_do_treble_spi+0x164>)
    2d0a:	4b11      	ldr	r3, [pc, #68]	; (2d50 <_do_treble_spi+0x140>)
    2d0c:	1c10      	adds	r0, r2, #0
    2d0e:	1c19      	adds	r1, r3, #0
    2d10:	4b11      	ldr	r3, [pc, #68]	; (2d58 <_do_treble_spi+0x148>)
    2d12:	4798      	blx	r3
			// start next read
			spi_select_slave(&spi_master_to_treble_instance, treble_slave_instance+2, true);
    2d14:	4a0b      	ldr	r2, [pc, #44]	; (2d44 <_do_treble_spi+0x134>)
    2d16:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <_do_treble_spi+0x138>)
    2d18:	1c10      	adds	r0, r2, #0
    2d1a:	1c19      	adds	r1, r3, #0
    2d1c:	2201      	movs	r2, #1
    2d1e:	4b0b      	ldr	r3, [pc, #44]	; (2d4c <_do_treble_spi+0x13c>)
    2d20:	4798      	blx	r3
			spi_transceive_buffer_job(&spi_master_to_treble_instance, trebleTxBuff,trebleRdBuff,1);
    2d22:	4908      	ldr	r1, [pc, #32]	; (2d44 <_do_treble_spi+0x134>)
    2d24:	4a0e      	ldr	r2, [pc, #56]	; (2d60 <_do_treble_spi+0x150>)
    2d26:	4b0a      	ldr	r3, [pc, #40]	; (2d50 <_do_treble_spi+0x140>)
    2d28:	1c08      	adds	r0, r1, #0
    2d2a:	1c11      	adds	r1, r2, #0
    2d2c:	1c1a      	adds	r2, r3, #0
    2d2e:	2301      	movs	r3, #1
    2d30:	4c0c      	ldr	r4, [pc, #48]	; (2d64 <_do_treble_spi+0x154>)
    2d32:	47a0      	blx	r4
			treble_cs_cnt = 0;
    2d34:	4b02      	ldr	r3, [pc, #8]	; (2d40 <_do_treble_spi+0x130>)
    2d36:	2200      	movs	r2, #0
    2d38:	701a      	strb	r2, [r3, #0]
			break;
    2d3a:	46c0      	nop			; (mov r8, r8)
	}	
}
    2d3c:	46bd      	mov	sp, r7
    2d3e:	bd98      	pop	{r3, r4, r7, pc}
    2d40:	20000098 	.word	0x20000098
    2d44:	20000668 	.word	0x20000668
    2d48:	20000662 	.word	0x20000662
    2d4c:	0000450d 	.word	0x0000450d
    2d50:	20000658 	.word	0x20000658
    2d54:	20000704 	.word	0x20000704
    2d58:	00002fb5 	.word	0x00002fb5
    2d5c:	2000065c 	.word	0x2000065c
    2d60:	20000004 	.word	0x20000004
    2d64:	0000469d 	.word	0x0000469d
    2d68:	20000634 	.word	0x20000634
    2d6c:	2000065f 	.word	0x2000065f
    2d70:	20000728 	.word	0x20000728
    2d74:	200006e0 	.word	0x200006e0

00002d78 <move_trebleRxQ_to_keyQ>:

// processes the async data in trebleRxQs - and loads the keyQ into sync data, ie, note and velocity
void move_trebleRxQ_to_keyQ(struct trebleRxQ_def *qPtr)
{		// sync to next key & load key Q  
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
		// moves data from 3 treble
	
	system_interrupt_enter_critical_section();  // critical because the trebleRxQs can be changed in a interrupt callback
    2d80:	4b3a      	ldr	r3, [pc, #232]	; (2e6c <move_trebleRxQ_to_keyQ+0xf4>)
    2d82:	4798      	blx	r3
	
	if (qPtr->length>=2)
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	789b      	ldrb	r3, [r3, #2]
    2d88:	b2db      	uxtb	r3, r3
    2d8a:	2b01      	cmp	r3, #1
    2d8c:	d969      	bls.n	2e62 <move_trebleRxQ_to_keyQ+0xea>
	{
		if ((qPtr->val[qPtr->buff_out] > 0x80) && (qPtr->val[(qPtr->buff_out+1) & (REC_QUE_SIZE-1)] < 0x80) ) 			// if true it's a key #
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	785b      	ldrb	r3, [r3, #1]
    2d92:	b2db      	uxtb	r3, r3
    2d94:	1c1a      	adds	r2, r3, #0
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	189b      	adds	r3, r3, r2
    2d9a:	78db      	ldrb	r3, [r3, #3]
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	2b80      	cmp	r3, #128	; 0x80
    2da0:	d943      	bls.n	2e2a <move_trebleRxQ_to_keyQ+0xb2>
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	785b      	ldrb	r3, [r3, #1]
    2da6:	b2db      	uxtb	r3, r3
    2da8:	3301      	adds	r3, #1
    2daa:	221f      	movs	r2, #31
    2dac:	4013      	ands	r3, r2
    2dae:	687a      	ldr	r2, [r7, #4]
    2db0:	18d3      	adds	r3, r2, r3
    2db2:	78db      	ldrb	r3, [r3, #3]
    2db4:	b2db      	uxtb	r3, r3
    2db6:	b2db      	uxtb	r3, r3
    2db8:	b25b      	sxtb	r3, r3
    2dba:	2b00      	cmp	r3, #0
    2dbc:	db35      	blt.n	2e2a <move_trebleRxQ_to_keyQ+0xb2>
		{		 											// put a key and velocity on the Q
			_key_load_keyQ(qPtr->val[qPtr->buff_out] & 0x7f, qPtr->val[(qPtr->buff_out + 1) & (REC_QUE_SIZE-1)] );			// load key, vel
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	785b      	ldrb	r3, [r3, #1]
    2dc2:	b2db      	uxtb	r3, r3
    2dc4:	1c1a      	adds	r2, r3, #0
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	189b      	adds	r3, r3, r2
    2dca:	78db      	ldrb	r3, [r3, #3]
    2dcc:	b2db      	uxtb	r3, r3
    2dce:	227f      	movs	r2, #127	; 0x7f
    2dd0:	4013      	ands	r3, r2
    2dd2:	b2d9      	uxtb	r1, r3
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	785b      	ldrb	r3, [r3, #1]
    2dd8:	b2db      	uxtb	r3, r3
    2dda:	3301      	adds	r3, #1
    2ddc:	221f      	movs	r2, #31
    2dde:	4013      	ands	r3, r2
    2de0:	687a      	ldr	r2, [r7, #4]
    2de2:	18d3      	adds	r3, r2, r3
    2de4:	78db      	ldrb	r3, [r3, #3]
    2de6:	b2db      	uxtb	r3, r3
    2de8:	1c08      	adds	r0, r1, #0
    2dea:	1c19      	adds	r1, r3, #0
    2dec:	4b20      	ldr	r3, [pc, #128]	; (2e70 <move_trebleRxQ_to_keyQ+0xf8>)
    2dee:	4798      	blx	r3
			qPtr->buff_out = (qPtr->buff_out + 2) & (REC_QUE_SIZE-1);
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	785b      	ldrb	r3, [r3, #1]
    2df4:	b2db      	uxtb	r3, r3
    2df6:	3302      	adds	r3, #2
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	221f      	movs	r2, #31
    2dfc:	4013      	ands	r3, r2
    2dfe:	b2da      	uxtb	r2, r3
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	705a      	strb	r2, [r3, #1]
			qPtr->length = qPtr->buff_in - qPtr->buff_out;	// update length
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	781b      	ldrb	r3, [r3, #0]
    2e08:	b2da      	uxtb	r2, r3
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	785b      	ldrb	r3, [r3, #1]
    2e0e:	b2db      	uxtb	r3, r3
    2e10:	1ad3      	subs	r3, r2, r3
    2e12:	b2da      	uxtb	r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	709a      	strb	r2, [r3, #2]
			qPtr->length = qPtr->length & (REC_QUE_SIZE-1);				// make sure positive
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	789b      	ldrb	r3, [r3, #2]
    2e1c:	b2db      	uxtb	r3, r3
    2e1e:	221f      	movs	r2, #31
    2e20:	4013      	ands	r3, r2
    2e22:	b2da      	uxtb	r2, r3
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	709a      	strb	r2, [r3, #2]
    2e28:	e01b      	b.n	2e62 <move_trebleRxQ_to_keyQ+0xea>
		}
		else						// 80 is a no key to send - through it away OR OUT OF SYNC
		{
			qPtr->buff_out = (qPtr->buff_out + 1) & (REC_QUE_SIZE-1);		// through it away
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	785b      	ldrb	r3, [r3, #1]
    2e2e:	b2db      	uxtb	r3, r3
    2e30:	3301      	adds	r3, #1
    2e32:	b2db      	uxtb	r3, r3
    2e34:	221f      	movs	r2, #31
    2e36:	4013      	ands	r3, r2
    2e38:	b2da      	uxtb	r2, r3
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	705a      	strb	r2, [r3, #1]
			qPtr->length = qPtr->buff_in - qPtr->buff_out;	// update length
    2e3e:	687b      	ldr	r3, [r7, #4]
    2e40:	781b      	ldrb	r3, [r3, #0]
    2e42:	b2da      	uxtb	r2, r3
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	785b      	ldrb	r3, [r3, #1]
    2e48:	b2db      	uxtb	r3, r3
    2e4a:	1ad3      	subs	r3, r2, r3
    2e4c:	b2da      	uxtb	r2, r3
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	709a      	strb	r2, [r3, #2]
			qPtr->length = qPtr->length & (REC_QUE_SIZE-1);				// make sure positive					}
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	789b      	ldrb	r3, [r3, #2]
    2e56:	b2db      	uxtb	r3, r3
    2e58:	221f      	movs	r2, #31
    2e5a:	4013      	ands	r3, r2
    2e5c:	b2da      	uxtb	r2, r3
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	709a      	strb	r2, [r3, #2]
		}
	}
	
	system_interrupt_leave_critical_section();
    2e62:	4b04      	ldr	r3, [pc, #16]	; (2e74 <move_trebleRxQ_to_keyQ+0xfc>)
    2e64:	4798      	blx	r3
}
    2e66:	46bd      	mov	sp, r7
    2e68:	b002      	add	sp, #8
    2e6a:	bd80      	pop	{r7, pc}
    2e6c:	00002901 	.word	0x00002901
    2e70:	00003039 	.word	0x00003039
    2e74:	00002911 	.word	0x00002911

00002e78 <configure_spi_master_to_treble_callbacks>:



//! [conf_callback]
void configure_spi_master_to_treble_callbacks(void)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	af00      	add	r7, sp, #0
	spi_register_callback(&spi_master_to_treble_instance, _spi_master_to_treble_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    2e7c:	4a06      	ldr	r2, [pc, #24]	; (2e98 <configure_spi_master_to_treble_callbacks+0x20>)
    2e7e:	4b07      	ldr	r3, [pc, #28]	; (2e9c <configure_spi_master_to_treble_callbacks+0x24>)
    2e80:	1c10      	adds	r0, r2, #0
    2e82:	1c19      	adds	r1, r3, #0
    2e84:	2202      	movs	r2, #2
    2e86:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <configure_spi_master_to_treble_callbacks+0x28>)
    2e88:	4798      	blx	r3
	spi_enable_callback(&spi_master_to_treble_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    2e8a:	4b03      	ldr	r3, [pc, #12]	; (2e98 <configure_spi_master_to_treble_callbacks+0x20>)
    2e8c:	1c18      	adds	r0, r3, #0
    2e8e:	2102      	movs	r1, #2
    2e90:	4b04      	ldr	r3, [pc, #16]	; (2ea4 <configure_spi_master_to_treble_callbacks+0x2c>)
    2e92:	4798      	blx	r3
}
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}
    2e98:	20000668 	.word	0x20000668
    2e9c:	00002f85 	.word	0x00002f85
    2ea0:	00004655 	.word	0x00004655
    2ea4:	00002b55 	.word	0x00002b55

00002ea8 <configure_spi_master_to_treble>:



//! [configure_spi]
void configure_spi_master_to_treble(void)
{
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b08e      	sub	sp, #56	; 0x38
    2eac:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;

	spi_slave_inst_get_config_defaults(&slave_dev_config);
    2eae:	1c3b      	adds	r3, r7, #0
    2eb0:	1c18      	adds	r0, r3, #0
    2eb2:	4b25      	ldr	r3, [pc, #148]	; (2f48 <configure_spi_master_to_treble+0xa0>)
    2eb4:	4798      	blx	r3
																// setup 3 slave cs
	slave_dev_config.ss_pin = TREBLE_CS0;
    2eb6:	1c3b      	adds	r3, r7, #0
    2eb8:	2205      	movs	r2, #5
    2eba:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&treble_slave_instance[0], &slave_dev_config);
    2ebc:	4a23      	ldr	r2, [pc, #140]	; (2f4c <configure_spi_master_to_treble+0xa4>)
    2ebe:	1c3b      	adds	r3, r7, #0
    2ec0:	1c10      	adds	r0, r2, #0
    2ec2:	1c19      	adds	r1, r3, #0
    2ec4:	4b22      	ldr	r3, [pc, #136]	; (2f50 <configure_spi_master_to_treble+0xa8>)
    2ec6:	4798      	blx	r3
	slave_dev_config.ss_pin = TREBLE_CS1;
    2ec8:	1c3b      	adds	r3, r7, #0
    2eca:	2228      	movs	r2, #40	; 0x28
    2ecc:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&treble_slave_instance[1], &slave_dev_config);
    2ece:	4a21      	ldr	r2, [pc, #132]	; (2f54 <configure_spi_master_to_treble+0xac>)
    2ed0:	1c3b      	adds	r3, r7, #0
    2ed2:	1c10      	adds	r0, r2, #0
    2ed4:	1c19      	adds	r1, r3, #0
    2ed6:	4b1e      	ldr	r3, [pc, #120]	; (2f50 <configure_spi_master_to_treble+0xa8>)
    2ed8:	4798      	blx	r3
	slave_dev_config.ss_pin = TREBLE_CS2;
    2eda:	1c3b      	adds	r3, r7, #0
    2edc:	2229      	movs	r2, #41	; 0x29
    2ede:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&treble_slave_instance[2], &slave_dev_config);
    2ee0:	4a1d      	ldr	r2, [pc, #116]	; (2f58 <configure_spi_master_to_treble+0xb0>)
    2ee2:	1c3b      	adds	r3, r7, #0
    2ee4:	1c10      	adds	r0, r2, #0
    2ee6:	1c19      	adds	r1, r3, #0
    2ee8:	4b19      	ldr	r3, [pc, #100]	; (2f50 <configure_spi_master_to_treble+0xa8>)
    2eea:	4798      	blx	r3


	spi_get_config_defaults(&config_spi_master);
    2eec:	1d3b      	adds	r3, r7, #4
    2eee:	1c18      	adds	r0, r3, #0
    2ef0:	4b1a      	ldr	r3, [pc, #104]	; (2f5c <configure_spi_master_to_treble+0xb4>)
    2ef2:	4798      	blx	r3
	config_spi_master.generator_source = GCLK_GENERATOR_1;
    2ef4:	1d3b      	adds	r3, r7, #4
    2ef6:	2220      	movs	r2, #32
    2ef8:	2101      	movs	r1, #1
    2efa:	5499      	strb	r1, [r3, r2]
	config_spi_master.mode_specific.master.baudrate = 50000;  
    2efc:	1d3b      	adds	r3, r7, #4
    2efe:	4a18      	ldr	r2, [pc, #96]	; (2f60 <configure_spi_master_to_treble+0xb8>)
    2f00:	615a      	str	r2, [r3, #20]
	
	config_spi_master.mux_setting = MASTERtoTREBLE_SPI_SERCOM_MUX_SETTING;
    2f02:	1d3b      	adds	r3, r7, #4
    2f04:	2280      	movs	r2, #128	; 0x80
    2f06:	0252      	lsls	r2, r2, #9
    2f08:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = MASTERtoTREBLE_SPI_SERCOM_PINMUX_PAD0;
    2f0a:	1d3b      	adds	r3, r7, #4
    2f0c:	4a15      	ldr	r2, [pc, #84]	; (2f64 <configure_spi_master_to_treble+0xbc>)
    2f0e:	625a      	str	r2, [r3, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    2f10:	1d3b      	adds	r3, r7, #4
    2f12:	2201      	movs	r2, #1
    2f14:	4252      	negs	r2, r2
    2f16:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad2 = MASTERtoTREBLE_SPI_SERCOM_PINMUX_PAD2;
    2f18:	1d3b      	adds	r3, r7, #4
    2f1a:	4a13      	ldr	r2, [pc, #76]	; (2f68 <configure_spi_master_to_treble+0xc0>)
    2f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = MASTERtoTREBLE_SPI_SERCOM_PINMUX_PAD3;
    2f1e:	1d3b      	adds	r3, r7, #4
    2f20:	4a12      	ldr	r2, [pc, #72]	; (2f6c <configure_spi_master_to_treble+0xc4>)
    2f22:	631a      	str	r2, [r3, #48]	; 0x30

	spi_init(&spi_master_to_treble_instance, MASTERtoTREBLE_SPI_MODULE, &config_spi_master);
    2f24:	4a12      	ldr	r2, [pc, #72]	; (2f70 <configure_spi_master_to_treble+0xc8>)
    2f26:	4913      	ldr	r1, [pc, #76]	; (2f74 <configure_spi_master_to_treble+0xcc>)
    2f28:	1d3b      	adds	r3, r7, #4
    2f2a:	1c10      	adds	r0, r2, #0
    2f2c:	1c1a      	adds	r2, r3, #0
    2f2e:	4b12      	ldr	r3, [pc, #72]	; (2f78 <configure_spi_master_to_treble+0xd0>)
    2f30:	4798      	blx	r3
	spi_enable(&spi_master_to_treble_instance);
    2f32:	4b0f      	ldr	r3, [pc, #60]	; (2f70 <configure_spi_master_to_treble+0xc8>)
    2f34:	1c18      	adds	r0, r3, #0
    2f36:	4b11      	ldr	r3, [pc, #68]	; (2f7c <configure_spi_master_to_treble+0xd4>)
    2f38:	4798      	blx	r3

	trebleTxBuff[0]= SWITCH_CLOSE_MODE_COMMAND; // default
    2f3a:	4b11      	ldr	r3, [pc, #68]	; (2f80 <configure_spi_master_to_treble+0xd8>)
    2f3c:	22f7      	movs	r2, #247	; 0xf7
    2f3e:	701a      	strb	r2, [r3, #0]

}
    2f40:	46bd      	mov	sp, r7
    2f42:	b00e      	add	sp, #56	; 0x38
    2f44:	bd80      	pop	{r7, pc}
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	00002a85 	.word	0x00002a85
    2f4c:	2000065c 	.word	0x2000065c
    2f50:	00002aa5 	.word	0x00002aa5
    2f54:	2000065f 	.word	0x2000065f
    2f58:	20000662 	.word	0x20000662
    2f5c:	00002a0d 	.word	0x00002a0d
    2f60:	0000c350 	.word	0x0000c350
    2f64:	00040003 	.word	0x00040003
    2f68:	00060003 	.word	0x00060003
    2f6c:	00070003 	.word	0x00070003
    2f70:	20000668 	.word	0x20000668
    2f74:	42000800 	.word	0x42000800
    2f78:	00004369 	.word	0x00004369
    2f7c:	00002b09 	.word	0x00002b09
    2f80:	20000004 	.word	0x20000004

00002f84 <_spi_master_to_treble_callback>:
//! [configure_spi]

// local functions 
static void _spi_master_to_treble_callback(struct spi_module *const module)
{
    2f84:	b580      	push	{r7, lr}
    2f86:	b082      	sub	sp, #8
    2f88:	af00      	add	r7, sp, #0
    2f8a:	6078      	str	r0, [r7, #4]
	
	treble_cs_cnt++;
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <_spi_master_to_treble_callback+0x24>)
    2f8e:	781b      	ldrb	r3, [r3, #0]
    2f90:	3301      	adds	r3, #1
    2f92:	b2da      	uxtb	r2, r3
    2f94:	4b04      	ldr	r3, [pc, #16]	; (2fa8 <_spi_master_to_treble_callback+0x24>)
    2f96:	701a      	strb	r2, [r3, #0]
		
	transfer_complete_spi_master_to_treble = true;
    2f98:	4b04      	ldr	r3, [pc, #16]	; (2fac <_spi_master_to_treble_callback+0x28>)
    2f9a:	2201      	movs	r2, #1
    2f9c:	701a      	strb	r2, [r3, #0]
//	port_pin_toggle_output_level(RUN_LED);					// TEST running output for debugging
	_do_treble_spi();
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <_spi_master_to_treble_callback+0x2c>)
    2fa0:	4798      	blx	r3

}
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b002      	add	sp, #8
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	20000098 	.word	0x20000098
    2fac:	200000d8 	.word	0x200000d8
    2fb0:	00002c11 	.word	0x00002c11

00002fb4 <_put_trebleRxQ>:
uint32_t volatile p7f;
void _put_trebleRxQ (struct trebleRxQ_def *qPtr, uint8_t *ptr)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b082      	sub	sp, #8
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6078      	str	r0, [r7, #4]
    2fbc:	6039      	str	r1, [r7, #0]
	if (*ptr==0x7f)
    2fbe:	683b      	ldr	r3, [r7, #0]
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	2b7f      	cmp	r3, #127	; 0x7f
    2fc4:	d104      	bne.n	2fd0 <_put_trebleRxQ+0x1c>
	{	 p7f++;
    2fc6:	4b1b      	ldr	r3, [pc, #108]	; (3034 <_put_trebleRxQ+0x80>)
    2fc8:	681b      	ldr	r3, [r3, #0]
    2fca:	1c5a      	adds	r2, r3, #1
    2fcc:	4b19      	ldr	r3, [pc, #100]	; (3034 <_put_trebleRxQ+0x80>)
    2fce:	601a      	str	r2, [r3, #0]
	}
	if (qPtr->length < REC_QUE_SIZE-1)
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	789b      	ldrb	r3, [r3, #2]
    2fd4:	b2db      	uxtb	r3, r3
    2fd6:	2b1e      	cmp	r3, #30
    2fd8:	d829      	bhi.n	302e <_put_trebleRxQ+0x7a>
	{
		qPtr->val[qPtr->buff_in] = *ptr;
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	1c19      	adds	r1, r3, #0
    2fe2:	683b      	ldr	r3, [r7, #0]
    2fe4:	781a      	ldrb	r2, [r3, #0]
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	185b      	adds	r3, r3, r1
    2fea:	70da      	strb	r2, [r3, #3]
		qPtr->buff_in++;
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	781b      	ldrb	r3, [r3, #0]
    2ff0:	b2db      	uxtb	r3, r3
    2ff2:	3301      	adds	r3, #1
    2ff4:	b2da      	uxtb	r2, r3
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	701a      	strb	r2, [r3, #0]
		qPtr->buff_in = qPtr->buff_in & (REC_QUE_SIZE-1);			// wrap at 
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	b2db      	uxtb	r3, r3
    3000:	221f      	movs	r2, #31
    3002:	4013      	ands	r3, r2
    3004:	b2da      	uxtb	r2, r3
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	701a      	strb	r2, [r3, #0]
		qPtr->length = qPtr->buff_in - qPtr->buff_out;	// can be negative
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	b2da      	uxtb	r2, r3
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	785b      	ldrb	r3, [r3, #1]
    3014:	b2db      	uxtb	r3, r3
    3016:	1ad3      	subs	r3, r2, r3
    3018:	b2da      	uxtb	r2, r3
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	709a      	strb	r2, [r3, #2]
		qPtr->length = qPtr->length & (REC_QUE_SIZE-1);				// make sure positive
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	789b      	ldrb	r3, [r3, #2]
    3022:	b2db      	uxtb	r3, r3
    3024:	221f      	movs	r2, #31
    3026:	4013      	ands	r3, r2
    3028:	b2da      	uxtb	r2, r3
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	709a      	strb	r2, [r3, #2]
	}
}
    302e:	46bd      	mov	sp, r7
    3030:	b002      	add	sp, #8
    3032:	bd80      	pop	{r7, pc}
    3034:	2000072c 	.word	0x2000072c

00003038 <_key_load_keyQ>:

void _key_load_keyQ (uint8_t key, uint8_t vel)
{
    3038:	b580      	push	{r7, lr}
    303a:	b082      	sub	sp, #8
    303c:	af00      	add	r7, sp, #0
    303e:	1c02      	adds	r2, r0, #0
    3040:	1dfb      	adds	r3, r7, #7
    3042:	701a      	strb	r2, [r3, #0]
    3044:	1dbb      	adds	r3, r7, #6
    3046:	1c0a      	adds	r2, r1, #0
    3048:	701a      	strb	r2, [r3, #0]
	keyQ.key[keyQ.buff_in] = key;
    304a:	4b1c      	ldr	r3, [pc, #112]	; (30bc <_key_load_keyQ+0x84>)
    304c:	781b      	ldrb	r3, [r3, #0]
    304e:	b2db      	uxtb	r3, r3
    3050:	1c19      	adds	r1, r3, #0
    3052:	4b1a      	ldr	r3, [pc, #104]	; (30bc <_key_load_keyQ+0x84>)
    3054:	1dfa      	adds	r2, r7, #7
    3056:	185b      	adds	r3, r3, r1
    3058:	7812      	ldrb	r2, [r2, #0]
    305a:	70da      	strb	r2, [r3, #3]
	keyQ.vel[keyQ.buff_in] = vel;
    305c:	4b17      	ldr	r3, [pc, #92]	; (30bc <_key_load_keyQ+0x84>)
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	b2db      	uxtb	r3, r3
    3062:	1c19      	adds	r1, r3, #0
    3064:	4b15      	ldr	r3, [pc, #84]	; (30bc <_key_load_keyQ+0x84>)
    3066:	2220      	movs	r2, #32
    3068:	185b      	adds	r3, r3, r1
    306a:	189b      	adds	r3, r3, r2
    306c:	1dba      	adds	r2, r7, #6
    306e:	7812      	ldrb	r2, [r2, #0]
    3070:	70da      	strb	r2, [r3, #3]
	keyQ.buff_in++;
    3072:	4b12      	ldr	r3, [pc, #72]	; (30bc <_key_load_keyQ+0x84>)
    3074:	781b      	ldrb	r3, [r3, #0]
    3076:	b2db      	uxtb	r3, r3
    3078:	3301      	adds	r3, #1
    307a:	b2da      	uxtb	r2, r3
    307c:	4b0f      	ldr	r3, [pc, #60]	; (30bc <_key_load_keyQ+0x84>)
    307e:	701a      	strb	r2, [r3, #0]
	keyQ.buff_in = keyQ.buff_in & (KEY_QUE_SIZE-1);			// wrap at KEY_QUE_SIZE
    3080:	4b0e      	ldr	r3, [pc, #56]	; (30bc <_key_load_keyQ+0x84>)
    3082:	781b      	ldrb	r3, [r3, #0]
    3084:	b2db      	uxtb	r3, r3
    3086:	221f      	movs	r2, #31
    3088:	4013      	ands	r3, r2
    308a:	b2da      	uxtb	r2, r3
    308c:	4b0b      	ldr	r3, [pc, #44]	; (30bc <_key_load_keyQ+0x84>)
    308e:	701a      	strb	r2, [r3, #0]
	keyQ.length = keyQ.buff_in - keyQ.buff_out;			// can be negative
    3090:	4b0a      	ldr	r3, [pc, #40]	; (30bc <_key_load_keyQ+0x84>)
    3092:	781b      	ldrb	r3, [r3, #0]
    3094:	b2da      	uxtb	r2, r3
    3096:	4b09      	ldr	r3, [pc, #36]	; (30bc <_key_load_keyQ+0x84>)
    3098:	785b      	ldrb	r3, [r3, #1]
    309a:	b2db      	uxtb	r3, r3
    309c:	1ad3      	subs	r3, r2, r3
    309e:	b2da      	uxtb	r2, r3
    30a0:	4b06      	ldr	r3, [pc, #24]	; (30bc <_key_load_keyQ+0x84>)
    30a2:	709a      	strb	r2, [r3, #2]
	keyQ.length = keyQ.length & (KEY_QUE_SIZE-1);		// make sure positive
    30a4:	4b05      	ldr	r3, [pc, #20]	; (30bc <_key_load_keyQ+0x84>)
    30a6:	789b      	ldrb	r3, [r3, #2]
    30a8:	b2db      	uxtb	r3, r3
    30aa:	221f      	movs	r2, #31
    30ac:	4013      	ands	r3, r2
    30ae:	b2da      	uxtb	r2, r3
    30b0:	4b02      	ldr	r3, [pc, #8]	; (30bc <_key_load_keyQ+0x84>)
    30b2:	709a      	strb	r2, [r3, #2]
    30b4:	46bd      	mov	sp, r7
    30b6:	b002      	add	sp, #8
    30b8:	bd80      	pop	{r7, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	2000069c 	.word	0x2000069c

000030c0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    30c0:	b580      	push	{r7, lr}
    30c2:	b084      	sub	sp, #16
    30c4:	af00      	add	r7, sp, #0
    30c6:	1c02      	adds	r2, r0, #0
    30c8:	1dfb      	adds	r3, r7, #7
    30ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    30cc:	230f      	movs	r3, #15
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	1dfa      	adds	r2, r7, #7
    30d2:	7812      	ldrb	r2, [r2, #0]
    30d4:	09d2      	lsrs	r2, r2, #7
    30d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    30d8:	230e      	movs	r3, #14
    30da:	18fb      	adds	r3, r7, r3
    30dc:	1dfa      	adds	r2, r7, #7
    30de:	7812      	ldrb	r2, [r2, #0]
    30e0:	0952      	lsrs	r2, r2, #5
    30e2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    30e4:	4b0d      	ldr	r3, [pc, #52]	; (311c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    30e6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    30e8:	230f      	movs	r3, #15
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	781b      	ldrb	r3, [r3, #0]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d10f      	bne.n	3112 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    30f2:	230f      	movs	r3, #15
    30f4:	18fb      	adds	r3, r7, r3
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	009b      	lsls	r3, r3, #2
    30fa:	2210      	movs	r2, #16
    30fc:	4694      	mov	ip, r2
    30fe:	44bc      	add	ip, r7
    3100:	4463      	add	r3, ip
    3102:	3b08      	subs	r3, #8
    3104:	681a      	ldr	r2, [r3, #0]
    3106:	230e      	movs	r3, #14
    3108:	18fb      	adds	r3, r7, r3
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	01db      	lsls	r3, r3, #7
    310e:	18d3      	adds	r3, r2, r3
    3110:	e000      	b.n	3114 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3112:	2300      	movs	r3, #0
	}
}
    3114:	1c18      	adds	r0, r3, #0
    3116:	46bd      	mov	sp, r7
    3118:	b004      	add	sp, #16
    311a:	bd80      	pop	{r7, pc}
    311c:	41004400 	.word	0x41004400

00003120 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3120:	b580      	push	{r7, lr}
    3122:	b082      	sub	sp, #8
    3124:	af00      	add	r7, sp, #0
    3126:	1c02      	adds	r2, r0, #0
    3128:	1dfb      	adds	r3, r7, #7
    312a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    312c:	4b06      	ldr	r3, [pc, #24]	; (3148 <system_interrupt_enable+0x28>)
    312e:	1dfa      	adds	r2, r7, #7
    3130:	7812      	ldrb	r2, [r2, #0]
    3132:	1c11      	adds	r1, r2, #0
    3134:	221f      	movs	r2, #31
    3136:	400a      	ands	r2, r1
    3138:	2101      	movs	r1, #1
    313a:	4091      	lsls	r1, r2
    313c:	1c0a      	adds	r2, r1, #0
    313e:	601a      	str	r2, [r3, #0]
}
    3140:	46bd      	mov	sp, r7
    3142:	b002      	add	sp, #8
    3144:	bd80      	pop	{r7, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	e000e100 	.word	0xe000e100

0000314c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    314c:	b580      	push	{r7, lr}
    314e:	b082      	sub	sp, #8
    3150:	af00      	add	r7, sp, #0
    3152:	1c02      	adds	r2, r0, #0
    3154:	1dfb      	adds	r3, r7, #7
    3156:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3158:	1dfb      	adds	r3, r7, #7
    315a:	781b      	ldrb	r3, [r3, #0]
    315c:	1c18      	adds	r0, r3, #0
    315e:	4b03      	ldr	r3, [pc, #12]	; (316c <port_get_group_from_gpio_pin+0x20>)
    3160:	4798      	blx	r3
    3162:	1c03      	adds	r3, r0, #0
}
    3164:	1c18      	adds	r0, r3, #0
    3166:	46bd      	mov	sp, r7
    3168:	b002      	add	sp, #8
    316a:	bd80      	pop	{r7, pc}
    316c:	000030c1 	.word	0x000030c1

00003170 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    3170:	b580      	push	{r7, lr}
    3172:	b084      	sub	sp, #16
    3174:	af00      	add	r7, sp, #0
    3176:	1c02      	adds	r2, r0, #0
    3178:	1dfb      	adds	r3, r7, #7
    317a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    317c:	1dfb      	adds	r3, r7, #7
    317e:	781b      	ldrb	r3, [r3, #0]
    3180:	1c18      	adds	r0, r3, #0
    3182:	4b09      	ldr	r3, [pc, #36]	; (31a8 <port_pin_toggle_output_level+0x38>)
    3184:	4798      	blx	r3
    3186:	1c03      	adds	r3, r0, #0
    3188:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    318a:	1dfb      	adds	r3, r7, #7
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	221f      	movs	r2, #31
    3190:	4013      	ands	r3, r2
    3192:	2201      	movs	r2, #1
    3194:	409a      	lsls	r2, r3
    3196:	1c13      	adds	r3, r2, #0
    3198:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	68ba      	ldr	r2, [r7, #8]
    319e:	61da      	str	r2, [r3, #28]
}
    31a0:	46bd      	mov	sp, r7
    31a2:	b004      	add	sp, #16
    31a4:	bd80      	pop	{r7, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	0000314d 	.word	0x0000314d

000031ac <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    31ac:	b580      	push	{r7, lr}
    31ae:	b084      	sub	sp, #16
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	681b      	ldr	r3, [r3, #0]
    31b8:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	7bdb      	ldrb	r3, [r3, #15]
    31be:	b2db      	uxtb	r3, r3
    31c0:	1c1a      	adds	r2, r3, #0
    31c2:	2380      	movs	r3, #128	; 0x80
    31c4:	4013      	ands	r3, r2
    31c6:	1e5a      	subs	r2, r3, #1
    31c8:	4193      	sbcs	r3, r2
    31ca:	b2db      	uxtb	r3, r3
#endif
}
    31cc:	1c18      	adds	r0, r3, #0
    31ce:	46bd      	mov	sp, r7
    31d0:	b004      	add	sp, #16
    31d2:	bd80      	pop	{r7, pc}

000031d4 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	2200      	movs	r2, #0
    31e0:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	2200      	movs	r2, #0
    31e6:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2200      	movs	r2, #0
    31ec:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	2200      	movs	r2, #0
    31f2:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	2200      	movs	r2, #0
    31f8:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	2200      	movs	r2, #0
    31fe:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	2200      	movs	r2, #0
    3204:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	2200      	movs	r2, #0
    320a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	2200      	movs	r2, #0
    3210:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	2200      	movs	r2, #0
    3216:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	2200      	movs	r2, #0
    321c:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	2200      	movs	r2, #0
    3222:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3224:	687b      	ldr	r3, [r7, #4]
    3226:	2200      	movs	r2, #0
    3228:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	2200      	movs	r2, #0
    322e:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	2200      	movs	r2, #0
    3234:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	2200      	movs	r2, #0
    323a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	2200      	movs	r2, #0
    3240:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	2200      	movs	r2, #0
    3246:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	2200      	movs	r2, #0
    324c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	2200      	movs	r2, #0
    3252:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    3254:	46bd      	mov	sp, r7
    3256:	b002      	add	sp, #8
    3258:	bd80      	pop	{r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)

0000325c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	1c18      	adds	r0, r3, #0
    3270:	4b07      	ldr	r3, [pc, #28]	; (3290 <tc_enable+0x34>)
    3272:	4798      	blx	r3
    3274:	1e03      	subs	r3, r0, #0
    3276:	d1f9      	bne.n	326c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3278:	68fb      	ldr	r3, [r7, #12]
    327a:	881b      	ldrh	r3, [r3, #0]
    327c:	b29b      	uxth	r3, r3
    327e:	2202      	movs	r2, #2
    3280:	4313      	orrs	r3, r2
    3282:	b29a      	uxth	r2, r3
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	801a      	strh	r2, [r3, #0]
}
    3288:	46bd      	mov	sp, r7
    328a:	b004      	add	sp, #16
    328c:	bd80      	pop	{r7, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	000031ad 	.word	0x000031ad

00003294 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    329c:	4a04      	ldr	r2, [pc, #16]	; (32b0 <_tc_interrupt_get_interrupt_vector+0x1c>)
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	18d3      	adds	r3, r2, r3
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	b2db      	uxtb	r3, r3
    32a6:	b25b      	sxtb	r3, r3
}
    32a8:	1c18      	adds	r0, r3, #0
    32aa:	46bd      	mov	sp, r7
    32ac:	b002      	add	sp, #8
    32ae:	bd80      	pop	{r7, pc}
    32b0:	20000008 	.word	0x20000008

000032b4 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    32bc:	1c0a      	adds	r2, r1, #0
    32be:	1cfb      	adds	r3, r7, #3
    32c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	1c18      	adds	r0, r3, #0
    32c8:	4b22      	ldr	r3, [pc, #136]	; (3354 <tc_enable_callback+0xa0>)
    32ca:	4798      	blx	r3
    32cc:	1c03      	adds	r3, r0, #0
    32ce:	1c18      	adds	r0, r3, #0
    32d0:	4b21      	ldr	r3, [pc, #132]	; (3358 <tc_enable_callback+0xa4>)
    32d2:	4798      	blx	r3
    32d4:	1c03      	adds	r3, r0, #0
    32d6:	1c18      	adds	r0, r3, #0
    32d8:	4b20      	ldr	r3, [pc, #128]	; (335c <tc_enable_callback+0xa8>)
    32da:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    32dc:	1cfb      	adds	r3, r7, #3
    32de:	781b      	ldrb	r3, [r3, #0]
    32e0:	2b02      	cmp	r3, #2
    32e2:	d10b      	bne.n	32fc <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	7e5b      	ldrb	r3, [r3, #25]
    32e8:	2210      	movs	r2, #16
    32ea:	4313      	orrs	r3, r2
    32ec:	b2da      	uxtb	r2, r3
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	2210      	movs	r2, #16
    32f8:	735a      	strb	r2, [r3, #13]
    32fa:	e027      	b.n	334c <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    32fc:	1cfb      	adds	r3, r7, #3
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	2b03      	cmp	r3, #3
    3302:	d10b      	bne.n	331c <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	7e5b      	ldrb	r3, [r3, #25]
    3308:	2220      	movs	r2, #32
    330a:	4313      	orrs	r3, r2
    330c:	b2da      	uxtb	r2, r3
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	2220      	movs	r2, #32
    3318:	735a      	strb	r2, [r3, #13]
    331a:	e017      	b.n	334c <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	7e5b      	ldrb	r3, [r3, #25]
    3320:	b2d9      	uxtb	r1, r3
    3322:	1cfb      	adds	r3, r7, #3
    3324:	781b      	ldrb	r3, [r3, #0]
    3326:	2201      	movs	r2, #1
    3328:	409a      	lsls	r2, r3
    332a:	1c13      	adds	r3, r2, #0
    332c:	b2db      	uxtb	r3, r3
    332e:	1c0a      	adds	r2, r1, #0
    3330:	4313      	orrs	r3, r2
    3332:	b2db      	uxtb	r3, r3
    3334:	b2da      	uxtb	r2, r3
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	681b      	ldr	r3, [r3, #0]
    333e:	1cfa      	adds	r2, r7, #3
    3340:	7812      	ldrb	r2, [r2, #0]
    3342:	2101      	movs	r1, #1
    3344:	4091      	lsls	r1, r2
    3346:	1c0a      	adds	r2, r1, #0
    3348:	b2d2      	uxtb	r2, r2
    334a:	735a      	strb	r2, [r3, #13]
	}
}
    334c:	46bd      	mov	sp, r7
    334e:	b002      	add	sp, #8
    3350:	bd80      	pop	{r7, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	00005d69 	.word	0x00005d69
    3358:	00003295 	.word	0x00003295
    335c:	00003121 	.word	0x00003121

00003360 <wait_10msSec>:

struct tc_module tc_instance;	//! [module_inst]


void wait_10msSec(uint32_t wait)
{
    3360:	b580      	push	{r7, lr}
    3362:	b082      	sub	sp, #8
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
	msCounter = wait;
    3368:	4b07      	ldr	r3, [pc, #28]	; (3388 <wait_10msSec+0x28>)
    336a:	687a      	ldr	r2, [r7, #4]
    336c:	601a      	str	r2, [r3, #0]
	while (msCounter) 
    336e:	e003      	b.n	3378 <wait_10msSec+0x18>
	{	TX_usart_Qs();
    3370:	4b06      	ldr	r3, [pc, #24]	; (338c <wait_10msSec+0x2c>)
    3372:	4798      	blx	r3
		do_FP_SPI();
    3374:	4b06      	ldr	r3, [pc, #24]	; (3390 <wait_10msSec+0x30>)
    3376:	4798      	blx	r3


void wait_10msSec(uint32_t wait)
{
	msCounter = wait;
	while (msCounter) 
    3378:	4b03      	ldr	r3, [pc, #12]	; (3388 <wait_10msSec+0x28>)
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	2b00      	cmp	r3, #0
    337e:	d1f7      	bne.n	3370 <wait_10msSec+0x10>
	{	TX_usart_Qs();
		do_FP_SPI();
	}
}
    3380:	46bd      	mov	sp, r7
    3382:	b002      	add	sp, #8
    3384:	bd80      	pop	{r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	20000734 	.word	0x20000734
    338c:	000021a9 	.word	0x000021a9
    3390:	00001219 	.word	0x00001219

00003394 <tc_callback>:


//! [callback_funcs]
void tc_callback(
		struct tc_module *const module_inst)
{
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
//	tc_callback_occurred = true;
	port_pin_toggle_output_level(RUN_LED);
    339c:	2000      	movs	r0, #0
    339e:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <tc_callback+0x34>)
    33a0:	4798      	blx	r3
	
	spiFreqTimer--;
    33a2:	4b0a      	ldr	r3, [pc, #40]	; (33cc <tc_callback+0x38>)
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	b2db      	uxtb	r3, r3
    33a8:	3b01      	subs	r3, #1
    33aa:	b2da      	uxtb	r2, r3
    33ac:	4b07      	ldr	r3, [pc, #28]	; (33cc <tc_callback+0x38>)
    33ae:	701a      	strb	r2, [r3, #0]
	if(msCounter>0)	msCounter--;
    33b0:	4b07      	ldr	r3, [pc, #28]	; (33d0 <tc_callback+0x3c>)
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d004      	beq.n	33c2 <tc_callback+0x2e>
    33b8:	4b05      	ldr	r3, [pc, #20]	; (33d0 <tc_callback+0x3c>)
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	1e5a      	subs	r2, r3, #1
    33be:	4b04      	ldr	r3, [pc, #16]	; (33d0 <tc_callback+0x3c>)
    33c0:	601a      	str	r2, [r3, #0]
}
    33c2:	46bd      	mov	sp, r7
    33c4:	b002      	add	sp, #8
    33c6:	bd80      	pop	{r7, pc}
    33c8:	00003171 	.word	0x00003171
    33cc:	20000730 	.word	0x20000730
    33d0:	20000734 	.word	0x20000734

000033d4 <configure_tc>:
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{																				    
    33d4:	b580      	push	{r7, lr}
    33d6:	b08e      	sub	sp, #56	; 0x38
    33d8:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    33da:	1d3b      	adds	r3, r7, #4
    33dc:	1c18      	adds	r0, r3, #0
    33de:	4b0f      	ldr	r3, [pc, #60]	; (341c <configure_tc+0x48>)
    33e0:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    33e2:	1d3b      	adds	r3, r7, #4
    33e4:	2204      	movs	r2, #4
    33e6:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_4;	
    33e8:	1d3b      	adds	r3, r7, #4
    33ea:	2204      	movs	r2, #4
    33ec:	701a      	strb	r2, [r3, #0]

	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;	 // takes 8M down to 7813
    33ee:	1d3b      	adds	r3, r7, #4
    33f0:	22e0      	movs	r2, #224	; 0xe0
    33f2:	00d2      	lsls	r2, r2, #3
    33f4:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 117;	  	// calculated and measured at 10ms with scope
    33f6:	1d3b      	adds	r3, r7, #4
    33f8:	2229      	movs	r2, #41	; 0x29
    33fa:	2175      	movs	r1, #117	; 0x75
    33fc:	5499      	strb	r1, [r3, r2]
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]
			

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    33fe:	4a08      	ldr	r2, [pc, #32]	; (3420 <configure_tc+0x4c>)
    3400:	4908      	ldr	r1, [pc, #32]	; (3424 <configure_tc+0x50>)
    3402:	1d3b      	adds	r3, r7, #4
    3404:	1c10      	adds	r0, r2, #0
    3406:	1c1a      	adds	r2, r3, #0
    3408:	4b07      	ldr	r3, [pc, #28]	; (3428 <configure_tc+0x54>)
    340a:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
    340c:	4b04      	ldr	r3, [pc, #16]	; (3420 <configure_tc+0x4c>)
    340e:	1c18      	adds	r0, r3, #0
    3410:	4b06      	ldr	r3, [pc, #24]	; (342c <configure_tc+0x58>)
    3412:	4798      	blx	r3
	//! [setup_enable]
}
    3414:	46bd      	mov	sp, r7
    3416:	b00e      	add	sp, #56	; 0x38
    3418:	bd80      	pop	{r7, pc}
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	000031d5 	.word	0x000031d5
    3420:	20000738 	.word	0x20000738
    3424:	42002c00 	.word	0x42002c00
    3428:	00005db9 	.word	0x00005db9
    342c:	0000325d 	.word	0x0000325d

00003430 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    3430:	b580      	push	{r7, lr}
    3432:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(&tc_instance, tc_callback,TC_CALLBACK_OVERFLOW);
    3434:	4a06      	ldr	r2, [pc, #24]	; (3450 <configure_tc_callbacks+0x20>)
    3436:	4b07      	ldr	r3, [pc, #28]	; (3454 <configure_tc_callbacks+0x24>)
    3438:	1c10      	adds	r0, r2, #0
    343a:	1c19      	adds	r1, r3, #0
    343c:	2200      	movs	r2, #0
    343e:	4b06      	ldr	r3, [pc, #24]	; (3458 <configure_tc_callbacks+0x28>)
    3440:	4798      	blx	r3

	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    3442:	4b03      	ldr	r3, [pc, #12]	; (3450 <configure_tc_callbacks+0x20>)
    3444:	1c18      	adds	r0, r3, #0
    3446:	2100      	movs	r1, #0
    3448:	4b04      	ldr	r3, [pc, #16]	; (345c <configure_tc_callbacks+0x2c>)
    344a:	4798      	blx	r3

}
    344c:	46bd      	mov	sp, r7
    344e:	bd80      	pop	{r7, pc}
    3450:	20000738 	.word	0x20000738
    3454:	00003395 	.word	0x00003395
    3458:	00005add 	.word	0x00005add
    345c:	000032b5 	.word	0x000032b5

00003460 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3460:	b580      	push	{r7, lr}
    3462:	b084      	sub	sp, #16
    3464:	af00      	add	r7, sp, #0
    3466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    346e:	68fb      	ldr	r3, [r7, #12]
    3470:	7e5b      	ldrb	r3, [r3, #25]
    3472:	b2db      	uxtb	r3, r3
    3474:	b2db      	uxtb	r3, r3
    3476:	b25b      	sxtb	r3, r3
    3478:	2b00      	cmp	r3, #0
    347a:	da01      	bge.n	3480 <adc_is_syncing+0x20>
		return true;
    347c:	2301      	movs	r3, #1
    347e:	e000      	b.n	3482 <adc_is_syncing+0x22>
	}

	return false;
    3480:	2300      	movs	r3, #0
}
    3482:	1c18      	adds	r0, r3, #0
    3484:	46bd      	mov	sp, r7
    3486:	b004      	add	sp, #16
    3488:	bd80      	pop	{r7, pc}
    348a:	46c0      	nop			; (mov r8, r8)

0000348c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    348c:	b580      	push	{r7, lr}
    348e:	b084      	sub	sp, #16
    3490:	af00      	add	r7, sp, #0
    3492:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	1c18      	adds	r0, r3, #0
    34a0:	4b0a      	ldr	r3, [pc, #40]	; (34cc <adc_start_conversion+0x40>)
    34a2:	4798      	blx	r3
    34a4:	1e03      	subs	r3, r0, #0
    34a6:	d1f9      	bne.n	349c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	7b1b      	ldrb	r3, [r3, #12]
    34ac:	b2db      	uxtb	r3, r3
    34ae:	2202      	movs	r2, #2
    34b0:	4313      	orrs	r3, r2
    34b2:	b2da      	uxtb	r2, r3
    34b4:	68fb      	ldr	r3, [r7, #12]
    34b6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    34b8:	46c0      	nop			; (mov r8, r8)
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	1c18      	adds	r0, r3, #0
    34be:	4b03      	ldr	r3, [pc, #12]	; (34cc <adc_start_conversion+0x40>)
    34c0:	4798      	blx	r3
    34c2:	1e03      	subs	r3, r0, #0
    34c4:	d1f9      	bne.n	34ba <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    34c6:	46bd      	mov	sp, r7
    34c8:	b004      	add	sp, #16
    34ca:	bd80      	pop	{r7, pc}
    34cc:	00003461 	.word	0x00003461

000034d0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
    34d8:	1c0a      	adds	r2, r1, #0
    34da:	1cfb      	adds	r3, r7, #3
    34dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    34e4:	68fb      	ldr	r3, [r7, #12]
    34e6:	1cfa      	adds	r2, r7, #3
    34e8:	7812      	ldrb	r2, [r2, #0]
    34ea:	759a      	strb	r2, [r3, #22]
}
    34ec:	46bd      	mov	sp, r7
    34ee:	b004      	add	sp, #16
    34f0:	bd80      	pop	{r7, pc}
    34f2:	46c0      	nop			; (mov r8, r8)

000034f4 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    34f4:	b580      	push	{r7, lr}
    34f6:	b084      	sub	sp, #16
    34f8:	af00      	add	r7, sp, #0
    34fa:	1c02      	adds	r2, r0, #0
    34fc:	1dfb      	adds	r3, r7, #7
    34fe:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    3500:	1dfb      	adds	r3, r7, #7
    3502:	781a      	ldrb	r2, [r3, #0]
    3504:	4b43      	ldr	r3, [pc, #268]	; (3614 <_adc_interrupt_handler+0x120>)
    3506:	0092      	lsls	r2, r2, #2
    3508:	58d3      	ldr	r3, [r2, r3]
    350a:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    350c:	68fb      	ldr	r3, [r7, #12]
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	7e1b      	ldrb	r3, [r3, #24]
    3512:	b2db      	uxtb	r3, r3
    3514:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    3516:	68bb      	ldr	r3, [r7, #8]
    3518:	2201      	movs	r2, #1
    351a:	4013      	ands	r3, r2
    351c:	d045      	beq.n	35aa <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	7edb      	ldrb	r3, [r3, #27]
    3522:	1c1a      	adds	r2, r3, #0
    3524:	2301      	movs	r3, #1
    3526:	4013      	ands	r3, r2
    3528:	d03f      	beq.n	35aa <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    352a:	68fb      	ldr	r3, [r7, #12]
    352c:	7e9b      	ldrb	r3, [r3, #26]
    352e:	1c1a      	adds	r2, r3, #0
    3530:	2301      	movs	r3, #1
    3532:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3534:	d039      	beq.n	35aa <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	681b      	ldr	r3, [r3, #0]
    353a:	2201      	movs	r2, #1
    353c:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	68fb      	ldr	r3, [r7, #12]
    3542:	1c18      	adds	r0, r3, #0
    3544:	4b34      	ldr	r3, [pc, #208]	; (3618 <_adc_interrupt_handler+0x124>)
    3546:	4798      	blx	r3
    3548:	1e03      	subs	r3, r0, #0
    354a:	d1f9      	bne.n	3540 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    354c:	68fb      	ldr	r3, [r7, #12]
    354e:	695b      	ldr	r3, [r3, #20]
    3550:	1c99      	adds	r1, r3, #2
    3552:	68fa      	ldr	r2, [r7, #12]
    3554:	6151      	str	r1, [r2, #20]
    3556:	68fa      	ldr	r2, [r7, #12]
    3558:	6812      	ldr	r2, [r2, #0]
    355a:	8b52      	ldrh	r2, [r2, #26]
    355c:	b292      	uxth	r2, r2
    355e:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3560:	68fb      	ldr	r3, [r7, #12]
    3562:	8b1b      	ldrh	r3, [r3, #24]
    3564:	b29b      	uxth	r3, r3
    3566:	3b01      	subs	r3, #1
    3568:	b29b      	uxth	r3, r3
    356a:	68fa      	ldr	r2, [r7, #12]
    356c:	1c19      	adds	r1, r3, #0
    356e:	8311      	strh	r1, [r2, #24]
    3570:	2b00      	cmp	r3, #0
    3572:	d008      	beq.n	3586 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    3574:	68fb      	ldr	r3, [r7, #12]
    3576:	7f5b      	ldrb	r3, [r3, #29]
    3578:	2b00      	cmp	r3, #0
    357a:	d016      	beq.n	35aa <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    357c:	68fb      	ldr	r3, [r7, #12]
    357e:	1c18      	adds	r0, r3, #0
    3580:	4b26      	ldr	r3, [pc, #152]	; (361c <_adc_interrupt_handler+0x128>)
    3582:	4798      	blx	r3
    3584:	e011      	b.n	35aa <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	7f1b      	ldrb	r3, [r3, #28]
    358a:	b2db      	uxtb	r3, r3
    358c:	2b05      	cmp	r3, #5
    358e:	d10c      	bne.n	35aa <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	2200      	movs	r2, #0
    3594:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3596:	68fb      	ldr	r3, [r7, #12]
    3598:	1c18      	adds	r0, r3, #0
    359a:	2101      	movs	r1, #1
    359c:	4b20      	ldr	r3, [pc, #128]	; (3620 <_adc_interrupt_handler+0x12c>)
    359e:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    35a0:	68fb      	ldr	r3, [r7, #12]
    35a2:	689b      	ldr	r3, [r3, #8]
    35a4:	68fa      	ldr	r2, [r7, #12]
    35a6:	1c10      	adds	r0, r2, #0
    35a8:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    35aa:	68bb      	ldr	r3, [r7, #8]
    35ac:	2204      	movs	r2, #4
    35ae:	4013      	ands	r3, r2
    35b0:	d014      	beq.n	35dc <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    35b2:	68fb      	ldr	r3, [r7, #12]
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2204      	movs	r2, #4
    35b8:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    35ba:	68fb      	ldr	r3, [r7, #12]
    35bc:	7edb      	ldrb	r3, [r3, #27]
    35be:	1c1a      	adds	r2, r3, #0
    35c0:	2302      	movs	r3, #2
    35c2:	4013      	ands	r3, r2
    35c4:	d00a      	beq.n	35dc <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	7e9b      	ldrb	r3, [r3, #26]
    35ca:	1c1a      	adds	r2, r3, #0
    35cc:	2302      	movs	r3, #2
    35ce:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    35d0:	d004      	beq.n	35dc <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    35d2:	68fb      	ldr	r3, [r7, #12]
    35d4:	68db      	ldr	r3, [r3, #12]
    35d6:	68fa      	ldr	r2, [r7, #12]
    35d8:	1c10      	adds	r0, r2, #0
    35da:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    35dc:	68bb      	ldr	r3, [r7, #8]
    35de:	2202      	movs	r2, #2
    35e0:	4013      	ands	r3, r2
    35e2:	d014      	beq.n	360e <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    35e4:	68fb      	ldr	r3, [r7, #12]
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	2202      	movs	r2, #2
    35ea:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    35ec:	68fb      	ldr	r3, [r7, #12]
    35ee:	7edb      	ldrb	r3, [r3, #27]
    35f0:	1c1a      	adds	r2, r3, #0
    35f2:	2304      	movs	r3, #4
    35f4:	4013      	ands	r3, r2
    35f6:	d00a      	beq.n	360e <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    35f8:	68fb      	ldr	r3, [r7, #12]
    35fa:	7e9b      	ldrb	r3, [r3, #26]
    35fc:	1c1a      	adds	r2, r3, #0
    35fe:	2304      	movs	r3, #4
    3600:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3602:	d004      	beq.n	360e <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3604:	68fb      	ldr	r3, [r7, #12]
    3606:	691b      	ldr	r3, [r3, #16]
    3608:	68fa      	ldr	r2, [r7, #12]
    360a:	1c10      	adds	r0, r2, #0
    360c:	4798      	blx	r3
		}
	}
}
    360e:	46bd      	mov	sp, r7
    3610:	b004      	add	sp, #16
    3612:	bd80      	pop	{r7, pc}
    3614:	20000754 	.word	0x20000754
    3618:	00003461 	.word	0x00003461
    361c:	0000348d 	.word	0x0000348d
    3620:	000034d1 	.word	0x000034d1

00003624 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3624:	b580      	push	{r7, lr}
    3626:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3628:	2000      	movs	r0, #0
    362a:	4b02      	ldr	r3, [pc, #8]	; (3634 <ADC_Handler+0x10>)
    362c:	4798      	blx	r3
}
    362e:	46bd      	mov	sp, r7
    3630:	bd80      	pop	{r7, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	000034f5 	.word	0x000034f5

00003638 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3638:	b580      	push	{r7, lr}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    363e:	4b0f      	ldr	r3, [pc, #60]	; (367c <cpu_irq_enter_critical+0x44>)
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	2b00      	cmp	r3, #0
    3644:	d112      	bne.n	366c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3646:	f3ef 8310 	mrs	r3, PRIMASK
    364a:	607b      	str	r3, [r7, #4]
  return(result);
    364c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    364e:	2b00      	cmp	r3, #0
    3650:	d109      	bne.n	3666 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3652:	b672      	cpsid	i
    3654:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3658:	4b09      	ldr	r3, [pc, #36]	; (3680 <cpu_irq_enter_critical+0x48>)
    365a:	2200      	movs	r2, #0
    365c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    365e:	4b09      	ldr	r3, [pc, #36]	; (3684 <cpu_irq_enter_critical+0x4c>)
    3660:	2201      	movs	r2, #1
    3662:	701a      	strb	r2, [r3, #0]
    3664:	e002      	b.n	366c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3666:	4b07      	ldr	r3, [pc, #28]	; (3684 <cpu_irq_enter_critical+0x4c>)
    3668:	2200      	movs	r2, #0
    366a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    366c:	4b03      	ldr	r3, [pc, #12]	; (367c <cpu_irq_enter_critical+0x44>)
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	1c5a      	adds	r2, r3, #1
    3672:	4b02      	ldr	r3, [pc, #8]	; (367c <cpu_irq_enter_critical+0x44>)
    3674:	601a      	str	r2, [r3, #0]
}
    3676:	46bd      	mov	sp, r7
    3678:	b002      	add	sp, #8
    367a:	bd80      	pop	{r7, pc}
    367c:	2000009c 	.word	0x2000009c
    3680:	20000010 	.word	0x20000010
    3684:	200000a0 	.word	0x200000a0

00003688 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3688:	b580      	push	{r7, lr}
    368a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    368c:	4b0a      	ldr	r3, [pc, #40]	; (36b8 <cpu_irq_leave_critical+0x30>)
    368e:	681b      	ldr	r3, [r3, #0]
    3690:	1e5a      	subs	r2, r3, #1
    3692:	4b09      	ldr	r3, [pc, #36]	; (36b8 <cpu_irq_leave_critical+0x30>)
    3694:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3696:	4b08      	ldr	r3, [pc, #32]	; (36b8 <cpu_irq_leave_critical+0x30>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	2b00      	cmp	r3, #0
    369c:	d10a      	bne.n	36b4 <cpu_irq_leave_critical+0x2c>
    369e:	4b07      	ldr	r3, [pc, #28]	; (36bc <cpu_irq_leave_critical+0x34>)
    36a0:	781b      	ldrb	r3, [r3, #0]
    36a2:	b2db      	uxtb	r3, r3
    36a4:	2b00      	cmp	r3, #0
    36a6:	d005      	beq.n	36b4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    36a8:	4b05      	ldr	r3, [pc, #20]	; (36c0 <cpu_irq_leave_critical+0x38>)
    36aa:	2201      	movs	r2, #1
    36ac:	701a      	strb	r2, [r3, #0]
    36ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    36b2:	b662      	cpsie	i
	}
}
    36b4:	46bd      	mov	sp, r7
    36b6:	bd80      	pop	{r7, pc}
    36b8:	2000009c 	.word	0x2000009c
    36bc:	200000a0 	.word	0x200000a0
    36c0:	20000010 	.word	0x20000010

000036c4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	b082      	sub	sp, #8
    36c8:	af00      	add	r7, sp, #0
    36ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	2280      	movs	r2, #128	; 0x80
    36d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	2200      	movs	r2, #0
    36d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	2201      	movs	r2, #1
    36dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	2200      	movs	r2, #0
    36e2:	70da      	strb	r2, [r3, #3]
}
    36e4:	46bd      	mov	sp, r7
    36e6:	b002      	add	sp, #8
    36e8:	bd80      	pop	{r7, pc}
    36ea:	46c0      	nop			; (mov r8, r8)

000036ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b084      	sub	sp, #16
    36f0:	af00      	add	r7, sp, #0
    36f2:	1c02      	adds	r2, r0, #0
    36f4:	6039      	str	r1, [r7, #0]
    36f6:	1dfb      	adds	r3, r7, #7
    36f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    36fa:	230c      	movs	r3, #12
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	1c18      	adds	r0, r3, #0
    3700:	4b0f      	ldr	r3, [pc, #60]	; (3740 <port_pin_set_config+0x54>)
    3702:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3704:	230c      	movs	r3, #12
    3706:	18fb      	adds	r3, r7, r3
    3708:	2280      	movs	r2, #128	; 0x80
    370a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    370c:	683b      	ldr	r3, [r7, #0]
    370e:	781a      	ldrb	r2, [r3, #0]
    3710:	230c      	movs	r3, #12
    3712:	18fb      	adds	r3, r7, r3
    3714:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3716:	683b      	ldr	r3, [r7, #0]
    3718:	785a      	ldrb	r2, [r3, #1]
    371a:	230c      	movs	r3, #12
    371c:	18fb      	adds	r3, r7, r3
    371e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3720:	683b      	ldr	r3, [r7, #0]
    3722:	789a      	ldrb	r2, [r3, #2]
    3724:	230c      	movs	r3, #12
    3726:	18fb      	adds	r3, r7, r3
    3728:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    372a:	1dfb      	adds	r3, r7, #7
    372c:	781a      	ldrb	r2, [r3, #0]
    372e:	230c      	movs	r3, #12
    3730:	18fb      	adds	r3, r7, r3
    3732:	1c10      	adds	r0, r2, #0
    3734:	1c19      	adds	r1, r3, #0
    3736:	4b03      	ldr	r3, [pc, #12]	; (3744 <port_pin_set_config+0x58>)
    3738:	4798      	blx	r3
}
    373a:	46bd      	mov	sp, r7
    373c:	b004      	add	sp, #16
    373e:	bd80      	pop	{r7, pc}
    3740:	000036c5 	.word	0x000036c5
    3744:	00005a91 	.word	0x00005a91

00003748 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3748:	b580      	push	{r7, lr}
    374a:	b082      	sub	sp, #8
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	2200      	movs	r2, #0
    3754:	701a      	strb	r2, [r3, #0]
}
    3756:	46bd      	mov	sp, r7
    3758:	b002      	add	sp, #8
    375a:	bd80      	pop	{r7, pc}

0000375c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	b08d      	sub	sp, #52	; 0x34
    3760:	af00      	add	r7, sp, #0
    3762:	60b8      	str	r0, [r7, #8]
    3764:	60f9      	str	r1, [r7, #12]
    3766:	603a      	str	r2, [r7, #0]
    3768:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    376a:	2300      	movs	r3, #0
    376c:	2400      	movs	r4, #0
    376e:	623b      	str	r3, [r7, #32]
    3770:	627c      	str	r4, [r7, #36]	; 0x24
    3772:	2300      	movs	r3, #0
    3774:	2400      	movs	r4, #0
    3776:	61bb      	str	r3, [r7, #24]
    3778:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    377a:	233f      	movs	r3, #63	; 0x3f
    377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    377e:	e053      	b.n	3828 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3782:	3b20      	subs	r3, #32
    3784:	2b00      	cmp	r3, #0
    3786:	db04      	blt.n	3792 <long_division+0x36>
    3788:	2201      	movs	r2, #1
    378a:	409a      	lsls	r2, r3
    378c:	1c13      	adds	r3, r2, #0
    378e:	617b      	str	r3, [r7, #20]
    3790:	e00b      	b.n	37aa <long_division+0x4e>
    3792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3794:	2220      	movs	r2, #32
    3796:	1ad3      	subs	r3, r2, r3
    3798:	2201      	movs	r2, #1
    379a:	40da      	lsrs	r2, r3
    379c:	1c13      	adds	r3, r2, #0
    379e:	2100      	movs	r1, #0
    37a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37a2:	4091      	lsls	r1, r2
    37a4:	1c0a      	adds	r2, r1, #0
    37a6:	4313      	orrs	r3, r2
    37a8:	617b      	str	r3, [r7, #20]
    37aa:	2201      	movs	r2, #1
    37ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37ae:	409a      	lsls	r2, r3
    37b0:	1c13      	adds	r3, r2, #0
    37b2:	613b      	str	r3, [r7, #16]

		r = r << 1;
    37b4:	69bb      	ldr	r3, [r7, #24]
    37b6:	69fc      	ldr	r4, [r7, #28]
    37b8:	18db      	adds	r3, r3, r3
    37ba:	4164      	adcs	r4, r4
    37bc:	61bb      	str	r3, [r7, #24]
    37be:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    37c0:	68bb      	ldr	r3, [r7, #8]
    37c2:	693a      	ldr	r2, [r7, #16]
    37c4:	401a      	ands	r2, r3
    37c6:	1c15      	adds	r5, r2, #0
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	697a      	ldr	r2, [r7, #20]
    37cc:	401a      	ands	r2, r3
    37ce:	1c16      	adds	r6, r2, #0
    37d0:	1c2b      	adds	r3, r5, #0
    37d2:	4333      	orrs	r3, r6
    37d4:	d007      	beq.n	37e6 <long_division+0x8a>
			r |= 0x01;
    37d6:	69bb      	ldr	r3, [r7, #24]
    37d8:	2201      	movs	r2, #1
    37da:	4313      	orrs	r3, r2
    37dc:	61bb      	str	r3, [r7, #24]
    37de:	69fb      	ldr	r3, [r7, #28]
    37e0:	2200      	movs	r2, #0
    37e2:	4313      	orrs	r3, r2
    37e4:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    37e6:	687a      	ldr	r2, [r7, #4]
    37e8:	69fb      	ldr	r3, [r7, #28]
    37ea:	429a      	cmp	r2, r3
    37ec:	d819      	bhi.n	3822 <long_division+0xc6>
    37ee:	687a      	ldr	r2, [r7, #4]
    37f0:	69fb      	ldr	r3, [r7, #28]
    37f2:	429a      	cmp	r2, r3
    37f4:	d103      	bne.n	37fe <long_division+0xa2>
    37f6:	683a      	ldr	r2, [r7, #0]
    37f8:	69bb      	ldr	r3, [r7, #24]
    37fa:	429a      	cmp	r2, r3
    37fc:	d811      	bhi.n	3822 <long_division+0xc6>
			r = r - d;
    37fe:	69b9      	ldr	r1, [r7, #24]
    3800:	69fa      	ldr	r2, [r7, #28]
    3802:	683b      	ldr	r3, [r7, #0]
    3804:	687c      	ldr	r4, [r7, #4]
    3806:	1ac9      	subs	r1, r1, r3
    3808:	41a2      	sbcs	r2, r4
    380a:	1c0b      	adds	r3, r1, #0
    380c:	1c14      	adds	r4, r2, #0
    380e:	61bb      	str	r3, [r7, #24]
    3810:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3812:	6a3a      	ldr	r2, [r7, #32]
    3814:	693b      	ldr	r3, [r7, #16]
    3816:	4313      	orrs	r3, r2
    3818:	623b      	str	r3, [r7, #32]
    381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    381c:	697b      	ldr	r3, [r7, #20]
    381e:	4313      	orrs	r3, r2
    3820:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3824:	3b01      	subs	r3, #1
    3826:	62fb      	str	r3, [r7, #44]	; 0x2c
    3828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    382a:	2b00      	cmp	r3, #0
    382c:	daa8      	bge.n	3780 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    382e:	6a3b      	ldr	r3, [r7, #32]
    3830:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3832:	1c18      	adds	r0, r3, #0
    3834:	1c21      	adds	r1, r4, #0
    3836:	46bd      	mov	sp, r7
    3838:	b00d      	add	sp, #52	; 0x34
    383a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000383c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    383c:	b580      	push	{r7, lr}
    383e:	b086      	sub	sp, #24
    3840:	af00      	add	r7, sp, #0
    3842:	60f8      	str	r0, [r7, #12]
    3844:	60b9      	str	r1, [r7, #8]
    3846:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3848:	2316      	movs	r3, #22
    384a:	18fb      	adds	r3, r7, r3
    384c:	2200      	movs	r2, #0
    384e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3850:	68bb      	ldr	r3, [r7, #8]
    3852:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3854:	68bb      	ldr	r3, [r7, #8]
    3856:	085a      	lsrs	r2, r3, #1
    3858:	68fb      	ldr	r3, [r7, #12]
    385a:	429a      	cmp	r2, r3
    385c:	d201      	bcs.n	3862 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    385e:	2340      	movs	r3, #64	; 0x40
    3860:	e026      	b.n	38b0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	085b      	lsrs	r3, r3, #1
    3866:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3868:	e00a      	b.n	3880 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    386a:	693a      	ldr	r2, [r7, #16]
    386c:	68fb      	ldr	r3, [r7, #12]
    386e:	1ad3      	subs	r3, r2, r3
    3870:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3872:	2316      	movs	r3, #22
    3874:	18fb      	adds	r3, r7, r3
    3876:	881a      	ldrh	r2, [r3, #0]
    3878:	2316      	movs	r3, #22
    387a:	18fb      	adds	r3, r7, r3
    387c:	3201      	adds	r2, #1
    387e:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3880:	693a      	ldr	r2, [r7, #16]
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	429a      	cmp	r2, r3
    3886:	d2f0      	bcs.n	386a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3888:	2316      	movs	r3, #22
    388a:	18fb      	adds	r3, r7, r3
    388c:	2216      	movs	r2, #22
    388e:	18ba      	adds	r2, r7, r2
    3890:	8812      	ldrh	r2, [r2, #0]
    3892:	3a01      	subs	r2, #1
    3894:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3896:	2316      	movs	r3, #22
    3898:	18fb      	adds	r3, r7, r3
    389a:	881b      	ldrh	r3, [r3, #0]
    389c:	2bff      	cmp	r3, #255	; 0xff
    389e:	d901      	bls.n	38a4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    38a0:	2340      	movs	r3, #64	; 0x40
    38a2:	e005      	b.n	38b0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	2216      	movs	r2, #22
    38a8:	18ba      	adds	r2, r7, r2
    38aa:	8812      	ldrh	r2, [r2, #0]
    38ac:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    38ae:	2300      	movs	r3, #0
	}
}
    38b0:	1c18      	adds	r0, r3, #0
    38b2:	46bd      	mov	sp, r7
    38b4:	b006      	add	sp, #24
    38b6:	bd80      	pop	{r7, pc}

000038b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    38b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ba:	b09d      	sub	sp, #116	; 0x74
    38bc:	af00      	add	r7, sp, #0
    38be:	63f8      	str	r0, [r7, #60]	; 0x3c
    38c0:	63b9      	str	r1, [r7, #56]	; 0x38
    38c2:	637a      	str	r2, [r7, #52]	; 0x34
    38c4:	2233      	movs	r2, #51	; 0x33
    38c6:	18ba      	adds	r2, r7, r2
    38c8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    38ca:	2300      	movs	r3, #0
    38cc:	2400      	movs	r4, #0
    38ce:	65bb      	str	r3, [r7, #88]	; 0x58
    38d0:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    38d2:	2300      	movs	r3, #0
    38d4:	2400      	movs	r4, #0
    38d6:	653b      	str	r3, [r7, #80]	; 0x50
    38d8:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    38da:	2300      	movs	r3, #0
    38dc:	2400      	movs	r4, #0
    38de:	66bb      	str	r3, [r7, #104]	; 0x68
    38e0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    38e2:	2300      	movs	r3, #0
    38e4:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    38e6:	2358      	movs	r3, #88	; 0x58
    38e8:	2230      	movs	r2, #48	; 0x30
    38ea:	4694      	mov	ip, r2
    38ec:	44bc      	add	ip, r7
    38ee:	4463      	add	r3, ip
    38f0:	781a      	ldrb	r2, [r3, #0]
    38f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38f4:	435a      	muls	r2, r3
    38f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    38f8:	429a      	cmp	r2, r3
    38fa:	d901      	bls.n	3900 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    38fc:	2340      	movs	r3, #64	; 0x40
    38fe:	e0c9      	b.n	3a94 <_sercom_get_async_baud_val+0x1dc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3900:	2333      	movs	r3, #51	; 0x33
    3902:	18fb      	adds	r3, r7, r3
    3904:	781b      	ldrb	r3, [r3, #0]
    3906:	2b00      	cmp	r3, #0
    3908:	d13f      	bne.n	398a <_sercom_get_async_baud_val+0xd2>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    390a:	2358      	movs	r3, #88	; 0x58
    390c:	2230      	movs	r2, #48	; 0x30
    390e:	4694      	mov	ip, r2
    3910:	44bc      	add	ip, r7
    3912:	4463      	add	r3, ip
    3914:	781b      	ldrb	r3, [r3, #0]
    3916:	b2db      	uxtb	r3, r3
    3918:	613b      	str	r3, [r7, #16]
    391a:	2300      	movs	r3, #0
    391c:	617b      	str	r3, [r7, #20]
    391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3920:	60bb      	str	r3, [r7, #8]
    3922:	2300      	movs	r3, #0
    3924:	60fb      	str	r3, [r7, #12]
    3926:	4c5d      	ldr	r4, [pc, #372]	; (3a9c <_sercom_get_async_baud_val+0x1e4>)
    3928:	6938      	ldr	r0, [r7, #16]
    392a:	6979      	ldr	r1, [r7, #20]
    392c:	68ba      	ldr	r2, [r7, #8]
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	47a0      	blx	r4
    3932:	1c03      	adds	r3, r0, #0
    3934:	1c0c      	adds	r4, r1, #0
    3936:	001b      	movs	r3, r3
    3938:	64fb      	str	r3, [r7, #76]	; 0x4c
    393a:	2300      	movs	r3, #0
    393c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3940:	603b      	str	r3, [r7, #0]
    3942:	2300      	movs	r3, #0
    3944:	607b      	str	r3, [r7, #4]
    3946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3948:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    394a:	1c18      	adds	r0, r3, #0
    394c:	1c21      	adds	r1, r4, #0
    394e:	683a      	ldr	r2, [r7, #0]
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	4c53      	ldr	r4, [pc, #332]	; (3aa0 <_sercom_get_async_baud_val+0x1e8>)
    3954:	47a0      	blx	r4
    3956:	1c03      	adds	r3, r0, #0
    3958:	1c0c      	adds	r4, r1, #0
    395a:	65bb      	str	r3, [r7, #88]	; 0x58
    395c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    395e:	2100      	movs	r1, #0
    3960:	2201      	movs	r2, #1
    3962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3964:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3966:	1ac9      	subs	r1, r1, r3
    3968:	41a2      	sbcs	r2, r4
    396a:	1c0b      	adds	r3, r1, #0
    396c:	1c14      	adds	r4, r2, #0
    396e:	653b      	str	r3, [r7, #80]	; 0x50
    3970:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    3972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3974:	0c1b      	lsrs	r3, r3, #16
    3976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3978:	0416      	lsls	r6, r2, #16
    397a:	431e      	orrs	r6, r3
    397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    397e:	041d      	lsls	r5, r3, #16
    3980:	0033      	movs	r3, r6
    3982:	66bb      	str	r3, [r7, #104]	; 0x68
    3984:	2300      	movs	r3, #0
    3986:	66fb      	str	r3, [r7, #108]	; 0x6c
    3988:	e07e      	b.n	3a88 <_sercom_get_async_baud_val+0x1d0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    398a:	2333      	movs	r3, #51	; 0x33
    398c:	18fb      	adds	r3, r7, r3
    398e:	781b      	ldrb	r3, [r3, #0]
    3990:	2b01      	cmp	r3, #1
    3992:	d000      	beq.n	3996 <_sercom_get_async_baud_val+0xde>
    3994:	e078      	b.n	3a88 <_sercom_get_async_baud_val+0x1d0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3996:	2337      	movs	r3, #55	; 0x37
    3998:	2230      	movs	r2, #48	; 0x30
    399a:	4694      	mov	ip, r2
    399c:	44bc      	add	ip, r7
    399e:	4463      	add	r3, ip
    39a0:	2200      	movs	r2, #0
    39a2:	701a      	strb	r2, [r3, #0]
    39a4:	e051      	b.n	3a4a <_sercom_get_async_baud_val+0x192>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    39a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    39a8:	62bb      	str	r3, [r7, #40]	; 0x28
    39aa:	2300      	movs	r3, #0
    39ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    39ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    39b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    39b2:	1c03      	adds	r3, r0, #0
    39b4:	0f5b      	lsrs	r3, r3, #29
    39b6:	1c0a      	adds	r2, r1, #0
    39b8:	00d2      	lsls	r2, r2, #3
    39ba:	4313      	orrs	r3, r2
    39bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    39be:	1c03      	adds	r3, r0, #0
    39c0:	00db      	lsls	r3, r3, #3
    39c2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    39c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39c6:	623b      	str	r3, [r7, #32]
    39c8:	2300      	movs	r3, #0
    39ca:	627b      	str	r3, [r7, #36]	; 0x24
    39cc:	2358      	movs	r3, #88	; 0x58
    39ce:	2230      	movs	r2, #48	; 0x30
    39d0:	4694      	mov	ip, r2
    39d2:	44bc      	add	ip, r7
    39d4:	4463      	add	r3, ip
    39d6:	781b      	ldrb	r3, [r3, #0]
    39d8:	b2db      	uxtb	r3, r3
    39da:	61bb      	str	r3, [r7, #24]
    39dc:	2300      	movs	r3, #0
    39de:	61fb      	str	r3, [r7, #28]
    39e0:	4c2e      	ldr	r4, [pc, #184]	; (3a9c <_sercom_get_async_baud_val+0x1e4>)
    39e2:	6a38      	ldr	r0, [r7, #32]
    39e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    39e6:	69ba      	ldr	r2, [r7, #24]
    39e8:	69fb      	ldr	r3, [r7, #28]
    39ea:	47a0      	blx	r4
    39ec:	1c03      	adds	r3, r0, #0
    39ee:	1c0c      	adds	r4, r1, #0
    39f0:	643b      	str	r3, [r7, #64]	; 0x40
    39f2:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    39f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    39f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    39f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    39fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    39fc:	1c08      	adds	r0, r1, #0
    39fe:	1c11      	adds	r1, r2, #0
    3a00:	1c1a      	adds	r2, r3, #0
    3a02:	1c23      	adds	r3, r4, #0
    3a04:	4c26      	ldr	r4, [pc, #152]	; (3aa0 <_sercom_get_async_baud_val+0x1e8>)
    3a06:	47a0      	blx	r4
    3a08:	1c03      	adds	r3, r0, #0
    3a0a:	1c0c      	adds	r4, r1, #0
    3a0c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    3a0e:	2337      	movs	r3, #55	; 0x37
    3a10:	2230      	movs	r2, #48	; 0x30
    3a12:	4694      	mov	ip, r2
    3a14:	44bc      	add	ip, r7
    3a16:	4463      	add	r3, ip
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3a1c:	1ad3      	subs	r3, r2, r3
    3a1e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    3a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a22:	08db      	lsrs	r3, r3, #3
    3a24:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    3a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a28:	4a1e      	ldr	r2, [pc, #120]	; (3aa4 <_sercom_get_async_baud_val+0x1ec>)
    3a2a:	4293      	cmp	r3, r2
    3a2c:	d800      	bhi.n	3a30 <_sercom_get_async_baud_val+0x178>
				break;
    3a2e:	e014      	b.n	3a5a <_sercom_get_async_baud_val+0x1a2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3a30:	2337      	movs	r3, #55	; 0x37
    3a32:	2230      	movs	r2, #48	; 0x30
    3a34:	4694      	mov	ip, r2
    3a36:	44bc      	add	ip, r7
    3a38:	4463      	add	r3, ip
    3a3a:	781a      	ldrb	r2, [r3, #0]
    3a3c:	2337      	movs	r3, #55	; 0x37
    3a3e:	2130      	movs	r1, #48	; 0x30
    3a40:	468c      	mov	ip, r1
    3a42:	44bc      	add	ip, r7
    3a44:	4463      	add	r3, ip
    3a46:	3201      	adds	r2, #1
    3a48:	701a      	strb	r2, [r3, #0]
    3a4a:	2337      	movs	r3, #55	; 0x37
    3a4c:	2230      	movs	r2, #48	; 0x30
    3a4e:	4694      	mov	ip, r2
    3a50:	44bc      	add	ip, r7
    3a52:	4463      	add	r3, ip
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	2b07      	cmp	r3, #7
    3a58:	d9a5      	bls.n	39a6 <_sercom_get_async_baud_val+0xee>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3a5a:	2337      	movs	r3, #55	; 0x37
    3a5c:	2230      	movs	r2, #48	; 0x30
    3a5e:	4694      	mov	ip, r2
    3a60:	44bc      	add	ip, r7
    3a62:	4463      	add	r3, ip
    3a64:	781b      	ldrb	r3, [r3, #0]
    3a66:	2b08      	cmp	r3, #8
    3a68:	d101      	bne.n	3a6e <_sercom_get_async_baud_val+0x1b6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a6a:	2340      	movs	r3, #64	; 0x40
    3a6c:	e012      	b.n	3a94 <_sercom_get_async_baud_val+0x1dc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    3a6e:	2337      	movs	r3, #55	; 0x37
    3a70:	2230      	movs	r2, #48	; 0x30
    3a72:	4694      	mov	ip, r2
    3a74:	44bc      	add	ip, r7
    3a76:	4463      	add	r3, ip
    3a78:	781b      	ldrb	r3, [r3, #0]
    3a7a:	035b      	lsls	r3, r3, #13
    3a7c:	1c1a      	adds	r2, r3, #0
    3a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a80:	4313      	orrs	r3, r2
    3a82:	66bb      	str	r3, [r7, #104]	; 0x68
    3a84:	2300      	movs	r3, #0
    3a86:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    3a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a8a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    3a8c:	b29a      	uxth	r2, r3
    3a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a90:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3a92:	2300      	movs	r3, #0
}
    3a94:	1c18      	adds	r0, r3, #0
    3a96:	46bd      	mov	sp, r7
    3a98:	b01d      	add	sp, #116	; 0x74
    3a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a9c:	00006551 	.word	0x00006551
    3aa0:	0000375d 	.word	0x0000375d
    3aa4:	00001fff 	.word	0x00001fff

00003aa8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b084      	sub	sp, #16
    3aac:	af00      	add	r7, sp, #0
    3aae:	1c02      	adds	r2, r0, #0
    3ab0:	1dfb      	adds	r3, r7, #7
    3ab2:	701a      	strb	r2, [r3, #0]
    3ab4:	1dbb      	adds	r3, r7, #6
    3ab6:	1c0a      	adds	r2, r1, #0
    3ab8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3aba:	4b1a      	ldr	r3, [pc, #104]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2201      	movs	r2, #1
    3ac0:	4053      	eors	r3, r2
    3ac2:	b2db      	uxtb	r3, r3
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d103      	bne.n	3ad0 <sercom_set_gclk_generator+0x28>
    3ac8:	1dbb      	adds	r3, r7, #6
    3aca:	781b      	ldrb	r3, [r3, #0]
    3acc:	2b00      	cmp	r3, #0
    3ace:	d01b      	beq.n	3b08 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3ad0:	230c      	movs	r3, #12
    3ad2:	18fb      	adds	r3, r7, r3
    3ad4:	1c18      	adds	r0, r3, #0
    3ad6:	4b14      	ldr	r3, [pc, #80]	; (3b28 <sercom_set_gclk_generator+0x80>)
    3ad8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3ada:	230c      	movs	r3, #12
    3adc:	18fb      	adds	r3, r7, r3
    3ade:	1dfa      	adds	r2, r7, #7
    3ae0:	7812      	ldrb	r2, [r2, #0]
    3ae2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3ae4:	230c      	movs	r3, #12
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	200c      	movs	r0, #12
    3aea:	1c19      	adds	r1, r3, #0
    3aec:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <sercom_set_gclk_generator+0x84>)
    3aee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3af0:	200c      	movs	r0, #12
    3af2:	4b0f      	ldr	r3, [pc, #60]	; (3b30 <sercom_set_gclk_generator+0x88>)
    3af4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3af6:	4b0b      	ldr	r3, [pc, #44]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3af8:	1dfa      	adds	r2, r7, #7
    3afa:	7812      	ldrb	r2, [r2, #0]
    3afc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3afe:	4b09      	ldr	r3, [pc, #36]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3b00:	2201      	movs	r2, #1
    3b02:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3b04:	2300      	movs	r3, #0
    3b06:	e008      	b.n	3b1a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3b08:	4b06      	ldr	r3, [pc, #24]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3b0a:	785b      	ldrb	r3, [r3, #1]
    3b0c:	1dfa      	adds	r2, r7, #7
    3b0e:	7812      	ldrb	r2, [r2, #0]
    3b10:	429a      	cmp	r2, r3
    3b12:	d101      	bne.n	3b18 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3b14:	2300      	movs	r3, #0
    3b16:	e000      	b.n	3b1a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3b18:	231d      	movs	r3, #29
}
    3b1a:	1c18      	adds	r0, r3, #0
    3b1c:	46bd      	mov	sp, r7
    3b1e:	b004      	add	sp, #16
    3b20:	bd80      	pop	{r7, pc}
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	200000a4 	.word	0x200000a4
    3b28:	00003749 	.word	0x00003749
    3b2c:	000057a5 	.word	0x000057a5
    3b30:	000057e9 	.word	0x000057e9

00003b34 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	af00      	add	r7, sp, #0
    3b3a:	6078      	str	r0, [r7, #4]
    3b3c:	1c0a      	adds	r2, r1, #0
    3b3e:	1cfb      	adds	r3, r7, #3
    3b40:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	4a4d      	ldr	r2, [pc, #308]	; (3c7c <_sercom_get_default_pad+0x148>)
    3b46:	4293      	cmp	r3, r2
    3b48:	d03f      	beq.n	3bca <_sercom_get_default_pad+0x96>
    3b4a:	4a4c      	ldr	r2, [pc, #304]	; (3c7c <_sercom_get_default_pad+0x148>)
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d806      	bhi.n	3b5e <_sercom_get_default_pad+0x2a>
    3b50:	4a4b      	ldr	r2, [pc, #300]	; (3c80 <_sercom_get_default_pad+0x14c>)
    3b52:	4293      	cmp	r3, r2
    3b54:	d00f      	beq.n	3b76 <_sercom_get_default_pad+0x42>
    3b56:	4a4b      	ldr	r2, [pc, #300]	; (3c84 <_sercom_get_default_pad+0x150>)
    3b58:	4293      	cmp	r3, r2
    3b5a:	d021      	beq.n	3ba0 <_sercom_get_default_pad+0x6c>
    3b5c:	e089      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b5e:	4a4a      	ldr	r2, [pc, #296]	; (3c88 <_sercom_get_default_pad+0x154>)
    3b60:	4293      	cmp	r3, r2
    3b62:	d100      	bne.n	3b66 <_sercom_get_default_pad+0x32>
    3b64:	e05b      	b.n	3c1e <_sercom_get_default_pad+0xea>
    3b66:	4a49      	ldr	r2, [pc, #292]	; (3c8c <_sercom_get_default_pad+0x158>)
    3b68:	4293      	cmp	r3, r2
    3b6a:	d100      	bne.n	3b6e <_sercom_get_default_pad+0x3a>
    3b6c:	e06c      	b.n	3c48 <_sercom_get_default_pad+0x114>
    3b6e:	4a48      	ldr	r2, [pc, #288]	; (3c90 <_sercom_get_default_pad+0x15c>)
    3b70:	4293      	cmp	r3, r2
    3b72:	d03f      	beq.n	3bf4 <_sercom_get_default_pad+0xc0>
    3b74:	e07d      	b.n	3c72 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3b76:	1cfb      	adds	r3, r7, #3
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	2b01      	cmp	r3, #1
    3b7c:	d00a      	beq.n	3b94 <_sercom_get_default_pad+0x60>
    3b7e:	dc02      	bgt.n	3b86 <_sercom_get_default_pad+0x52>
    3b80:	2b00      	cmp	r3, #0
    3b82:	d005      	beq.n	3b90 <_sercom_get_default_pad+0x5c>
    3b84:	e075      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b86:	2b02      	cmp	r3, #2
    3b88:	d006      	beq.n	3b98 <_sercom_get_default_pad+0x64>
    3b8a:	2b03      	cmp	r3, #3
    3b8c:	d006      	beq.n	3b9c <_sercom_get_default_pad+0x68>
    3b8e:	e070      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b90:	4b40      	ldr	r3, [pc, #256]	; (3c94 <_sercom_get_default_pad+0x160>)
    3b92:	e06f      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b94:	4b40      	ldr	r3, [pc, #256]	; (3c98 <_sercom_get_default_pad+0x164>)
    3b96:	e06d      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b98:	4b40      	ldr	r3, [pc, #256]	; (3c9c <_sercom_get_default_pad+0x168>)
    3b9a:	e06b      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b9c:	4b40      	ldr	r3, [pc, #256]	; (3ca0 <_sercom_get_default_pad+0x16c>)
    3b9e:	e069      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3ba0:	1cfb      	adds	r3, r7, #3
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	2b01      	cmp	r3, #1
    3ba6:	d00a      	beq.n	3bbe <_sercom_get_default_pad+0x8a>
    3ba8:	dc02      	bgt.n	3bb0 <_sercom_get_default_pad+0x7c>
    3baa:	2b00      	cmp	r3, #0
    3bac:	d005      	beq.n	3bba <_sercom_get_default_pad+0x86>
    3bae:	e060      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bb0:	2b02      	cmp	r3, #2
    3bb2:	d006      	beq.n	3bc2 <_sercom_get_default_pad+0x8e>
    3bb4:	2b03      	cmp	r3, #3
    3bb6:	d006      	beq.n	3bc6 <_sercom_get_default_pad+0x92>
    3bb8:	e05b      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bba:	2303      	movs	r3, #3
    3bbc:	e05a      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bbe:	4b39      	ldr	r3, [pc, #228]	; (3ca4 <_sercom_get_default_pad+0x170>)
    3bc0:	e058      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bc2:	4b39      	ldr	r3, [pc, #228]	; (3ca8 <_sercom_get_default_pad+0x174>)
    3bc4:	e056      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bc6:	4b39      	ldr	r3, [pc, #228]	; (3cac <_sercom_get_default_pad+0x178>)
    3bc8:	e054      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bca:	1cfb      	adds	r3, r7, #3
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	2b01      	cmp	r3, #1
    3bd0:	d00a      	beq.n	3be8 <_sercom_get_default_pad+0xb4>
    3bd2:	dc02      	bgt.n	3bda <_sercom_get_default_pad+0xa6>
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d005      	beq.n	3be4 <_sercom_get_default_pad+0xb0>
    3bd8:	e04b      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bda:	2b02      	cmp	r3, #2
    3bdc:	d006      	beq.n	3bec <_sercom_get_default_pad+0xb8>
    3bde:	2b03      	cmp	r3, #3
    3be0:	d006      	beq.n	3bf0 <_sercom_get_default_pad+0xbc>
    3be2:	e046      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3be4:	4b32      	ldr	r3, [pc, #200]	; (3cb0 <_sercom_get_default_pad+0x17c>)
    3be6:	e045      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3be8:	4b32      	ldr	r3, [pc, #200]	; (3cb4 <_sercom_get_default_pad+0x180>)
    3bea:	e043      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bec:	4b32      	ldr	r3, [pc, #200]	; (3cb8 <_sercom_get_default_pad+0x184>)
    3bee:	e041      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bf0:	4b32      	ldr	r3, [pc, #200]	; (3cbc <_sercom_get_default_pad+0x188>)
    3bf2:	e03f      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bf4:	1cfb      	adds	r3, r7, #3
    3bf6:	781b      	ldrb	r3, [r3, #0]
    3bf8:	2b01      	cmp	r3, #1
    3bfa:	d00a      	beq.n	3c12 <_sercom_get_default_pad+0xde>
    3bfc:	dc02      	bgt.n	3c04 <_sercom_get_default_pad+0xd0>
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d005      	beq.n	3c0e <_sercom_get_default_pad+0xda>
    3c02:	e036      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c04:	2b02      	cmp	r3, #2
    3c06:	d006      	beq.n	3c16 <_sercom_get_default_pad+0xe2>
    3c08:	2b03      	cmp	r3, #3
    3c0a:	d006      	beq.n	3c1a <_sercom_get_default_pad+0xe6>
    3c0c:	e031      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c0e:	4b2c      	ldr	r3, [pc, #176]	; (3cc0 <_sercom_get_default_pad+0x18c>)
    3c10:	e030      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c12:	4b2c      	ldr	r3, [pc, #176]	; (3cc4 <_sercom_get_default_pad+0x190>)
    3c14:	e02e      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c16:	4b2c      	ldr	r3, [pc, #176]	; (3cc8 <_sercom_get_default_pad+0x194>)
    3c18:	e02c      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c1a:	4b2c      	ldr	r3, [pc, #176]	; (3ccc <_sercom_get_default_pad+0x198>)
    3c1c:	e02a      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c1e:	1cfb      	adds	r3, r7, #3
    3c20:	781b      	ldrb	r3, [r3, #0]
    3c22:	2b01      	cmp	r3, #1
    3c24:	d00a      	beq.n	3c3c <_sercom_get_default_pad+0x108>
    3c26:	dc02      	bgt.n	3c2e <_sercom_get_default_pad+0xfa>
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d005      	beq.n	3c38 <_sercom_get_default_pad+0x104>
    3c2c:	e021      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c2e:	2b02      	cmp	r3, #2
    3c30:	d006      	beq.n	3c40 <_sercom_get_default_pad+0x10c>
    3c32:	2b03      	cmp	r3, #3
    3c34:	d006      	beq.n	3c44 <_sercom_get_default_pad+0x110>
    3c36:	e01c      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c38:	4b25      	ldr	r3, [pc, #148]	; (3cd0 <_sercom_get_default_pad+0x19c>)
    3c3a:	e01b      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c3c:	4b25      	ldr	r3, [pc, #148]	; (3cd4 <_sercom_get_default_pad+0x1a0>)
    3c3e:	e019      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c40:	4b25      	ldr	r3, [pc, #148]	; (3cd8 <_sercom_get_default_pad+0x1a4>)
    3c42:	e017      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c44:	4b25      	ldr	r3, [pc, #148]	; (3cdc <_sercom_get_default_pad+0x1a8>)
    3c46:	e015      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c48:	1cfb      	adds	r3, r7, #3
    3c4a:	781b      	ldrb	r3, [r3, #0]
    3c4c:	2b01      	cmp	r3, #1
    3c4e:	d00a      	beq.n	3c66 <_sercom_get_default_pad+0x132>
    3c50:	dc02      	bgt.n	3c58 <_sercom_get_default_pad+0x124>
    3c52:	2b00      	cmp	r3, #0
    3c54:	d005      	beq.n	3c62 <_sercom_get_default_pad+0x12e>
    3c56:	e00c      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c58:	2b02      	cmp	r3, #2
    3c5a:	d006      	beq.n	3c6a <_sercom_get_default_pad+0x136>
    3c5c:	2b03      	cmp	r3, #3
    3c5e:	d006      	beq.n	3c6e <_sercom_get_default_pad+0x13a>
    3c60:	e007      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c62:	4b1f      	ldr	r3, [pc, #124]	; (3ce0 <_sercom_get_default_pad+0x1ac>)
    3c64:	e006      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c66:	4b1f      	ldr	r3, [pc, #124]	; (3ce4 <_sercom_get_default_pad+0x1b0>)
    3c68:	e004      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c6a:	4b1f      	ldr	r3, [pc, #124]	; (3ce8 <_sercom_get_default_pad+0x1b4>)
    3c6c:	e002      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c6e:	4b1f      	ldr	r3, [pc, #124]	; (3cec <_sercom_get_default_pad+0x1b8>)
    3c70:	e000      	b.n	3c74 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3c72:	2300      	movs	r3, #0
}
    3c74:	1c18      	adds	r0, r3, #0
    3c76:	46bd      	mov	sp, r7
    3c78:	b002      	add	sp, #8
    3c7a:	bd80      	pop	{r7, pc}
    3c7c:	42001000 	.word	0x42001000
    3c80:	42000800 	.word	0x42000800
    3c84:	42000c00 	.word	0x42000c00
    3c88:	42001800 	.word	0x42001800
    3c8c:	42001c00 	.word	0x42001c00
    3c90:	42001400 	.word	0x42001400
    3c94:	00040003 	.word	0x00040003
    3c98:	00050003 	.word	0x00050003
    3c9c:	00060003 	.word	0x00060003
    3ca0:	00070003 	.word	0x00070003
    3ca4:	00010003 	.word	0x00010003
    3ca8:	001e0003 	.word	0x001e0003
    3cac:	001f0003 	.word	0x001f0003
    3cb0:	00080003 	.word	0x00080003
    3cb4:	00090003 	.word	0x00090003
    3cb8:	000a0003 	.word	0x000a0003
    3cbc:	000b0003 	.word	0x000b0003
    3cc0:	00100003 	.word	0x00100003
    3cc4:	00110003 	.word	0x00110003
    3cc8:	00120003 	.word	0x00120003
    3ccc:	00130003 	.word	0x00130003
    3cd0:	000c0003 	.word	0x000c0003
    3cd4:	000d0003 	.word	0x000d0003
    3cd8:	000e0003 	.word	0x000e0003
    3cdc:	000f0003 	.word	0x000f0003
    3ce0:	00160003 	.word	0x00160003
    3ce4:	00170003 	.word	0x00170003
    3ce8:	00180003 	.word	0x00180003
    3cec:	00190003 	.word	0x00190003

00003cf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3cf0:	b590      	push	{r4, r7, lr}
    3cf2:	b08b      	sub	sp, #44	; 0x2c
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3cf8:	230c      	movs	r3, #12
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	4a0e      	ldr	r2, [pc, #56]	; (3d38 <_sercom_get_sercom_inst_index+0x48>)
    3cfe:	ca13      	ldmia	r2!, {r0, r1, r4}
    3d00:	c313      	stmia	r3!, {r0, r1, r4}
    3d02:	ca13      	ldmia	r2!, {r0, r1, r4}
    3d04:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d06:	2300      	movs	r3, #0
    3d08:	627b      	str	r3, [r7, #36]	; 0x24
    3d0a:	e00d      	b.n	3d28 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	220c      	movs	r2, #12
    3d10:	18ba      	adds	r2, r7, r2
    3d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3d14:	0089      	lsls	r1, r1, #2
    3d16:	588a      	ldr	r2, [r1, r2]
    3d18:	4293      	cmp	r3, r2
    3d1a:	d102      	bne.n	3d22 <_sercom_get_sercom_inst_index+0x32>
			return i;
    3d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d1e:	b2db      	uxtb	r3, r3
    3d20:	e006      	b.n	3d30 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d24:	3301      	adds	r3, #1
    3d26:	627b      	str	r3, [r7, #36]	; 0x24
    3d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d2a:	2b05      	cmp	r3, #5
    3d2c:	d9ee      	bls.n	3d0c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3d2e:	2300      	movs	r3, #0
}
    3d30:	1c18      	adds	r0, r3, #0
    3d32:	46bd      	mov	sp, r7
    3d34:	b00b      	add	sp, #44	; 0x2c
    3d36:	bd90      	pop	{r4, r7, pc}
    3d38:	00006f5c 	.word	0x00006f5c

00003d3c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b082      	sub	sp, #8
    3d40:	af00      	add	r7, sp, #0
    3d42:	1c02      	adds	r2, r0, #0
    3d44:	1dfb      	adds	r3, r7, #7
    3d46:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3d48:	46bd      	mov	sp, r7
    3d4a:	b002      	add	sp, #8
    3d4c:	bd80      	pop	{r7, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)

00003d50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3d50:	b580      	push	{r7, lr}
    3d52:	b084      	sub	sp, #16
    3d54:	af00      	add	r7, sp, #0
    3d56:	1c02      	adds	r2, r0, #0
    3d58:	6039      	str	r1, [r7, #0]
    3d5a:	1dfb      	adds	r3, r7, #7
    3d5c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3d5e:	4b13      	ldr	r3, [pc, #76]	; (3dac <_sercom_set_handler+0x5c>)
    3d60:	781b      	ldrb	r3, [r3, #0]
    3d62:	2201      	movs	r2, #1
    3d64:	4053      	eors	r3, r2
    3d66:	b2db      	uxtb	r3, r3
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d015      	beq.n	3d98 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d6c:	2300      	movs	r3, #0
    3d6e:	60fb      	str	r3, [r7, #12]
    3d70:	e00c      	b.n	3d8c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3d72:	4b0f      	ldr	r3, [pc, #60]	; (3db0 <_sercom_set_handler+0x60>)
    3d74:	68fa      	ldr	r2, [r7, #12]
    3d76:	0092      	lsls	r2, r2, #2
    3d78:	490e      	ldr	r1, [pc, #56]	; (3db4 <_sercom_set_handler+0x64>)
    3d7a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3d7c:	4b0e      	ldr	r3, [pc, #56]	; (3db8 <_sercom_set_handler+0x68>)
    3d7e:	68fa      	ldr	r2, [r7, #12]
    3d80:	0092      	lsls	r2, r2, #2
    3d82:	2100      	movs	r1, #0
    3d84:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	3301      	adds	r3, #1
    3d8a:	60fb      	str	r3, [r7, #12]
    3d8c:	68fb      	ldr	r3, [r7, #12]
    3d8e:	2b05      	cmp	r3, #5
    3d90:	d9ef      	bls.n	3d72 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3d92:	4b06      	ldr	r3, [pc, #24]	; (3dac <_sercom_set_handler+0x5c>)
    3d94:	2201      	movs	r2, #1
    3d96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3d98:	1dfb      	adds	r3, r7, #7
    3d9a:	781a      	ldrb	r2, [r3, #0]
    3d9c:	4b04      	ldr	r3, [pc, #16]	; (3db0 <_sercom_set_handler+0x60>)
    3d9e:	0092      	lsls	r2, r2, #2
    3da0:	6839      	ldr	r1, [r7, #0]
    3da2:	50d1      	str	r1, [r2, r3]
}
    3da4:	46bd      	mov	sp, r7
    3da6:	b004      	add	sp, #16
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	200000a6 	.word	0x200000a6
    3db0:	200000a8 	.word	0x200000a8
    3db4:	00003d3d 	.word	0x00003d3d
    3db8:	20000758 	.word	0x20000758

00003dbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3dbc:	b590      	push	{r4, r7, lr}
    3dbe:	b085      	sub	sp, #20
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3dc4:	2308      	movs	r3, #8
    3dc6:	18fa      	adds	r2, r7, r3
    3dc8:	4b0e      	ldr	r3, [pc, #56]	; (3e04 <_sercom_get_interrupt_vector+0x48>)
    3dca:	1c11      	adds	r1, r2, #0
    3dcc:	1c1a      	adds	r2, r3, #0
    3dce:	2306      	movs	r3, #6
    3dd0:	1c08      	adds	r0, r1, #0
    3dd2:	1c11      	adds	r1, r2, #0
    3dd4:	1c1a      	adds	r2, r3, #0
    3dd6:	4b0c      	ldr	r3, [pc, #48]	; (3e08 <_sercom_get_interrupt_vector+0x4c>)
    3dd8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3dda:	230f      	movs	r3, #15
    3ddc:	18fc      	adds	r4, r7, r3
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	1c18      	adds	r0, r3, #0
    3de2:	4b0a      	ldr	r3, [pc, #40]	; (3e0c <_sercom_get_interrupt_vector+0x50>)
    3de4:	4798      	blx	r3
    3de6:	1c03      	adds	r3, r0, #0
    3de8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3dea:	230f      	movs	r3, #15
    3dec:	18fb      	adds	r3, r7, r3
    3dee:	781b      	ldrb	r3, [r3, #0]
    3df0:	2208      	movs	r2, #8
    3df2:	18ba      	adds	r2, r7, r2
    3df4:	5cd3      	ldrb	r3, [r2, r3]
    3df6:	b2db      	uxtb	r3, r3
    3df8:	b25b      	sxtb	r3, r3
}
    3dfa:	1c18      	adds	r0, r3, #0
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b005      	add	sp, #20
    3e00:	bd90      	pop	{r4, r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00006f74 	.word	0x00006f74
    3e08:	000065f1 	.word	0x000065f1
    3e0c:	00003cf1 	.word	0x00003cf1

00003e10 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3e10:	b580      	push	{r7, lr}
    3e12:	af00      	add	r7, sp, #0
    3e14:	4b02      	ldr	r3, [pc, #8]	; (3e20 <SERCOM0_Handler+0x10>)
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	2000      	movs	r0, #0
    3e1a:	4798      	blx	r3
    3e1c:	46bd      	mov	sp, r7
    3e1e:	bd80      	pop	{r7, pc}
    3e20:	200000a8 	.word	0x200000a8

00003e24 <SERCOM1_Handler>:
    3e24:	b580      	push	{r7, lr}
    3e26:	af00      	add	r7, sp, #0
    3e28:	4b02      	ldr	r3, [pc, #8]	; (3e34 <SERCOM1_Handler+0x10>)
    3e2a:	685b      	ldr	r3, [r3, #4]
    3e2c:	2001      	movs	r0, #1
    3e2e:	4798      	blx	r3
    3e30:	46bd      	mov	sp, r7
    3e32:	bd80      	pop	{r7, pc}
    3e34:	200000a8 	.word	0x200000a8

00003e38 <SERCOM2_Handler>:
    3e38:	b580      	push	{r7, lr}
    3e3a:	af00      	add	r7, sp, #0
    3e3c:	4b02      	ldr	r3, [pc, #8]	; (3e48 <SERCOM2_Handler+0x10>)
    3e3e:	689b      	ldr	r3, [r3, #8]
    3e40:	2002      	movs	r0, #2
    3e42:	4798      	blx	r3
    3e44:	46bd      	mov	sp, r7
    3e46:	bd80      	pop	{r7, pc}
    3e48:	200000a8 	.word	0x200000a8

00003e4c <SERCOM3_Handler>:
    3e4c:	b580      	push	{r7, lr}
    3e4e:	af00      	add	r7, sp, #0
    3e50:	4b02      	ldr	r3, [pc, #8]	; (3e5c <SERCOM3_Handler+0x10>)
    3e52:	68db      	ldr	r3, [r3, #12]
    3e54:	2003      	movs	r0, #3
    3e56:	4798      	blx	r3
    3e58:	46bd      	mov	sp, r7
    3e5a:	bd80      	pop	{r7, pc}
    3e5c:	200000a8 	.word	0x200000a8

00003e60 <SERCOM4_Handler>:
    3e60:	b580      	push	{r7, lr}
    3e62:	af00      	add	r7, sp, #0
    3e64:	4b02      	ldr	r3, [pc, #8]	; (3e70 <SERCOM4_Handler+0x10>)
    3e66:	691b      	ldr	r3, [r3, #16]
    3e68:	2004      	movs	r0, #4
    3e6a:	4798      	blx	r3
    3e6c:	46bd      	mov	sp, r7
    3e6e:	bd80      	pop	{r7, pc}
    3e70:	200000a8 	.word	0x200000a8

00003e74 <SERCOM5_Handler>:
    3e74:	b580      	push	{r7, lr}
    3e76:	af00      	add	r7, sp, #0
    3e78:	4b02      	ldr	r3, [pc, #8]	; (3e84 <SERCOM5_Handler+0x10>)
    3e7a:	695b      	ldr	r3, [r3, #20]
    3e7c:	2005      	movs	r0, #5
    3e7e:	4798      	blx	r3
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	200000a8 	.word	0x200000a8

00003e88 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	b082      	sub	sp, #8
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	2280      	movs	r2, #128	; 0x80
    3e94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	2200      	movs	r2, #0
    3e9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2201      	movs	r2, #1
    3ea0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	2200      	movs	r2, #0
    3ea6:	70da      	strb	r2, [r3, #3]
}
    3ea8:	46bd      	mov	sp, r7
    3eaa:	b002      	add	sp, #8
    3eac:	bd80      	pop	{r7, pc}
    3eae:	46c0      	nop			; (mov r8, r8)

00003eb0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3eb0:	b580      	push	{r7, lr}
    3eb2:	b084      	sub	sp, #16
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	1c02      	adds	r2, r0, #0
    3eb8:	1dfb      	adds	r3, r7, #7
    3eba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ebc:	230f      	movs	r3, #15
    3ebe:	18fb      	adds	r3, r7, r3
    3ec0:	1dfa      	adds	r2, r7, #7
    3ec2:	7812      	ldrb	r2, [r2, #0]
    3ec4:	09d2      	lsrs	r2, r2, #7
    3ec6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ec8:	230e      	movs	r3, #14
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	1dfa      	adds	r2, r7, #7
    3ece:	7812      	ldrb	r2, [r2, #0]
    3ed0:	0952      	lsrs	r2, r2, #5
    3ed2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ed4:	4b0d      	ldr	r3, [pc, #52]	; (3f0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ed6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ed8:	230f      	movs	r3, #15
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	781b      	ldrb	r3, [r3, #0]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d10f      	bne.n	3f02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ee2:	230f      	movs	r3, #15
    3ee4:	18fb      	adds	r3, r7, r3
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	009b      	lsls	r3, r3, #2
    3eea:	2210      	movs	r2, #16
    3eec:	4694      	mov	ip, r2
    3eee:	44bc      	add	ip, r7
    3ef0:	4463      	add	r3, ip
    3ef2:	3b08      	subs	r3, #8
    3ef4:	681a      	ldr	r2, [r3, #0]
    3ef6:	230e      	movs	r3, #14
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	781b      	ldrb	r3, [r3, #0]
    3efc:	01db      	lsls	r3, r3, #7
    3efe:	18d3      	adds	r3, r2, r3
    3f00:	e000      	b.n	3f04 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3f02:	2300      	movs	r3, #0
	}
}
    3f04:	1c18      	adds	r0, r3, #0
    3f06:	46bd      	mov	sp, r7
    3f08:	b004      	add	sp, #16
    3f0a:	bd80      	pop	{r7, pc}
    3f0c:	41004400 	.word	0x41004400

00003f10 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f10:	b580      	push	{r7, lr}
    3f12:	b082      	sub	sp, #8
    3f14:	af00      	add	r7, sp, #0
    3f16:	1c02      	adds	r2, r0, #0
    3f18:	1dfb      	adds	r3, r7, #7
    3f1a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f1c:	1dfb      	adds	r3, r7, #7
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	1c18      	adds	r0, r3, #0
    3f22:	4b03      	ldr	r3, [pc, #12]	; (3f30 <port_get_group_from_gpio_pin+0x20>)
    3f24:	4798      	blx	r3
    3f26:	1c03      	adds	r3, r0, #0
}
    3f28:	1c18      	adds	r0, r3, #0
    3f2a:	46bd      	mov	sp, r7
    3f2c:	b002      	add	sp, #8
    3f2e:	bd80      	pop	{r7, pc}
    3f30:	00003eb1 	.word	0x00003eb1

00003f34 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b084      	sub	sp, #16
    3f38:	af00      	add	r7, sp, #0
    3f3a:	1c02      	adds	r2, r0, #0
    3f3c:	1dfb      	adds	r3, r7, #7
    3f3e:	701a      	strb	r2, [r3, #0]
    3f40:	1dbb      	adds	r3, r7, #6
    3f42:	1c0a      	adds	r2, r1, #0
    3f44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f46:	1dfb      	adds	r3, r7, #7
    3f48:	781b      	ldrb	r3, [r3, #0]
    3f4a:	1c18      	adds	r0, r3, #0
    3f4c:	4b0c      	ldr	r3, [pc, #48]	; (3f80 <port_pin_set_output_level+0x4c>)
    3f4e:	4798      	blx	r3
    3f50:	1c03      	adds	r3, r0, #0
    3f52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f54:	1dfb      	adds	r3, r7, #7
    3f56:	781b      	ldrb	r3, [r3, #0]
    3f58:	221f      	movs	r2, #31
    3f5a:	4013      	ands	r3, r2
    3f5c:	2201      	movs	r2, #1
    3f5e:	409a      	lsls	r2, r3
    3f60:	1c13      	adds	r3, r2, #0
    3f62:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3f64:	1dbb      	adds	r3, r7, #6
    3f66:	781b      	ldrb	r3, [r3, #0]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d003      	beq.n	3f74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3f6c:	68fb      	ldr	r3, [r7, #12]
    3f6e:	68ba      	ldr	r2, [r7, #8]
    3f70:	619a      	str	r2, [r3, #24]
    3f72:	e002      	b.n	3f7a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	68ba      	ldr	r2, [r7, #8]
    3f78:	615a      	str	r2, [r3, #20]
	}
}
    3f7a:	46bd      	mov	sp, r7
    3f7c:	b004      	add	sp, #16
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	00003f11 	.word	0x00003f11

00003f84 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	b082      	sub	sp, #8
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	2200      	movs	r2, #0
    3f90:	701a      	strb	r2, [r3, #0]
}
    3f92:	46bd      	mov	sp, r7
    3f94:	b002      	add	sp, #8
    3f96:	bd80      	pop	{r7, pc}

00003f98 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	1c02      	adds	r2, r0, #0
    3fa0:	6039      	str	r1, [r7, #0]
    3fa2:	1dfb      	adds	r3, r7, #7
    3fa4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3fa6:	1dfb      	adds	r3, r7, #7
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	2b01      	cmp	r3, #1
    3fac:	d00a      	beq.n	3fc4 <system_apb_clock_set_mask+0x2c>
    3fae:	2b02      	cmp	r3, #2
    3fb0:	d00f      	beq.n	3fd2 <system_apb_clock_set_mask+0x3a>
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d114      	bne.n	3fe0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3fb6:	4b0e      	ldr	r3, [pc, #56]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fb8:	4a0d      	ldr	r2, [pc, #52]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fba:	6991      	ldr	r1, [r2, #24]
    3fbc:	683a      	ldr	r2, [r7, #0]
    3fbe:	430a      	orrs	r2, r1
    3fc0:	619a      	str	r2, [r3, #24]
			break;
    3fc2:	e00f      	b.n	3fe4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3fc4:	4b0a      	ldr	r3, [pc, #40]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fc6:	4a0a      	ldr	r2, [pc, #40]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fc8:	69d1      	ldr	r1, [r2, #28]
    3fca:	683a      	ldr	r2, [r7, #0]
    3fcc:	430a      	orrs	r2, r1
    3fce:	61da      	str	r2, [r3, #28]
			break;
    3fd0:	e008      	b.n	3fe4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3fd2:	4b07      	ldr	r3, [pc, #28]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fd4:	4a06      	ldr	r2, [pc, #24]	; (3ff0 <system_apb_clock_set_mask+0x58>)
    3fd6:	6a11      	ldr	r1, [r2, #32]
    3fd8:	683a      	ldr	r2, [r7, #0]
    3fda:	430a      	orrs	r2, r1
    3fdc:	621a      	str	r2, [r3, #32]
			break;
    3fde:	e001      	b.n	3fe4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3fe0:	2317      	movs	r3, #23
    3fe2:	e000      	b.n	3fe6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3fe4:	2300      	movs	r3, #0
}
    3fe6:	1c18      	adds	r0, r3, #0
    3fe8:	46bd      	mov	sp, r7
    3fea:	b002      	add	sp, #8
    3fec:	bd80      	pop	{r7, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	40000400 	.word	0x40000400

00003ff4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3ff8:	4b05      	ldr	r3, [pc, #20]	; (4010 <system_is_debugger_present+0x1c>)
    3ffa:	789b      	ldrb	r3, [r3, #2]
    3ffc:	b2db      	uxtb	r3, r3
    3ffe:	1c1a      	adds	r2, r3, #0
    4000:	2302      	movs	r3, #2
    4002:	4013      	ands	r3, r2
    4004:	1e5a      	subs	r2, r3, #1
    4006:	4193      	sbcs	r3, r2
    4008:	b2db      	uxtb	r3, r3
}
    400a:	1c18      	adds	r0, r3, #0
    400c:	46bd      	mov	sp, r7
    400e:	bd80      	pop	{r7, pc}
    4010:	41002000 	.word	0x41002000

00004014 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4014:	b580      	push	{r7, lr}
    4016:	b084      	sub	sp, #16
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4022:	68fb      	ldr	r3, [r7, #12]
    4024:	7b9b      	ldrb	r3, [r3, #14]
    4026:	b2db      	uxtb	r3, r3
    4028:	1c1a      	adds	r2, r3, #0
    402a:	2301      	movs	r3, #1
    402c:	4013      	ands	r3, r2
    402e:	1e5a      	subs	r2, r3, #1
    4030:	4193      	sbcs	r3, r2
    4032:	b2db      	uxtb	r3, r3
}
    4034:	1c18      	adds	r0, r3, #0
    4036:	46bd      	mov	sp, r7
    4038:	b004      	add	sp, #16
    403a:	bd80      	pop	{r7, pc}

0000403c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    403c:	b580      	push	{r7, lr}
    403e:	b084      	sub	sp, #16
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    404a:	68fb      	ldr	r3, [r7, #12]
    404c:	7b9b      	ldrb	r3, [r3, #14]
    404e:	b2db      	uxtb	r3, r3
    4050:	1c1a      	adds	r2, r3, #0
    4052:	2304      	movs	r3, #4
    4054:	4013      	ands	r3, r2
    4056:	1e5a      	subs	r2, r3, #1
    4058:	4193      	sbcs	r3, r2
    405a:	b2db      	uxtb	r3, r3
}
    405c:	1c18      	adds	r0, r3, #0
    405e:	46bd      	mov	sp, r7
    4060:	b004      	add	sp, #16
    4062:	bd80      	pop	{r7, pc}

00004064 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4064:	b580      	push	{r7, lr}
    4066:	b084      	sub	sp, #16
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
    406c:	1c0a      	adds	r2, r1, #0
    406e:	1cbb      	adds	r3, r7, #2
    4070:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	1c18      	adds	r0, r3, #0
    407c:	4b0b      	ldr	r3, [pc, #44]	; (40ac <spi_write+0x48>)
    407e:	4798      	blx	r3
    4080:	1c03      	adds	r3, r0, #0
    4082:	1c1a      	adds	r2, r3, #0
    4084:	2301      	movs	r3, #1
    4086:	4053      	eors	r3, r2
    4088:	b2db      	uxtb	r3, r3
    408a:	2b00      	cmp	r3, #0
    408c:	d001      	beq.n	4092 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    408e:	2305      	movs	r3, #5
    4090:	e007      	b.n	40a2 <spi_write+0x3e>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4092:	1cbb      	adds	r3, r7, #2
    4094:	881b      	ldrh	r3, [r3, #0]
    4096:	05db      	lsls	r3, r3, #23
    4098:	0ddb      	lsrs	r3, r3, #23
    409a:	b29a      	uxth	r2, r3
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    40a0:	2300      	movs	r3, #0
}
    40a2:	1c18      	adds	r0, r3, #0
    40a4:	46bd      	mov	sp, r7
    40a6:	b004      	add	sp, #16
    40a8:	bd80      	pop	{r7, pc}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	00004015 	.word	0x00004015

000040b0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b084      	sub	sp, #16
    40b4:	af00      	add	r7, sp, #0
    40b6:	6078      	str	r0, [r7, #4]
    40b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	1c18      	adds	r0, r3, #0
    40c4:	4b1e      	ldr	r3, [pc, #120]	; (4140 <spi_read+0x90>)
    40c6:	4798      	blx	r3
    40c8:	1c03      	adds	r3, r0, #0
    40ca:	1c1a      	adds	r2, r3, #0
    40cc:	2301      	movs	r3, #1
    40ce:	4053      	eors	r3, r2
    40d0:	b2db      	uxtb	r3, r3
    40d2:	2b00      	cmp	r3, #0
    40d4:	d001      	beq.n	40da <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    40d6:	2310      	movs	r3, #16
    40d8:	e02d      	b.n	4136 <spi_read+0x86>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    40da:	230f      	movs	r3, #15
    40dc:	18fb      	adds	r3, r7, r3
    40de:	2200      	movs	r2, #0
    40e0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40e2:	68bb      	ldr	r3, [r7, #8]
    40e4:	8a1b      	ldrh	r3, [r3, #16]
    40e6:	b29b      	uxth	r3, r3
    40e8:	1c1a      	adds	r2, r3, #0
    40ea:	2304      	movs	r3, #4
    40ec:	4013      	ands	r3, r2
    40ee:	d00b      	beq.n	4108 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    40f0:	230f      	movs	r3, #15
    40f2:	18fb      	adds	r3, r7, r3
    40f4:	221e      	movs	r2, #30
    40f6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    40f8:	68bb      	ldr	r3, [r7, #8]
    40fa:	8a1b      	ldrh	r3, [r3, #16]
    40fc:	b29b      	uxth	r3, r3
    40fe:	2204      	movs	r2, #4
    4100:	4313      	orrs	r3, r2
    4102:	b29a      	uxth	r2, r3
    4104:	68bb      	ldr	r3, [r7, #8]
    4106:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	799b      	ldrb	r3, [r3, #6]
    410c:	2b01      	cmp	r3, #1
    410e:	d108      	bne.n	4122 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4110:	68bb      	ldr	r3, [r7, #8]
    4112:	8b1b      	ldrh	r3, [r3, #24]
    4114:	b29b      	uxth	r3, r3
    4116:	05db      	lsls	r3, r3, #23
    4118:	0ddb      	lsrs	r3, r3, #23
    411a:	b29a      	uxth	r2, r3
    411c:	683b      	ldr	r3, [r7, #0]
    411e:	801a      	strh	r2, [r3, #0]
    4120:	e006      	b.n	4130 <spi_read+0x80>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4122:	68bb      	ldr	r3, [r7, #8]
    4124:	8b1b      	ldrh	r3, [r3, #24]
    4126:	b29b      	uxth	r3, r3
    4128:	b2db      	uxtb	r3, r3
    412a:	b29a      	uxth	r2, r3
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
}
    4136:	1c18      	adds	r0, r3, #0
    4138:	46bd      	mov	sp, r7
    413a:	b004      	add	sp, #16
    413c:	bd80      	pop	{r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	0000403d 	.word	0x0000403d

00004144 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4144:	b590      	push	{r4, r7, lr}
    4146:	b093      	sub	sp, #76	; 0x4c
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
    414c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	681b      	ldr	r3, [r3, #0]
    4152:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    415a:	231c      	movs	r3, #28
    415c:	18fb      	adds	r3, r7, r3
    415e:	1c18      	adds	r0, r3, #0
    4160:	4b7a      	ldr	r3, [pc, #488]	; (434c <_spi_set_config+0x208>)
    4162:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4164:	231c      	movs	r3, #28
    4166:	18fb      	adds	r3, r7, r3
    4168:	2200      	movs	r2, #0
    416a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    416c:	683b      	ldr	r3, [r7, #0]
    416e:	781b      	ldrb	r3, [r3, #0]
    4170:	2b00      	cmp	r3, #0
    4172:	d103      	bne.n	417c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4174:	231c      	movs	r3, #28
    4176:	18fb      	adds	r3, r7, r3
    4178:	2200      	movs	r2, #0
    417a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    417c:	683b      	ldr	r3, [r7, #0]
    417e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4180:	230c      	movs	r3, #12
    4182:	18fb      	adds	r3, r7, r3
    4184:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    418a:	230c      	movs	r3, #12
    418c:	18fb      	adds	r3, r7, r3
    418e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4190:	683b      	ldr	r3, [r7, #0]
    4192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4194:	230c      	movs	r3, #12
    4196:	18fb      	adds	r3, r7, r3
    4198:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    419a:	683b      	ldr	r3, [r7, #0]
    419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    419e:	230c      	movs	r3, #12
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    41a4:	2347      	movs	r3, #71	; 0x47
    41a6:	18fb      	adds	r3, r7, r3
    41a8:	2200      	movs	r2, #0
    41aa:	701a      	strb	r2, [r3, #0]
    41ac:	e02c      	b.n	4208 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    41ae:	2347      	movs	r3, #71	; 0x47
    41b0:	18fb      	adds	r3, r7, r3
    41b2:	781a      	ldrb	r2, [r3, #0]
    41b4:	230c      	movs	r3, #12
    41b6:	18fb      	adds	r3, r7, r3
    41b8:	0092      	lsls	r2, r2, #2
    41ba:	58d3      	ldr	r3, [r2, r3]
    41bc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    41be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41c0:	2b00      	cmp	r3, #0
    41c2:	d109      	bne.n	41d8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    41c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    41c6:	2347      	movs	r3, #71	; 0x47
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	1c10      	adds	r0, r2, #0
    41ce:	1c19      	adds	r1, r3, #0
    41d0:	4b5f      	ldr	r3, [pc, #380]	; (4350 <_spi_set_config+0x20c>)
    41d2:	4798      	blx	r3
    41d4:	1c03      	adds	r3, r0, #0
    41d6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    41d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41da:	3301      	adds	r3, #1
    41dc:	d00d      	beq.n	41fa <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    41de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41e0:	b2da      	uxtb	r2, r3
    41e2:	231c      	movs	r3, #28
    41e4:	18fb      	adds	r3, r7, r3
    41e6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    41e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41ea:	0c1b      	lsrs	r3, r3, #16
    41ec:	b2da      	uxtb	r2, r3
    41ee:	231c      	movs	r3, #28
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	1c10      	adds	r0, r2, #0
    41f4:	1c19      	adds	r1, r3, #0
    41f6:	4b57      	ldr	r3, [pc, #348]	; (4354 <_spi_set_config+0x210>)
    41f8:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    41fa:	2347      	movs	r3, #71	; 0x47
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	781a      	ldrb	r2, [r3, #0]
    4200:	2347      	movs	r3, #71	; 0x47
    4202:	18fb      	adds	r3, r7, r3
    4204:	3201      	adds	r2, #1
    4206:	701a      	strb	r2, [r3, #0]
    4208:	2347      	movs	r3, #71	; 0x47
    420a:	18fb      	adds	r3, r7, r3
    420c:	781b      	ldrb	r3, [r3, #0]
    420e:	2b03      	cmp	r3, #3
    4210:	d9cd      	bls.n	41ae <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    4212:	683b      	ldr	r3, [r7, #0]
    4214:	781a      	ldrb	r2, [r3, #0]
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	7c1a      	ldrb	r2, [r3, #16]
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4222:	683b      	ldr	r3, [r7, #0]
    4224:	7c9a      	ldrb	r2, [r3, #18]
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    422a:	230a      	movs	r3, #10
    422c:	18fb      	adds	r3, r7, r3
    422e:	2200      	movs	r2, #0
    4230:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4232:	2300      	movs	r3, #0
    4234:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4236:	2300      	movs	r3, #0
    4238:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    423a:	683b      	ldr	r3, [r7, #0]
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	2b01      	cmp	r3, #1
    4240:	d12b      	bne.n	429a <_spi_set_config+0x156>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	1c18      	adds	r0, r3, #0
    4248:	4b43      	ldr	r3, [pc, #268]	; (4358 <_spi_set_config+0x214>)
    424a:	4798      	blx	r3
    424c:	1c03      	adds	r3, r0, #0
    424e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4252:	330d      	adds	r3, #13
    4254:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4256:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4258:	b2db      	uxtb	r3, r3
    425a:	1c18      	adds	r0, r3, #0
    425c:	4b3f      	ldr	r3, [pc, #252]	; (435c <_spi_set_config+0x218>)
    425e:	4798      	blx	r3
    4260:	1c03      	adds	r3, r0, #0
    4262:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4264:	683b      	ldr	r3, [r7, #0]
    4266:	6959      	ldr	r1, [r3, #20]
    4268:	2323      	movs	r3, #35	; 0x23
    426a:	18fc      	adds	r4, r7, r3
    426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    426e:	230a      	movs	r3, #10
    4270:	18fb      	adds	r3, r7, r3
    4272:	1c08      	adds	r0, r1, #0
    4274:	1c11      	adds	r1, r2, #0
    4276:	1c1a      	adds	r2, r3, #0
    4278:	4b39      	ldr	r3, [pc, #228]	; (4360 <_spi_set_config+0x21c>)
    427a:	4798      	blx	r3
    427c:	1c03      	adds	r3, r0, #0
    427e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4280:	2323      	movs	r3, #35	; 0x23
    4282:	18fb      	adds	r3, r7, r3
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d001      	beq.n	428e <_spi_set_config+0x14a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    428a:	2317      	movs	r3, #23
    428c:	e05a      	b.n	4344 <_spi_set_config+0x200>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    428e:	230a      	movs	r3, #10
    4290:	18fb      	adds	r3, r7, r3
    4292:	881b      	ldrh	r3, [r3, #0]
    4294:	b2da      	uxtb	r2, r3
    4296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4298:	729a      	strb	r2, [r3, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    429a:	683b      	ldr	r3, [r7, #0]
    429c:	781b      	ldrb	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d119      	bne.n	42d6 <_spi_set_config+0x192>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    42a2:	683b      	ldr	r3, [r7, #0]
    42a4:	695b      	ldr	r3, [r3, #20]
    42a6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	8b1b      	ldrh	r3, [r3, #24]
    42ac:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    42ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42b0:	695b      	ldr	r3, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    42b2:	683a      	ldr	r2, [r7, #0]
    42b4:	7e92      	ldrb	r2, [r2, #26]
    42b6:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    42b8:	683a      	ldr	r2, [r7, #0]
    42ba:	7ed2      	ldrb	r2, [r2, #27]
    42bc:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    42be:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    42c0:	431a      	orrs	r2, r3
    42c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42c4:	615a      	str	r2, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    42c6:	683b      	ldr	r3, [r7, #0]
    42c8:	7f1b      	ldrb	r3, [r3, #28]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d003      	beq.n	42d6 <_spi_set_config+0x192>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    42ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42d0:	2240      	movs	r2, #64	; 0x40
    42d2:	4313      	orrs	r3, r2
    42d4:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    42d6:	683b      	ldr	r3, [r7, #0]
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42dc:	4313      	orrs	r3, r2
    42de:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	689b      	ldr	r3, [r3, #8]
    42e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42e6:	4313      	orrs	r3, r2
    42e8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    42ea:	683b      	ldr	r3, [r7, #0]
    42ec:	68db      	ldr	r3, [r3, #12]
    42ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42f0:	4313      	orrs	r3, r2
    42f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    42f4:	683b      	ldr	r3, [r7, #0]
    42f6:	7c1b      	ldrb	r3, [r3, #16]
    42f8:	1c1a      	adds	r2, r3, #0
    42fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42fc:	4313      	orrs	r3, r2
    42fe:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	7c5b      	ldrb	r3, [r3, #17]
    4304:	2b00      	cmp	r3, #0
    4306:	d103      	bne.n	4310 <_spi_set_config+0x1cc>
    4308:	4b16      	ldr	r3, [pc, #88]	; (4364 <_spi_set_config+0x220>)
    430a:	4798      	blx	r3
    430c:	1e03      	subs	r3, r0, #0
    430e:	d003      	beq.n	4318 <_spi_set_config+0x1d4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	4313      	orrs	r3, r2
    4316:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4318:	683b      	ldr	r3, [r7, #0]
    431a:	7c9b      	ldrb	r3, [r3, #18]
    431c:	2b00      	cmp	r3, #0
    431e:	d004      	beq.n	432a <_spi_set_config+0x1e6>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4322:	2280      	movs	r2, #128	; 0x80
    4324:	0292      	lsls	r2, r2, #10
    4326:	4313      	orrs	r3, r2
    4328:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    432c:	681a      	ldr	r2, [r3, #0]
    432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4330:	431a      	orrs	r2, r3
    4332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4334:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4338:	685a      	ldr	r2, [r3, #4]
    433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    433c:	431a      	orrs	r2, r3
    433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4340:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4342:	2300      	movs	r3, #0
}
    4344:	1c18      	adds	r0, r3, #0
    4346:	46bd      	mov	sp, r7
    4348:	b013      	add	sp, #76	; 0x4c
    434a:	bd90      	pop	{r4, r7, pc}
    434c:	00003e89 	.word	0x00003e89
    4350:	00003b35 	.word	0x00003b35
    4354:	00005a91 	.word	0x00005a91
    4358:	00003cf1 	.word	0x00003cf1
    435c:	000058c9 	.word	0x000058c9
    4360:	0000383d 	.word	0x0000383d
    4364:	00003ff5 	.word	0x00003ff5

00004368 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4368:	b590      	push	{r4, r7, lr}
    436a:	b08b      	sub	sp, #44	; 0x2c
    436c:	af00      	add	r7, sp, #0
    436e:	60f8      	str	r0, [r7, #12]
    4370:	60b9      	str	r1, [r7, #8]
    4372:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	68ba      	ldr	r2, [r7, #8]
    4378:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4380:	6a3b      	ldr	r3, [r7, #32]
    4382:	681b      	ldr	r3, [r3, #0]
    4384:	2202      	movs	r2, #2
    4386:	4013      	ands	r3, r2
    4388:	d001      	beq.n	438e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    438a:	231c      	movs	r3, #28
    438c:	e0a5      	b.n	44da <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    438e:	6a3b      	ldr	r3, [r7, #32]
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	2201      	movs	r2, #1
    4394:	4013      	ands	r3, r2
    4396:	d001      	beq.n	439c <spi_init+0x34>
		return STATUS_BUSY;
    4398:	2305      	movs	r3, #5
    439a:	e09e      	b.n	44da <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    439c:	68fb      	ldr	r3, [r7, #12]
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	1c18      	adds	r0, r3, #0
    43a2:	4b50      	ldr	r3, [pc, #320]	; (44e4 <spi_init+0x17c>)
    43a4:	4798      	blx	r3
    43a6:	1c03      	adds	r3, r0, #0
    43a8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    43aa:	69fb      	ldr	r3, [r7, #28]
    43ac:	3302      	adds	r3, #2
    43ae:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43b0:	69fb      	ldr	r3, [r7, #28]
    43b2:	330d      	adds	r3, #13
    43b4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    43b6:	69bb      	ldr	r3, [r7, #24]
    43b8:	2201      	movs	r2, #1
    43ba:	409a      	lsls	r2, r3
    43bc:	1c13      	adds	r3, r2, #0
    43be:	2002      	movs	r0, #2
    43c0:	1c19      	adds	r1, r3, #0
    43c2:	4b49      	ldr	r3, [pc, #292]	; (44e8 <spi_init+0x180>)
    43c4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    43c6:	2310      	movs	r3, #16
    43c8:	18fb      	adds	r3, r7, r3
    43ca:	1c18      	adds	r0, r3, #0
    43cc:	4b47      	ldr	r3, [pc, #284]	; (44ec <spi_init+0x184>)
    43ce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	2220      	movs	r2, #32
    43d4:	5c9a      	ldrb	r2, [r3, r2]
    43d6:	2310      	movs	r3, #16
    43d8:	18fb      	adds	r3, r7, r3
    43da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    43dc:	697b      	ldr	r3, [r7, #20]
    43de:	b2da      	uxtb	r2, r3
    43e0:	2310      	movs	r3, #16
    43e2:	18fb      	adds	r3, r7, r3
    43e4:	1c10      	adds	r0, r2, #0
    43e6:	1c19      	adds	r1, r3, #0
    43e8:	4b41      	ldr	r3, [pc, #260]	; (44f0 <spi_init+0x188>)
    43ea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    43ec:	697b      	ldr	r3, [r7, #20]
    43ee:	b2db      	uxtb	r3, r3
    43f0:	1c18      	adds	r0, r3, #0
    43f2:	4b40      	ldr	r3, [pc, #256]	; (44f4 <spi_init+0x18c>)
    43f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	2220      	movs	r2, #32
    43fa:	5c9b      	ldrb	r3, [r3, r2]
    43fc:	1c18      	adds	r0, r3, #0
    43fe:	2100      	movs	r1, #0
    4400:	4b3d      	ldr	r3, [pc, #244]	; (44f8 <spi_init+0x190>)
    4402:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	2b01      	cmp	r3, #1
    440a:	d105      	bne.n	4418 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    440c:	6a3b      	ldr	r3, [r7, #32]
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	220c      	movs	r2, #12
    4412:	431a      	orrs	r2, r3
    4414:	6a3b      	ldr	r3, [r7, #32]
    4416:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    4420:	6a3b      	ldr	r3, [r7, #32]
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	2208      	movs	r2, #8
    4426:	431a      	orrs	r2, r3
    4428:	6a3b      	ldr	r3, [r7, #32]
    442a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    442c:	2327      	movs	r3, #39	; 0x27
    442e:	18fb      	adds	r3, r7, r3
    4430:	2200      	movs	r2, #0
    4432:	701a      	strb	r2, [r3, #0]
    4434:	e00f      	b.n	4456 <spi_init+0xee>
		module->callback[i]        = NULL;
    4436:	2327      	movs	r3, #39	; 0x27
    4438:	18fb      	adds	r3, r7, r3
    443a:	781b      	ldrb	r3, [r3, #0]
    443c:	68fa      	ldr	r2, [r7, #12]
    443e:	3302      	adds	r3, #2
    4440:	009b      	lsls	r3, r3, #2
    4442:	18d3      	adds	r3, r2, r3
    4444:	2200      	movs	r2, #0
    4446:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4448:	2327      	movs	r3, #39	; 0x27
    444a:	18fb      	adds	r3, r7, r3
    444c:	781a      	ldrb	r2, [r3, #0]
    444e:	2327      	movs	r3, #39	; 0x27
    4450:	18fb      	adds	r3, r7, r3
    4452:	3201      	adds	r2, #1
    4454:	701a      	strb	r2, [r3, #0]
    4456:	2327      	movs	r3, #39	; 0x27
    4458:	18fb      	adds	r3, r7, r3
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	2b04      	cmp	r3, #4
    445e:	d9ea      	bls.n	4436 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    4460:	68fb      	ldr	r3, [r7, #12]
    4462:	2200      	movs	r2, #0
    4464:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_buffer_ptr              = NULL;
    4466:	68fb      	ldr	r3, [r7, #12]
    4468:	2200      	movs	r2, #0
    446a:	621a      	str	r2, [r3, #32]
	module->remaining_tx_buffer_length = 0x0000;
    446c:	68fb      	ldr	r3, [r7, #12]
    446e:	2200      	movs	r2, #0
    4470:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	2200      	movs	r2, #0
    4476:	851a      	strh	r2, [r3, #40]	; 0x28
	module->registered_callback        = 0x00;
    4478:	68fb      	ldr	r3, [r7, #12]
    447a:	222e      	movs	r2, #46	; 0x2e
    447c:	2100      	movs	r1, #0
    447e:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	222f      	movs	r2, #47	; 0x2f
    4484:	2100      	movs	r1, #0
    4486:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	2230      	movs	r2, #48	; 0x30
    448c:	2100      	movs	r1, #0
    448e:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	2203      	movs	r2, #3
    4494:	721a      	strb	r2, [r3, #8]
	module->locked                     = false;
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	2200      	movs	r2, #0
    449a:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	681b      	ldr	r3, [r3, #0]
    44a0:	2213      	movs	r2, #19
    44a2:	18bc      	adds	r4, r7, r2
    44a4:	1c18      	adds	r0, r3, #0
    44a6:	4b0f      	ldr	r3, [pc, #60]	; (44e4 <spi_init+0x17c>)
    44a8:	4798      	blx	r3
    44aa:	1c03      	adds	r3, r0, #0
    44ac:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    44ae:	2313      	movs	r3, #19
    44b0:	18fb      	adds	r3, r7, r3
    44b2:	781a      	ldrb	r2, [r3, #0]
    44b4:	4b11      	ldr	r3, [pc, #68]	; (44fc <spi_init+0x194>)
    44b6:	1c10      	adds	r0, r2, #0
    44b8:	1c19      	adds	r1, r3, #0
    44ba:	4b11      	ldr	r3, [pc, #68]	; (4500 <spi_init+0x198>)
    44bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    44be:	2313      	movs	r3, #19
    44c0:	18fb      	adds	r3, r7, r3
    44c2:	781a      	ldrb	r2, [r3, #0]
    44c4:	4b0f      	ldr	r3, [pc, #60]	; (4504 <spi_init+0x19c>)
    44c6:	0092      	lsls	r2, r2, #2
    44c8:	68f9      	ldr	r1, [r7, #12]
    44ca:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    44cc:	68fa      	ldr	r2, [r7, #12]
    44ce:	687b      	ldr	r3, [r7, #4]
    44d0:	1c10      	adds	r0, r2, #0
    44d2:	1c19      	adds	r1, r3, #0
    44d4:	4b0c      	ldr	r3, [pc, #48]	; (4508 <spi_init+0x1a0>)
    44d6:	4798      	blx	r3
    44d8:	1c03      	adds	r3, r0, #0
}
    44da:	1c18      	adds	r0, r3, #0
    44dc:	46bd      	mov	sp, r7
    44de:	b00b      	add	sp, #44	; 0x2c
    44e0:	bd90      	pop	{r4, r7, pc}
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	00003cf1 	.word	0x00003cf1
    44e8:	00003f99 	.word	0x00003f99
    44ec:	00003f85 	.word	0x00003f85
    44f0:	000057a5 	.word	0x000057a5
    44f4:	000057e9 	.word	0x000057e9
    44f8:	00003aa9 	.word	0x00003aa9
    44fc:	00004845 	.word	0x00004845
    4500:	00003d51 	.word	0x00003d51
    4504:	20000758 	.word	0x20000758
    4508:	00004145 	.word	0x00004145

0000450c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    450c:	b580      	push	{r7, lr}
    450e:	b086      	sub	sp, #24
    4510:	af00      	add	r7, sp, #0
    4512:	60f8      	str	r0, [r7, #12]
    4514:	60b9      	str	r1, [r7, #8]
    4516:	1dfb      	adds	r3, r7, #7
    4518:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	795b      	ldrb	r3, [r3, #5]
    451e:	2b01      	cmp	r3, #1
    4520:	d001      	beq.n	4526 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4522:	2315      	movs	r3, #21
    4524:	e055      	b.n	45d2 <spi_select_slave+0xc6>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
    4526:	1dfb      	adds	r3, r7, #7
    4528:	781b      	ldrb	r3, [r3, #0]
    452a:	2b00      	cmp	r3, #0
    452c:	d04a      	beq.n	45c4 <spi_select_slave+0xb8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    452e:	68bb      	ldr	r3, [r7, #8]
    4530:	785b      	ldrb	r3, [r3, #1]
    4532:	2b00      	cmp	r3, #0
    4534:	d03f      	beq.n	45b6 <spi_select_slave+0xaa>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	1c18      	adds	r0, r3, #0
    453a:	4b28      	ldr	r3, [pc, #160]	; (45dc <spi_select_slave+0xd0>)
    453c:	4798      	blx	r3
    453e:	1c03      	adds	r3, r0, #0
    4540:	1c1a      	adds	r2, r3, #0
    4542:	2301      	movs	r3, #1
    4544:	4053      	eors	r3, r2
    4546:	b2db      	uxtb	r3, r3
    4548:	2b00      	cmp	r3, #0
    454a:	d007      	beq.n	455c <spi_select_slave+0x50>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    454c:	68bb      	ldr	r3, [r7, #8]
    454e:	781b      	ldrb	r3, [r3, #0]
    4550:	1c18      	adds	r0, r3, #0
    4552:	2101      	movs	r1, #1
    4554:	4b22      	ldr	r3, [pc, #136]	; (45e0 <spi_select_slave+0xd4>)
    4556:	4798      	blx	r3
					return STATUS_BUSY;
    4558:	2305      	movs	r3, #5
    455a:	e03a      	b.n	45d2 <spi_select_slave+0xc6>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    455c:	68bb      	ldr	r3, [r7, #8]
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	1c18      	adds	r0, r3, #0
    4562:	2100      	movs	r1, #0
    4564:	4b1e      	ldr	r3, [pc, #120]	; (45e0 <spi_select_slave+0xd4>)
    4566:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4568:	68bb      	ldr	r3, [r7, #8]
    456a:	789b      	ldrb	r3, [r3, #2]
    456c:	b29b      	uxth	r3, r3
    456e:	68fa      	ldr	r2, [r7, #12]
    4570:	1c10      	adds	r0, r2, #0
    4572:	1c19      	adds	r1, r3, #0
    4574:	4b1b      	ldr	r3, [pc, #108]	; (45e4 <spi_select_slave+0xd8>)
    4576:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	79db      	ldrb	r3, [r3, #7]
    457c:	2201      	movs	r2, #1
    457e:	4053      	eors	r3, r2
    4580:	b2db      	uxtb	r3, r3
    4582:	2b00      	cmp	r3, #0
    4584:	d024      	beq.n	45d0 <spi_select_slave+0xc4>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4586:	46c0      	nop			; (mov r8, r8)
    4588:	68fb      	ldr	r3, [r7, #12]
    458a:	1c18      	adds	r0, r3, #0
    458c:	4b16      	ldr	r3, [pc, #88]	; (45e8 <spi_select_slave+0xdc>)
    458e:	4798      	blx	r3
    4590:	1c03      	adds	r3, r0, #0
    4592:	1c1a      	adds	r2, r3, #0
    4594:	2301      	movs	r3, #1
    4596:	4053      	eors	r3, r2
    4598:	b2db      	uxtb	r3, r3
    459a:	2b00      	cmp	r3, #0
    459c:	d1f4      	bne.n	4588 <spi_select_slave+0x7c>
					}
					uint16_t flush = 0;
    459e:	2316      	movs	r3, #22
    45a0:	18fb      	adds	r3, r7, r3
    45a2:	2200      	movs	r2, #0
    45a4:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    45a6:	68fa      	ldr	r2, [r7, #12]
    45a8:	2316      	movs	r3, #22
    45aa:	18fb      	adds	r3, r7, r3
    45ac:	1c10      	adds	r0, r2, #0
    45ae:	1c19      	adds	r1, r3, #0
    45b0:	4b0e      	ldr	r3, [pc, #56]	; (45ec <spi_select_slave+0xe0>)
    45b2:	4798      	blx	r3
    45b4:	e00c      	b.n	45d0 <spi_select_slave+0xc4>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    45b6:	68bb      	ldr	r3, [r7, #8]
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	1c18      	adds	r0, r3, #0
    45bc:	2100      	movs	r1, #0
    45be:	4b08      	ldr	r3, [pc, #32]	; (45e0 <spi_select_slave+0xd4>)
    45c0:	4798      	blx	r3
    45c2:	e005      	b.n	45d0 <spi_select_slave+0xc4>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    45c4:	68bb      	ldr	r3, [r7, #8]
    45c6:	781b      	ldrb	r3, [r3, #0]
    45c8:	1c18      	adds	r0, r3, #0
    45ca:	2101      	movs	r1, #1
    45cc:	4b04      	ldr	r3, [pc, #16]	; (45e0 <spi_select_slave+0xd4>)
    45ce:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    45d0:	2300      	movs	r3, #0
}
    45d2:	1c18      	adds	r0, r3, #0
    45d4:	46bd      	mov	sp, r7
    45d6:	b006      	add	sp, #24
    45d8:	bd80      	pop	{r7, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	00004015 	.word	0x00004015
    45e0:	00003f35 	.word	0x00003f35
    45e4:	00004065 	.word	0x00004065
    45e8:	0000403d 	.word	0x0000403d
    45ec:	000040b1 	.word	0x000040b1

000045f0 <_spi_transceive_buffer>:
static void _spi_transceive_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b086      	sub	sp, #24
    45f4:	af00      	add	r7, sp, #0
    45f6:	60f8      	str	r0, [r7, #12]
    45f8:	60b9      	str	r1, [r7, #8]
    45fa:	607a      	str	r2, [r7, #4]
    45fc:	1c1a      	adds	r2, r3, #0
    45fe:	1cbb      	adds	r3, r7, #2
    4600:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	1cba      	adds	r2, r7, #2
    4606:	8812      	ldrh	r2, [r2, #0]
    4608:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = length;
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	1cba      	adds	r2, r7, #2
    460e:	8812      	ldrh	r2, [r2, #0]
    4610:	851a      	strh	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr = rx_data;
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	687a      	ldr	r2, [r7, #4]
    4616:	621a      	str	r2, [r3, #32]
	module->tx_buffer_ptr = tx_data;
    4618:	68fb      	ldr	r3, [r7, #12]
    461a:	68ba      	ldr	r2, [r7, #8]
    461c:	625a      	str	r2, [r3, #36]	; 0x24
	module->status = STATUS_BUSY;
    461e:	68fb      	ldr	r3, [r7, #12]
    4620:	2230      	movs	r2, #48	; 0x30
    4622:	2105      	movs	r1, #5
    4624:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
    4626:	68fb      	ldr	r3, [r7, #12]
    4628:	2202      	movs	r2, #2
    462a:	721a      	strb	r2, [r3, #8]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    462c:	68fb      	ldr	r3, [r7, #12]
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	617b      	str	r3, [r7, #20]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    4632:	697b      	ldr	r3, [r7, #20]
    4634:	2205      	movs	r2, #5
    4636:	735a      	strb	r2, [r3, #13]
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    4638:	68fb      	ldr	r3, [r7, #12]
    463a:	795b      	ldrb	r3, [r3, #5]
    463c:	2b00      	cmp	r3, #0
    463e:	d105      	bne.n	464c <_spi_transceive_buffer+0x5c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4640:	697b      	ldr	r3, [r7, #20]
    4642:	2202      	movs	r2, #2
    4644:	739a      	strb	r2, [r3, #14]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4646:	697b      	ldr	r3, [r7, #20]
    4648:	2202      	movs	r2, #2
    464a:	735a      	strb	r2, [r3, #13]
	}
#  endif
}
    464c:	46bd      	mov	sp, r7
    464e:	b006      	add	sp, #24
    4650:	bd80      	pop	{r7, pc}
    4652:	46c0      	nop			; (mov r8, r8)

00004654 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	60f8      	str	r0, [r7, #12]
    465c:	60b9      	str	r1, [r7, #8]
    465e:	1dfb      	adds	r3, r7, #7
    4660:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4662:	1dfb      	adds	r3, r7, #7
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	68fa      	ldr	r2, [r7, #12]
    4668:	3302      	adds	r3, #2
    466a:	009b      	lsls	r3, r3, #2
    466c:	18d3      	adds	r3, r2, r3
    466e:	68ba      	ldr	r2, [r7, #8]
    4670:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    4672:	68fb      	ldr	r3, [r7, #12]
    4674:	222e      	movs	r2, #46	; 0x2e
    4676:	5c9b      	ldrb	r3, [r3, r2]
    4678:	b2d9      	uxtb	r1, r3
    467a:	1dfb      	adds	r3, r7, #7
    467c:	781b      	ldrb	r3, [r3, #0]
    467e:	2201      	movs	r2, #1
    4680:	409a      	lsls	r2, r3
    4682:	1c13      	adds	r3, r2, #0
    4684:	b2db      	uxtb	r3, r3
    4686:	1c0a      	adds	r2, r1, #0
    4688:	4313      	orrs	r3, r2
    468a:	b2db      	uxtb	r3, r3
    468c:	b2d9      	uxtb	r1, r3
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	222e      	movs	r2, #46	; 0x2e
    4692:	5499      	strb	r1, [r3, r2]
}
    4694:	46bd      	mov	sp, r7
    4696:	b004      	add	sp, #16
    4698:	bd80      	pop	{r7, pc}
    469a:	46c0      	nop			; (mov r8, r8)

0000469c <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    469c:	b590      	push	{r4, r7, lr}
    469e:	b085      	sub	sp, #20
    46a0:	af00      	add	r7, sp, #0
    46a2:	60f8      	str	r0, [r7, #12]
    46a4:	60b9      	str	r1, [r7, #8]
    46a6:	607a      	str	r2, [r7, #4]
    46a8:	1c1a      	adds	r2, r3, #0
    46aa:	1cbb      	adds	r3, r7, #2
    46ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    46ae:	1cbb      	adds	r3, r7, #2
    46b0:	881b      	ldrh	r3, [r3, #0]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d101      	bne.n	46ba <spi_transceive_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
    46b6:	2317      	movs	r3, #23
    46b8:	e018      	b.n	46ec <spi_transceive_buffer_job+0x50>
	}

	if (!(module->receiver_enabled)) {
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	79db      	ldrb	r3, [r3, #7]
    46be:	2201      	movs	r2, #1
    46c0:	4053      	eors	r3, r2
    46c2:	b2db      	uxtb	r3, r3
    46c4:	2b00      	cmp	r3, #0
    46c6:	d001      	beq.n	46cc <spi_transceive_buffer_job+0x30>
		return STATUS_ERR_DENIED;
    46c8:	231c      	movs	r3, #28
    46ca:	e00f      	b.n	46ec <spi_transceive_buffer_job+0x50>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	2230      	movs	r2, #48	; 0x30
    46d0:	5c9b      	ldrb	r3, [r3, r2]
    46d2:	b2db      	uxtb	r3, r3
    46d4:	2b05      	cmp	r3, #5
    46d6:	d101      	bne.n	46dc <spi_transceive_buffer_job+0x40>
		return STATUS_BUSY;
    46d8:	2305      	movs	r3, #5
    46da:	e007      	b.n	46ec <spi_transceive_buffer_job+0x50>
	}

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
    46dc:	68f8      	ldr	r0, [r7, #12]
    46de:	68b9      	ldr	r1, [r7, #8]
    46e0:	687a      	ldr	r2, [r7, #4]
    46e2:	1cbb      	adds	r3, r7, #2
    46e4:	881b      	ldrh	r3, [r3, #0]
    46e6:	4c03      	ldr	r4, [pc, #12]	; (46f4 <spi_transceive_buffer_job+0x58>)
    46e8:	47a0      	blx	r4

	return STATUS_OK;
    46ea:	2300      	movs	r3, #0
}
    46ec:	1c18      	adds	r0, r3, #0
    46ee:	46bd      	mov	sp, r7
    46f0:	b005      	add	sp, #20
    46f2:	bd90      	pop	{r4, r7, pc}
    46f4:	000045f1 	.word	0x000045f1

000046f8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b084      	sub	sp, #16
    46fc:	af00      	add	r7, sp, #0
    46fe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    470a:	781b      	ldrb	r3, [r3, #0]
    470c:	b2da      	uxtb	r2, r3
    470e:	230e      	movs	r3, #14
    4710:	18fb      	adds	r3, r7, r3
    4712:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4718:	1c5a      	adds	r2, r3, #1
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	625a      	str	r2, [r3, #36]	; 0x24

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	799b      	ldrb	r3, [r3, #6]
    4722:	2b01      	cmp	r3, #1
    4724:	d112      	bne.n	474c <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    472a:	781b      	ldrb	r3, [r3, #0]
    472c:	b2db      	uxtb	r3, r3
    472e:	021b      	lsls	r3, r3, #8
    4730:	b29a      	uxth	r2, r3
    4732:	230e      	movs	r3, #14
    4734:	18fb      	adds	r3, r7, r3
    4736:	881b      	ldrh	r3, [r3, #0]
    4738:	4313      	orrs	r3, r2
    473a:	b29a      	uxth	r2, r3
    473c:	230e      	movs	r3, #14
    473e:	18fb      	adds	r3, r7, r3
    4740:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4742:	687b      	ldr	r3, [r7, #4]
    4744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4746:	1c5a      	adds	r2, r3, #1
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    474c:	230e      	movs	r3, #14
    474e:	18fb      	adds	r3, r7, r3
    4750:	881b      	ldrh	r3, [r3, #0]
    4752:	05db      	lsls	r3, r3, #23
    4754:	0ddb      	lsrs	r3, r3, #23
    4756:	b29a      	uxth	r2, r3
    4758:	68bb      	ldr	r3, [r7, #8]
    475a:	831a      	strh	r2, [r3, #24]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4760:	b29b      	uxth	r3, r3
    4762:	3b01      	subs	r3, #1
    4764:	b29a      	uxth	r2, r3
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    476a:	46bd      	mov	sp, r7
    476c:	b004      	add	sp, #16
    476e:	bd80      	pop	{r7, pc}

00004770 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4770:	b580      	push	{r7, lr}
    4772:	b084      	sub	sp, #16
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	681b      	ldr	r3, [r3, #0]
    477c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    477e:	4b07      	ldr	r3, [pc, #28]	; (479c <_spi_write_dummy+0x2c>)
    4780:	881a      	ldrh	r2, [r3, #0]
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	831a      	strh	r2, [r3, #24]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    478a:	b29b      	uxth	r3, r3
    478c:	3b01      	subs	r3, #1
    478e:	b29a      	uxth	r2, r3
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	855a      	strh	r2, [r3, #42]	; 0x2a
}
    4794:	46bd      	mov	sp, r7
    4796:	b004      	add	sp, #16
    4798:	bd80      	pop	{r7, pc}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	20000770 	.word	0x20000770

000047a0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b084      	sub	sp, #16
    47a4:	af00      	add	r7, sp, #0
    47a6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	681b      	ldr	r3, [r3, #0]
    47ac:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    47ae:	230a      	movs	r3, #10
    47b0:	18fb      	adds	r3, r7, r3
    47b2:	2200      	movs	r2, #0
    47b4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    47b6:	230a      	movs	r3, #10
    47b8:	18fb      	adds	r3, r7, r3
    47ba:	68fa      	ldr	r2, [r7, #12]
    47bc:	8b12      	ldrh	r2, [r2, #24]
    47be:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    47c4:	b29b      	uxth	r3, r3
    47c6:	3b01      	subs	r3, #1
    47c8:	b29a      	uxth	r2, r3
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
    47ce:	46bd      	mov	sp, r7
    47d0:	b004      	add	sp, #16
    47d2:	bd80      	pop	{r7, pc}

000047d4 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b084      	sub	sp, #16
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	681b      	ldr	r3, [r3, #0]
    47e0:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    47e2:	68fb      	ldr	r3, [r7, #12]
    47e4:	8b1b      	ldrh	r3, [r3, #24]
    47e6:	b29a      	uxth	r2, r3
    47e8:	230a      	movs	r3, #10
    47ea:	18fb      	adds	r3, r7, r3
    47ec:	05d2      	lsls	r2, r2, #23
    47ee:	0dd2      	lsrs	r2, r2, #23
    47f0:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	6a1b      	ldr	r3, [r3, #32]
    47f6:	220a      	movs	r2, #10
    47f8:	18ba      	adds	r2, r7, r2
    47fa:	8812      	ldrh	r2, [r2, #0]
    47fc:	b2d2      	uxtb	r2, r2
    47fe:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	6a1b      	ldr	r3, [r3, #32]
    4804:	1c5a      	adds	r2, r3, #1
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	621a      	str	r2, [r3, #32]

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	799b      	ldrb	r3, [r3, #6]
    480e:	2b01      	cmp	r3, #1
    4810:	d10d      	bne.n	482e <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	6a1b      	ldr	r3, [r3, #32]
    4816:	220a      	movs	r2, #10
    4818:	18ba      	adds	r2, r7, r2
    481a:	8812      	ldrh	r2, [r2, #0]
    481c:	0a12      	lsrs	r2, r2, #8
    481e:	b292      	uxth	r2, r2
    4820:	b2d2      	uxtb	r2, r2
    4822:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	6a1b      	ldr	r3, [r3, #32]
    4828:	1c5a      	adds	r2, r3, #1
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	621a      	str	r2, [r3, #32]
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4832:	b29b      	uxth	r3, r3
    4834:	3b01      	subs	r3, #1
    4836:	b29a      	uxth	r2, r3
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	851a      	strh	r2, [r3, #40]	; 0x28
}
    483c:	46bd      	mov	sp, r7
    483e:	b004      	add	sp, #16
    4840:	bd80      	pop	{r7, pc}
    4842:	46c0      	nop			; (mov r8, r8)

00004844 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4844:	b580      	push	{r7, lr}
    4846:	b086      	sub	sp, #24
    4848:	af00      	add	r7, sp, #0
    484a:	1c02      	adds	r2, r0, #0
    484c:	1dfb      	adds	r3, r7, #7
    484e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4850:	1dfb      	adds	r3, r7, #7
    4852:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    4854:	4ba2      	ldr	r3, [pc, #648]	; (4ae0 <_spi_interrupt_handler+0x29c>)
    4856:	0092      	lsls	r2, r2, #2
    4858:	58d3      	ldr	r3, [r2, r3]
    485a:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    485c:	697b      	ldr	r3, [r7, #20]
    485e:	681b      	ldr	r3, [r3, #0]
    4860:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4862:	697b      	ldr	r3, [r7, #20]
    4864:	222f      	movs	r2, #47	; 0x2f
    4866:	5c9a      	ldrb	r2, [r3, r2]
    4868:	697b      	ldr	r3, [r7, #20]
    486a:	212e      	movs	r1, #46	; 0x2e
    486c:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    486e:	230f      	movs	r3, #15
    4870:	18fb      	adds	r3, r7, r3
    4872:	400a      	ands	r2, r1
    4874:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4876:	693b      	ldr	r3, [r7, #16]
    4878:	7b9b      	ldrb	r3, [r3, #14]
    487a:	b2da      	uxtb	r2, r3
    487c:	230c      	movs	r3, #12
    487e:	18fb      	adds	r3, r7, r3
    4880:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4882:	693b      	ldr	r3, [r7, #16]
    4884:	7b5b      	ldrb	r3, [r3, #13]
    4886:	b2db      	uxtb	r3, r3
    4888:	b29a      	uxth	r2, r3
    488a:	230c      	movs	r3, #12
    488c:	18fb      	adds	r3, r7, r3
    488e:	210c      	movs	r1, #12
    4890:	1879      	adds	r1, r7, r1
    4892:	8809      	ldrh	r1, [r1, #0]
    4894:	400a      	ands	r2, r1
    4896:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4898:	230c      	movs	r3, #12
    489a:	18fb      	adds	r3, r7, r3
    489c:	881b      	ldrh	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d041      	beq.n	4928 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	795b      	ldrb	r3, [r3, #5]
    48a8:	2b01      	cmp	r3, #1
    48aa:	d110      	bne.n	48ce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    48ac:	697b      	ldr	r3, [r7, #20]
    48ae:	7a1b      	ldrb	r3, [r3, #8]
    48b0:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    48b2:	2b00      	cmp	r3, #0
    48b4:	d10b      	bne.n	48ce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    48b6:	697b      	ldr	r3, [r7, #20]
    48b8:	1c18      	adds	r0, r3, #0
    48ba:	4b8a      	ldr	r3, [pc, #552]	; (4ae4 <_spi_interrupt_handler+0x2a0>)
    48bc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    48be:	697b      	ldr	r3, [r7, #20]
    48c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    48c2:	b29b      	uxth	r3, r3
    48c4:	2b00      	cmp	r3, #0
    48c6:	d102      	bne.n	48ce <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    48c8:	693b      	ldr	r3, [r7, #16]
    48ca:	2201      	movs	r2, #1
    48cc:	731a      	strb	r2, [r3, #12]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    48ce:	697b      	ldr	r3, [r7, #20]
    48d0:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    48d2:	2b01      	cmp	r3, #1
    48d4:	d104      	bne.n	48e0 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    48d6:	697b      	ldr	r3, [r7, #20]
    48d8:	7a1b      	ldrb	r3, [r3, #8]
    48da:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    48dc:	2b00      	cmp	r3, #0
    48de:	d108      	bne.n	48f2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    48e0:	697b      	ldr	r3, [r7, #20]
    48e2:	795b      	ldrb	r3, [r3, #5]
    48e4:	2b00      	cmp	r3, #0
    48e6:	d11f      	bne.n	4928 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    48e8:	697b      	ldr	r3, [r7, #20]
    48ea:	7a1b      	ldrb	r3, [r3, #8]
    48ec:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    48ee:	2b00      	cmp	r3, #0
    48f0:	d01a      	beq.n	4928 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    48f2:	697b      	ldr	r3, [r7, #20]
    48f4:	1c18      	adds	r0, r3, #0
    48f6:	4b7c      	ldr	r3, [pc, #496]	; (4ae8 <_spi_interrupt_handler+0x2a4>)
    48f8:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    48fa:	697b      	ldr	r3, [r7, #20]
    48fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    48fe:	b29b      	uxth	r3, r3
    4900:	2b00      	cmp	r3, #0
    4902:	d111      	bne.n	4928 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4904:	693b      	ldr	r3, [r7, #16]
    4906:	2201      	movs	r2, #1
    4908:	731a      	strb	r2, [r3, #12]

				if (module->dir == SPI_DIRECTION_WRITE &&
    490a:	697b      	ldr	r3, [r7, #20]
    490c:	7a1b      	ldrb	r3, [r3, #8]
    490e:	b2db      	uxtb	r3, r3
    4910:	2b01      	cmp	r3, #1
    4912:	d109      	bne.n	4928 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    4914:	697b      	ldr	r3, [r7, #20]
    4916:	79db      	ldrb	r3, [r3, #7]
    4918:	2201      	movs	r2, #1
    491a:	4053      	eors	r3, r2
    491c:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    491e:	2b00      	cmp	r3, #0
    4920:	d002      	beq.n	4928 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4922:	693b      	ldr	r3, [r7, #16]
    4924:	2202      	movs	r2, #2
    4926:	735a      	strb	r2, [r3, #13]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4928:	230c      	movs	r3, #12
    492a:	18fb      	adds	r3, r7, r3
    492c:	881b      	ldrh	r3, [r3, #0]
    492e:	2204      	movs	r2, #4
    4930:	4013      	ands	r3, r2
    4932:	d100      	bne.n	4936 <_spi_interrupt_handler+0xf2>
    4934:	e083      	b.n	4a3e <_spi_interrupt_handler+0x1fa>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4936:	693b      	ldr	r3, [r7, #16]
    4938:	8a1b      	ldrh	r3, [r3, #16]
    493a:	b29b      	uxth	r3, r3
    493c:	1c1a      	adds	r2, r3, #0
    493e:	2304      	movs	r3, #4
    4940:	4013      	ands	r3, r2
    4942:	d027      	beq.n	4994 <_spi_interrupt_handler+0x150>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4944:	697b      	ldr	r3, [r7, #20]
    4946:	7a1b      	ldrb	r3, [r3, #8]
    4948:	b2db      	uxtb	r3, r3
    494a:	2b01      	cmp	r3, #1
    494c:	d014      	beq.n	4978 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    494e:	697b      	ldr	r3, [r7, #20]
    4950:	2230      	movs	r2, #48	; 0x30
    4952:	211e      	movs	r1, #30
    4954:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4956:	697b      	ldr	r3, [r7, #20]
    4958:	2203      	movs	r2, #3
    495a:	721a      	strb	r2, [r3, #8]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    495c:	693b      	ldr	r3, [r7, #16]
    495e:	2205      	movs	r2, #5
    4960:	731a      	strb	r2, [r3, #12]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	2208      	movs	r2, #8
    496a:	4013      	ands	r3, r2
    496c:	d004      	beq.n	4978 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    496e:	697b      	ldr	r3, [r7, #20]
    4970:	699b      	ldr	r3, [r3, #24]
    4972:	697a      	ldr	r2, [r7, #20]
    4974:	1c10      	adds	r0, r2, #0
    4976:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4978:	230a      	movs	r3, #10
    497a:	18fb      	adds	r3, r7, r3
    497c:	693a      	ldr	r2, [r7, #16]
    497e:	8b12      	ldrh	r2, [r2, #24]
    4980:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4982:	693b      	ldr	r3, [r7, #16]
    4984:	8a1b      	ldrh	r3, [r3, #16]
    4986:	b29b      	uxth	r3, r3
    4988:	2204      	movs	r2, #4
    498a:	4313      	orrs	r3, r2
    498c:	b29a      	uxth	r2, r3
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	821a      	strh	r2, [r3, #16]
    4992:	e054      	b.n	4a3e <_spi_interrupt_handler+0x1fa>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4994:	697b      	ldr	r3, [r7, #20]
    4996:	7a1b      	ldrb	r3, [r3, #8]
    4998:	b2db      	uxtb	r3, r3
    499a:	2b01      	cmp	r3, #1
    499c:	d11e      	bne.n	49dc <_spi_interrupt_handler+0x198>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    499e:	697b      	ldr	r3, [r7, #20]
    49a0:	1c18      	adds	r0, r3, #0
    49a2:	4b52      	ldr	r3, [pc, #328]	; (4aec <_spi_interrupt_handler+0x2a8>)
    49a4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    49a6:	697b      	ldr	r3, [r7, #20]
    49a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    49aa:	b29b      	uxth	r3, r3
    49ac:	2b00      	cmp	r3, #0
    49ae:	d146      	bne.n	4a3e <_spi_interrupt_handler+0x1fa>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    49b0:	693b      	ldr	r3, [r7, #16]
    49b2:	2204      	movs	r2, #4
    49b4:	731a      	strb	r2, [r3, #12]
					module->status = STATUS_OK;
    49b6:	697b      	ldr	r3, [r7, #20]
    49b8:	2230      	movs	r2, #48	; 0x30
    49ba:	2100      	movs	r1, #0
    49bc:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    49be:	697b      	ldr	r3, [r7, #20]
    49c0:	2203      	movs	r2, #3
    49c2:	721a      	strb	r2, [r3, #8]
					/* Run callback if registered and enabled */
					if (callback_mask &
    49c4:	230f      	movs	r3, #15
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	2201      	movs	r2, #1
    49cc:	4013      	ands	r3, r2
    49ce:	d036      	beq.n	4a3e <_spi_interrupt_handler+0x1fa>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    49d0:	697b      	ldr	r3, [r7, #20]
    49d2:	68db      	ldr	r3, [r3, #12]
    49d4:	697a      	ldr	r2, [r7, #20]
    49d6:	1c10      	adds	r0, r2, #0
    49d8:	4798      	blx	r3
    49da:	e030      	b.n	4a3e <_spi_interrupt_handler+0x1fa>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    49dc:	697b      	ldr	r3, [r7, #20]
    49de:	1c18      	adds	r0, r3, #0
    49e0:	4b43      	ldr	r3, [pc, #268]	; (4af0 <_spi_interrupt_handler+0x2ac>)
    49e2:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    49e4:	697b      	ldr	r3, [r7, #20]
    49e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    49e8:	b29b      	uxth	r3, r3
    49ea:	2b00      	cmp	r3, #0
    49ec:	d127      	bne.n	4a3e <_spi_interrupt_handler+0x1fa>
					module->status = STATUS_OK;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2230      	movs	r2, #48	; 0x30
    49f2:	2100      	movs	r1, #0
    49f4:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    49f6:	693b      	ldr	r3, [r7, #16]
    49f8:	2204      	movs	r2, #4
    49fa:	731a      	strb	r2, [r3, #12]
					if(module->dir == SPI_DIRECTION_BOTH) {
    49fc:	697b      	ldr	r3, [r7, #20]
    49fe:	7a1b      	ldrb	r3, [r3, #8]
    4a00:	b2db      	uxtb	r3, r3
    4a02:	2b02      	cmp	r3, #2
    4a04:	d10b      	bne.n	4a1e <_spi_interrupt_handler+0x1da>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4a06:	230f      	movs	r3, #15
    4a08:	18fb      	adds	r3, r7, r3
    4a0a:	781b      	ldrb	r3, [r3, #0]
    4a0c:	2204      	movs	r2, #4
    4a0e:	4013      	ands	r3, r2
    4a10:	d015      	beq.n	4a3e <_spi_interrupt_handler+0x1fa>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	695b      	ldr	r3, [r3, #20]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	1c10      	adds	r0, r2, #0
    4a1a:	4798      	blx	r3
    4a1c:	e00f      	b.n	4a3e <_spi_interrupt_handler+0x1fa>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4a1e:	697b      	ldr	r3, [r7, #20]
    4a20:	7a1b      	ldrb	r3, [r3, #8]
    4a22:	b2db      	uxtb	r3, r3
    4a24:	2b00      	cmp	r3, #0
    4a26:	d10a      	bne.n	4a3e <_spi_interrupt_handler+0x1fa>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4a28:	230f      	movs	r3, #15
    4a2a:	18fb      	adds	r3, r7, r3
    4a2c:	781b      	ldrb	r3, [r3, #0]
    4a2e:	2202      	movs	r2, #2
    4a30:	4013      	ands	r3, r2
    4a32:	d004      	beq.n	4a3e <_spi_interrupt_handler+0x1fa>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4a34:	697b      	ldr	r3, [r7, #20]
    4a36:	691b      	ldr	r3, [r3, #16]
    4a38:	697a      	ldr	r2, [r7, #20]
    4a3a:	1c10      	adds	r0, r2, #0
    4a3c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4a3e:	230c      	movs	r3, #12
    4a40:	18fb      	adds	r3, r7, r3
    4a42:	881b      	ldrh	r3, [r3, #0]
    4a44:	2202      	movs	r2, #2
    4a46:	4013      	ands	r3, r2
    4a48:	d046      	beq.n	4ad8 <_spi_interrupt_handler+0x294>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    4a4a:	697b      	ldr	r3, [r7, #20]
    4a4c:	795b      	ldrb	r3, [r3, #5]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d11d      	bne.n	4a8e <_spi_interrupt_handler+0x24a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    4a52:	693b      	ldr	r3, [r7, #16]
    4a54:	2207      	movs	r2, #7
    4a56:	731a      	strb	r2, [r3, #12]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4a58:	693b      	ldr	r3, [r7, #16]
    4a5a:	2202      	movs	r2, #2
    4a5c:	739a      	strb	r2, [r3, #14]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2203      	movs	r2, #3
    4a62:	721a      	strb	r2, [r3, #8]
			module->remaining_tx_buffer_length = 0;
    4a64:	697b      	ldr	r3, [r7, #20]
    4a66:	2200      	movs	r2, #0
    4a68:	859a      	strh	r2, [r3, #44]	; 0x2c
			module->remaining_rx_buffer_length = 0;
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	2200      	movs	r2, #0
    4a6e:	851a      	strh	r2, [r3, #40]	; 0x28
			module->status = STATUS_OK;
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	2230      	movs	r2, #48	; 0x30
    4a74:	2100      	movs	r1, #0
    4a76:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    4a78:	230f      	movs	r3, #15
    4a7a:	18fb      	adds	r3, r7, r3
    4a7c:	781b      	ldrb	r3, [r3, #0]
    4a7e:	2210      	movs	r2, #16
    4a80:	4013      	ands	r3, r2
    4a82:	d004      	beq.n	4a8e <_spi_interrupt_handler+0x24a>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    4a84:	697b      	ldr	r3, [r7, #20]
    4a86:	69db      	ldr	r3, [r3, #28]
    4a88:	697a      	ldr	r2, [r7, #20]
    4a8a:	1c10      	adds	r0, r2, #0
    4a8c:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a8e:	697b      	ldr	r3, [r7, #20]
    4a90:	795b      	ldrb	r3, [r3, #5]
    4a92:	2b01      	cmp	r3, #1
    4a94:	d120      	bne.n	4ad8 <_spi_interrupt_handler+0x294>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4a96:	697b      	ldr	r3, [r7, #20]
    4a98:	7a1b      	ldrb	r3, [r3, #8]
    4a9a:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a9c:	2b01      	cmp	r3, #1
    4a9e:	d11b      	bne.n	4ad8 <_spi_interrupt_handler+0x294>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4aa0:	697b      	ldr	r3, [r7, #20]
    4aa2:	79db      	ldrb	r3, [r3, #7]
    4aa4:	2201      	movs	r2, #1
    4aa6:	4053      	eors	r3, r2
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d014      	beq.n	4ad8 <_spi_interrupt_handler+0x294>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4aae:	693b      	ldr	r3, [r7, #16]
    4ab0:	2202      	movs	r2, #2
    4ab2:	731a      	strb	r2, [r3, #12]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4ab4:	697b      	ldr	r3, [r7, #20]
    4ab6:	2203      	movs	r2, #3
    4ab8:	721a      	strb	r2, [r3, #8]
			module->status = STATUS_OK;
    4aba:	697b      	ldr	r3, [r7, #20]
    4abc:	2230      	movs	r2, #48	; 0x30
    4abe:	2100      	movs	r1, #0
    4ac0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4ac2:	230f      	movs	r3, #15
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	2201      	movs	r2, #1
    4aca:	4013      	ands	r3, r2
    4acc:	d004      	beq.n	4ad8 <_spi_interrupt_handler+0x294>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4ace:	697b      	ldr	r3, [r7, #20]
    4ad0:	68db      	ldr	r3, [r3, #12]
    4ad2:	697a      	ldr	r2, [r7, #20]
    4ad4:	1c10      	adds	r0, r2, #0
    4ad6:	4798      	blx	r3
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4ad8:	46bd      	mov	sp, r7
    4ada:	b006      	add	sp, #24
    4adc:	bd80      	pop	{r7, pc}
    4ade:	46c0      	nop			; (mov r8, r8)
    4ae0:	20000758 	.word	0x20000758
    4ae4:	00004771 	.word	0x00004771
    4ae8:	000046f9 	.word	0x000046f9
    4aec:	000047a1 	.word	0x000047a1
    4af0:	000047d5 	.word	0x000047d5

00004af4 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	2201      	movs	r2, #1
    4b00:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	2200      	movs	r2, #0
    4b06:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2206      	movs	r2, #6
    4b0c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	2200      	movs	r2, #0
    4b12:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	2200      	movs	r2, #0
    4b18:	725a      	strb	r2, [r3, #9]
}
    4b1a:	46bd      	mov	sp, r7
    4b1c:	b002      	add	sp, #8
    4b1e:	bd80      	pop	{r7, pc}

00004b20 <system_clock_source_xosc_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
    4b20:	b580      	push	{r7, lr}
    4b22:	b082      	sub	sp, #8
    4b24:	af00      	add	r7, sp, #0
    4b26:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	2200      	movs	r2, #0
    4b2c:	701a      	strb	r2, [r3, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	220e      	movs	r2, #14
    4b32:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control = true;
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	2201      	movs	r2, #1
    4b38:	709a      	strb	r2, [r3, #2]
	config->frequency         = 12000000UL;
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	4a05      	ldr	r2, [pc, #20]	; (4b54 <system_clock_source_xosc_get_config_defaults+0x34>)
    4b3e:	605a      	str	r2, [r3, #4]
	config->run_in_standby    = false;
    4b40:	687b      	ldr	r3, [r7, #4]
    4b42:	2200      	movs	r2, #0
    4b44:	721a      	strb	r2, [r3, #8]
	config->on_demand         = true;
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	2201      	movs	r2, #1
    4b4a:	725a      	strb	r2, [r3, #9]
}
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b002      	add	sp, #8
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	00b71b00 	.word	0x00b71b00

00004b58 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b082      	sub	sp, #8
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2203      	movs	r2, #3
    4b64:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	2200      	movs	r2, #0
    4b6a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	2201      	movs	r2, #1
    4b70:	709a      	strb	r2, [r3, #2]
}
    4b72:	46bd      	mov	sp, r7
    4b74:	b002      	add	sp, #8
    4b76:	bd80      	pop	{r7, pc}

00004b78 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b082      	sub	sp, #8
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	2200      	movs	r2, #0
    4b84:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	2200      	movs	r2, #0
    4b8a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	2200      	movs	r2, #0
    4b90:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	2200      	movs	r2, #0
    4b96:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	2200      	movs	r2, #0
    4b9c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	2201      	movs	r2, #1
    4ba2:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	2207      	movs	r2, #7
    4ba8:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	223f      	movs	r2, #63	; 0x3f
    4bae:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	2201      	movs	r2, #1
    4bb4:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	2201      	movs	r2, #1
    4bba:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4bbc:	687b      	ldr	r3, [r7, #4]
    4bbe:	2206      	movs	r2, #6
    4bc0:	821a      	strh	r2, [r3, #16]
}
    4bc2:	46bd      	mov	sp, r7
    4bc4:	b002      	add	sp, #8
    4bc6:	bd80      	pop	{r7, pc}

00004bc8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4bc8:	b580      	push	{r7, lr}
    4bca:	b082      	sub	sp, #8
    4bcc:	af00      	add	r7, sp, #0
    4bce:	1c02      	adds	r2, r0, #0
    4bd0:	1dfb      	adds	r3, r7, #7
    4bd2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4bd4:	4a03      	ldr	r2, [pc, #12]	; (4be4 <system_cpu_clock_set_divider+0x1c>)
    4bd6:	1dfb      	adds	r3, r7, #7
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	7213      	strb	r3, [r2, #8]
}
    4bdc:	46bd      	mov	sp, r7
    4bde:	b002      	add	sp, #8
    4be0:	bd80      	pop	{r7, pc}
    4be2:	46c0      	nop			; (mov r8, r8)
    4be4:	40000400 	.word	0x40000400

00004be8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	1c02      	adds	r2, r0, #0
    4bf0:	1dfb      	adds	r3, r7, #7
    4bf2:	701a      	strb	r2, [r3, #0]
    4bf4:	1dbb      	adds	r3, r7, #6
    4bf6:	1c0a      	adds	r2, r1, #0
    4bf8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4bfa:	1dfb      	adds	r3, r7, #7
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	2b01      	cmp	r3, #1
    4c00:	d008      	beq.n	4c14 <system_apb_clock_set_divider+0x2c>
    4c02:	2b02      	cmp	r3, #2
    4c04:	d00b      	beq.n	4c1e <system_apb_clock_set_divider+0x36>
    4c06:	2b00      	cmp	r3, #0
    4c08:	d10e      	bne.n	4c28 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4c0a:	4a0b      	ldr	r2, [pc, #44]	; (4c38 <system_apb_clock_set_divider+0x50>)
    4c0c:	1dbb      	adds	r3, r7, #6
    4c0e:	781b      	ldrb	r3, [r3, #0]
    4c10:	7253      	strb	r3, [r2, #9]
			break;
    4c12:	e00b      	b.n	4c2c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4c14:	4a08      	ldr	r2, [pc, #32]	; (4c38 <system_apb_clock_set_divider+0x50>)
    4c16:	1dbb      	adds	r3, r7, #6
    4c18:	781b      	ldrb	r3, [r3, #0]
    4c1a:	7293      	strb	r3, [r2, #10]
			break;
    4c1c:	e006      	b.n	4c2c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4c1e:	4a06      	ldr	r2, [pc, #24]	; (4c38 <system_apb_clock_set_divider+0x50>)
    4c20:	1dbb      	adds	r3, r7, #6
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	72d3      	strb	r3, [r2, #11]
			break;
    4c26:	e001      	b.n	4c2c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4c28:	2317      	movs	r3, #23
    4c2a:	e000      	b.n	4c2e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4c2c:	2300      	movs	r3, #0
}
    4c2e:	1c18      	adds	r0, r3, #0
    4c30:	46bd      	mov	sp, r7
    4c32:	b002      	add	sp, #8
    4c34:	bd80      	pop	{r7, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	40000400 	.word	0x40000400

00004c3c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4c3c:	b580      	push	{r7, lr}
    4c3e:	b082      	sub	sp, #8
    4c40:	af00      	add	r7, sp, #0
    4c42:	1c02      	adds	r2, r0, #0
    4c44:	1dfb      	adds	r3, r7, #7
    4c46:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c48:	4b08      	ldr	r3, [pc, #32]	; (4c6c <system_flash_set_waitstates+0x30>)
    4c4a:	1dfa      	adds	r2, r7, #7
    4c4c:	7812      	ldrb	r2, [r2, #0]
    4c4e:	210f      	movs	r1, #15
    4c50:	400a      	ands	r2, r1
    4c52:	b2d2      	uxtb	r2, r2
    4c54:	210f      	movs	r1, #15
    4c56:	400a      	ands	r2, r1
    4c58:	0052      	lsls	r2, r2, #1
    4c5a:	6859      	ldr	r1, [r3, #4]
    4c5c:	201e      	movs	r0, #30
    4c5e:	4381      	bics	r1, r0
    4c60:	430a      	orrs	r2, r1
    4c62:	605a      	str	r2, [r3, #4]
}
    4c64:	46bd      	mov	sp, r7
    4c66:	b002      	add	sp, #8
    4c68:	bd80      	pop	{r7, pc}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	41004000 	.word	0x41004000

00004c70 <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
    4c74:	4b02      	ldr	r3, [pc, #8]	; (4c80 <system_get_device_id+0x10>)
    4c76:	699b      	ldr	r3, [r3, #24]
}
    4c78:	1c18      	adds	r0, r3, #0
    4c7a:	46bd      	mov	sp, r7
    4c7c:	bd80      	pop	{r7, pc}
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	41002000 	.word	0x41002000

00004c84 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c88:	46c0      	nop			; (mov r8, r8)
    4c8a:	4b03      	ldr	r3, [pc, #12]	; (4c98 <_system_dfll_wait_for_sync+0x14>)
    4c8c:	68db      	ldr	r3, [r3, #12]
    4c8e:	2210      	movs	r2, #16
    4c90:	4013      	ands	r3, r2
    4c92:	d0fa      	beq.n	4c8a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4c94:	46bd      	mov	sp, r7
    4c96:	bd80      	pop	{r7, pc}
    4c98:	40000800 	.word	0x40000800

00004c9c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4ca0:	4a0c      	ldr	r2, [pc, #48]	; (4cd4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4ca2:	4b0d      	ldr	r3, [pc, #52]	; (4cd8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4ca4:	681b      	ldr	r3, [r3, #0]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	2180      	movs	r1, #128	; 0x80
    4caa:	438b      	bics	r3, r1
    4cac:	b29b      	uxth	r3, r3
    4cae:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4cb0:	4b0a      	ldr	r3, [pc, #40]	; (4cdc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4cb2:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4cb4:	4a07      	ldr	r2, [pc, #28]	; (4cd4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4cb6:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4cb8:	689b      	ldr	r3, [r3, #8]
    4cba:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4cbc:	4a05      	ldr	r2, [pc, #20]	; (4cd4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4cbe:	4b06      	ldr	r3, [pc, #24]	; (4cd8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4cc0:	685b      	ldr	r3, [r3, #4]
    4cc2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4cc4:	4a03      	ldr	r2, [pc, #12]	; (4cd4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4cc6:	4b04      	ldr	r3, [pc, #16]	; (4cd8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	b29b      	uxth	r3, r3
    4ccc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4cce:	46bd      	mov	sp, r7
    4cd0:	bd80      	pop	{r7, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)
    4cd4:	40000800 	.word	0x40000800
    4cd8:	200000c0 	.word	0x200000c0
    4cdc:	00004c85 	.word	0x00004c85

00004ce0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b082      	sub	sp, #8
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	1c02      	adds	r2, r0, #0
    4ce8:	1dfb      	adds	r3, r7, #7
    4cea:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4cec:	1dfb      	adds	r3, r7, #7
    4cee:	781b      	ldrb	r3, [r3, #0]
    4cf0:	2b07      	cmp	r3, #7
    4cf2:	d835      	bhi.n	4d60 <system_clock_source_get_hz+0x80>
    4cf4:	009a      	lsls	r2, r3, #2
    4cf6:	4b1d      	ldr	r3, [pc, #116]	; (4d6c <system_clock_source_get_hz+0x8c>)
    4cf8:	18d3      	adds	r3, r2, r3
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4cfe:	4b1c      	ldr	r3, [pc, #112]	; (4d70 <system_clock_source_get_hz+0x90>)
    4d00:	68db      	ldr	r3, [r3, #12]
    4d02:	e02e      	b.n	4d62 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4d04:	4b1b      	ldr	r3, [pc, #108]	; (4d74 <system_clock_source_get_hz+0x94>)
    4d06:	6a1b      	ldr	r3, [r3, #32]
    4d08:	0a1b      	lsrs	r3, r3, #8
    4d0a:	1c1a      	adds	r2, r3, #0
    4d0c:	2303      	movs	r3, #3
    4d0e:	4013      	ands	r3, r2
    4d10:	b2db      	uxtb	r3, r3
    4d12:	1c1a      	adds	r2, r3, #0
    4d14:	4b18      	ldr	r3, [pc, #96]	; (4d78 <system_clock_source_get_hz+0x98>)
    4d16:	40d3      	lsrs	r3, r2
    4d18:	e023      	b.n	4d62 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4d1a:	2380      	movs	r3, #128	; 0x80
    4d1c:	021b      	lsls	r3, r3, #8
    4d1e:	e020      	b.n	4d62 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4d20:	2380      	movs	r3, #128	; 0x80
    4d22:	021b      	lsls	r3, r3, #8
    4d24:	e01d      	b.n	4d62 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4d26:	4b12      	ldr	r3, [pc, #72]	; (4d70 <system_clock_source_get_hz+0x90>)
    4d28:	691b      	ldr	r3, [r3, #16]
    4d2a:	e01a      	b.n	4d62 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4d2c:	4b10      	ldr	r3, [pc, #64]	; (4d70 <system_clock_source_get_hz+0x90>)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2202      	movs	r2, #2
    4d32:	4013      	ands	r3, r2
    4d34:	d101      	bne.n	4d3a <system_clock_source_get_hz+0x5a>
			return 0;
    4d36:	2300      	movs	r3, #0
    4d38:	e013      	b.n	4d62 <system_clock_source_get_hz+0x82>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4d3a:	4b10      	ldr	r3, [pc, #64]	; (4d7c <system_clock_source_get_hz+0x9c>)
    4d3c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4d3e:	4b0c      	ldr	r3, [pc, #48]	; (4d70 <system_clock_source_get_hz+0x90>)
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	2204      	movs	r2, #4
    4d44:	4013      	ands	r3, r2
    4d46:	d009      	beq.n	4d5c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d48:	2000      	movs	r0, #0
    4d4a:	4b0d      	ldr	r3, [pc, #52]	; (4d80 <system_clock_source_get_hz+0xa0>)
    4d4c:	4798      	blx	r3
    4d4e:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    4d50:	4b07      	ldr	r3, [pc, #28]	; (4d70 <system_clock_source_get_hz+0x90>)
    4d52:	689b      	ldr	r3, [r3, #8]
    4d54:	041b      	lsls	r3, r3, #16
    4d56:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d58:	4353      	muls	r3, r2
    4d5a:	e002      	b.n	4d62 <system_clock_source_get_hz+0x82>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4d5c:	4b09      	ldr	r3, [pc, #36]	; (4d84 <system_clock_source_get_hz+0xa4>)
    4d5e:	e000      	b.n	4d62 <system_clock_source_get_hz+0x82>

	default:
		return 0;
    4d60:	2300      	movs	r3, #0
	}
}
    4d62:	1c18      	adds	r0, r3, #0
    4d64:	46bd      	mov	sp, r7
    4d66:	b002      	add	sp, #8
    4d68:	bd80      	pop	{r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	00006f7c 	.word	0x00006f7c
    4d70:	200000c0 	.word	0x200000c0
    4d74:	40000800 	.word	0x40000800
    4d78:	007a1200 	.word	0x007a1200
    4d7c:	00004c85 	.word	0x00004c85
    4d80:	000058c9 	.word	0x000058c9
    4d84:	02dc6c00 	.word	0x02dc6c00

00004d88 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4d88:	b580      	push	{r7, lr}
    4d8a:	b084      	sub	sp, #16
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4d90:	4b1a      	ldr	r3, [pc, #104]	; (4dfc <system_clock_source_osc8m_set_config+0x74>)
    4d92:	6a1b      	ldr	r3, [r3, #32]
    4d94:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	1c1a      	adds	r2, r3, #0
    4d9c:	2303      	movs	r3, #3
    4d9e:	4013      	ands	r3, r2
    4da0:	b2da      	uxtb	r2, r3
    4da2:	230d      	movs	r3, #13
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	2103      	movs	r1, #3
    4da8:	400a      	ands	r2, r1
    4daa:	1c10      	adds	r0, r2, #0
    4dac:	781a      	ldrb	r2, [r3, #0]
    4dae:	2103      	movs	r1, #3
    4db0:	438a      	bics	r2, r1
    4db2:	1c11      	adds	r1, r2, #0
    4db4:	1c02      	adds	r2, r0, #0
    4db6:	430a      	orrs	r2, r1
    4db8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	789a      	ldrb	r2, [r3, #2]
    4dbe:	230c      	movs	r3, #12
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	01d0      	lsls	r0, r2, #7
    4dc4:	781a      	ldrb	r2, [r3, #0]
    4dc6:	217f      	movs	r1, #127	; 0x7f
    4dc8:	400a      	ands	r2, r1
    4dca:	1c11      	adds	r1, r2, #0
    4dcc:	1c02      	adds	r2, r0, #0
    4dce:	430a      	orrs	r2, r1
    4dd0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	785a      	ldrb	r2, [r3, #1]
    4dd6:	230c      	movs	r3, #12
    4dd8:	18fb      	adds	r3, r7, r3
    4dda:	2101      	movs	r1, #1
    4ddc:	400a      	ands	r2, r1
    4dde:	0190      	lsls	r0, r2, #6
    4de0:	781a      	ldrb	r2, [r3, #0]
    4de2:	2140      	movs	r1, #64	; 0x40
    4de4:	438a      	bics	r2, r1
    4de6:	1c11      	adds	r1, r2, #0
    4de8:	1c02      	adds	r2, r0, #0
    4dea:	430a      	orrs	r2, r1
    4dec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4dee:	4b03      	ldr	r3, [pc, #12]	; (4dfc <system_clock_source_osc8m_set_config+0x74>)
    4df0:	68fa      	ldr	r2, [r7, #12]
    4df2:	621a      	str	r2, [r3, #32]
}
    4df4:	46bd      	mov	sp, r7
    4df6:	b004      	add	sp, #16
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	40000800 	.word	0x40000800

00004e00 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	b084      	sub	sp, #16
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    4e08:	4a53      	ldr	r2, [pc, #332]	; (4f58 <system_clock_source_xosc_set_config+0x158>)
    4e0a:	230c      	movs	r3, #12
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	8a12      	ldrh	r2, [r2, #16]
    4e10:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	785b      	ldrb	r3, [r3, #1]
    4e16:	1c1a      	adds	r2, r3, #0
    4e18:	230f      	movs	r3, #15
    4e1a:	4013      	ands	r3, r2
    4e1c:	b2da      	uxtb	r2, r3
    4e1e:	230c      	movs	r3, #12
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	0110      	lsls	r0, r2, #4
    4e24:	785a      	ldrb	r2, [r3, #1]
    4e26:	210f      	movs	r1, #15
    4e28:	400a      	ands	r2, r1
    4e2a:	1c11      	adds	r1, r2, #0
    4e2c:	1c02      	adds	r2, r0, #0
    4e2e:	430a      	orrs	r2, r1
    4e30:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	781b      	ldrb	r3, [r3, #0]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d106      	bne.n	4e48 <system_clock_source_xosc_set_config+0x48>
		temp.bit.XTALEN = 1;
    4e3a:	230c      	movs	r3, #12
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	781a      	ldrb	r2, [r3, #0]
    4e40:	2104      	movs	r1, #4
    4e42:	430a      	orrs	r2, r1
    4e44:	701a      	strb	r2, [r3, #0]
    4e46:	e005      	b.n	4e54 <system_clock_source_xosc_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    4e48:	230c      	movs	r3, #12
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	781a      	ldrb	r2, [r3, #0]
    4e4e:	2104      	movs	r1, #4
    4e50:	438a      	bics	r2, r1
    4e52:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AMPGC = config->auto_gain_control;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	789a      	ldrb	r2, [r3, #2]
    4e58:	230c      	movs	r3, #12
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	2101      	movs	r1, #1
    4e5e:	400a      	ands	r2, r1
    4e60:	00d0      	lsls	r0, r2, #3
    4e62:	785a      	ldrb	r2, [r3, #1]
    4e64:	2108      	movs	r1, #8
    4e66:	438a      	bics	r2, r1
    4e68:	1c11      	adds	r1, r2, #0
    4e6a:	1c02      	adds	r2, r0, #0
    4e6c:	430a      	orrs	r2, r1
    4e6e:	705a      	strb	r2, [r3, #1]

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	789b      	ldrb	r3, [r3, #2]
    4e74:	2201      	movs	r2, #1
    4e76:	4053      	eors	r3, r2
    4e78:	b2db      	uxtb	r3, r3
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d046      	beq.n	4f0c <system_clock_source_xosc_set_config+0x10c>
		if (config->frequency <= 2000000) {
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	685b      	ldr	r3, [r3, #4]
    4e82:	4a36      	ldr	r2, [pc, #216]	; (4f5c <system_clock_source_xosc_set_config+0x15c>)
    4e84:	4293      	cmp	r3, r2
    4e86:	d806      	bhi.n	4e96 <system_clock_source_xosc_set_config+0x96>
			temp.bit.GAIN = 0;
    4e88:	230c      	movs	r3, #12
    4e8a:	18fb      	adds	r3, r7, r3
    4e8c:	785a      	ldrb	r2, [r3, #1]
    4e8e:	2107      	movs	r1, #7
    4e90:	438a      	bics	r2, r1
    4e92:	705a      	strb	r2, [r3, #1]
    4e94:	e03a      	b.n	4f0c <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 4000000) {
    4e96:	687b      	ldr	r3, [r7, #4]
    4e98:	685b      	ldr	r3, [r3, #4]
    4e9a:	4a31      	ldr	r2, [pc, #196]	; (4f60 <system_clock_source_xosc_set_config+0x160>)
    4e9c:	4293      	cmp	r3, r2
    4e9e:	d809      	bhi.n	4eb4 <system_clock_source_xosc_set_config+0xb4>
			temp.bit.GAIN = 1;
    4ea0:	230c      	movs	r3, #12
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	785a      	ldrb	r2, [r3, #1]
    4ea6:	2107      	movs	r1, #7
    4ea8:	438a      	bics	r2, r1
    4eaa:	1c11      	adds	r1, r2, #0
    4eac:	2201      	movs	r2, #1
    4eae:	430a      	orrs	r2, r1
    4eb0:	705a      	strb	r2, [r3, #1]
    4eb2:	e02b      	b.n	4f0c <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 8000000) {
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	685b      	ldr	r3, [r3, #4]
    4eb8:	4a2a      	ldr	r2, [pc, #168]	; (4f64 <system_clock_source_xosc_set_config+0x164>)
    4eba:	4293      	cmp	r3, r2
    4ebc:	d809      	bhi.n	4ed2 <system_clock_source_xosc_set_config+0xd2>
			temp.bit.GAIN = 2;
    4ebe:	230c      	movs	r3, #12
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	785a      	ldrb	r2, [r3, #1]
    4ec4:	2107      	movs	r1, #7
    4ec6:	438a      	bics	r2, r1
    4ec8:	1c11      	adds	r1, r2, #0
    4eca:	2202      	movs	r2, #2
    4ecc:	430a      	orrs	r2, r1
    4ece:	705a      	strb	r2, [r3, #1]
    4ed0:	e01c      	b.n	4f0c <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 16000000) {
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	685b      	ldr	r3, [r3, #4]
    4ed6:	4a24      	ldr	r2, [pc, #144]	; (4f68 <system_clock_source_xosc_set_config+0x168>)
    4ed8:	4293      	cmp	r3, r2
    4eda:	d809      	bhi.n	4ef0 <system_clock_source_xosc_set_config+0xf0>
			temp.bit.GAIN = 3;
    4edc:	230c      	movs	r3, #12
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	785a      	ldrb	r2, [r3, #1]
    4ee2:	2107      	movs	r1, #7
    4ee4:	438a      	bics	r2, r1
    4ee6:	1c11      	adds	r1, r2, #0
    4ee8:	2203      	movs	r2, #3
    4eea:	430a      	orrs	r2, r1
    4eec:	705a      	strb	r2, [r3, #1]
    4eee:	e00d      	b.n	4f0c <system_clock_source_xosc_set_config+0x10c>
		} else if (config->frequency <= 30000000) {
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	685b      	ldr	r3, [r3, #4]
    4ef4:	4a1d      	ldr	r2, [pc, #116]	; (4f6c <system_clock_source_xosc_set_config+0x16c>)
    4ef6:	4293      	cmp	r3, r2
    4ef8:	d808      	bhi.n	4f0c <system_clock_source_xosc_set_config+0x10c>
			temp.bit.GAIN = 4;
    4efa:	230c      	movs	r3, #12
    4efc:	18fb      	adds	r3, r7, r3
    4efe:	785a      	ldrb	r2, [r3, #1]
    4f00:	2107      	movs	r1, #7
    4f02:	438a      	bics	r2, r1
    4f04:	1c11      	adds	r1, r2, #0
    4f06:	2204      	movs	r2, #4
    4f08:	430a      	orrs	r2, r1
    4f0a:	705a      	strb	r2, [r3, #1]
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	7a5a      	ldrb	r2, [r3, #9]
    4f10:	230c      	movs	r3, #12
    4f12:	18fb      	adds	r3, r7, r3
    4f14:	01d0      	lsls	r0, r2, #7
    4f16:	781a      	ldrb	r2, [r3, #0]
    4f18:	217f      	movs	r1, #127	; 0x7f
    4f1a:	400a      	ands	r2, r1
    4f1c:	1c11      	adds	r1, r2, #0
    4f1e:	1c02      	adds	r2, r0, #0
    4f20:	430a      	orrs	r2, r1
    4f22:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	7a1a      	ldrb	r2, [r3, #8]
    4f28:	230c      	movs	r3, #12
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	2101      	movs	r1, #1
    4f2e:	400a      	ands	r2, r1
    4f30:	0190      	lsls	r0, r2, #6
    4f32:	781a      	ldrb	r2, [r3, #0]
    4f34:	2140      	movs	r1, #64	; 0x40
    4f36:	438a      	bics	r2, r1
    4f38:	1c11      	adds	r1, r2, #0
    4f3a:	1c02      	adds	r2, r0, #0
    4f3c:	430a      	orrs	r2, r1
    4f3e:	701a      	strb	r2, [r3, #0]

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	685a      	ldr	r2, [r3, #4]
    4f44:	4b0a      	ldr	r3, [pc, #40]	; (4f70 <system_clock_source_xosc_set_config+0x170>)
    4f46:	60da      	str	r2, [r3, #12]

	SYSCTRL->XOSC = temp;
    4f48:	4a03      	ldr	r2, [pc, #12]	; (4f58 <system_clock_source_xosc_set_config+0x158>)
    4f4a:	230c      	movs	r3, #12
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	881b      	ldrh	r3, [r3, #0]
    4f50:	8213      	strh	r3, [r2, #16]
}
    4f52:	46bd      	mov	sp, r7
    4f54:	b004      	add	sp, #16
    4f56:	bd80      	pop	{r7, pc}
    4f58:	40000800 	.word	0x40000800
    4f5c:	001e8480 	.word	0x001e8480
    4f60:	003d0900 	.word	0x003d0900
    4f64:	007a1200 	.word	0x007a1200
    4f68:	00f42400 	.word	0x00f42400
    4f6c:	01c9c380 	.word	0x01c9c380
    4f70:	200000c0 	.word	0x200000c0

00004f74 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4f74:	b580      	push	{r7, lr}
    4f76:	b084      	sub	sp, #16
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    4f7c:	4b39      	ldr	r3, [pc, #228]	; (5064 <system_clock_source_dfll_set_config+0xf0>)
    4f7e:	4798      	blx	r3
    4f80:	1c03      	adds	r3, r0, #0
    4f82:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    4f84:	68fa      	ldr	r2, [r7, #12]
    4f86:	23f0      	movs	r3, #240	; 0xf0
    4f88:	011b      	lsls	r3, r3, #4
    4f8a:	4013      	ands	r3, r2
    4f8c:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    4f8e:	68fb      	ldr	r3, [r7, #12]
    4f90:	0a1b      	lsrs	r3, r3, #8
    4f92:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	2b02      	cmp	r3, #2
    4f98:	d80f      	bhi.n	4fba <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	7a1b      	ldrb	r3, [r3, #8]
    4f9e:	021b      	lsls	r3, r3, #8
    4fa0:	1c1a      	adds	r2, r3, #0
    4fa2:	23f8      	movs	r3, #248	; 0xf8
    4fa4:	015b      	lsls	r3, r3, #5
    4fa6:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	895b      	ldrh	r3, [r3, #10]
    4fac:	1c19      	adds	r1, r3, #0
    4fae:	23ff      	movs	r3, #255	; 0xff
    4fb0:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    4fb2:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
    4fb4:	4b2c      	ldr	r3, [pc, #176]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    4fb6:	605a      	str	r2, [r3, #4]
    4fb8:	e00b      	b.n	4fd2 <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	7a1b      	ldrb	r3, [r3, #8]
    4fbe:	029b      	lsls	r3, r3, #10
    4fc0:	041b      	lsls	r3, r3, #16
    4fc2:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	895b      	ldrh	r3, [r3, #10]
    4fc8:	059b      	lsls	r3, r3, #22
    4fca:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    4fcc:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
    4fce:	4b26      	ldr	r3, [pc, #152]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    4fd0:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4fd2:	687b      	ldr	r3, [r7, #4]
    4fd4:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    4fd6:	687b      	ldr	r3, [r7, #4]
    4fd8:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4fda:	4313      	orrs	r3, r2
    4fdc:	b2db      	uxtb	r3, r3
    4fde:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    4fe4:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4fe6:	687a      	ldr	r2, [r7, #4]
    4fe8:	8892      	ldrh	r2, [r2, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4fea:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	785b      	ldrb	r3, [r3, #1]
    4ff0:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4ff2:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
    4ff4:	4b1c      	ldr	r3, [pc, #112]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    4ff6:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4ff8:	687b      	ldr	r3, [r7, #4]
    4ffa:	781b      	ldrb	r3, [r3, #0]
    4ffc:	2b04      	cmp	r3, #4
    4ffe:	d12e      	bne.n	505e <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	2b02      	cmp	r3, #2
    5004:	d814      	bhi.n	5030 <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    5006:	687b      	ldr	r3, [r7, #4]
    5008:	7b1b      	ldrb	r3, [r3, #12]
    500a:	061b      	lsls	r3, r3, #24
    500c:	1c1a      	adds	r2, r3, #0
    500e:	23f8      	movs	r3, #248	; 0xf8
    5010:	055b      	lsls	r3, r3, #21
    5012:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	89db      	ldrh	r3, [r3, #14]
    5018:	041b      	lsls	r3, r3, #16
    501a:	1c19      	adds	r1, r3, #0
    501c:	23ff      	movs	r3, #255	; 0xff
    501e:	041b      	lsls	r3, r3, #16
    5020:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    5022:	4313      	orrs	r3, r2
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5024:	687a      	ldr	r2, [r7, #4]
    5026:	8a12      	ldrh	r2, [r2, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    5028:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
    502a:	4b0f      	ldr	r3, [pc, #60]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    502c:	609a      	str	r2, [r3, #8]
    502e:	e00f      	b.n	5050 <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	7b1b      	ldrb	r3, [r3, #12]
    5034:	069b      	lsls	r3, r3, #26
    5036:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	89db      	ldrh	r3, [r3, #14]
    503c:	041b      	lsls	r3, r3, #16
    503e:	1c19      	adds	r1, r3, #0
    5040:	4b0a      	ldr	r3, [pc, #40]	; (506c <system_clock_source_dfll_set_config+0xf8>)
    5042:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    5044:	4313      	orrs	r3, r2
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5046:	687a      	ldr	r2, [r7, #4]
    5048:	8a12      	ldrh	r2, [r2, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    504a:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
    504c:	4b06      	ldr	r3, [pc, #24]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    504e:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5050:	4b05      	ldr	r3, [pc, #20]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    5052:	681b      	ldr	r3, [r3, #0]
    5054:	687a      	ldr	r2, [r7, #4]
    5056:	7812      	ldrb	r2, [r2, #0]
    5058:	431a      	orrs	r2, r3
    505a:	4b03      	ldr	r3, [pc, #12]	; (5068 <system_clock_source_dfll_set_config+0xf4>)
    505c:	601a      	str	r2, [r3, #0]
	}
}
    505e:	46bd      	mov	sp, r7
    5060:	b004      	add	sp, #16
    5062:	bd80      	pop	{r7, pc}
    5064:	00004c71 	.word	0x00004c71
    5068:	200000c0 	.word	0x200000c0
    506c:	03ff0000 	.word	0x03ff0000

00005070 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	1c02      	adds	r2, r0, #0
    5078:	1dfb      	adds	r3, r7, #7
    507a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    507c:	1dfb      	adds	r3, r7, #7
    507e:	781b      	ldrb	r3, [r3, #0]
    5080:	2b07      	cmp	r3, #7
    5082:	d830      	bhi.n	50e6 <system_clock_source_enable+0x76>
    5084:	009a      	lsls	r2, r3, #2
    5086:	4b1b      	ldr	r3, [pc, #108]	; (50f4 <system_clock_source_enable+0x84>)
    5088:	18d3      	adds	r3, r2, r3
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    508e:	4b1a      	ldr	r3, [pc, #104]	; (50f8 <system_clock_source_enable+0x88>)
    5090:	4a19      	ldr	r2, [pc, #100]	; (50f8 <system_clock_source_enable+0x88>)
    5092:	6a12      	ldr	r2, [r2, #32]
    5094:	2102      	movs	r1, #2
    5096:	430a      	orrs	r2, r1
    5098:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    509a:	2300      	movs	r3, #0
    509c:	e026      	b.n	50ec <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    509e:	4b16      	ldr	r3, [pc, #88]	; (50f8 <system_clock_source_enable+0x88>)
    50a0:	4a15      	ldr	r2, [pc, #84]	; (50f8 <system_clock_source_enable+0x88>)
    50a2:	6992      	ldr	r2, [r2, #24]
    50a4:	2102      	movs	r1, #2
    50a6:	430a      	orrs	r2, r1
    50a8:	619a      	str	r2, [r3, #24]
		break;
    50aa:	e01e      	b.n	50ea <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    50ac:	4a12      	ldr	r2, [pc, #72]	; (50f8 <system_clock_source_enable+0x88>)
    50ae:	4b12      	ldr	r3, [pc, #72]	; (50f8 <system_clock_source_enable+0x88>)
    50b0:	8a1b      	ldrh	r3, [r3, #16]
    50b2:	b29b      	uxth	r3, r3
    50b4:	2102      	movs	r1, #2
    50b6:	430b      	orrs	r3, r1
    50b8:	b29b      	uxth	r3, r3
    50ba:	8213      	strh	r3, [r2, #16]
		break;
    50bc:	e015      	b.n	50ea <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    50be:	4a0e      	ldr	r2, [pc, #56]	; (50f8 <system_clock_source_enable+0x88>)
    50c0:	4b0d      	ldr	r3, [pc, #52]	; (50f8 <system_clock_source_enable+0x88>)
    50c2:	8a9b      	ldrh	r3, [r3, #20]
    50c4:	b29b      	uxth	r3, r3
    50c6:	2102      	movs	r1, #2
    50c8:	430b      	orrs	r3, r1
    50ca:	b29b      	uxth	r3, r3
    50cc:	8293      	strh	r3, [r2, #20]
		break;
    50ce:	e00c      	b.n	50ea <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    50d0:	4b0a      	ldr	r3, [pc, #40]	; (50fc <system_clock_source_enable+0x8c>)
    50d2:	681b      	ldr	r3, [r3, #0]
    50d4:	2202      	movs	r2, #2
    50d6:	431a      	orrs	r2, r3
    50d8:	4b08      	ldr	r3, [pc, #32]	; (50fc <system_clock_source_enable+0x8c>)
    50da:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    50dc:	4b08      	ldr	r3, [pc, #32]	; (5100 <system_clock_source_enable+0x90>)
    50de:	4798      	blx	r3
		break;
    50e0:	e003      	b.n	50ea <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    50e2:	2300      	movs	r3, #0
    50e4:	e002      	b.n	50ec <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    50e6:	2317      	movs	r3, #23
    50e8:	e000      	b.n	50ec <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    50ea:	2300      	movs	r3, #0
}
    50ec:	1c18      	adds	r0, r3, #0
    50ee:	46bd      	mov	sp, r7
    50f0:	b002      	add	sp, #8
    50f2:	bd80      	pop	{r7, pc}
    50f4:	00006f9c 	.word	0x00006f9c
    50f8:	40000800 	.word	0x40000800
    50fc:	200000c0 	.word	0x200000c0
    5100:	00004c9d 	.word	0x00004c9d

00005104 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5104:	b580      	push	{r7, lr}
    5106:	b084      	sub	sp, #16
    5108:	af00      	add	r7, sp, #0
    510a:	1c02      	adds	r2, r0, #0
    510c:	1dfb      	adds	r3, r7, #7
    510e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5110:	2300      	movs	r3, #0
    5112:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5114:	1dfb      	adds	r3, r7, #7
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	2b07      	cmp	r3, #7
    511a:	d815      	bhi.n	5148 <system_clock_source_is_ready+0x44>
    511c:	009a      	lsls	r2, r3, #2
    511e:	4b12      	ldr	r3, [pc, #72]	; (5168 <system_clock_source_is_ready+0x64>)
    5120:	18d3      	adds	r3, r2, r3
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5126:	2308      	movs	r3, #8
    5128:	60fb      	str	r3, [r7, #12]
		break;
    512a:	e00f      	b.n	514c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    512c:	2304      	movs	r3, #4
    512e:	60fb      	str	r3, [r7, #12]
		break;
    5130:	e00c      	b.n	514c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5132:	2301      	movs	r3, #1
    5134:	60fb      	str	r3, [r7, #12]
		break;
    5136:	e009      	b.n	514c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5138:	2302      	movs	r3, #2
    513a:	60fb      	str	r3, [r7, #12]
		break;
    513c:	e006      	b.n	514c <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    513e:	2310      	movs	r3, #16
    5140:	60fb      	str	r3, [r7, #12]
		}
		break;
    5142:	e003      	b.n	514c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5144:	2301      	movs	r3, #1
    5146:	e00a      	b.n	515e <system_clock_source_is_ready+0x5a>

	default:
		return false;
    5148:	2300      	movs	r3, #0
    514a:	e008      	b.n	515e <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    514c:	4b07      	ldr	r3, [pc, #28]	; (516c <system_clock_source_is_ready+0x68>)
    514e:	68db      	ldr	r3, [r3, #12]
    5150:	68fa      	ldr	r2, [r7, #12]
    5152:	401a      	ands	r2, r3
    5154:	68fb      	ldr	r3, [r7, #12]
    5156:	1ad3      	subs	r3, r2, r3
    5158:	425a      	negs	r2, r3
    515a:	4153      	adcs	r3, r2
    515c:	b2db      	uxtb	r3, r3
}
    515e:	1c18      	adds	r0, r3, #0
    5160:	46bd      	mov	sp, r7
    5162:	b004      	add	sp, #16
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			; (mov r8, r8)
    5168:	00006fbc 	.word	0x00006fbc
    516c:	40000800 	.word	0x40000800

00005170 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5176:	1c3b      	adds	r3, r7, #0
    5178:	2202      	movs	r2, #2
    517a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    517c:	2300      	movs	r3, #0
    517e:	607b      	str	r3, [r7, #4]
    5180:	e009      	b.n	5196 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5182:	687b      	ldr	r3, [r7, #4]
    5184:	b2da      	uxtb	r2, r3
    5186:	1c3b      	adds	r3, r7, #0
    5188:	1c10      	adds	r0, r2, #0
    518a:	1c19      	adds	r1, r3, #0
    518c:	4b05      	ldr	r3, [pc, #20]	; (51a4 <_switch_peripheral_gclk+0x34>)
    518e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	3301      	adds	r3, #1
    5194:	607b      	str	r3, [r7, #4]
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	2b1b      	cmp	r3, #27
    519a:	d9f2      	bls.n	5182 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    519c:	46bd      	mov	sp, r7
    519e:	b002      	add	sp, #8
    51a0:	bd80      	pop	{r7, pc}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	000057a5 	.word	0x000057a5

000051a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    51a8:	b580      	push	{r7, lr}
    51aa:	b0a8      	sub	sp, #160	; 0xa0
    51ac:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    51ae:	4b9d      	ldr	r3, [pc, #628]	; (5424 <system_clock_init+0x27c>)
    51b0:	22c2      	movs	r2, #194	; 0xc2
    51b2:	00d2      	lsls	r2, r2, #3
    51b4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    51b6:	2000      	movs	r0, #0
    51b8:	4b9b      	ldr	r3, [pc, #620]	; (5428 <system_clock_init+0x280>)
    51ba:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    51bc:	4b9b      	ldr	r3, [pc, #620]	; (542c <system_clock_init+0x284>)
    51be:	4798      	blx	r3

	/* XOSC */
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);
    51c0:	238c      	movs	r3, #140	; 0x8c
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	1c18      	adds	r0, r3, #0
    51c6:	4b9a      	ldr	r3, [pc, #616]	; (5430 <system_clock_init+0x288>)
    51c8:	4798      	blx	r3

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
    51ca:	238c      	movs	r3, #140	; 0x8c
    51cc:	18fb      	adds	r3, r7, r3
    51ce:	2200      	movs	r2, #0
    51d0:	701a      	strb	r2, [r3, #0]
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    51d2:	238c      	movs	r3, #140	; 0x8c
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	220f      	movs	r2, #15
    51d8:	705a      	strb	r2, [r3, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
    51da:	238c      	movs	r3, #140	; 0x8c
    51dc:	18fb      	adds	r3, r7, r3
    51de:	2201      	movs	r2, #1
    51e0:	709a      	strb	r2, [r3, #2]
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    51e2:	238c      	movs	r3, #140	; 0x8c
    51e4:	18fb      	adds	r3, r7, r3
    51e6:	4a93      	ldr	r2, [pc, #588]	; (5434 <system_clock_init+0x28c>)
    51e8:	605a      	str	r2, [r3, #4]
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
    51ea:	238c      	movs	r3, #140	; 0x8c
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	2201      	movs	r2, #1
    51f0:	725a      	strb	r2, [r3, #9]
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    51f2:	238c      	movs	r3, #140	; 0x8c
    51f4:	18fb      	adds	r3, r7, r3
    51f6:	2200      	movs	r2, #0
    51f8:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    51fa:	238c      	movs	r3, #140	; 0x8c
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	1c18      	adds	r0, r3, #0
    5200:	4b8d      	ldr	r3, [pc, #564]	; (5438 <system_clock_init+0x290>)
    5202:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    5204:	2000      	movs	r0, #0
    5206:	4b8d      	ldr	r3, [pc, #564]	; (543c <system_clock_init+0x294>)
    5208:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    520a:	2378      	movs	r3, #120	; 0x78
    520c:	18fb      	adds	r3, r7, r3
    520e:	1c18      	adds	r0, r3, #0
    5210:	4b8b      	ldr	r3, [pc, #556]	; (5440 <system_clock_init+0x298>)
    5212:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5214:	2378      	movs	r3, #120	; 0x78
    5216:	18fb      	adds	r3, r7, r3
    5218:	2200      	movs	r2, #0
    521a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    521c:	2378      	movs	r3, #120	; 0x78
    521e:	18fb      	adds	r3, r7, r3
    5220:	2200      	movs	r2, #0
    5222:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
     in DFLL.COARSE helps to output a frequency close to 48 MHz.
	   Not applicable for silicon rev C and previous*/

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    5224:	4b87      	ldr	r3, [pc, #540]	; (5444 <system_clock_init+0x29c>)
    5226:	4798      	blx	r3
    5228:	1c03      	adds	r3, r0, #0
    522a:	2298      	movs	r2, #152	; 0x98
    522c:	18ba      	adds	r2, r7, r2
    522e:	6013      	str	r3, [r2, #0]

	rev &= DSU_DID_REVISION_Msk;
    5230:	2398      	movs	r3, #152	; 0x98
    5232:	18fb      	adds	r3, r7, r3
    5234:	681a      	ldr	r2, [r3, #0]
    5236:	23f0      	movs	r3, #240	; 0xf0
    5238:	011b      	lsls	r3, r3, #4
    523a:	4013      	ands	r3, r2
    523c:	2298      	movs	r2, #152	; 0x98
    523e:	18ba      	adds	r2, r7, r2
    5240:	6013      	str	r3, [r2, #0]
	rev = rev >> DSU_DID_REVISION_Pos;
    5242:	2398      	movs	r3, #152	; 0x98
    5244:	18fb      	adds	r3, r7, r3
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	0a1b      	lsrs	r3, r3, #8
    524a:	2298      	movs	r2, #152	; 0x98
    524c:	18ba      	adds	r2, r7, r2
    524e:	6013      	str	r3, [r2, #0]

	if (rev >= _SYSTEM_MCU_REVISION_D) {
    5250:	2398      	movs	r3, #152	; 0x98
    5252:	18fb      	adds	r3, r7, r3
    5254:	681b      	ldr	r3, [r3, #0]
    5256:	2b02      	cmp	r3, #2
    5258:	d915      	bls.n	5286 <system_clock_init+0xde>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    525a:	4b7b      	ldr	r3, [pc, #492]	; (5448 <system_clock_init+0x2a0>)
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	0e9b      	lsrs	r3, r3, #26
    5260:	229c      	movs	r2, #156	; 0x9c
    5262:	18ba      	adds	r2, r7, r2
    5264:	6013      	str	r3, [r2, #0]
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
    5266:	239c      	movs	r3, #156	; 0x9c
    5268:	18fb      	adds	r3, r7, r3
    526a:	681b      	ldr	r3, [r3, #0]
    526c:	2b3f      	cmp	r3, #63	; 0x3f
    526e:	d103      	bne.n	5278 <system_clock_init+0xd0>
			coarse = 0x1f;
    5270:	231f      	movs	r3, #31
    5272:	229c      	movs	r2, #156	; 0x9c
    5274:	18ba      	adds	r2, r7, r2
    5276:	6013      	str	r3, [r2, #0]
		}
		dfll_conf.coarse_value = coarse;
    5278:	239c      	movs	r3, #156	; 0x9c
    527a:	18fb      	adds	r3, r7, r3
    527c:	681b      	ldr	r3, [r3, #0]
    527e:	b2da      	uxtb	r2, r3
    5280:	2378      	movs	r3, #120	; 0x78
    5282:	18fb      	adds	r3, r7, r3
    5284:	721a      	strb	r2, [r3, #8]
	}

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    5286:	2378      	movs	r3, #120	; 0x78
    5288:	18fb      	adds	r3, r7, r3
    528a:	223f      	movs	r2, #63	; 0x3f
    528c:	815a      	strh	r2, [r3, #10]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    528e:	2378      	movs	r3, #120	; 0x78
    5290:	18fb      	adds	r3, r7, r3
    5292:	2200      	movs	r2, #0
    5294:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5296:	2378      	movs	r3, #120	; 0x78
    5298:	18fb      	adds	r3, r7, r3
    529a:	2200      	movs	r2, #0
    529c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    529e:	2378      	movs	r3, #120	; 0x78
    52a0:	18fb      	adds	r3, r7, r3
    52a2:	2200      	movs	r2, #0
    52a4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    52a6:	2378      	movs	r3, #120	; 0x78
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	2200      	movs	r2, #0
    52ac:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    52ae:	2378      	movs	r3, #120	; 0x78
    52b0:	18fb      	adds	r3, r7, r3
    52b2:	2207      	movs	r2, #7
    52b4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    52b6:	2378      	movs	r3, #120	; 0x78
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	223f      	movs	r2, #63	; 0x3f
    52bc:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
    52be:	2378      	movs	r3, #120	; 0x78
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	1c18      	adds	r0, r3, #0
    52c4:	4b61      	ldr	r3, [pc, #388]	; (544c <system_clock_init+0x2a4>)
    52c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    52c8:	2374      	movs	r3, #116	; 0x74
    52ca:	18fb      	adds	r3, r7, r3
    52cc:	1c18      	adds	r0, r3, #0
    52ce:	4b60      	ldr	r3, [pc, #384]	; (5450 <system_clock_init+0x2a8>)
    52d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    52d2:	2374      	movs	r3, #116	; 0x74
    52d4:	18fb      	adds	r3, r7, r3
    52d6:	2200      	movs	r2, #0
    52d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    52da:	2374      	movs	r3, #116	; 0x74
    52dc:	18fb      	adds	r3, r7, r3
    52de:	2201      	movs	r2, #1
    52e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    52e2:	2374      	movs	r3, #116	; 0x74
    52e4:	18fb      	adds	r3, r7, r3
    52e6:	2200      	movs	r2, #0
    52e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    52ea:	2374      	movs	r3, #116	; 0x74
    52ec:	18fb      	adds	r3, r7, r3
    52ee:	1c18      	adds	r0, r3, #0
    52f0:	4b58      	ldr	r3, [pc, #352]	; (5454 <system_clock_init+0x2ac>)
    52f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    52f4:	2006      	movs	r0, #6
    52f6:	4b51      	ldr	r3, [pc, #324]	; (543c <system_clock_init+0x294>)
    52f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    52fa:	4b57      	ldr	r3, [pc, #348]	; (5458 <system_clock_init+0x2b0>)
    52fc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    52fe:	235c      	movs	r3, #92	; 0x5c
    5300:	18fb      	adds	r3, r7, r3
    5302:	1c18      	adds	r0, r3, #0
    5304:	4b55      	ldr	r3, [pc, #340]	; (545c <system_clock_init+0x2b4>)
    5306:	4798      	blx	r3
    5308:	235c      	movs	r3, #92	; 0x5c
    530a:	18fb      	adds	r3, r7, r3
    530c:	2206      	movs	r2, #6
    530e:	701a      	strb	r2, [r3, #0]
    5310:	235c      	movs	r3, #92	; 0x5c
    5312:	18fb      	adds	r3, r7, r3
    5314:	2201      	movs	r2, #1
    5316:	605a      	str	r2, [r3, #4]
    5318:	235c      	movs	r3, #92	; 0x5c
    531a:	18fb      	adds	r3, r7, r3
    531c:	2200      	movs	r2, #0
    531e:	721a      	strb	r2, [r3, #8]
    5320:	235c      	movs	r3, #92	; 0x5c
    5322:	18fb      	adds	r3, r7, r3
    5324:	2200      	movs	r2, #0
    5326:	725a      	strb	r2, [r3, #9]
    5328:	235c      	movs	r3, #92	; 0x5c
    532a:	18fb      	adds	r3, r7, r3
    532c:	2001      	movs	r0, #1
    532e:	1c19      	adds	r1, r3, #0
    5330:	4b4b      	ldr	r3, [pc, #300]	; (5460 <system_clock_init+0x2b8>)
    5332:	4798      	blx	r3
    5334:	2001      	movs	r0, #1
    5336:	4b4b      	ldr	r3, [pc, #300]	; (5464 <system_clock_init+0x2bc>)
    5338:	4798      	blx	r3
    533a:	2344      	movs	r3, #68	; 0x44
    533c:	18fb      	adds	r3, r7, r3
    533e:	1c18      	adds	r0, r3, #0
    5340:	4b46      	ldr	r3, [pc, #280]	; (545c <system_clock_init+0x2b4>)
    5342:	4798      	blx	r3
    5344:	2344      	movs	r3, #68	; 0x44
    5346:	18fb      	adds	r3, r7, r3
    5348:	2206      	movs	r2, #6
    534a:	701a      	strb	r2, [r3, #0]
    534c:	2344      	movs	r3, #68	; 0x44
    534e:	18fb      	adds	r3, r7, r3
    5350:	2205      	movs	r2, #5
    5352:	605a      	str	r2, [r3, #4]
    5354:	2344      	movs	r3, #68	; 0x44
    5356:	18fb      	adds	r3, r7, r3
    5358:	2200      	movs	r2, #0
    535a:	721a      	strb	r2, [r3, #8]
    535c:	2344      	movs	r3, #68	; 0x44
    535e:	18fb      	adds	r3, r7, r3
    5360:	2200      	movs	r2, #0
    5362:	725a      	strb	r2, [r3, #9]
    5364:	2344      	movs	r3, #68	; 0x44
    5366:	18fb      	adds	r3, r7, r3
    5368:	2003      	movs	r0, #3
    536a:	1c19      	adds	r1, r3, #0
    536c:	4b3c      	ldr	r3, [pc, #240]	; (5460 <system_clock_init+0x2b8>)
    536e:	4798      	blx	r3
    5370:	2003      	movs	r0, #3
    5372:	4b3c      	ldr	r3, [pc, #240]	; (5464 <system_clock_init+0x2bc>)
    5374:	4798      	blx	r3
    5376:	2338      	movs	r3, #56	; 0x38
    5378:	18fb      	adds	r3, r7, r3
    537a:	1c18      	adds	r0, r3, #0
    537c:	4b37      	ldr	r3, [pc, #220]	; (545c <system_clock_init+0x2b4>)
    537e:	4798      	blx	r3
    5380:	2338      	movs	r3, #56	; 0x38
    5382:	18fb      	adds	r3, r7, r3
    5384:	2200      	movs	r2, #0
    5386:	701a      	strb	r2, [r3, #0]
    5388:	2338      	movs	r3, #56	; 0x38
    538a:	18fb      	adds	r3, r7, r3
    538c:	2201      	movs	r2, #1
    538e:	605a      	str	r2, [r3, #4]
    5390:	2338      	movs	r3, #56	; 0x38
    5392:	18fb      	adds	r3, r7, r3
    5394:	2200      	movs	r2, #0
    5396:	721a      	strb	r2, [r3, #8]
    5398:	2338      	movs	r3, #56	; 0x38
    539a:	18fb      	adds	r3, r7, r3
    539c:	2200      	movs	r2, #0
    539e:	725a      	strb	r2, [r3, #9]
    53a0:	2338      	movs	r3, #56	; 0x38
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	2004      	movs	r0, #4
    53a6:	1c19      	adds	r1, r3, #0
    53a8:	4b2d      	ldr	r3, [pc, #180]	; (5460 <system_clock_init+0x2b8>)
    53aa:	4798      	blx	r3
    53ac:	2004      	movs	r0, #4
    53ae:	4b2d      	ldr	r3, [pc, #180]	; (5464 <system_clock_init+0x2bc>)
    53b0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    53b2:	2007      	movs	r0, #7
    53b4:	4b21      	ldr	r3, [pc, #132]	; (543c <system_clock_init+0x294>)
    53b6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    53b8:	46c0      	nop			; (mov r8, r8)
    53ba:	2007      	movs	r0, #7
    53bc:	4b2a      	ldr	r3, [pc, #168]	; (5468 <system_clock_init+0x2c0>)
    53be:	4798      	blx	r3
    53c0:	1c03      	adds	r3, r0, #0
    53c2:	1c1a      	adds	r2, r3, #0
    53c4:	2301      	movs	r3, #1
    53c6:	4053      	eors	r3, r2
    53c8:	b2db      	uxtb	r3, r3
    53ca:	2b00      	cmp	r3, #0
    53cc:	d1f5      	bne.n	53ba <system_clock_init+0x212>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    53ce:	2000      	movs	r0, #0
    53d0:	4b26      	ldr	r3, [pc, #152]	; (546c <system_clock_init+0x2c4>)
    53d2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    53d4:	2000      	movs	r0, #0
    53d6:	2100      	movs	r1, #0
    53d8:	4b25      	ldr	r3, [pc, #148]	; (5470 <system_clock_init+0x2c8>)
    53da:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    53dc:	2001      	movs	r0, #1
    53de:	2100      	movs	r1, #0
    53e0:	4b23      	ldr	r3, [pc, #140]	; (5470 <system_clock_init+0x2c8>)
    53e2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    53e4:	2002      	movs	r0, #2
    53e6:	2100      	movs	r1, #0
    53e8:	4b21      	ldr	r3, [pc, #132]	; (5470 <system_clock_init+0x2c8>)
    53ea:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    53ec:	1d3b      	adds	r3, r7, #4
    53ee:	1c18      	adds	r0, r3, #0
    53f0:	4b1a      	ldr	r3, [pc, #104]	; (545c <system_clock_init+0x2b4>)
    53f2:	4798      	blx	r3
    53f4:	1d3b      	adds	r3, r7, #4
    53f6:	2206      	movs	r2, #6
    53f8:	701a      	strb	r2, [r3, #0]
    53fa:	1d3b      	adds	r3, r7, #4
    53fc:	2201      	movs	r2, #1
    53fe:	605a      	str	r2, [r3, #4]
    5400:	1d3b      	adds	r3, r7, #4
    5402:	2200      	movs	r2, #0
    5404:	721a      	strb	r2, [r3, #8]
    5406:	1d3b      	adds	r3, r7, #4
    5408:	2200      	movs	r2, #0
    540a:	725a      	strb	r2, [r3, #9]
    540c:	1d3b      	adds	r3, r7, #4
    540e:	2000      	movs	r0, #0
    5410:	1c19      	adds	r1, r3, #0
    5412:	4b13      	ldr	r3, [pc, #76]	; (5460 <system_clock_init+0x2b8>)
    5414:	4798      	blx	r3
    5416:	2000      	movs	r0, #0
    5418:	4b12      	ldr	r3, [pc, #72]	; (5464 <system_clock_init+0x2bc>)
    541a:	4798      	blx	r3
#endif
}
    541c:	46bd      	mov	sp, r7
    541e:	b028      	add	sp, #160	; 0xa0
    5420:	bd80      	pop	{r7, pc}
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	40000800 	.word	0x40000800
    5428:	00004c3d 	.word	0x00004c3d
    542c:	00005171 	.word	0x00005171
    5430:	00004b21 	.word	0x00004b21
    5434:	00b71b00 	.word	0x00b71b00
    5438:	00004e01 	.word	0x00004e01
    543c:	00005071 	.word	0x00005071
    5440:	00004b79 	.word	0x00004b79
    5444:	00004c71 	.word	0x00004c71
    5448:	00806024 	.word	0x00806024
    544c:	00004f75 	.word	0x00004f75
    5450:	00004b59 	.word	0x00004b59
    5454:	00004d89 	.word	0x00004d89
    5458:	00005515 	.word	0x00005515
    545c:	00004af5 	.word	0x00004af5
    5460:	00005545 	.word	0x00005545
    5464:	00005665 	.word	0x00005665
    5468:	00005105 	.word	0x00005105
    546c:	00004bc9 	.word	0x00004bc9
    5470:	00004be9 	.word	0x00004be9

00005474 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5474:	b580      	push	{r7, lr}
    5476:	b082      	sub	sp, #8
    5478:	af00      	add	r7, sp, #0
    547a:	1c02      	adds	r2, r0, #0
    547c:	6039      	str	r1, [r7, #0]
    547e:	1dfb      	adds	r3, r7, #7
    5480:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5482:	1dfb      	adds	r3, r7, #7
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	2b01      	cmp	r3, #1
    5488:	d00a      	beq.n	54a0 <system_apb_clock_set_mask+0x2c>
    548a:	2b02      	cmp	r3, #2
    548c:	d00f      	beq.n	54ae <system_apb_clock_set_mask+0x3a>
    548e:	2b00      	cmp	r3, #0
    5490:	d114      	bne.n	54bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5492:	4b0e      	ldr	r3, [pc, #56]	; (54cc <system_apb_clock_set_mask+0x58>)
    5494:	4a0d      	ldr	r2, [pc, #52]	; (54cc <system_apb_clock_set_mask+0x58>)
    5496:	6991      	ldr	r1, [r2, #24]
    5498:	683a      	ldr	r2, [r7, #0]
    549a:	430a      	orrs	r2, r1
    549c:	619a      	str	r2, [r3, #24]
			break;
    549e:	e00f      	b.n	54c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    54a0:	4b0a      	ldr	r3, [pc, #40]	; (54cc <system_apb_clock_set_mask+0x58>)
    54a2:	4a0a      	ldr	r2, [pc, #40]	; (54cc <system_apb_clock_set_mask+0x58>)
    54a4:	69d1      	ldr	r1, [r2, #28]
    54a6:	683a      	ldr	r2, [r7, #0]
    54a8:	430a      	orrs	r2, r1
    54aa:	61da      	str	r2, [r3, #28]
			break;
    54ac:	e008      	b.n	54c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    54ae:	4b07      	ldr	r3, [pc, #28]	; (54cc <system_apb_clock_set_mask+0x58>)
    54b0:	4a06      	ldr	r2, [pc, #24]	; (54cc <system_apb_clock_set_mask+0x58>)
    54b2:	6a11      	ldr	r1, [r2, #32]
    54b4:	683a      	ldr	r2, [r7, #0]
    54b6:	430a      	orrs	r2, r1
    54b8:	621a      	str	r2, [r3, #32]
			break;
    54ba:	e001      	b.n	54c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    54bc:	2317      	movs	r3, #23
    54be:	e000      	b.n	54c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    54c0:	2300      	movs	r3, #0
}
    54c2:	1c18      	adds	r0, r3, #0
    54c4:	46bd      	mov	sp, r7
    54c6:	b002      	add	sp, #8
    54c8:	bd80      	pop	{r7, pc}
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	40000400 	.word	0x40000400

000054d0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    54d0:	b580      	push	{r7, lr}
    54d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    54d4:	4b01      	ldr	r3, [pc, #4]	; (54dc <system_interrupt_enter_critical_section+0xc>)
    54d6:	4798      	blx	r3
}
    54d8:	46bd      	mov	sp, r7
    54da:	bd80      	pop	{r7, pc}
    54dc:	00003639 	.word	0x00003639

000054e0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    54e0:	b580      	push	{r7, lr}
    54e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    54e4:	4b01      	ldr	r3, [pc, #4]	; (54ec <system_interrupt_leave_critical_section+0xc>)
    54e6:	4798      	blx	r3
}
    54e8:	46bd      	mov	sp, r7
    54ea:	bd80      	pop	{r7, pc}
    54ec:	00003689 	.word	0x00003689

000054f0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    54f4:	4b06      	ldr	r3, [pc, #24]	; (5510 <system_gclk_is_syncing+0x20>)
    54f6:	785b      	ldrb	r3, [r3, #1]
    54f8:	b2db      	uxtb	r3, r3
    54fa:	b2db      	uxtb	r3, r3
    54fc:	b25b      	sxtb	r3, r3
    54fe:	2b00      	cmp	r3, #0
    5500:	da01      	bge.n	5506 <system_gclk_is_syncing+0x16>
		return true;
    5502:	2301      	movs	r3, #1
    5504:	e000      	b.n	5508 <system_gclk_is_syncing+0x18>
	}

	return false;
    5506:	2300      	movs	r3, #0
}
    5508:	1c18      	adds	r0, r3, #0
    550a:	46bd      	mov	sp, r7
    550c:	bd80      	pop	{r7, pc}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	40000c00 	.word	0x40000c00

00005514 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5514:	b580      	push	{r7, lr}
    5516:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5518:	2000      	movs	r0, #0
    551a:	2108      	movs	r1, #8
    551c:	4b07      	ldr	r3, [pc, #28]	; (553c <system_gclk_init+0x28>)
    551e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5520:	4b07      	ldr	r3, [pc, #28]	; (5540 <system_gclk_init+0x2c>)
    5522:	2201      	movs	r2, #1
    5524:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5526:	46c0      	nop			; (mov r8, r8)
    5528:	4b05      	ldr	r3, [pc, #20]	; (5540 <system_gclk_init+0x2c>)
    552a:	781b      	ldrb	r3, [r3, #0]
    552c:	b2db      	uxtb	r3, r3
    552e:	1c1a      	adds	r2, r3, #0
    5530:	2301      	movs	r3, #1
    5532:	4013      	ands	r3, r2
    5534:	d1f8      	bne.n	5528 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5536:	46bd      	mov	sp, r7
    5538:	bd80      	pop	{r7, pc}
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	00005475 	.word	0x00005475
    5540:	40000c00 	.word	0x40000c00

00005544 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5544:	b580      	push	{r7, lr}
    5546:	b086      	sub	sp, #24
    5548:	af00      	add	r7, sp, #0
    554a:	1c02      	adds	r2, r0, #0
    554c:	6039      	str	r1, [r7, #0]
    554e:	1dfb      	adds	r3, r7, #7
    5550:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5552:	1dfb      	adds	r3, r7, #7
    5554:	781b      	ldrb	r3, [r3, #0]
    5556:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5558:	1dfb      	adds	r3, r7, #7
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    555e:	683b      	ldr	r3, [r7, #0]
    5560:	781b      	ldrb	r3, [r3, #0]
    5562:	021b      	lsls	r3, r3, #8
    5564:	1c1a      	adds	r2, r3, #0
    5566:	697b      	ldr	r3, [r7, #20]
    5568:	4313      	orrs	r3, r2
    556a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    556c:	683b      	ldr	r3, [r7, #0]
    556e:	785b      	ldrb	r3, [r3, #1]
    5570:	2b00      	cmp	r3, #0
    5572:	d004      	beq.n	557e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5574:	697b      	ldr	r3, [r7, #20]
    5576:	2280      	movs	r2, #128	; 0x80
    5578:	02d2      	lsls	r2, r2, #11
    557a:	4313      	orrs	r3, r2
    557c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    557e:	683b      	ldr	r3, [r7, #0]
    5580:	7a5b      	ldrb	r3, [r3, #9]
    5582:	2b00      	cmp	r3, #0
    5584:	d004      	beq.n	5590 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5586:	697b      	ldr	r3, [r7, #20]
    5588:	2280      	movs	r2, #128	; 0x80
    558a:	0312      	lsls	r2, r2, #12
    558c:	4313      	orrs	r3, r2
    558e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5590:	683b      	ldr	r3, [r7, #0]
    5592:	685b      	ldr	r3, [r3, #4]
    5594:	2b01      	cmp	r3, #1
    5596:	d92c      	bls.n	55f2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5598:	683b      	ldr	r3, [r7, #0]
    559a:	685a      	ldr	r2, [r3, #4]
    559c:	683b      	ldr	r3, [r7, #0]
    559e:	685b      	ldr	r3, [r3, #4]
    55a0:	3b01      	subs	r3, #1
    55a2:	4013      	ands	r3, r2
    55a4:	d11a      	bne.n	55dc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    55a6:	2300      	movs	r3, #0
    55a8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    55aa:	2302      	movs	r3, #2
    55ac:	60bb      	str	r3, [r7, #8]
    55ae:	e005      	b.n	55bc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	3301      	adds	r3, #1
    55b4:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    55b6:	68bb      	ldr	r3, [r7, #8]
    55b8:	005b      	lsls	r3, r3, #1
    55ba:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    55bc:	683b      	ldr	r3, [r7, #0]
    55be:	685a      	ldr	r2, [r3, #4]
    55c0:	68bb      	ldr	r3, [r7, #8]
    55c2:	429a      	cmp	r2, r3
    55c4:	d8f4      	bhi.n	55b0 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    55c6:	68fb      	ldr	r3, [r7, #12]
    55c8:	021b      	lsls	r3, r3, #8
    55ca:	693a      	ldr	r2, [r7, #16]
    55cc:	4313      	orrs	r3, r2
    55ce:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    55d0:	697b      	ldr	r3, [r7, #20]
    55d2:	2280      	movs	r2, #128	; 0x80
    55d4:	0352      	lsls	r2, r2, #13
    55d6:	4313      	orrs	r3, r2
    55d8:	617b      	str	r3, [r7, #20]
    55da:	e00a      	b.n	55f2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    55dc:	683b      	ldr	r3, [r7, #0]
    55de:	685b      	ldr	r3, [r3, #4]
    55e0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    55e2:	693a      	ldr	r2, [r7, #16]
    55e4:	4313      	orrs	r3, r2
    55e6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    55e8:	697b      	ldr	r3, [r7, #20]
    55ea:	2280      	movs	r2, #128	; 0x80
    55ec:	0292      	lsls	r2, r2, #10
    55ee:	4313      	orrs	r3, r2
    55f0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    55f2:	683b      	ldr	r3, [r7, #0]
    55f4:	7a1b      	ldrb	r3, [r3, #8]
    55f6:	2b00      	cmp	r3, #0
    55f8:	d004      	beq.n	5604 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    55fa:	697b      	ldr	r3, [r7, #20]
    55fc:	2280      	movs	r2, #128	; 0x80
    55fe:	0392      	lsls	r2, r2, #14
    5600:	4313      	orrs	r3, r2
    5602:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5604:	46c0      	nop			; (mov r8, r8)
    5606:	4b12      	ldr	r3, [pc, #72]	; (5650 <system_gclk_gen_set_config+0x10c>)
    5608:	4798      	blx	r3
    560a:	1e03      	subs	r3, r0, #0
    560c:	d1fb      	bne.n	5606 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    560e:	4b11      	ldr	r3, [pc, #68]	; (5654 <system_gclk_gen_set_config+0x110>)
    5610:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5612:	4a11      	ldr	r2, [pc, #68]	; (5658 <system_gclk_gen_set_config+0x114>)
    5614:	1dfb      	adds	r3, r7, #7
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	4b0c      	ldr	r3, [pc, #48]	; (5650 <system_gclk_gen_set_config+0x10c>)
    561e:	4798      	blx	r3
    5620:	1e03      	subs	r3, r0, #0
    5622:	d1fb      	bne.n	561c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5624:	4b0d      	ldr	r3, [pc, #52]	; (565c <system_gclk_gen_set_config+0x118>)
    5626:	693a      	ldr	r2, [r7, #16]
    5628:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    562a:	46c0      	nop			; (mov r8, r8)
    562c:	4b08      	ldr	r3, [pc, #32]	; (5650 <system_gclk_gen_set_config+0x10c>)
    562e:	4798      	blx	r3
    5630:	1e03      	subs	r3, r0, #0
    5632:	d1fb      	bne.n	562c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5634:	4b09      	ldr	r3, [pc, #36]	; (565c <system_gclk_gen_set_config+0x118>)
    5636:	4a09      	ldr	r2, [pc, #36]	; (565c <system_gclk_gen_set_config+0x118>)
    5638:	6851      	ldr	r1, [r2, #4]
    563a:	2280      	movs	r2, #128	; 0x80
    563c:	0252      	lsls	r2, r2, #9
    563e:	4011      	ands	r1, r2
    5640:	697a      	ldr	r2, [r7, #20]
    5642:	430a      	orrs	r2, r1
    5644:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5646:	4b06      	ldr	r3, [pc, #24]	; (5660 <system_gclk_gen_set_config+0x11c>)
    5648:	4798      	blx	r3
}
    564a:	46bd      	mov	sp, r7
    564c:	b006      	add	sp, #24
    564e:	bd80      	pop	{r7, pc}
    5650:	000054f1 	.word	0x000054f1
    5654:	000054d1 	.word	0x000054d1
    5658:	40000c08 	.word	0x40000c08
    565c:	40000c00 	.word	0x40000c00
    5660:	000054e1 	.word	0x000054e1

00005664 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5664:	b580      	push	{r7, lr}
    5666:	b082      	sub	sp, #8
    5668:	af00      	add	r7, sp, #0
    566a:	1c02      	adds	r2, r0, #0
    566c:	1dfb      	adds	r3, r7, #7
    566e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5670:	46c0      	nop			; (mov r8, r8)
    5672:	4b0d      	ldr	r3, [pc, #52]	; (56a8 <system_gclk_gen_enable+0x44>)
    5674:	4798      	blx	r3
    5676:	1e03      	subs	r3, r0, #0
    5678:	d1fb      	bne.n	5672 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    567a:	4b0c      	ldr	r3, [pc, #48]	; (56ac <system_gclk_gen_enable+0x48>)
    567c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    567e:	4a0c      	ldr	r2, [pc, #48]	; (56b0 <system_gclk_gen_enable+0x4c>)
    5680:	1dfb      	adds	r3, r7, #7
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	4b07      	ldr	r3, [pc, #28]	; (56a8 <system_gclk_gen_enable+0x44>)
    568a:	4798      	blx	r3
    568c:	1e03      	subs	r3, r0, #0
    568e:	d1fb      	bne.n	5688 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5690:	4b08      	ldr	r3, [pc, #32]	; (56b4 <system_gclk_gen_enable+0x50>)
    5692:	4a08      	ldr	r2, [pc, #32]	; (56b4 <system_gclk_gen_enable+0x50>)
    5694:	6852      	ldr	r2, [r2, #4]
    5696:	2180      	movs	r1, #128	; 0x80
    5698:	0249      	lsls	r1, r1, #9
    569a:	430a      	orrs	r2, r1
    569c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    569e:	4b06      	ldr	r3, [pc, #24]	; (56b8 <system_gclk_gen_enable+0x54>)
    56a0:	4798      	blx	r3
}
    56a2:	46bd      	mov	sp, r7
    56a4:	b002      	add	sp, #8
    56a6:	bd80      	pop	{r7, pc}
    56a8:	000054f1 	.word	0x000054f1
    56ac:	000054d1 	.word	0x000054d1
    56b0:	40000c04 	.word	0x40000c04
    56b4:	40000c00 	.word	0x40000c00
    56b8:	000054e1 	.word	0x000054e1

000056bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b086      	sub	sp, #24
    56c0:	af00      	add	r7, sp, #0
    56c2:	1c02      	adds	r2, r0, #0
    56c4:	1dfb      	adds	r3, r7, #7
    56c6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    56c8:	46c0      	nop			; (mov r8, r8)
    56ca:	4b2e      	ldr	r3, [pc, #184]	; (5784 <system_gclk_gen_get_hz+0xc8>)
    56cc:	4798      	blx	r3
    56ce:	1e03      	subs	r3, r0, #0
    56d0:	d1fb      	bne.n	56ca <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    56d2:	4b2d      	ldr	r3, [pc, #180]	; (5788 <system_gclk_gen_get_hz+0xcc>)
    56d4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    56d6:	4a2d      	ldr	r2, [pc, #180]	; (578c <system_gclk_gen_get_hz+0xd0>)
    56d8:	1dfb      	adds	r3, r7, #7
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	4b28      	ldr	r3, [pc, #160]	; (5784 <system_gclk_gen_get_hz+0xc8>)
    56e2:	4798      	blx	r3
    56e4:	1e03      	subs	r3, r0, #0
    56e6:	d1fb      	bne.n	56e0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    56e8:	4b29      	ldr	r3, [pc, #164]	; (5790 <system_gclk_gen_get_hz+0xd4>)
    56ea:	685b      	ldr	r3, [r3, #4]
    56ec:	0a1b      	lsrs	r3, r3, #8
    56ee:	1c1a      	adds	r2, r3, #0
    56f0:	231f      	movs	r3, #31
    56f2:	4013      	ands	r3, r2
    56f4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    56f6:	1c18      	adds	r0, r3, #0
    56f8:	4b26      	ldr	r3, [pc, #152]	; (5794 <system_gclk_gen_get_hz+0xd8>)
    56fa:	4798      	blx	r3
    56fc:	1c03      	adds	r3, r0, #0
    56fe:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5700:	4a22      	ldr	r2, [pc, #136]	; (578c <system_gclk_gen_get_hz+0xd0>)
    5702:	1dfb      	adds	r3, r7, #7
    5704:	781b      	ldrb	r3, [r3, #0]
    5706:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5708:	4b21      	ldr	r3, [pc, #132]	; (5790 <system_gclk_gen_get_hz+0xd4>)
    570a:	685b      	ldr	r3, [r3, #4]
    570c:	0d1b      	lsrs	r3, r3, #20
    570e:	1c1a      	adds	r2, r3, #0
    5710:	2301      	movs	r3, #1
    5712:	4013      	ands	r3, r2
    5714:	b2da      	uxtb	r2, r3
    5716:	2313      	movs	r3, #19
    5718:	18fb      	adds	r3, r7, r3
    571a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    571c:	4a1e      	ldr	r2, [pc, #120]	; (5798 <system_gclk_gen_get_hz+0xdc>)
    571e:	1dfb      	adds	r3, r7, #7
    5720:	781b      	ldrb	r3, [r3, #0]
    5722:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5724:	46c0      	nop			; (mov r8, r8)
    5726:	4b17      	ldr	r3, [pc, #92]	; (5784 <system_gclk_gen_get_hz+0xc8>)
    5728:	4798      	blx	r3
    572a:	1e03      	subs	r3, r0, #0
    572c:	d1fb      	bne.n	5726 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    572e:	4b18      	ldr	r3, [pc, #96]	; (5790 <system_gclk_gen_get_hz+0xd4>)
    5730:	689b      	ldr	r3, [r3, #8]
    5732:	0a1b      	lsrs	r3, r3, #8
    5734:	1c1a      	adds	r2, r3, #0
    5736:	2300      	movs	r3, #0
    5738:	439a      	bics	r2, r3
    573a:	1c13      	adds	r3, r2, #0
    573c:	b29b      	uxth	r3, r3
    573e:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5740:	4b16      	ldr	r3, [pc, #88]	; (579c <system_gclk_gen_get_hz+0xe0>)
    5742:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5744:	2313      	movs	r3, #19
    5746:	18fb      	adds	r3, r7, r3
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d109      	bne.n	5762 <system_gclk_gen_get_hz+0xa6>
    574e:	68fb      	ldr	r3, [r7, #12]
    5750:	2b01      	cmp	r3, #1
    5752:	d906      	bls.n	5762 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    5754:	4b12      	ldr	r3, [pc, #72]	; (57a0 <system_gclk_gen_get_hz+0xe4>)
    5756:	6978      	ldr	r0, [r7, #20]
    5758:	68f9      	ldr	r1, [r7, #12]
    575a:	4798      	blx	r3
    575c:	1c03      	adds	r3, r0, #0
    575e:	617b      	str	r3, [r7, #20]
    5760:	e00a      	b.n	5778 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    5762:	2313      	movs	r3, #19
    5764:	18fb      	adds	r3, r7, r3
    5766:	781b      	ldrb	r3, [r3, #0]
    5768:	2b00      	cmp	r3, #0
    576a:	d005      	beq.n	5778 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    576c:	68fb      	ldr	r3, [r7, #12]
    576e:	3301      	adds	r3, #1
    5770:	1c1a      	adds	r2, r3, #0
    5772:	697b      	ldr	r3, [r7, #20]
    5774:	40d3      	lsrs	r3, r2
    5776:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    5778:	697b      	ldr	r3, [r7, #20]
}
    577a:	1c18      	adds	r0, r3, #0
    577c:	46bd      	mov	sp, r7
    577e:	b006      	add	sp, #24
    5780:	bd80      	pop	{r7, pc}
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	000054f1 	.word	0x000054f1
    5788:	000054d1 	.word	0x000054d1
    578c:	40000c04 	.word	0x40000c04
    5790:	40000c00 	.word	0x40000c00
    5794:	00004ce1 	.word	0x00004ce1
    5798:	40000c08 	.word	0x40000c08
    579c:	000054e1 	.word	0x000054e1
    57a0:	0000642d 	.word	0x0000642d

000057a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	b084      	sub	sp, #16
    57a8:	af00      	add	r7, sp, #0
    57aa:	1c02      	adds	r2, r0, #0
    57ac:	6039      	str	r1, [r7, #0]
    57ae:	1dfb      	adds	r3, r7, #7
    57b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    57b2:	1dfb      	adds	r3, r7, #7
    57b4:	781b      	ldrb	r3, [r3, #0]
    57b6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    57b8:	683b      	ldr	r3, [r7, #0]
    57ba:	781b      	ldrb	r3, [r3, #0]
    57bc:	021b      	lsls	r3, r3, #8
    57be:	1c1a      	adds	r2, r3, #0
    57c0:	68fb      	ldr	r3, [r7, #12]
    57c2:	4313      	orrs	r3, r2
    57c4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    57c6:	1dfb      	adds	r3, r7, #7
    57c8:	781b      	ldrb	r3, [r3, #0]
    57ca:	1c18      	adds	r0, r3, #0
    57cc:	4b04      	ldr	r3, [pc, #16]	; (57e0 <system_gclk_chan_set_config+0x3c>)
    57ce:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    57d0:	4b04      	ldr	r3, [pc, #16]	; (57e4 <system_gclk_chan_set_config+0x40>)
    57d2:	68fa      	ldr	r2, [r7, #12]
    57d4:	b292      	uxth	r2, r2
    57d6:	805a      	strh	r2, [r3, #2]
}
    57d8:	46bd      	mov	sp, r7
    57da:	b004      	add	sp, #16
    57dc:	bd80      	pop	{r7, pc}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	0000582d 	.word	0x0000582d
    57e4:	40000c00 	.word	0x40000c00

000057e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b082      	sub	sp, #8
    57ec:	af00      	add	r7, sp, #0
    57ee:	1c02      	adds	r2, r0, #0
    57f0:	1dfb      	adds	r3, r7, #7
    57f2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    57f4:	4b09      	ldr	r3, [pc, #36]	; (581c <system_gclk_chan_enable+0x34>)
    57f6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    57f8:	4a09      	ldr	r2, [pc, #36]	; (5820 <system_gclk_chan_enable+0x38>)
    57fa:	1dfb      	adds	r3, r7, #7
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5800:	4908      	ldr	r1, [pc, #32]	; (5824 <system_gclk_chan_enable+0x3c>)
    5802:	4b08      	ldr	r3, [pc, #32]	; (5824 <system_gclk_chan_enable+0x3c>)
    5804:	885b      	ldrh	r3, [r3, #2]
    5806:	b29b      	uxth	r3, r3
    5808:	2280      	movs	r2, #128	; 0x80
    580a:	01d2      	lsls	r2, r2, #7
    580c:	4313      	orrs	r3, r2
    580e:	b29b      	uxth	r3, r3
    5810:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5812:	4b05      	ldr	r3, [pc, #20]	; (5828 <system_gclk_chan_enable+0x40>)
    5814:	4798      	blx	r3
}
    5816:	46bd      	mov	sp, r7
    5818:	b002      	add	sp, #8
    581a:	bd80      	pop	{r7, pc}
    581c:	000054d1 	.word	0x000054d1
    5820:	40000c02 	.word	0x40000c02
    5824:	40000c00 	.word	0x40000c00
    5828:	000054e1 	.word	0x000054e1

0000582c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    582c:	b580      	push	{r7, lr}
    582e:	b084      	sub	sp, #16
    5830:	af00      	add	r7, sp, #0
    5832:	1c02      	adds	r2, r0, #0
    5834:	1dfb      	adds	r3, r7, #7
    5836:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5838:	4b1d      	ldr	r3, [pc, #116]	; (58b0 <system_gclk_chan_disable+0x84>)
    583a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    583c:	4a1d      	ldr	r2, [pc, #116]	; (58b4 <system_gclk_chan_disable+0x88>)
    583e:	1dfb      	adds	r3, r7, #7
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5844:	4b1c      	ldr	r3, [pc, #112]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5846:	885b      	ldrh	r3, [r3, #2]
    5848:	b29b      	uxth	r3, r3
    584a:	0a1b      	lsrs	r3, r3, #8
    584c:	1c1a      	adds	r2, r3, #0
    584e:	230f      	movs	r3, #15
    5850:	4013      	ands	r3, r2
    5852:	b2db      	uxtb	r3, r3
    5854:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5856:	4b18      	ldr	r3, [pc, #96]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5858:	885a      	ldrh	r2, [r3, #2]
    585a:	4918      	ldr	r1, [pc, #96]	; (58bc <system_gclk_chan_disable+0x90>)
    585c:	400a      	ands	r2, r1
    585e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5860:	4a15      	ldr	r2, [pc, #84]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5862:	4b15      	ldr	r3, [pc, #84]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5864:	885b      	ldrh	r3, [r3, #2]
    5866:	b29b      	uxth	r3, r3
    5868:	4915      	ldr	r1, [pc, #84]	; (58c0 <system_gclk_chan_disable+0x94>)
    586a:	400b      	ands	r3, r1
    586c:	b29b      	uxth	r3, r3
    586e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5870:	46c0      	nop			; (mov r8, r8)
    5872:	4b11      	ldr	r3, [pc, #68]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5874:	885b      	ldrh	r3, [r3, #2]
    5876:	b29b      	uxth	r3, r3
    5878:	1c1a      	adds	r2, r3, #0
    587a:	2380      	movs	r3, #128	; 0x80
    587c:	01db      	lsls	r3, r3, #7
    587e:	4013      	ands	r3, r2
    5880:	d1f7      	bne.n	5872 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5882:	4b0d      	ldr	r3, [pc, #52]	; (58b8 <system_gclk_chan_disable+0x8c>)
    5884:	68fa      	ldr	r2, [r7, #12]
    5886:	b2d2      	uxtb	r2, r2
    5888:	1c11      	adds	r1, r2, #0
    588a:	220f      	movs	r2, #15
    588c:	400a      	ands	r2, r1
    588e:	b2d2      	uxtb	r2, r2
    5890:	1c11      	adds	r1, r2, #0
    5892:	220f      	movs	r2, #15
    5894:	400a      	ands	r2, r1
    5896:	0210      	lsls	r0, r2, #8
    5898:	885a      	ldrh	r2, [r3, #2]
    589a:	4908      	ldr	r1, [pc, #32]	; (58bc <system_gclk_chan_disable+0x90>)
    589c:	400a      	ands	r2, r1
    589e:	1c11      	adds	r1, r2, #0
    58a0:	1c02      	adds	r2, r0, #0
    58a2:	430a      	orrs	r2, r1
    58a4:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    58a6:	4b07      	ldr	r3, [pc, #28]	; (58c4 <system_gclk_chan_disable+0x98>)
    58a8:	4798      	blx	r3
}
    58aa:	46bd      	mov	sp, r7
    58ac:	b004      	add	sp, #16
    58ae:	bd80      	pop	{r7, pc}
    58b0:	000054d1 	.word	0x000054d1
    58b4:	40000c02 	.word	0x40000c02
    58b8:	40000c00 	.word	0x40000c00
    58bc:	fffff0ff 	.word	0xfffff0ff
    58c0:	ffffbfff 	.word	0xffffbfff
    58c4:	000054e1 	.word	0x000054e1

000058c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    58c8:	b580      	push	{r7, lr}
    58ca:	b084      	sub	sp, #16
    58cc:	af00      	add	r7, sp, #0
    58ce:	1c02      	adds	r2, r0, #0
    58d0:	1dfb      	adds	r3, r7, #7
    58d2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    58d4:	4b0e      	ldr	r3, [pc, #56]	; (5910 <system_gclk_chan_get_hz+0x48>)
    58d6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    58d8:	4a0e      	ldr	r2, [pc, #56]	; (5914 <system_gclk_chan_get_hz+0x4c>)
    58da:	1dfb      	adds	r3, r7, #7
    58dc:	781b      	ldrb	r3, [r3, #0]
    58de:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    58e0:	4b0d      	ldr	r3, [pc, #52]	; (5918 <system_gclk_chan_get_hz+0x50>)
    58e2:	885b      	ldrh	r3, [r3, #2]
    58e4:	b29b      	uxth	r3, r3
    58e6:	0a1b      	lsrs	r3, r3, #8
    58e8:	1c1a      	adds	r2, r3, #0
    58ea:	230f      	movs	r3, #15
    58ec:	4013      	ands	r3, r2
    58ee:	b2da      	uxtb	r2, r3
    58f0:	230f      	movs	r3, #15
    58f2:	18fb      	adds	r3, r7, r3
    58f4:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    58f6:	4b09      	ldr	r3, [pc, #36]	; (591c <system_gclk_chan_get_hz+0x54>)
    58f8:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    58fa:	230f      	movs	r3, #15
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	781b      	ldrb	r3, [r3, #0]
    5900:	1c18      	adds	r0, r3, #0
    5902:	4b07      	ldr	r3, [pc, #28]	; (5920 <system_gclk_chan_get_hz+0x58>)
    5904:	4798      	blx	r3
    5906:	1c03      	adds	r3, r0, #0
}
    5908:	1c18      	adds	r0, r3, #0
    590a:	46bd      	mov	sp, r7
    590c:	b004      	add	sp, #16
    590e:	bd80      	pop	{r7, pc}
    5910:	000054d1 	.word	0x000054d1
    5914:	40000c02 	.word	0x40000c02
    5918:	40000c00 	.word	0x40000c00
    591c:	000054e1 	.word	0x000054e1
    5920:	000056bd 	.word	0x000056bd

00005924 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5924:	b580      	push	{r7, lr}
    5926:	b084      	sub	sp, #16
    5928:	af00      	add	r7, sp, #0
    592a:	1c02      	adds	r2, r0, #0
    592c:	1dfb      	adds	r3, r7, #7
    592e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5930:	230f      	movs	r3, #15
    5932:	18fb      	adds	r3, r7, r3
    5934:	1dfa      	adds	r2, r7, #7
    5936:	7812      	ldrb	r2, [r2, #0]
    5938:	09d2      	lsrs	r2, r2, #7
    593a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    593c:	230e      	movs	r3, #14
    593e:	18fb      	adds	r3, r7, r3
    5940:	1dfa      	adds	r2, r7, #7
    5942:	7812      	ldrb	r2, [r2, #0]
    5944:	0952      	lsrs	r2, r2, #5
    5946:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5948:	4b0d      	ldr	r3, [pc, #52]	; (5980 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    594a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    594c:	230f      	movs	r3, #15
    594e:	18fb      	adds	r3, r7, r3
    5950:	781b      	ldrb	r3, [r3, #0]
    5952:	2b00      	cmp	r3, #0
    5954:	d10f      	bne.n	5976 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5956:	230f      	movs	r3, #15
    5958:	18fb      	adds	r3, r7, r3
    595a:	781b      	ldrb	r3, [r3, #0]
    595c:	009b      	lsls	r3, r3, #2
    595e:	2210      	movs	r2, #16
    5960:	4694      	mov	ip, r2
    5962:	44bc      	add	ip, r7
    5964:	4463      	add	r3, ip
    5966:	3b08      	subs	r3, #8
    5968:	681a      	ldr	r2, [r3, #0]
    596a:	230e      	movs	r3, #14
    596c:	18fb      	adds	r3, r7, r3
    596e:	781b      	ldrb	r3, [r3, #0]
    5970:	01db      	lsls	r3, r3, #7
    5972:	18d3      	adds	r3, r2, r3
    5974:	e000      	b.n	5978 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5976:	2300      	movs	r3, #0
	}
}
    5978:	1c18      	adds	r0, r3, #0
    597a:	46bd      	mov	sp, r7
    597c:	b004      	add	sp, #16
    597e:	bd80      	pop	{r7, pc}
    5980:	41004400 	.word	0x41004400

00005984 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5984:	b580      	push	{r7, lr}
    5986:	b088      	sub	sp, #32
    5988:	af00      	add	r7, sp, #0
    598a:	60f8      	str	r0, [r7, #12]
    598c:	60b9      	str	r1, [r7, #8]
    598e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5990:	2300      	movs	r3, #0
    5992:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	78db      	ldrb	r3, [r3, #3]
    5998:	2201      	movs	r2, #1
    599a:	4053      	eors	r3, r2
    599c:	b2db      	uxtb	r3, r3
    599e:	2b00      	cmp	r3, #0
    59a0:	d035      	beq.n	5a0e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	781b      	ldrb	r3, [r3, #0]
    59a6:	2b80      	cmp	r3, #128	; 0x80
    59a8:	d00b      	beq.n	59c2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    59aa:	69fb      	ldr	r3, [r7, #28]
    59ac:	2280      	movs	r2, #128	; 0x80
    59ae:	0252      	lsls	r2, r2, #9
    59b0:	4313      	orrs	r3, r2
    59b2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	781b      	ldrb	r3, [r3, #0]
    59b8:	061b      	lsls	r3, r3, #24
    59ba:	1c1a      	adds	r2, r3, #0
    59bc:	69fb      	ldr	r3, [r7, #28]
    59be:	4313      	orrs	r3, r2
    59c0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	785b      	ldrb	r3, [r3, #1]
    59c6:	2b00      	cmp	r3, #0
    59c8:	d003      	beq.n	59d2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    59ce:	2b02      	cmp	r3, #2
    59d0:	d110      	bne.n	59f4 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    59d2:	69fb      	ldr	r3, [r7, #28]
    59d4:	2280      	movs	r2, #128	; 0x80
    59d6:	0292      	lsls	r2, r2, #10
    59d8:	4313      	orrs	r3, r2
    59da:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	789b      	ldrb	r3, [r3, #2]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d004      	beq.n	59ee <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    59e4:	69fb      	ldr	r3, [r7, #28]
    59e6:	2280      	movs	r2, #128	; 0x80
    59e8:	02d2      	lsls	r2, r2, #11
    59ea:	4313      	orrs	r3, r2
    59ec:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    59ee:	68fb      	ldr	r3, [r7, #12]
    59f0:	68ba      	ldr	r2, [r7, #8]
    59f2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	785b      	ldrb	r3, [r3, #1]
    59f8:	2b01      	cmp	r3, #1
    59fa:	d003      	beq.n	5a04 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a00:	2b02      	cmp	r3, #2
    5a02:	d107      	bne.n	5a14 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5a04:	69fb      	ldr	r3, [r7, #28]
    5a06:	4a21      	ldr	r2, [pc, #132]	; (5a8c <_system_pinmux_config+0x108>)
    5a08:	4013      	ands	r3, r2
    5a0a:	61fb      	str	r3, [r7, #28]
    5a0c:	e002      	b.n	5a14 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5a0e:	68fb      	ldr	r3, [r7, #12]
    5a10:	68ba      	ldr	r2, [r7, #8]
    5a12:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a14:	68bb      	ldr	r3, [r7, #8]
    5a16:	041b      	lsls	r3, r3, #16
    5a18:	0c1b      	lsrs	r3, r3, #16
    5a1a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a1c:	68bb      	ldr	r3, [r7, #8]
    5a1e:	0c1b      	lsrs	r3, r3, #16
    5a20:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a22:	69ba      	ldr	r2, [r7, #24]
    5a24:	69fb      	ldr	r3, [r7, #28]
    5a26:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a28:	22a0      	movs	r2, #160	; 0xa0
    5a2a:	05d2      	lsls	r2, r2, #23
    5a2c:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a2e:	68fb      	ldr	r3, [r7, #12]
    5a30:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a32:	697a      	ldr	r2, [r7, #20]
    5a34:	69fb      	ldr	r3, [r7, #28]
    5a36:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a38:	22d0      	movs	r2, #208	; 0xd0
    5a3a:	0612      	lsls	r2, r2, #24
    5a3c:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a3e:	68fb      	ldr	r3, [r7, #12]
    5a40:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	78db      	ldrb	r3, [r3, #3]
    5a46:	2201      	movs	r2, #1
    5a48:	4053      	eors	r3, r2
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	2b00      	cmp	r3, #0
    5a4e:	d01a      	beq.n	5a86 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5a50:	69fa      	ldr	r2, [r7, #28]
    5a52:	2380      	movs	r3, #128	; 0x80
    5a54:	02db      	lsls	r3, r3, #11
    5a56:	4013      	ands	r3, r2
    5a58:	d00a      	beq.n	5a70 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	789b      	ldrb	r3, [r3, #2]
    5a5e:	2b01      	cmp	r3, #1
    5a60:	d103      	bne.n	5a6a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5a62:	68fb      	ldr	r3, [r7, #12]
    5a64:	68ba      	ldr	r2, [r7, #8]
    5a66:	619a      	str	r2, [r3, #24]
    5a68:	e002      	b.n	5a70 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	68ba      	ldr	r2, [r7, #8]
    5a6e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b01      	cmp	r3, #1
    5a76:	d003      	beq.n	5a80 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a7c:	2b02      	cmp	r3, #2
    5a7e:	d102      	bne.n	5a86 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5a80:	68fb      	ldr	r3, [r7, #12]
    5a82:	68ba      	ldr	r2, [r7, #8]
    5a84:	609a      	str	r2, [r3, #8]
		}
	}
}
    5a86:	46bd      	mov	sp, r7
    5a88:	b008      	add	sp, #32
    5a8a:	bd80      	pop	{r7, pc}
    5a8c:	fffbffff 	.word	0xfffbffff

00005a90 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5a90:	b580      	push	{r7, lr}
    5a92:	b084      	sub	sp, #16
    5a94:	af00      	add	r7, sp, #0
    5a96:	1c02      	adds	r2, r0, #0
    5a98:	6039      	str	r1, [r7, #0]
    5a9a:	1dfb      	adds	r3, r7, #7
    5a9c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5a9e:	1dfb      	adds	r3, r7, #7
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	1c18      	adds	r0, r3, #0
    5aa4:	4b0b      	ldr	r3, [pc, #44]	; (5ad4 <system_pinmux_pin_set_config+0x44>)
    5aa6:	4798      	blx	r3
    5aa8:	1c03      	adds	r3, r0, #0
    5aaa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5aac:	1dfb      	adds	r3, r7, #7
    5aae:	781b      	ldrb	r3, [r3, #0]
    5ab0:	221f      	movs	r2, #31
    5ab2:	4013      	ands	r3, r2
    5ab4:	2201      	movs	r2, #1
    5ab6:	409a      	lsls	r2, r3
    5ab8:	1c13      	adds	r3, r2, #0
    5aba:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5abc:	68f9      	ldr	r1, [r7, #12]
    5abe:	68ba      	ldr	r2, [r7, #8]
    5ac0:	683b      	ldr	r3, [r7, #0]
    5ac2:	1c08      	adds	r0, r1, #0
    5ac4:	1c11      	adds	r1, r2, #0
    5ac6:	1c1a      	adds	r2, r3, #0
    5ac8:	4b03      	ldr	r3, [pc, #12]	; (5ad8 <system_pinmux_pin_set_config+0x48>)
    5aca:	4798      	blx	r3
}
    5acc:	46bd      	mov	sp, r7
    5ace:	b004      	add	sp, #16
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	00005925 	.word	0x00005925
    5ad8:	00005985 	.word	0x00005985

00005adc <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b084      	sub	sp, #16
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	60f8      	str	r0, [r7, #12]
    5ae4:	60b9      	str	r1, [r7, #8]
    5ae6:	1dfb      	adds	r3, r7, #7
    5ae8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5aea:	1dfb      	adds	r3, r7, #7
    5aec:	781a      	ldrb	r2, [r3, #0]
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	3202      	adds	r2, #2
    5af2:	0092      	lsls	r2, r2, #2
    5af4:	68b9      	ldr	r1, [r7, #8]
    5af6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5af8:	1dfb      	adds	r3, r7, #7
    5afa:	781b      	ldrb	r3, [r3, #0]
    5afc:	2b02      	cmp	r3, #2
    5afe:	d107      	bne.n	5b10 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	7e1b      	ldrb	r3, [r3, #24]
    5b04:	2210      	movs	r2, #16
    5b06:	4313      	orrs	r3, r2
    5b08:	b2da      	uxtb	r2, r3
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	761a      	strb	r2, [r3, #24]
    5b0e:	e01a      	b.n	5b46 <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    5b10:	1dfb      	adds	r3, r7, #7
    5b12:	781b      	ldrb	r3, [r3, #0]
    5b14:	2b03      	cmp	r3, #3
    5b16:	d107      	bne.n	5b28 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	7e1b      	ldrb	r3, [r3, #24]
    5b1c:	2220      	movs	r2, #32
    5b1e:	4313      	orrs	r3, r2
    5b20:	b2da      	uxtb	r2, r3
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	761a      	strb	r2, [r3, #24]
    5b26:	e00e      	b.n	5b46 <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	7e1b      	ldrb	r3, [r3, #24]
    5b2c:	b2d9      	uxtb	r1, r3
    5b2e:	1dfb      	adds	r3, r7, #7
    5b30:	781b      	ldrb	r3, [r3, #0]
    5b32:	2201      	movs	r2, #1
    5b34:	409a      	lsls	r2, r3
    5b36:	1c13      	adds	r3, r2, #0
    5b38:	b2db      	uxtb	r3, r3
    5b3a:	1c0a      	adds	r2, r1, #0
    5b3c:	4313      	orrs	r3, r2
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	b2da      	uxtb	r2, r3
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    5b46:	2300      	movs	r3, #0
}
    5b48:	1c18      	adds	r0, r3, #0
    5b4a:	46bd      	mov	sp, r7
    5b4c:	b004      	add	sp, #16
    5b4e:	bd80      	pop	{r7, pc}

00005b50 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    5b50:	b580      	push	{r7, lr}
    5b52:	af00      	add	r7, sp, #0
    5b54:	2000      	movs	r0, #0
    5b56:	4b02      	ldr	r3, [pc, #8]	; (5b60 <TC0_Handler+0x10>)
    5b58:	4798      	blx	r3
    5b5a:	46bd      	mov	sp, r7
    5b5c:	bd80      	pop	{r7, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	00005bf1 	.word	0x00005bf1

00005b64 <TC1_Handler>:
    5b64:	b580      	push	{r7, lr}
    5b66:	af00      	add	r7, sp, #0
    5b68:	2001      	movs	r0, #1
    5b6a:	4b02      	ldr	r3, [pc, #8]	; (5b74 <TC1_Handler+0x10>)
    5b6c:	4798      	blx	r3
    5b6e:	46bd      	mov	sp, r7
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	00005bf1 	.word	0x00005bf1

00005b78 <TC2_Handler>:
    5b78:	b580      	push	{r7, lr}
    5b7a:	af00      	add	r7, sp, #0
    5b7c:	2002      	movs	r0, #2
    5b7e:	4b02      	ldr	r3, [pc, #8]	; (5b88 <TC2_Handler+0x10>)
    5b80:	4798      	blx	r3
    5b82:	46bd      	mov	sp, r7
    5b84:	bd80      	pop	{r7, pc}
    5b86:	46c0      	nop			; (mov r8, r8)
    5b88:	00005bf1 	.word	0x00005bf1

00005b8c <TC3_Handler>:
    5b8c:	b580      	push	{r7, lr}
    5b8e:	af00      	add	r7, sp, #0
    5b90:	2003      	movs	r0, #3
    5b92:	4b02      	ldr	r3, [pc, #8]	; (5b9c <TC3_Handler+0x10>)
    5b94:	4798      	blx	r3
    5b96:	46bd      	mov	sp, r7
    5b98:	bd80      	pop	{r7, pc}
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	00005bf1 	.word	0x00005bf1

00005ba0 <TC4_Handler>:
    5ba0:	b580      	push	{r7, lr}
    5ba2:	af00      	add	r7, sp, #0
    5ba4:	2004      	movs	r0, #4
    5ba6:	4b02      	ldr	r3, [pc, #8]	; (5bb0 <TC4_Handler+0x10>)
    5ba8:	4798      	blx	r3
    5baa:	46bd      	mov	sp, r7
    5bac:	bd80      	pop	{r7, pc}
    5bae:	46c0      	nop			; (mov r8, r8)
    5bb0:	00005bf1 	.word	0x00005bf1

00005bb4 <TC5_Handler>:
    5bb4:	b580      	push	{r7, lr}
    5bb6:	af00      	add	r7, sp, #0
    5bb8:	2005      	movs	r0, #5
    5bba:	4b02      	ldr	r3, [pc, #8]	; (5bc4 <TC5_Handler+0x10>)
    5bbc:	4798      	blx	r3
    5bbe:	46bd      	mov	sp, r7
    5bc0:	bd80      	pop	{r7, pc}
    5bc2:	46c0      	nop			; (mov r8, r8)
    5bc4:	00005bf1 	.word	0x00005bf1

00005bc8 <TC6_Handler>:
    5bc8:	b580      	push	{r7, lr}
    5bca:	af00      	add	r7, sp, #0
    5bcc:	2006      	movs	r0, #6
    5bce:	4b02      	ldr	r3, [pc, #8]	; (5bd8 <TC6_Handler+0x10>)
    5bd0:	4798      	blx	r3
    5bd2:	46bd      	mov	sp, r7
    5bd4:	bd80      	pop	{r7, pc}
    5bd6:	46c0      	nop			; (mov r8, r8)
    5bd8:	00005bf1 	.word	0x00005bf1

00005bdc <TC7_Handler>:
    5bdc:	b580      	push	{r7, lr}
    5bde:	af00      	add	r7, sp, #0
    5be0:	2007      	movs	r0, #7
    5be2:	4b02      	ldr	r3, [pc, #8]	; (5bec <TC7_Handler+0x10>)
    5be4:	4798      	blx	r3
    5be6:	46bd      	mov	sp, r7
    5be8:	bd80      	pop	{r7, pc}
    5bea:	46c0      	nop			; (mov r8, r8)
    5bec:	00005bf1 	.word	0x00005bf1

00005bf0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b084      	sub	sp, #16
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	1c02      	adds	r2, r0, #0
    5bf8:	1dfb      	adds	r3, r7, #7
    5bfa:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    5bfc:	1dfb      	adds	r3, r7, #7
    5bfe:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5c00:	4b28      	ldr	r3, [pc, #160]	; (5ca4 <_tc_interrupt_handler+0xb4>)
    5c02:	0092      	lsls	r2, r2, #2
    5c04:	58d3      	ldr	r3, [r2, r3]
    5c06:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5c08:	68fb      	ldr	r3, [r7, #12]
    5c0a:	681b      	ldr	r3, [r3, #0]
    5c0c:	7b9b      	ldrb	r3, [r3, #14]
    5c0e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    5c10:	68fa      	ldr	r2, [r7, #12]
    5c12:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5c14:	4013      	ands	r3, r2
    5c16:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5c1c:	230b      	movs	r3, #11
    5c1e:	18fb      	adds	r3, r7, r3
    5c20:	400a      	ands	r2, r1
    5c22:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    5c24:	230b      	movs	r3, #11
    5c26:	18fb      	adds	r3, r7, r3
    5c28:	781b      	ldrb	r3, [r3, #0]
    5c2a:	2201      	movs	r2, #1
    5c2c:	4013      	ands	r3, r2
    5c2e:	d008      	beq.n	5c42 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    5c30:	68fb      	ldr	r3, [r7, #12]
    5c32:	689b      	ldr	r3, [r3, #8]
    5c34:	68fa      	ldr	r2, [r7, #12]
    5c36:	1c10      	adds	r0, r2, #0
    5c38:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    5c3a:	68fb      	ldr	r3, [r7, #12]
    5c3c:	681b      	ldr	r3, [r3, #0]
    5c3e:	2201      	movs	r2, #1
    5c40:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    5c42:	230b      	movs	r3, #11
    5c44:	18fb      	adds	r3, r7, r3
    5c46:	781b      	ldrb	r3, [r3, #0]
    5c48:	2202      	movs	r2, #2
    5c4a:	4013      	ands	r3, r2
    5c4c:	d008      	beq.n	5c60 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    5c4e:	68fb      	ldr	r3, [r7, #12]
    5c50:	68db      	ldr	r3, [r3, #12]
    5c52:	68fa      	ldr	r2, [r7, #12]
    5c54:	1c10      	adds	r0, r2, #0
    5c56:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    5c58:	68fb      	ldr	r3, [r7, #12]
    5c5a:	681b      	ldr	r3, [r3, #0]
    5c5c:	2202      	movs	r2, #2
    5c5e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    5c60:	230b      	movs	r3, #11
    5c62:	18fb      	adds	r3, r7, r3
    5c64:	781b      	ldrb	r3, [r3, #0]
    5c66:	2210      	movs	r2, #16
    5c68:	4013      	ands	r3, r2
    5c6a:	d008      	beq.n	5c7e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	691b      	ldr	r3, [r3, #16]
    5c70:	68fa      	ldr	r2, [r7, #12]
    5c72:	1c10      	adds	r0, r2, #0
    5c74:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    5c76:	68fb      	ldr	r3, [r7, #12]
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	2210      	movs	r2, #16
    5c7c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    5c7e:	230b      	movs	r3, #11
    5c80:	18fb      	adds	r3, r7, r3
    5c82:	781b      	ldrb	r3, [r3, #0]
    5c84:	2220      	movs	r2, #32
    5c86:	4013      	ands	r3, r2
    5c88:	d008      	beq.n	5c9c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	695b      	ldr	r3, [r3, #20]
    5c8e:	68fa      	ldr	r2, [r7, #12]
    5c90:	1c10      	adds	r0, r2, #0
    5c92:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	681b      	ldr	r3, [r3, #0]
    5c98:	2220      	movs	r2, #32
    5c9a:	739a      	strb	r2, [r3, #14]
	}
}
    5c9c:	46bd      	mov	sp, r7
    5c9e:	b004      	add	sp, #16
    5ca0:	bd80      	pop	{r7, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	20000774 	.word	0x20000774

00005ca8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	2200      	movs	r2, #0
    5cb4:	701a      	strb	r2, [r3, #0]
}
    5cb6:	46bd      	mov	sp, r7
    5cb8:	b002      	add	sp, #8
    5cba:	bd80      	pop	{r7, pc}

00005cbc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5cbc:	b580      	push	{r7, lr}
    5cbe:	b082      	sub	sp, #8
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	1c02      	adds	r2, r0, #0
    5cc4:	6039      	str	r1, [r7, #0]
    5cc6:	1dfb      	adds	r3, r7, #7
    5cc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5cca:	1dfb      	adds	r3, r7, #7
    5ccc:	781b      	ldrb	r3, [r3, #0]
    5cce:	2b01      	cmp	r3, #1
    5cd0:	d00a      	beq.n	5ce8 <system_apb_clock_set_mask+0x2c>
    5cd2:	2b02      	cmp	r3, #2
    5cd4:	d00f      	beq.n	5cf6 <system_apb_clock_set_mask+0x3a>
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d114      	bne.n	5d04 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5cda:	4b0e      	ldr	r3, [pc, #56]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cdc:	4a0d      	ldr	r2, [pc, #52]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cde:	6991      	ldr	r1, [r2, #24]
    5ce0:	683a      	ldr	r2, [r7, #0]
    5ce2:	430a      	orrs	r2, r1
    5ce4:	619a      	str	r2, [r3, #24]
			break;
    5ce6:	e00f      	b.n	5d08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5ce8:	4b0a      	ldr	r3, [pc, #40]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cea:	4a0a      	ldr	r2, [pc, #40]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cec:	69d1      	ldr	r1, [r2, #28]
    5cee:	683a      	ldr	r2, [r7, #0]
    5cf0:	430a      	orrs	r2, r1
    5cf2:	61da      	str	r2, [r3, #28]
			break;
    5cf4:	e008      	b.n	5d08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5cf6:	4b07      	ldr	r3, [pc, #28]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cf8:	4a06      	ldr	r2, [pc, #24]	; (5d14 <system_apb_clock_set_mask+0x58>)
    5cfa:	6a11      	ldr	r1, [r2, #32]
    5cfc:	683a      	ldr	r2, [r7, #0]
    5cfe:	430a      	orrs	r2, r1
    5d00:	621a      	str	r2, [r3, #32]
			break;
    5d02:	e001      	b.n	5d08 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5d04:	2317      	movs	r3, #23
    5d06:	e000      	b.n	5d0a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5d08:	2300      	movs	r3, #0
}
    5d0a:	1c18      	adds	r0, r3, #0
    5d0c:	46bd      	mov	sp, r7
    5d0e:	b002      	add	sp, #8
    5d10:	bd80      	pop	{r7, pc}
    5d12:	46c0      	nop			; (mov r8, r8)
    5d14:	40000400 	.word	0x40000400

00005d18 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b082      	sub	sp, #8
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	2280      	movs	r2, #128	; 0x80
    5d24:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	2200      	movs	r2, #0
    5d2a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	2201      	movs	r2, #1
    5d30:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	2200      	movs	r2, #0
    5d36:	70da      	strb	r2, [r3, #3]
}
    5d38:	46bd      	mov	sp, r7
    5d3a:	b002      	add	sp, #8
    5d3c:	bd80      	pop	{r7, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)

00005d40 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b084      	sub	sp, #16
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5d4e:	68fb      	ldr	r3, [r7, #12]
    5d50:	7bdb      	ldrb	r3, [r3, #15]
    5d52:	b2db      	uxtb	r3, r3
    5d54:	1c1a      	adds	r2, r3, #0
    5d56:	2380      	movs	r3, #128	; 0x80
    5d58:	4013      	ands	r3, r2
    5d5a:	1e5a      	subs	r2, r3, #1
    5d5c:	4193      	sbcs	r3, r2
    5d5e:	b2db      	uxtb	r3, r3
#endif
}
    5d60:	1c18      	adds	r0, r3, #0
    5d62:	46bd      	mov	sp, r7
    5d64:	b004      	add	sp, #16
    5d66:	bd80      	pop	{r7, pc}

00005d68 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5d68:	b590      	push	{r4, r7, lr}
    5d6a:	b08d      	sub	sp, #52	; 0x34
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5d70:	230c      	movs	r3, #12
    5d72:	18fb      	adds	r3, r7, r3
    5d74:	4a0f      	ldr	r2, [pc, #60]	; (5db4 <_tc_get_inst_index+0x4c>)
    5d76:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d78:	c313      	stmia	r3!, {r0, r1, r4}
    5d7a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d7c:	c313      	stmia	r3!, {r0, r1, r4}
    5d7e:	ca03      	ldmia	r2!, {r0, r1}
    5d80:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5d82:	2300      	movs	r3, #0
    5d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d86:	e00d      	b.n	5da4 <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    5d88:	230c      	movs	r3, #12
    5d8a:	18fb      	adds	r3, r7, r3
    5d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5d8e:	0092      	lsls	r2, r2, #2
    5d90:	58d2      	ldr	r2, [r2, r3]
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	429a      	cmp	r2, r3
    5d96:	d102      	bne.n	5d9e <_tc_get_inst_index+0x36>
			return i;
    5d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d9a:	b2db      	uxtb	r3, r3
    5d9c:	e006      	b.n	5dac <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5da0:	3301      	adds	r3, #1
    5da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5da6:	2b07      	cmp	r3, #7
    5da8:	d9ee      	bls.n	5d88 <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5daa:	2300      	movs	r3, #0
}
    5dac:	1c18      	adds	r0, r3, #0
    5dae:	46bd      	mov	sp, r7
    5db0:	b00d      	add	sp, #52	; 0x34
    5db2:	bd90      	pop	{r4, r7, pc}
    5db4:	00006fdc 	.word	0x00006fdc

00005db8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5db8:	b590      	push	{r4, r7, lr}
    5dba:	b08f      	sub	sp, #60	; 0x3c
    5dbc:	af00      	add	r7, sp, #0
    5dbe:	60f8      	str	r0, [r7, #12]
    5dc0:	60b9      	str	r1, [r7, #8]
    5dc2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    5dc4:	2336      	movs	r3, #54	; 0x36
    5dc6:	18fb      	adds	r3, r7, r3
    5dc8:	2200      	movs	r2, #0
    5dca:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5dcc:	2335      	movs	r3, #53	; 0x35
    5dce:	18fb      	adds	r3, r7, r3
    5dd0:	2200      	movs	r2, #0
    5dd2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    5dd4:	2334      	movs	r3, #52	; 0x34
    5dd6:	18fb      	adds	r3, r7, r3
    5dd8:	2200      	movs	r2, #0
    5dda:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5ddc:	2331      	movs	r3, #49	; 0x31
    5dde:	18fc      	adds	r4, r7, r3
    5de0:	68bb      	ldr	r3, [r7, #8]
    5de2:	1c18      	adds	r0, r3, #0
    5de4:	4bc0      	ldr	r3, [pc, #768]	; (60e8 <tc_init+0x330>)
    5de6:	4798      	blx	r3
    5de8:	1c03      	adds	r3, r0, #0
    5dea:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5dec:	2328      	movs	r3, #40	; 0x28
    5dee:	18fa      	adds	r2, r7, r3
    5df0:	4bbe      	ldr	r3, [pc, #760]	; (60ec <tc_init+0x334>)
    5df2:	1c11      	adds	r1, r2, #0
    5df4:	1c1a      	adds	r2, r3, #0
    5df6:	2308      	movs	r3, #8
    5df8:	1c08      	adds	r0, r1, #0
    5dfa:	1c11      	adds	r1, r2, #0
    5dfc:	1c1a      	adds	r2, r3, #0
    5dfe:	4bbc      	ldr	r3, [pc, #752]	; (60f0 <tc_init+0x338>)
    5e00:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    5e02:	2318      	movs	r3, #24
    5e04:	18fa      	adds	r2, r7, r3
    5e06:	4bbb      	ldr	r3, [pc, #748]	; (60f4 <tc_init+0x33c>)
    5e08:	1c11      	adds	r1, r2, #0
    5e0a:	1c1a      	adds	r2, r3, #0
    5e0c:	2310      	movs	r3, #16
    5e0e:	1c08      	adds	r0, r1, #0
    5e10:	1c11      	adds	r1, r2, #0
    5e12:	1c1a      	adds	r2, r3, #0
    5e14:	4bb6      	ldr	r3, [pc, #728]	; (60f0 <tc_init+0x338>)
    5e16:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5e18:	2333      	movs	r3, #51	; 0x33
    5e1a:	18fb      	adds	r3, r7, r3
    5e1c:	2200      	movs	r2, #0
    5e1e:	701a      	strb	r2, [r3, #0]
    5e20:	e00e      	b.n	5e40 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    5e22:	2333      	movs	r3, #51	; 0x33
    5e24:	18fb      	adds	r3, r7, r3
    5e26:	781a      	ldrb	r2, [r3, #0]
    5e28:	68fb      	ldr	r3, [r7, #12]
    5e2a:	3202      	adds	r2, #2
    5e2c:	0092      	lsls	r2, r2, #2
    5e2e:	2100      	movs	r1, #0
    5e30:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5e32:	2333      	movs	r3, #51	; 0x33
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	781a      	ldrb	r2, [r3, #0]
    5e38:	2333      	movs	r3, #51	; 0x33
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	3201      	adds	r2, #1
    5e3e:	701a      	strb	r2, [r3, #0]
    5e40:	2333      	movs	r3, #51	; 0x33
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	781b      	ldrb	r3, [r3, #0]
    5e46:	2b03      	cmp	r3, #3
    5e48:	d9eb      	bls.n	5e22 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    5e4a:	68fb      	ldr	r3, [r7, #12]
    5e4c:	2200      	movs	r2, #0
    5e4e:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    5e50:	68fb      	ldr	r3, [r7, #12]
    5e52:	2200      	movs	r2, #0
    5e54:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    5e56:	2331      	movs	r3, #49	; 0x31
    5e58:	18fb      	adds	r3, r7, r3
    5e5a:	781a      	ldrb	r2, [r3, #0]
    5e5c:	4ba6      	ldr	r3, [pc, #664]	; (60f8 <tc_init+0x340>)
    5e5e:	0092      	lsls	r2, r2, #2
    5e60:	68f9      	ldr	r1, [r7, #12]
    5e62:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    5e64:	68fb      	ldr	r3, [r7, #12]
    5e66:	68ba      	ldr	r2, [r7, #8]
    5e68:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	789b      	ldrb	r3, [r3, #2]
    5e6e:	2b08      	cmp	r3, #8
    5e70:	d107      	bne.n	5e82 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    5e72:	2331      	movs	r3, #49	; 0x31
    5e74:	18fb      	adds	r3, r7, r3
    5e76:	781b      	ldrb	r3, [r3, #0]
    5e78:	2201      	movs	r2, #1
    5e7a:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5e7c:	d001      	beq.n	5e82 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5e7e:	2317      	movs	r3, #23
    5e80:	e1c3      	b.n	620a <tc_init+0x452>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	789a      	ldrb	r2, [r3, #2]
    5e86:	68fb      	ldr	r3, [r7, #12]
    5e88:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5e8a:	68bb      	ldr	r3, [r7, #8]
    5e8c:	881b      	ldrh	r3, [r3, #0]
    5e8e:	b29b      	uxth	r3, r3
    5e90:	1c1a      	adds	r2, r3, #0
    5e92:	2301      	movs	r3, #1
    5e94:	4013      	ands	r3, r2
    5e96:	d001      	beq.n	5e9c <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5e98:	2305      	movs	r3, #5
    5e9a:	e1b6      	b.n	620a <tc_init+0x452>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5e9c:	68bb      	ldr	r3, [r7, #8]
    5e9e:	7bdb      	ldrb	r3, [r3, #15]
    5ea0:	b2db      	uxtb	r3, r3
    5ea2:	1c1a      	adds	r2, r3, #0
    5ea4:	2310      	movs	r3, #16
    5ea6:	4013      	ands	r3, r2
    5ea8:	d001      	beq.n	5eae <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5eaa:	231c      	movs	r3, #28
    5eac:	e1ad      	b.n	620a <tc_init+0x452>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5eae:	68bb      	ldr	r3, [r7, #8]
    5eb0:	881b      	ldrh	r3, [r3, #0]
    5eb2:	b29b      	uxth	r3, r3
    5eb4:	1c1a      	adds	r2, r3, #0
    5eb6:	2302      	movs	r3, #2
    5eb8:	4013      	ands	r3, r2
    5eba:	d001      	beq.n	5ec0 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5ebc:	231c      	movs	r3, #28
    5ebe:	e1a4      	b.n	620a <tc_init+0x452>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	7c1b      	ldrb	r3, [r3, #16]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d017      	beq.n	5ef8 <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    5ec8:	2314      	movs	r3, #20
    5eca:	18fb      	adds	r3, r7, r3
    5ecc:	1c18      	adds	r0, r3, #0
    5ece:	4b8b      	ldr	r3, [pc, #556]	; (60fc <tc_init+0x344>)
    5ed0:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	699b      	ldr	r3, [r3, #24]
    5ed6:	b2da      	uxtb	r2, r3
    5ed8:	2314      	movs	r3, #20
    5eda:	18fb      	adds	r3, r7, r3
    5edc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5ede:	2314      	movs	r3, #20
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	2201      	movs	r2, #1
    5ee4:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5ee6:	687b      	ldr	r3, [r7, #4]
    5ee8:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    5eea:	b2da      	uxtb	r2, r3
    5eec:	2314      	movs	r3, #20
    5eee:	18fb      	adds	r3, r7, r3
    5ef0:	1c10      	adds	r0, r2, #0
    5ef2:	1c19      	adds	r1, r3, #0
    5ef4:	4b82      	ldr	r3, [pc, #520]	; (6100 <tc_init+0x348>)
    5ef6:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	7f1b      	ldrb	r3, [r3, #28]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d017      	beq.n	5f30 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    5f00:	2314      	movs	r3, #20
    5f02:	18fb      	adds	r3, r7, r3
    5f04:	1c18      	adds	r0, r3, #0
    5f06:	4b7d      	ldr	r3, [pc, #500]	; (60fc <tc_init+0x344>)
    5f08:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f0e:	b2da      	uxtb	r2, r3
    5f10:	2314      	movs	r3, #20
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5f16:	2314      	movs	r3, #20
    5f18:	18fb      	adds	r3, r7, r3
    5f1a:	2201      	movs	r2, #1
    5f1c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    5f1e:	687b      	ldr	r3, [r7, #4]
    5f20:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    5f22:	b2da      	uxtb	r2, r3
    5f24:	2314      	movs	r3, #20
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	1c10      	adds	r0, r2, #0
    5f2a:	1c19      	adds	r1, r3, #0
    5f2c:	4b74      	ldr	r3, [pc, #464]	; (6100 <tc_init+0x348>)
    5f2e:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    5f30:	2331      	movs	r3, #49	; 0x31
    5f32:	18fb      	adds	r3, r7, r3
    5f34:	781a      	ldrb	r2, [r3, #0]
    5f36:	2318      	movs	r3, #24
    5f38:	18fb      	adds	r3, r7, r3
    5f3a:	0052      	lsls	r2, r2, #1
    5f3c:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5f3e:	2002      	movs	r0, #2
    5f40:	1c19      	adds	r1, r3, #0
    5f42:	4b70      	ldr	r3, [pc, #448]	; (6104 <tc_init+0x34c>)
    5f44:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	789b      	ldrb	r3, [r3, #2]
    5f4a:	2b08      	cmp	r3, #8
    5f4c:	d10b      	bne.n	5f66 <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    5f4e:	2331      	movs	r3, #49	; 0x31
    5f50:	18fb      	adds	r3, r7, r3
    5f52:	781b      	ldrb	r3, [r3, #0]
    5f54:	1c5a      	adds	r2, r3, #1
    5f56:	2318      	movs	r3, #24
    5f58:	18fb      	adds	r3, r7, r3
    5f5a:	0052      	lsls	r2, r2, #1
    5f5c:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5f5e:	2002      	movs	r0, #2
    5f60:	1c19      	adds	r1, r3, #0
    5f62:	4b68      	ldr	r3, [pc, #416]	; (6104 <tc_init+0x34c>)
    5f64:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5f66:	2310      	movs	r3, #16
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	1c18      	adds	r0, r3, #0
    5f6c:	4b66      	ldr	r3, [pc, #408]	; (6108 <tc_init+0x350>)
    5f6e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	781a      	ldrb	r2, [r3, #0]
    5f74:	2310      	movs	r3, #16
    5f76:	18fb      	adds	r3, r7, r3
    5f78:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5f7a:	2331      	movs	r3, #49	; 0x31
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	2228      	movs	r2, #40	; 0x28
    5f82:	18ba      	adds	r2, r7, r2
    5f84:	5cd2      	ldrb	r2, [r2, r3]
    5f86:	2310      	movs	r3, #16
    5f88:	18fb      	adds	r3, r7, r3
    5f8a:	1c10      	adds	r0, r2, #0
    5f8c:	1c19      	adds	r1, r3, #0
    5f8e:	4b5f      	ldr	r3, [pc, #380]	; (610c <tc_init+0x354>)
    5f90:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5f92:	2331      	movs	r3, #49	; 0x31
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	2228      	movs	r2, #40	; 0x28
    5f9a:	18ba      	adds	r2, r7, r2
    5f9c:	5cd3      	ldrb	r3, [r2, r3]
    5f9e:	1c18      	adds	r0, r3, #0
    5fa0:	4b5b      	ldr	r3, [pc, #364]	; (6110 <tc_init+0x358>)
    5fa2:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    5fac:	4313      	orrs	r3, r2
    5fae:	b2db      	uxtb	r3, r3
    5fb0:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    5fb6:	4313      	orrs	r3, r2
    5fb8:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    5fbe:	2336      	movs	r3, #54	; 0x36
    5fc0:	18fb      	adds	r3, r7, r3
    5fc2:	430a      	orrs	r2, r1
    5fc4:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    5fc6:	687b      	ldr	r3, [r7, #4]
    5fc8:	785b      	ldrb	r3, [r3, #1]
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d008      	beq.n	5fe0 <tc_init+0x228>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5fce:	2336      	movs	r3, #54	; 0x36
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	2236      	movs	r2, #54	; 0x36
    5fd4:	18ba      	adds	r2, r7, r2
    5fd6:	8812      	ldrh	r2, [r2, #0]
    5fd8:	2180      	movs	r1, #128	; 0x80
    5fda:	0109      	lsls	r1, r1, #4
    5fdc:	430a      	orrs	r2, r1
    5fde:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5fe0:	46c0      	nop			; (mov r8, r8)
    5fe2:	68fb      	ldr	r3, [r7, #12]
    5fe4:	1c18      	adds	r0, r3, #0
    5fe6:	4b4b      	ldr	r3, [pc, #300]	; (6114 <tc_init+0x35c>)
    5fe8:	4798      	blx	r3
    5fea:	1e03      	subs	r3, r0, #0
    5fec:	d1f9      	bne.n	5fe2 <tc_init+0x22a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5fee:	68bb      	ldr	r3, [r7, #8]
    5ff0:	2236      	movs	r2, #54	; 0x36
    5ff2:	18ba      	adds	r2, r7, r2
    5ff4:	8812      	ldrh	r2, [r2, #0]
    5ff6:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	7b5b      	ldrb	r3, [r3, #13]
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d003      	beq.n	6008 <tc_init+0x250>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6000:	2335      	movs	r3, #53	; 0x35
    6002:	18fb      	adds	r3, r7, r3
    6004:	2204      	movs	r2, #4
    6006:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	7b9b      	ldrb	r3, [r3, #14]
    600c:	2b00      	cmp	r3, #0
    600e:	d007      	beq.n	6020 <tc_init+0x268>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6010:	2335      	movs	r3, #53	; 0x35
    6012:	18fb      	adds	r3, r7, r3
    6014:	2235      	movs	r2, #53	; 0x35
    6016:	18ba      	adds	r2, r7, r2
    6018:	7812      	ldrb	r2, [r2, #0]
    601a:	2101      	movs	r1, #1
    601c:	430a      	orrs	r2, r1
    601e:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    6020:	46c0      	nop			; (mov r8, r8)
    6022:	68fb      	ldr	r3, [r7, #12]
    6024:	1c18      	adds	r0, r3, #0
    6026:	4b3b      	ldr	r3, [pc, #236]	; (6114 <tc_init+0x35c>)
    6028:	4798      	blx	r3
    602a:	1e03      	subs	r3, r0, #0
    602c:	d1f9      	bne.n	6022 <tc_init+0x26a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    602e:	68bb      	ldr	r3, [r7, #8]
    6030:	22ff      	movs	r2, #255	; 0xff
    6032:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    6034:	2335      	movs	r3, #53	; 0x35
    6036:	18fb      	adds	r3, r7, r3
    6038:	781b      	ldrb	r3, [r3, #0]
    603a:	2b00      	cmp	r3, #0
    603c:	d00b      	beq.n	6056 <tc_init+0x29e>
		while (tc_is_syncing(module_inst)) {
    603e:	46c0      	nop			; (mov r8, r8)
    6040:	68fb      	ldr	r3, [r7, #12]
    6042:	1c18      	adds	r0, r3, #0
    6044:	4b33      	ldr	r3, [pc, #204]	; (6114 <tc_init+0x35c>)
    6046:	4798      	blx	r3
    6048:	1e03      	subs	r3, r0, #0
    604a:	d1f9      	bne.n	6040 <tc_init+0x288>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    604c:	68bb      	ldr	r3, [r7, #8]
    604e:	2235      	movs	r2, #53	; 0x35
    6050:	18ba      	adds	r2, r7, r2
    6052:	7812      	ldrb	r2, [r2, #0]
    6054:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    6056:	2334      	movs	r3, #52	; 0x34
    6058:	18fb      	adds	r3, r7, r3
    605a:	687a      	ldr	r2, [r7, #4]
    605c:	7a92      	ldrb	r2, [r2, #10]
    605e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6060:	2332      	movs	r3, #50	; 0x32
    6062:	18fb      	adds	r3, r7, r3
    6064:	2200      	movs	r2, #0
    6066:	701a      	strb	r2, [r3, #0]
    6068:	e01c      	b.n	60a4 <tc_init+0x2ec>
		if (config->enable_capture_on_channel[i] == true) {
    606a:	2332      	movs	r3, #50	; 0x32
    606c:	18fb      	adds	r3, r7, r3
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	687a      	ldr	r2, [r7, #4]
    6072:	18d3      	adds	r3, r2, r3
    6074:	7adb      	ldrb	r3, [r3, #11]
    6076:	2b00      	cmp	r3, #0
    6078:	d00d      	beq.n	6096 <tc_init+0x2de>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    607a:	2332      	movs	r3, #50	; 0x32
    607c:	18fb      	adds	r3, r7, r3
    607e:	781b      	ldrb	r3, [r3, #0]
    6080:	2210      	movs	r2, #16
    6082:	409a      	lsls	r2, r3
    6084:	1c13      	adds	r3, r2, #0
    6086:	b2d9      	uxtb	r1, r3
    6088:	2334      	movs	r3, #52	; 0x34
    608a:	18fb      	adds	r3, r7, r3
    608c:	2234      	movs	r2, #52	; 0x34
    608e:	18ba      	adds	r2, r7, r2
    6090:	7812      	ldrb	r2, [r2, #0]
    6092:	430a      	orrs	r2, r1
    6094:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    6096:	2332      	movs	r3, #50	; 0x32
    6098:	18fb      	adds	r3, r7, r3
    609a:	781a      	ldrb	r2, [r3, #0]
    609c:	2332      	movs	r3, #50	; 0x32
    609e:	18fb      	adds	r3, r7, r3
    60a0:	3201      	adds	r2, #1
    60a2:	701a      	strb	r2, [r3, #0]
    60a4:	2332      	movs	r3, #50	; 0x32
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	2b01      	cmp	r3, #1
    60ac:	d9dd      	bls.n	606a <tc_init+0x2b2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    60ae:	46c0      	nop			; (mov r8, r8)
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	1c18      	adds	r0, r3, #0
    60b4:	4b17      	ldr	r3, [pc, #92]	; (6114 <tc_init+0x35c>)
    60b6:	4798      	blx	r3
    60b8:	1e03      	subs	r3, r0, #0
    60ba:	d1f9      	bne.n	60b0 <tc_init+0x2f8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    60bc:	68bb      	ldr	r3, [r7, #8]
    60be:	2234      	movs	r2, #52	; 0x34
    60c0:	18ba      	adds	r2, r7, r2
    60c2:	7812      	ldrb	r2, [r2, #0]
    60c4:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    60c6:	46c0      	nop			; (mov r8, r8)
    60c8:	68fb      	ldr	r3, [r7, #12]
    60ca:	1c18      	adds	r0, r3, #0
    60cc:	4b11      	ldr	r3, [pc, #68]	; (6114 <tc_init+0x35c>)
    60ce:	4798      	blx	r3
    60d0:	1e03      	subs	r3, r0, #0
    60d2:	d1f9      	bne.n	60c8 <tc_init+0x310>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    60d4:	68fb      	ldr	r3, [r7, #12]
    60d6:	791b      	ldrb	r3, [r3, #4]
    60d8:	2b04      	cmp	r3, #4
    60da:	d01d      	beq.n	6118 <tc_init+0x360>
    60dc:	2b08      	cmp	r3, #8
    60de:	d100      	bne.n	60e2 <tc_init+0x32a>
    60e0:	e06f      	b.n	61c2 <tc_init+0x40a>
    60e2:	2b00      	cmp	r3, #0
    60e4:	d04a      	beq.n	617c <tc_init+0x3c4>
    60e6:	e08f      	b.n	6208 <tc_init+0x450>
    60e8:	00005d69 	.word	0x00005d69
    60ec:	00006ffc 	.word	0x00006ffc
    60f0:	000065f1 	.word	0x000065f1
    60f4:	00007004 	.word	0x00007004
    60f8:	20000774 	.word	0x20000774
    60fc:	00005d19 	.word	0x00005d19
    6100:	00005a91 	.word	0x00005a91
    6104:	00005cbd 	.word	0x00005cbd
    6108:	00005ca9 	.word	0x00005ca9
    610c:	000057a5 	.word	0x000057a5
    6110:	000057e9 	.word	0x000057e9
    6114:	00005d41 	.word	0x00005d41
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    6118:	46c0      	nop			; (mov r8, r8)
    611a:	68fb      	ldr	r3, [r7, #12]
    611c:	1c18      	adds	r0, r3, #0
    611e:	4b3d      	ldr	r3, [pc, #244]	; (6214 <tc_init+0x45c>)
    6120:	4798      	blx	r3
    6122:	1e03      	subs	r3, r0, #0
    6124:	d1f9      	bne.n	611a <tc_init+0x362>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	2228      	movs	r2, #40	; 0x28
    612a:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    612c:	68bb      	ldr	r3, [r7, #8]
    612e:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    6130:	46c0      	nop			; (mov r8, r8)
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	1c18      	adds	r0, r3, #0
    6136:	4b37      	ldr	r3, [pc, #220]	; (6214 <tc_init+0x45c>)
    6138:	4798      	blx	r3
    613a:	1e03      	subs	r3, r0, #0
    613c:	d1f9      	bne.n	6132 <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    613e:	687b      	ldr	r3, [r7, #4]
    6140:	2229      	movs	r2, #41	; 0x29
    6142:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    6144:	68bb      	ldr	r3, [r7, #8]
    6146:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    6148:	46c0      	nop			; (mov r8, r8)
    614a:	68fb      	ldr	r3, [r7, #12]
    614c:	1c18      	adds	r0, r3, #0
    614e:	4b31      	ldr	r3, [pc, #196]	; (6214 <tc_init+0x45c>)
    6150:	4798      	blx	r3
    6152:	1e03      	subs	r3, r0, #0
    6154:	d1f9      	bne.n	614a <tc_init+0x392>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	222a      	movs	r2, #42	; 0x2a
    615a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    615c:	68bb      	ldr	r3, [r7, #8]
    615e:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    6160:	46c0      	nop			; (mov r8, r8)
    6162:	68fb      	ldr	r3, [r7, #12]
    6164:	1c18      	adds	r0, r3, #0
    6166:	4b2b      	ldr	r3, [pc, #172]	; (6214 <tc_init+0x45c>)
    6168:	4798      	blx	r3
    616a:	1e03      	subs	r3, r0, #0
    616c:	d1f9      	bne.n	6162 <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    616e:	687b      	ldr	r3, [r7, #4]
    6170:	222b      	movs	r2, #43	; 0x2b
    6172:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    6174:	68bb      	ldr	r3, [r7, #8]
    6176:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    6178:	2300      	movs	r3, #0
    617a:	e046      	b.n	620a <tc_init+0x452>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    617c:	46c0      	nop			; (mov r8, r8)
    617e:	68fb      	ldr	r3, [r7, #12]
    6180:	1c18      	adds	r0, r3, #0
    6182:	4b24      	ldr	r3, [pc, #144]	; (6214 <tc_init+0x45c>)
    6184:	4798      	blx	r3
    6186:	1e03      	subs	r3, r0, #0
    6188:	d1f9      	bne.n	617e <tc_init+0x3c6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    618e:	68bb      	ldr	r3, [r7, #8]
    6190:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    6192:	46c0      	nop			; (mov r8, r8)
    6194:	68fb      	ldr	r3, [r7, #12]
    6196:	1c18      	adds	r0, r3, #0
    6198:	4b1e      	ldr	r3, [pc, #120]	; (6214 <tc_init+0x45c>)
    619a:	4798      	blx	r3
    619c:	1e03      	subs	r3, r0, #0
    619e:	d1f9      	bne.n	6194 <tc_init+0x3dc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    61a4:	68bb      	ldr	r3, [r7, #8]
    61a6:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    61a8:	46c0      	nop			; (mov r8, r8)
    61aa:	68fb      	ldr	r3, [r7, #12]
    61ac:	1c18      	adds	r0, r3, #0
    61ae:	4b19      	ldr	r3, [pc, #100]	; (6214 <tc_init+0x45c>)
    61b0:	4798      	blx	r3
    61b2:	1e03      	subs	r3, r0, #0
    61b4:	d1f9      	bne.n	61aa <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    61ba:	68bb      	ldr	r3, [r7, #8]
    61bc:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    61be:	2300      	movs	r3, #0
    61c0:	e023      	b.n	620a <tc_init+0x452>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	68fb      	ldr	r3, [r7, #12]
    61c6:	1c18      	adds	r0, r3, #0
    61c8:	4b12      	ldr	r3, [pc, #72]	; (6214 <tc_init+0x45c>)
    61ca:	4798      	blx	r3
    61cc:	1e03      	subs	r3, r0, #0
    61ce:	d1f9      	bne.n	61c4 <tc_init+0x40c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    61d4:	68bb      	ldr	r3, [r7, #8]
    61d6:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    61d8:	46c0      	nop			; (mov r8, r8)
    61da:	68fb      	ldr	r3, [r7, #12]
    61dc:	1c18      	adds	r0, r3, #0
    61de:	4b0d      	ldr	r3, [pc, #52]	; (6214 <tc_init+0x45c>)
    61e0:	4798      	blx	r3
    61e2:	1e03      	subs	r3, r0, #0
    61e4:	d1f9      	bne.n	61da <tc_init+0x422>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    61ea:	68bb      	ldr	r3, [r7, #8]
    61ec:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	1c18      	adds	r0, r3, #0
    61f4:	4b07      	ldr	r3, [pc, #28]	; (6214 <tc_init+0x45c>)
    61f6:	4798      	blx	r3
    61f8:	1e03      	subs	r3, r0, #0
    61fa:	d1f9      	bne.n	61f0 <tc_init+0x438>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    6200:	68bb      	ldr	r3, [r7, #8]
    6202:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    6204:	2300      	movs	r3, #0
    6206:	e000      	b.n	620a <tc_init+0x452>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    6208:	2317      	movs	r3, #23
}
    620a:	1c18      	adds	r0, r3, #0
    620c:	46bd      	mov	sp, r7
    620e:	b00f      	add	sp, #60	; 0x3c
    6210:	bd90      	pop	{r4, r7, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	00005d41 	.word	0x00005d41

00006218 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6218:	b580      	push	{r7, lr}
    621a:	b082      	sub	sp, #8
    621c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    621e:	4b19      	ldr	r3, [pc, #100]	; (6284 <Reset_Handler+0x6c>)
    6220:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6222:	4b19      	ldr	r3, [pc, #100]	; (6288 <Reset_Handler+0x70>)
    6224:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6226:	687a      	ldr	r2, [r7, #4]
    6228:	683b      	ldr	r3, [r7, #0]
    622a:	429a      	cmp	r2, r3
    622c:	d00c      	beq.n	6248 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    622e:	e007      	b.n	6240 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6230:	683b      	ldr	r3, [r7, #0]
    6232:	1d1a      	adds	r2, r3, #4
    6234:	603a      	str	r2, [r7, #0]
    6236:	687a      	ldr	r2, [r7, #4]
    6238:	1d11      	adds	r1, r2, #4
    623a:	6079      	str	r1, [r7, #4]
    623c:	6812      	ldr	r2, [r2, #0]
    623e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    6240:	683a      	ldr	r2, [r7, #0]
    6242:	4b12      	ldr	r3, [pc, #72]	; (628c <Reset_Handler+0x74>)
    6244:	429a      	cmp	r2, r3
    6246:	d3f3      	bcc.n	6230 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6248:	4b11      	ldr	r3, [pc, #68]	; (6290 <Reset_Handler+0x78>)
    624a:	603b      	str	r3, [r7, #0]
    624c:	e004      	b.n	6258 <Reset_Handler+0x40>
                *pDest++ = 0;
    624e:	683b      	ldr	r3, [r7, #0]
    6250:	1d1a      	adds	r2, r3, #4
    6252:	603a      	str	r2, [r7, #0]
    6254:	2200      	movs	r2, #0
    6256:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6258:	683a      	ldr	r2, [r7, #0]
    625a:	4b0e      	ldr	r3, [pc, #56]	; (6294 <Reset_Handler+0x7c>)
    625c:	429a      	cmp	r2, r3
    625e:	d3f6      	bcc.n	624e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6260:	4b0d      	ldr	r3, [pc, #52]	; (6298 <Reset_Handler+0x80>)
    6262:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6264:	4b0d      	ldr	r3, [pc, #52]	; (629c <Reset_Handler+0x84>)
    6266:	687a      	ldr	r2, [r7, #4]
    6268:	21ff      	movs	r1, #255	; 0xff
    626a:	438a      	bics	r2, r1
    626c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    626e:	4b0c      	ldr	r3, [pc, #48]	; (62a0 <Reset_Handler+0x88>)
    6270:	685a      	ldr	r2, [r3, #4]
    6272:	2180      	movs	r1, #128	; 0x80
    6274:	430a      	orrs	r2, r1
    6276:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    6278:	4b0a      	ldr	r3, [pc, #40]	; (62a4 <Reset_Handler+0x8c>)
    627a:	4798      	blx	r3

        /* Branch to main function */
        main();
    627c:	4b0a      	ldr	r3, [pc, #40]	; (62a8 <Reset_Handler+0x90>)
    627e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6280:	e7fe      	b.n	6280 <Reset_Handler+0x68>
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	000070cc 	.word	0x000070cc
    6288:	20000000 	.word	0x20000000
    628c:	20000078 	.word	0x20000078
    6290:	20000078 	.word	0x20000078
    6294:	20000798 	.word	0x20000798
    6298:	00000000 	.word	0x00000000
    629c:	e000ed00 	.word	0xe000ed00
    62a0:	41004000 	.word	0x41004000
    62a4:	000065a5 	.word	0x000065a5
    62a8:	000063b1 	.word	0x000063b1

000062ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	af00      	add	r7, sp, #0
        while (1) {
        }
    62b0:	e7fe      	b.n	62b0 <Dummy_Handler+0x4>
    62b2:	46c0      	nop			; (mov r8, r8)

000062b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b084      	sub	sp, #16
    62b8:	af00      	add	r7, sp, #0
    62ba:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    62bc:	4b0a      	ldr	r3, [pc, #40]	; (62e8 <_sbrk+0x34>)
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	2b00      	cmp	r3, #0
    62c2:	d102      	bne.n	62ca <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    62c4:	4b08      	ldr	r3, [pc, #32]	; (62e8 <_sbrk+0x34>)
    62c6:	4a09      	ldr	r2, [pc, #36]	; (62ec <_sbrk+0x38>)
    62c8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    62ca:	4b07      	ldr	r3, [pc, #28]	; (62e8 <_sbrk+0x34>)
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	60fb      	str	r3, [r7, #12]

	heap += incr;
    62d0:	4b05      	ldr	r3, [pc, #20]	; (62e8 <_sbrk+0x34>)
    62d2:	681a      	ldr	r2, [r3, #0]
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	18d2      	adds	r2, r2, r3
    62d8:	4b03      	ldr	r3, [pc, #12]	; (62e8 <_sbrk+0x34>)
    62da:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    62dc:	68fb      	ldr	r3, [r7, #12]
}
    62de:	1c18      	adds	r0, r3, #0
    62e0:	46bd      	mov	sp, r7
    62e2:	b004      	add	sp, #16
    62e4:	bd80      	pop	{r7, pc}
    62e6:	46c0      	nop			; (mov r8, r8)
    62e8:	200000d4 	.word	0x200000d4
    62ec:	20002798 	.word	0x20002798

000062f0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    62f0:	b580      	push	{r7, lr}
    62f2:	b084      	sub	sp, #16
    62f4:	af00      	add	r7, sp, #0
    62f6:	1c02      	adds	r2, r0, #0
    62f8:	1dfb      	adds	r3, r7, #7
    62fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    62fc:	230f      	movs	r3, #15
    62fe:	18fb      	adds	r3, r7, r3
    6300:	1dfa      	adds	r2, r7, #7
    6302:	7812      	ldrb	r2, [r2, #0]
    6304:	09d2      	lsrs	r2, r2, #7
    6306:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6308:	230e      	movs	r3, #14
    630a:	18fb      	adds	r3, r7, r3
    630c:	1dfa      	adds	r2, r7, #7
    630e:	7812      	ldrb	r2, [r2, #0]
    6310:	0952      	lsrs	r2, r2, #5
    6312:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6314:	4b0d      	ldr	r3, [pc, #52]	; (634c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6316:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6318:	230f      	movs	r3, #15
    631a:	18fb      	adds	r3, r7, r3
    631c:	781b      	ldrb	r3, [r3, #0]
    631e:	2b00      	cmp	r3, #0
    6320:	d10f      	bne.n	6342 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6322:	230f      	movs	r3, #15
    6324:	18fb      	adds	r3, r7, r3
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	009b      	lsls	r3, r3, #2
    632a:	2210      	movs	r2, #16
    632c:	4694      	mov	ip, r2
    632e:	44bc      	add	ip, r7
    6330:	4463      	add	r3, ip
    6332:	3b08      	subs	r3, #8
    6334:	681a      	ldr	r2, [r3, #0]
    6336:	230e      	movs	r3, #14
    6338:	18fb      	adds	r3, r7, r3
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	01db      	lsls	r3, r3, #7
    633e:	18d3      	adds	r3, r2, r3
    6340:	e000      	b.n	6344 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    6342:	2300      	movs	r3, #0
	}
}
    6344:	1c18      	adds	r0, r3, #0
    6346:	46bd      	mov	sp, r7
    6348:	b004      	add	sp, #16
    634a:	bd80      	pop	{r7, pc}
    634c:	41004400 	.word	0x41004400

00006350 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6350:	b580      	push	{r7, lr}
    6352:	b082      	sub	sp, #8
    6354:	af00      	add	r7, sp, #0
    6356:	1c02      	adds	r2, r0, #0
    6358:	1dfb      	adds	r3, r7, #7
    635a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    635c:	1dfb      	adds	r3, r7, #7
    635e:	781b      	ldrb	r3, [r3, #0]
    6360:	1c18      	adds	r0, r3, #0
    6362:	4b03      	ldr	r3, [pc, #12]	; (6370 <port_get_group_from_gpio_pin+0x20>)
    6364:	4798      	blx	r3
    6366:	1c03      	adds	r3, r0, #0
}
    6368:	1c18      	adds	r0, r3, #0
    636a:	46bd      	mov	sp, r7
    636c:	b002      	add	sp, #8
    636e:	bd80      	pop	{r7, pc}
    6370:	000062f1 	.word	0x000062f1

00006374 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    6374:	b580      	push	{r7, lr}
    6376:	b084      	sub	sp, #16
    6378:	af00      	add	r7, sp, #0
    637a:	1c02      	adds	r2, r0, #0
    637c:	1dfb      	adds	r3, r7, #7
    637e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6380:	1dfb      	adds	r3, r7, #7
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	1c18      	adds	r0, r3, #0
    6386:	4b09      	ldr	r3, [pc, #36]	; (63ac <port_pin_toggle_output_level+0x38>)
    6388:	4798      	blx	r3
    638a:	1c03      	adds	r3, r0, #0
    638c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    638e:	1dfb      	adds	r3, r7, #7
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	221f      	movs	r2, #31
    6394:	4013      	ands	r3, r2
    6396:	2201      	movs	r2, #1
    6398:	409a      	lsls	r2, r3
    639a:	1c13      	adds	r3, r2, #0
    639c:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	68ba      	ldr	r2, [r7, #8]
    63a2:	61da      	str	r2, [r3, #28]
}
    63a4:	46bd      	mov	sp, r7
    63a6:	b004      	add	sp, #16
    63a8:	bd80      	pop	{r7, pc}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	00006351 	.word	0x00006351

000063b0 <main>:
volatile bool transfer_complete_spi_master_to_treble = false;


		 
 int main(void)
{	
    63b0:	b580      	push	{r7, lr}
    63b2:	af00      	add	r7, sp, #0
//	while(1){}						//****************************************
		
	init();
    63b4:	4b11      	ldr	r3, [pc, #68]	; (63fc <main+0x4c>)
    63b6:	4798      	blx	r3

 	while (true) 
	{

		// check that BT is in SSP mode
		ck_SSP_mode();
    63b8:	4b11      	ldr	r3, [pc, #68]	; (6400 <main+0x50>)
    63ba:	4798      	blx	r3
		

		port_pin_toggle_output_level(LOOP_IND); // test point loop indicator
    63bc:	2008      	movs	r0, #8
    63be:	4b11      	ldr	r3, [pc, #68]	; (6404 <main+0x54>)
    63c0:	4798      	blx	r3

// !!!!!!!!!!!!!!!!!! DO FP SPI, WRITE LED AND READ SWITCHES		
		do_FP_SPI();
    63c2:	4b11      	ldr	r3, [pc, #68]	; (6408 <main+0x58>)
    63c4:	4798      	blx	r3
			freeRunningUpCounter10msec = 100;
			_key_load_keyQ (0x33, 0xff);		
		#endif*/
		
		
		if (transfer_complete_spi_master_to_treble )
    63c6:	4b11      	ldr	r3, [pc, #68]	; (640c <main+0x5c>)
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	b2db      	uxtb	r3, r3
    63cc:	2b00      	cmp	r3, #0
    63ce:	d002      	beq.n	63d6 <main+0x26>
		{
			transfer_complete_spi_master_to_treble = false;
    63d0:	4b0e      	ldr	r3, [pc, #56]	; (640c <main+0x5c>)
    63d2:	2200      	movs	r2, #0
    63d4:	701a      	strb	r2, [r3, #0]
		}

		do_music_notes();				// do main music algorithms
    63d6:	4b0e      	ldr	r3, [pc, #56]	; (6410 <main+0x60>)
    63d8:	4798      	blx	r3
		do_music_mode();
    63da:	4b0e      	ldr	r3, [pc, #56]	; (6414 <main+0x64>)
    63dc:	4798      	blx	r3
		 
		TX_usart_Qs();
    63de:	4b0e      	ldr	r3, [pc, #56]	; (6418 <main+0x68>)
    63e0:	4798      	blx	r3

		move_trebleRxQ_to_keyQ(&trebleRxQ1);
    63e2:	4b0e      	ldr	r3, [pc, #56]	; (641c <main+0x6c>)
    63e4:	1c18      	adds	r0, r3, #0
    63e6:	4b0e      	ldr	r3, [pc, #56]	; (6420 <main+0x70>)
    63e8:	4798      	blx	r3
		move_trebleRxQ_to_keyQ(&trebleRxQ2);
    63ea:	4b0e      	ldr	r3, [pc, #56]	; (6424 <main+0x74>)
    63ec:	1c18      	adds	r0, r3, #0
    63ee:	4b0c      	ldr	r3, [pc, #48]	; (6420 <main+0x70>)
    63f0:	4798      	blx	r3
		move_trebleRxQ_to_keyQ(&trebleRxQ3);
    63f2:	4b0d      	ldr	r3, [pc, #52]	; (6428 <main+0x78>)
    63f4:	1c18      	adds	r0, r3, #0
    63f6:	4b0a      	ldr	r3, [pc, #40]	; (6420 <main+0x70>)
    63f8:	4798      	blx	r3

	} //! [inf_loop]
    63fa:	e7dd      	b.n	63b8 <main+0x8>
    63fc:	00001689 	.word	0x00001689
    6400:	00000d69 	.word	0x00000d69
    6404:	00006375 	.word	0x00006375
    6408:	00001219 	.word	0x00001219
    640c:	200000d8 	.word	0x200000d8
    6410:	000026ed 	.word	0x000026ed
    6414:	0000261d 	.word	0x0000261d
    6418:	000021a9 	.word	0x000021a9
    641c:	20000634 	.word	0x20000634
    6420:	00002d79 	.word	0x00002d79
    6424:	200006e0 	.word	0x200006e0
    6428:	20000704 	.word	0x20000704

0000642c <__aeabi_uidiv>:
    642c:	2200      	movs	r2, #0
    642e:	0843      	lsrs	r3, r0, #1
    6430:	428b      	cmp	r3, r1
    6432:	d374      	bcc.n	651e <__aeabi_uidiv+0xf2>
    6434:	0903      	lsrs	r3, r0, #4
    6436:	428b      	cmp	r3, r1
    6438:	d35f      	bcc.n	64fa <__aeabi_uidiv+0xce>
    643a:	0a03      	lsrs	r3, r0, #8
    643c:	428b      	cmp	r3, r1
    643e:	d344      	bcc.n	64ca <__aeabi_uidiv+0x9e>
    6440:	0b03      	lsrs	r3, r0, #12
    6442:	428b      	cmp	r3, r1
    6444:	d328      	bcc.n	6498 <__aeabi_uidiv+0x6c>
    6446:	0c03      	lsrs	r3, r0, #16
    6448:	428b      	cmp	r3, r1
    644a:	d30d      	bcc.n	6468 <__aeabi_uidiv+0x3c>
    644c:	22ff      	movs	r2, #255	; 0xff
    644e:	0209      	lsls	r1, r1, #8
    6450:	ba12      	rev	r2, r2
    6452:	0c03      	lsrs	r3, r0, #16
    6454:	428b      	cmp	r3, r1
    6456:	d302      	bcc.n	645e <__aeabi_uidiv+0x32>
    6458:	1212      	asrs	r2, r2, #8
    645a:	0209      	lsls	r1, r1, #8
    645c:	d065      	beq.n	652a <__aeabi_uidiv+0xfe>
    645e:	0b03      	lsrs	r3, r0, #12
    6460:	428b      	cmp	r3, r1
    6462:	d319      	bcc.n	6498 <__aeabi_uidiv+0x6c>
    6464:	e000      	b.n	6468 <__aeabi_uidiv+0x3c>
    6466:	0a09      	lsrs	r1, r1, #8
    6468:	0bc3      	lsrs	r3, r0, #15
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__aeabi_uidiv+0x46>
    646e:	03cb      	lsls	r3, r1, #15
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	0b83      	lsrs	r3, r0, #14
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__aeabi_uidiv+0x52>
    647a:	038b      	lsls	r3, r1, #14
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	0b43      	lsrs	r3, r0, #13
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__aeabi_uidiv+0x5e>
    6486:	034b      	lsls	r3, r1, #13
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0b03      	lsrs	r3, r0, #12
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__aeabi_uidiv+0x6a>
    6492:	030b      	lsls	r3, r1, #12
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	0ac3      	lsrs	r3, r0, #11
    649a:	428b      	cmp	r3, r1
    649c:	d301      	bcc.n	64a2 <__aeabi_uidiv+0x76>
    649e:	02cb      	lsls	r3, r1, #11
    64a0:	1ac0      	subs	r0, r0, r3
    64a2:	4152      	adcs	r2, r2
    64a4:	0a83      	lsrs	r3, r0, #10
    64a6:	428b      	cmp	r3, r1
    64a8:	d301      	bcc.n	64ae <__aeabi_uidiv+0x82>
    64aa:	028b      	lsls	r3, r1, #10
    64ac:	1ac0      	subs	r0, r0, r3
    64ae:	4152      	adcs	r2, r2
    64b0:	0a43      	lsrs	r3, r0, #9
    64b2:	428b      	cmp	r3, r1
    64b4:	d301      	bcc.n	64ba <__aeabi_uidiv+0x8e>
    64b6:	024b      	lsls	r3, r1, #9
    64b8:	1ac0      	subs	r0, r0, r3
    64ba:	4152      	adcs	r2, r2
    64bc:	0a03      	lsrs	r3, r0, #8
    64be:	428b      	cmp	r3, r1
    64c0:	d301      	bcc.n	64c6 <__aeabi_uidiv+0x9a>
    64c2:	020b      	lsls	r3, r1, #8
    64c4:	1ac0      	subs	r0, r0, r3
    64c6:	4152      	adcs	r2, r2
    64c8:	d2cd      	bcs.n	6466 <__aeabi_uidiv+0x3a>
    64ca:	09c3      	lsrs	r3, r0, #7
    64cc:	428b      	cmp	r3, r1
    64ce:	d301      	bcc.n	64d4 <__aeabi_uidiv+0xa8>
    64d0:	01cb      	lsls	r3, r1, #7
    64d2:	1ac0      	subs	r0, r0, r3
    64d4:	4152      	adcs	r2, r2
    64d6:	0983      	lsrs	r3, r0, #6
    64d8:	428b      	cmp	r3, r1
    64da:	d301      	bcc.n	64e0 <__aeabi_uidiv+0xb4>
    64dc:	018b      	lsls	r3, r1, #6
    64de:	1ac0      	subs	r0, r0, r3
    64e0:	4152      	adcs	r2, r2
    64e2:	0943      	lsrs	r3, r0, #5
    64e4:	428b      	cmp	r3, r1
    64e6:	d301      	bcc.n	64ec <__aeabi_uidiv+0xc0>
    64e8:	014b      	lsls	r3, r1, #5
    64ea:	1ac0      	subs	r0, r0, r3
    64ec:	4152      	adcs	r2, r2
    64ee:	0903      	lsrs	r3, r0, #4
    64f0:	428b      	cmp	r3, r1
    64f2:	d301      	bcc.n	64f8 <__aeabi_uidiv+0xcc>
    64f4:	010b      	lsls	r3, r1, #4
    64f6:	1ac0      	subs	r0, r0, r3
    64f8:	4152      	adcs	r2, r2
    64fa:	08c3      	lsrs	r3, r0, #3
    64fc:	428b      	cmp	r3, r1
    64fe:	d301      	bcc.n	6504 <__aeabi_uidiv+0xd8>
    6500:	00cb      	lsls	r3, r1, #3
    6502:	1ac0      	subs	r0, r0, r3
    6504:	4152      	adcs	r2, r2
    6506:	0883      	lsrs	r3, r0, #2
    6508:	428b      	cmp	r3, r1
    650a:	d301      	bcc.n	6510 <__aeabi_uidiv+0xe4>
    650c:	008b      	lsls	r3, r1, #2
    650e:	1ac0      	subs	r0, r0, r3
    6510:	4152      	adcs	r2, r2
    6512:	0843      	lsrs	r3, r0, #1
    6514:	428b      	cmp	r3, r1
    6516:	d301      	bcc.n	651c <__aeabi_uidiv+0xf0>
    6518:	004b      	lsls	r3, r1, #1
    651a:	1ac0      	subs	r0, r0, r3
    651c:	4152      	adcs	r2, r2
    651e:	1a41      	subs	r1, r0, r1
    6520:	d200      	bcs.n	6524 <__aeabi_uidiv+0xf8>
    6522:	4601      	mov	r1, r0
    6524:	4152      	adcs	r2, r2
    6526:	4610      	mov	r0, r2
    6528:	4770      	bx	lr
    652a:	e7ff      	b.n	652c <__aeabi_uidiv+0x100>
    652c:	b501      	push	{r0, lr}
    652e:	2000      	movs	r0, #0
    6530:	f000 f80c 	bl	654c <__aeabi_idiv0>
    6534:	bd02      	pop	{r1, pc}
    6536:	46c0      	nop			; (mov r8, r8)

00006538 <__aeabi_uidivmod>:
    6538:	2900      	cmp	r1, #0
    653a:	d0f7      	beq.n	652c <__aeabi_uidiv+0x100>
    653c:	b503      	push	{r0, r1, lr}
    653e:	f7ff ff75 	bl	642c <__aeabi_uidiv>
    6542:	bc0e      	pop	{r1, r2, r3}
    6544:	4342      	muls	r2, r0
    6546:	1a89      	subs	r1, r1, r2
    6548:	4718      	bx	r3
    654a:	46c0      	nop			; (mov r8, r8)

0000654c <__aeabi_idiv0>:
    654c:	4770      	bx	lr
    654e:	46c0      	nop			; (mov r8, r8)

00006550 <__aeabi_lmul>:
    6550:	b5f0      	push	{r4, r5, r6, r7, lr}
    6552:	464f      	mov	r7, r9
    6554:	4646      	mov	r6, r8
    6556:	0405      	lsls	r5, r0, #16
    6558:	0c2d      	lsrs	r5, r5, #16
    655a:	1c2c      	adds	r4, r5, #0
    655c:	b4c0      	push	{r6, r7}
    655e:	0417      	lsls	r7, r2, #16
    6560:	0c16      	lsrs	r6, r2, #16
    6562:	0c3f      	lsrs	r7, r7, #16
    6564:	4699      	mov	r9, r3
    6566:	0c03      	lsrs	r3, r0, #16
    6568:	437c      	muls	r4, r7
    656a:	4375      	muls	r5, r6
    656c:	435f      	muls	r7, r3
    656e:	4373      	muls	r3, r6
    6570:	197d      	adds	r5, r7, r5
    6572:	0c26      	lsrs	r6, r4, #16
    6574:	19ad      	adds	r5, r5, r6
    6576:	469c      	mov	ip, r3
    6578:	42af      	cmp	r7, r5
    657a:	d903      	bls.n	6584 <__aeabi_lmul+0x34>
    657c:	2380      	movs	r3, #128	; 0x80
    657e:	025b      	lsls	r3, r3, #9
    6580:	4698      	mov	r8, r3
    6582:	44c4      	add	ip, r8
    6584:	464b      	mov	r3, r9
    6586:	4351      	muls	r1, r2
    6588:	4343      	muls	r3, r0
    658a:	0424      	lsls	r4, r4, #16
    658c:	0c2e      	lsrs	r6, r5, #16
    658e:	0c24      	lsrs	r4, r4, #16
    6590:	042d      	lsls	r5, r5, #16
    6592:	4466      	add	r6, ip
    6594:	192c      	adds	r4, r5, r4
    6596:	1859      	adds	r1, r3, r1
    6598:	1989      	adds	r1, r1, r6
    659a:	1c20      	adds	r0, r4, #0
    659c:	bc0c      	pop	{r2, r3}
    659e:	4690      	mov	r8, r2
    65a0:	4699      	mov	r9, r3
    65a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000065a4 <__libc_init_array>:
    65a4:	4b0e      	ldr	r3, [pc, #56]	; (65e0 <__libc_init_array+0x3c>)
    65a6:	b570      	push	{r4, r5, r6, lr}
    65a8:	2500      	movs	r5, #0
    65aa:	1c1e      	adds	r6, r3, #0
    65ac:	4c0d      	ldr	r4, [pc, #52]	; (65e4 <__libc_init_array+0x40>)
    65ae:	1ae4      	subs	r4, r4, r3
    65b0:	10a4      	asrs	r4, r4, #2
    65b2:	42a5      	cmp	r5, r4
    65b4:	d004      	beq.n	65c0 <__libc_init_array+0x1c>
    65b6:	00ab      	lsls	r3, r5, #2
    65b8:	58f3      	ldr	r3, [r6, r3]
    65ba:	4798      	blx	r3
    65bc:	3501      	adds	r5, #1
    65be:	e7f8      	b.n	65b2 <__libc_init_array+0xe>
    65c0:	f000 fd74 	bl	70ac <_init>
    65c4:	4b08      	ldr	r3, [pc, #32]	; (65e8 <__libc_init_array+0x44>)
    65c6:	2500      	movs	r5, #0
    65c8:	1c1e      	adds	r6, r3, #0
    65ca:	4c08      	ldr	r4, [pc, #32]	; (65ec <__libc_init_array+0x48>)
    65cc:	1ae4      	subs	r4, r4, r3
    65ce:	10a4      	asrs	r4, r4, #2
    65d0:	42a5      	cmp	r5, r4
    65d2:	d004      	beq.n	65de <__libc_init_array+0x3a>
    65d4:	00ab      	lsls	r3, r5, #2
    65d6:	58f3      	ldr	r3, [r6, r3]
    65d8:	4798      	blx	r3
    65da:	3501      	adds	r5, #1
    65dc:	e7f8      	b.n	65d0 <__libc_init_array+0x2c>
    65de:	bd70      	pop	{r4, r5, r6, pc}
    65e0:	000070b8 	.word	0x000070b8
    65e4:	000070b8 	.word	0x000070b8
    65e8:	000070b8 	.word	0x000070b8
    65ec:	000070bc 	.word	0x000070bc

000065f0 <memcpy>:
    65f0:	2300      	movs	r3, #0
    65f2:	b510      	push	{r4, lr}
    65f4:	4293      	cmp	r3, r2
    65f6:	d003      	beq.n	6600 <memcpy+0x10>
    65f8:	5ccc      	ldrb	r4, [r1, r3]
    65fa:	54c4      	strb	r4, [r0, r3]
    65fc:	3301      	adds	r3, #1
    65fe:	e7f9      	b.n	65f4 <memcpy+0x4>
    6600:	bd10      	pop	{r4, pc}

00006602 <memmem>:
    6602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6604:	1c04      	adds	r4, r0, #0
    6606:	2b00      	cmp	r3, #0
    6608:	d013      	beq.n	6632 <memmem+0x30>
    660a:	1c1d      	adds	r5, r3, #0
    660c:	1c0f      	adds	r7, r1, #0
    660e:	1c0e      	adds	r6, r1, #0
    6610:	9201      	str	r2, [sp, #4]
    6612:	9000      	str	r0, [sp, #0]
    6614:	9b00      	ldr	r3, [sp, #0]
    6616:	1bbc      	subs	r4, r7, r6
    6618:	191c      	adds	r4, r3, r4
    661a:	42b5      	cmp	r5, r6
    661c:	d808      	bhi.n	6630 <memmem+0x2e>
    661e:	1c20      	adds	r0, r4, #0
    6620:	9901      	ldr	r1, [sp, #4]
    6622:	1c2a      	adds	r2, r5, #0
    6624:	f000 f846 	bl	66b4 <memcmp>
    6628:	2800      	cmp	r0, #0
    662a:	d002      	beq.n	6632 <memmem+0x30>
    662c:	3e01      	subs	r6, #1
    662e:	e7f1      	b.n	6614 <memmem+0x12>
    6630:	2400      	movs	r4, #0
    6632:	1c20      	adds	r0, r4, #0
    6634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006636 <memset>:
    6636:	1c03      	adds	r3, r0, #0
    6638:	1882      	adds	r2, r0, r2
    663a:	4293      	cmp	r3, r2
    663c:	d002      	beq.n	6644 <memset+0xe>
    663e:	7019      	strb	r1, [r3, #0]
    6640:	3301      	adds	r3, #1
    6642:	e7fa      	b.n	663a <memset+0x4>
    6644:	4770      	bx	lr
	...

00006648 <siprintf>:
    6648:	b40e      	push	{r1, r2, r3}
    664a:	b510      	push	{r4, lr}
    664c:	b09d      	sub	sp, #116	; 0x74
    664e:	a902      	add	r1, sp, #8
    6650:	9002      	str	r0, [sp, #8]
    6652:	6108      	str	r0, [r1, #16]
    6654:	480b      	ldr	r0, [pc, #44]	; (6684 <siprintf+0x3c>)
    6656:	2482      	movs	r4, #130	; 0x82
    6658:	6088      	str	r0, [r1, #8]
    665a:	6148      	str	r0, [r1, #20]
    665c:	2001      	movs	r0, #1
    665e:	4240      	negs	r0, r0
    6660:	ab1f      	add	r3, sp, #124	; 0x7c
    6662:	81c8      	strh	r0, [r1, #14]
    6664:	4808      	ldr	r0, [pc, #32]	; (6688 <siprintf+0x40>)
    6666:	cb04      	ldmia	r3!, {r2}
    6668:	00a4      	lsls	r4, r4, #2
    666a:	6800      	ldr	r0, [r0, #0]
    666c:	9301      	str	r3, [sp, #4]
    666e:	818c      	strh	r4, [r1, #12]
    6670:	f000 f8e8 	bl	6844 <_svfiprintf_r>
    6674:	2300      	movs	r3, #0
    6676:	9a02      	ldr	r2, [sp, #8]
    6678:	7013      	strb	r3, [r2, #0]
    667a:	b01d      	add	sp, #116	; 0x74
    667c:	bc10      	pop	{r4}
    667e:	bc08      	pop	{r3}
    6680:	b003      	add	sp, #12
    6682:	4718      	bx	r3
    6684:	7fffffff 	.word	0x7fffffff
    6688:	20000074 	.word	0x20000074

0000668c <strcat>:
    668c:	1c02      	adds	r2, r0, #0
    668e:	b510      	push	{r4, lr}
    6690:	7813      	ldrb	r3, [r2, #0]
    6692:	2b00      	cmp	r3, #0
    6694:	d001      	beq.n	669a <strcat+0xe>
    6696:	3201      	adds	r2, #1
    6698:	e7fa      	b.n	6690 <strcat+0x4>
    669a:	5ccc      	ldrb	r4, [r1, r3]
    669c:	54d4      	strb	r4, [r2, r3]
    669e:	3301      	adds	r3, #1
    66a0:	2c00      	cmp	r4, #0
    66a2:	d1fa      	bne.n	669a <strcat+0xe>
    66a4:	bd10      	pop	{r4, pc}

000066a6 <strlen>:
    66a6:	2300      	movs	r3, #0
    66a8:	5cc2      	ldrb	r2, [r0, r3]
    66aa:	3301      	adds	r3, #1
    66ac:	2a00      	cmp	r2, #0
    66ae:	d1fb      	bne.n	66a8 <strlen+0x2>
    66b0:	1e58      	subs	r0, r3, #1
    66b2:	4770      	bx	lr

000066b4 <memcmp>:
    66b4:	b530      	push	{r4, r5, lr}
    66b6:	2400      	movs	r4, #0
    66b8:	4294      	cmp	r4, r2
    66ba:	d008      	beq.n	66ce <memcmp+0x1a>
    66bc:	5d03      	ldrb	r3, [r0, r4]
    66be:	1c65      	adds	r5, r4, #1
    66c0:	5d0c      	ldrb	r4, [r1, r4]
    66c2:	42a3      	cmp	r3, r4
    66c4:	d001      	beq.n	66ca <memcmp+0x16>
    66c6:	1b18      	subs	r0, r3, r4
    66c8:	e002      	b.n	66d0 <memcmp+0x1c>
    66ca:	1c2c      	adds	r4, r5, #0
    66cc:	e7f4      	b.n	66b8 <memcmp+0x4>
    66ce:	2000      	movs	r0, #0
    66d0:	bd30      	pop	{r4, r5, pc}
	...

000066d4 <_malloc_r>:
    66d4:	2303      	movs	r3, #3
    66d6:	b570      	push	{r4, r5, r6, lr}
    66d8:	1ccc      	adds	r4, r1, #3
    66da:	439c      	bics	r4, r3
    66dc:	3408      	adds	r4, #8
    66de:	1c05      	adds	r5, r0, #0
    66e0:	2c0c      	cmp	r4, #12
    66e2:	d201      	bcs.n	66e8 <_malloc_r+0x14>
    66e4:	240c      	movs	r4, #12
    66e6:	e005      	b.n	66f4 <_malloc_r+0x20>
    66e8:	2c00      	cmp	r4, #0
    66ea:	da03      	bge.n	66f4 <_malloc_r+0x20>
    66ec:	230c      	movs	r3, #12
    66ee:	2000      	movs	r0, #0
    66f0:	602b      	str	r3, [r5, #0]
    66f2:	e042      	b.n	677a <_malloc_r+0xa6>
    66f4:	428c      	cmp	r4, r1
    66f6:	d3f9      	bcc.n	66ec <_malloc_r+0x18>
    66f8:	4a20      	ldr	r2, [pc, #128]	; (677c <_malloc_r+0xa8>)
    66fa:	6813      	ldr	r3, [r2, #0]
    66fc:	1c10      	adds	r0, r2, #0
    66fe:	1c19      	adds	r1, r3, #0
    6700:	2900      	cmp	r1, #0
    6702:	d013      	beq.n	672c <_malloc_r+0x58>
    6704:	680a      	ldr	r2, [r1, #0]
    6706:	1b12      	subs	r2, r2, r4
    6708:	d40d      	bmi.n	6726 <_malloc_r+0x52>
    670a:	2a0b      	cmp	r2, #11
    670c:	d902      	bls.n	6714 <_malloc_r+0x40>
    670e:	600a      	str	r2, [r1, #0]
    6710:	188b      	adds	r3, r1, r2
    6712:	e01f      	b.n	6754 <_malloc_r+0x80>
    6714:	428b      	cmp	r3, r1
    6716:	d102      	bne.n	671e <_malloc_r+0x4a>
    6718:	685a      	ldr	r2, [r3, #4]
    671a:	6002      	str	r2, [r0, #0]
    671c:	e01b      	b.n	6756 <_malloc_r+0x82>
    671e:	684a      	ldr	r2, [r1, #4]
    6720:	605a      	str	r2, [r3, #4]
    6722:	1c0b      	adds	r3, r1, #0
    6724:	e017      	b.n	6756 <_malloc_r+0x82>
    6726:	1c0b      	adds	r3, r1, #0
    6728:	6849      	ldr	r1, [r1, #4]
    672a:	e7e9      	b.n	6700 <_malloc_r+0x2c>
    672c:	4e14      	ldr	r6, [pc, #80]	; (6780 <_malloc_r+0xac>)
    672e:	6833      	ldr	r3, [r6, #0]
    6730:	2b00      	cmp	r3, #0
    6732:	d103      	bne.n	673c <_malloc_r+0x68>
    6734:	1c28      	adds	r0, r5, #0
    6736:	f000 fb01 	bl	6d3c <_sbrk_r>
    673a:	6030      	str	r0, [r6, #0]
    673c:	1c28      	adds	r0, r5, #0
    673e:	1c21      	adds	r1, r4, #0
    6740:	f000 fafc 	bl	6d3c <_sbrk_r>
    6744:	1c03      	adds	r3, r0, #0
    6746:	1c42      	adds	r2, r0, #1
    6748:	d0d0      	beq.n	66ec <_malloc_r+0x18>
    674a:	2203      	movs	r2, #3
    674c:	1cc6      	adds	r6, r0, #3
    674e:	4396      	bics	r6, r2
    6750:	4286      	cmp	r6, r0
    6752:	d10a      	bne.n	676a <_malloc_r+0x96>
    6754:	601c      	str	r4, [r3, #0]
    6756:	1c18      	adds	r0, r3, #0
    6758:	2107      	movs	r1, #7
    675a:	300b      	adds	r0, #11
    675c:	1d1a      	adds	r2, r3, #4
    675e:	4388      	bics	r0, r1
    6760:	1a82      	subs	r2, r0, r2
    6762:	d00a      	beq.n	677a <_malloc_r+0xa6>
    6764:	4251      	negs	r1, r2
    6766:	5099      	str	r1, [r3, r2]
    6768:	e007      	b.n	677a <_malloc_r+0xa6>
    676a:	1a31      	subs	r1, r6, r0
    676c:	1c28      	adds	r0, r5, #0
    676e:	f000 fae5 	bl	6d3c <_sbrk_r>
    6772:	1c43      	adds	r3, r0, #1
    6774:	d0ba      	beq.n	66ec <_malloc_r+0x18>
    6776:	1c33      	adds	r3, r6, #0
    6778:	e7ec      	b.n	6754 <_malloc_r+0x80>
    677a:	bd70      	pop	{r4, r5, r6, pc}
    677c:	200000e0 	.word	0x200000e0
    6780:	200000dc 	.word	0x200000dc

00006784 <__ssputs_r>:
    6784:	b5f0      	push	{r4, r5, r6, r7, lr}
    6786:	688e      	ldr	r6, [r1, #8]
    6788:	b085      	sub	sp, #20
    678a:	1c07      	adds	r7, r0, #0
    678c:	1c0c      	adds	r4, r1, #0
    678e:	9203      	str	r2, [sp, #12]
    6790:	9301      	str	r3, [sp, #4]
    6792:	42b3      	cmp	r3, r6
    6794:	d345      	bcc.n	6822 <__ssputs_r+0x9e>
    6796:	2390      	movs	r3, #144	; 0x90
    6798:	898a      	ldrh	r2, [r1, #12]
    679a:	00db      	lsls	r3, r3, #3
    679c:	421a      	tst	r2, r3
    679e:	d03d      	beq.n	681c <__ssputs_r+0x98>
    67a0:	2503      	movs	r5, #3
    67a2:	6909      	ldr	r1, [r1, #16]
    67a4:	6823      	ldr	r3, [r4, #0]
    67a6:	9801      	ldr	r0, [sp, #4]
    67a8:	1a5b      	subs	r3, r3, r1
    67aa:	9302      	str	r3, [sp, #8]
    67ac:	6963      	ldr	r3, [r4, #20]
    67ae:	435d      	muls	r5, r3
    67b0:	0feb      	lsrs	r3, r5, #31
    67b2:	195d      	adds	r5, r3, r5
    67b4:	9b02      	ldr	r3, [sp, #8]
    67b6:	106d      	asrs	r5, r5, #1
    67b8:	3301      	adds	r3, #1
    67ba:	181b      	adds	r3, r3, r0
    67bc:	429d      	cmp	r5, r3
    67be:	d200      	bcs.n	67c2 <__ssputs_r+0x3e>
    67c0:	1c1d      	adds	r5, r3, #0
    67c2:	1c38      	adds	r0, r7, #0
    67c4:	0553      	lsls	r3, r2, #21
    67c6:	d50f      	bpl.n	67e8 <__ssputs_r+0x64>
    67c8:	1c29      	adds	r1, r5, #0
    67ca:	f7ff ff83 	bl	66d4 <_malloc_r>
    67ce:	1e06      	subs	r6, r0, #0
    67d0:	d013      	beq.n	67fa <__ssputs_r+0x76>
    67d2:	9a02      	ldr	r2, [sp, #8]
    67d4:	6921      	ldr	r1, [r4, #16]
    67d6:	f7ff ff0b 	bl	65f0 <memcpy>
    67da:	89a2      	ldrh	r2, [r4, #12]
    67dc:	4b18      	ldr	r3, [pc, #96]	; (6840 <__ssputs_r+0xbc>)
    67de:	4013      	ands	r3, r2
    67e0:	2280      	movs	r2, #128	; 0x80
    67e2:	4313      	orrs	r3, r2
    67e4:	81a3      	strh	r3, [r4, #12]
    67e6:	e011      	b.n	680c <__ssputs_r+0x88>
    67e8:	1c2a      	adds	r2, r5, #0
    67ea:	f000 fb1f 	bl	6e2c <_realloc_r>
    67ee:	1e06      	subs	r6, r0, #0
    67f0:	d10c      	bne.n	680c <__ssputs_r+0x88>
    67f2:	1c38      	adds	r0, r7, #0
    67f4:	6921      	ldr	r1, [r4, #16]
    67f6:	f000 fad3 	bl	6da0 <_free_r>
    67fa:	230c      	movs	r3, #12
    67fc:	2240      	movs	r2, #64	; 0x40
    67fe:	2001      	movs	r0, #1
    6800:	603b      	str	r3, [r7, #0]
    6802:	89a3      	ldrh	r3, [r4, #12]
    6804:	4240      	negs	r0, r0
    6806:	4313      	orrs	r3, r2
    6808:	81a3      	strh	r3, [r4, #12]
    680a:	e017      	b.n	683c <__ssputs_r+0xb8>
    680c:	9b02      	ldr	r3, [sp, #8]
    680e:	6126      	str	r6, [r4, #16]
    6810:	18f6      	adds	r6, r6, r3
    6812:	6026      	str	r6, [r4, #0]
    6814:	6165      	str	r5, [r4, #20]
    6816:	9e01      	ldr	r6, [sp, #4]
    6818:	1aed      	subs	r5, r5, r3
    681a:	60a5      	str	r5, [r4, #8]
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	42b3      	cmp	r3, r6
    6820:	d200      	bcs.n	6824 <__ssputs_r+0xa0>
    6822:	9e01      	ldr	r6, [sp, #4]
    6824:	1c32      	adds	r2, r6, #0
    6826:	6820      	ldr	r0, [r4, #0]
    6828:	9903      	ldr	r1, [sp, #12]
    682a:	f000 faa4 	bl	6d76 <memmove>
    682e:	2000      	movs	r0, #0
    6830:	68a3      	ldr	r3, [r4, #8]
    6832:	1b9b      	subs	r3, r3, r6
    6834:	60a3      	str	r3, [r4, #8]
    6836:	6823      	ldr	r3, [r4, #0]
    6838:	199e      	adds	r6, r3, r6
    683a:	6026      	str	r6, [r4, #0]
    683c:	b005      	add	sp, #20
    683e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6840:	fffffb7f 	.word	0xfffffb7f

00006844 <_svfiprintf_r>:
    6844:	b5f0      	push	{r4, r5, r6, r7, lr}
    6846:	b09f      	sub	sp, #124	; 0x7c
    6848:	9002      	str	r0, [sp, #8]
    684a:	9305      	str	r3, [sp, #20]
    684c:	898b      	ldrh	r3, [r1, #12]
    684e:	1c0e      	adds	r6, r1, #0
    6850:	1c17      	adds	r7, r2, #0
    6852:	061b      	lsls	r3, r3, #24
    6854:	d510      	bpl.n	6878 <_svfiprintf_r+0x34>
    6856:	690b      	ldr	r3, [r1, #16]
    6858:	2b00      	cmp	r3, #0
    685a:	d10d      	bne.n	6878 <_svfiprintf_r+0x34>
    685c:	2140      	movs	r1, #64	; 0x40
    685e:	f7ff ff39 	bl	66d4 <_malloc_r>
    6862:	6030      	str	r0, [r6, #0]
    6864:	6130      	str	r0, [r6, #16]
    6866:	2800      	cmp	r0, #0
    6868:	d104      	bne.n	6874 <_svfiprintf_r+0x30>
    686a:	230c      	movs	r3, #12
    686c:	9a02      	ldr	r2, [sp, #8]
    686e:	3801      	subs	r0, #1
    6870:	6013      	str	r3, [r2, #0]
    6872:	e0d0      	b.n	6a16 <_svfiprintf_r+0x1d2>
    6874:	2340      	movs	r3, #64	; 0x40
    6876:	6173      	str	r3, [r6, #20]
    6878:	2300      	movs	r3, #0
    687a:	ad06      	add	r5, sp, #24
    687c:	616b      	str	r3, [r5, #20]
    687e:	3320      	adds	r3, #32
    6880:	766b      	strb	r3, [r5, #25]
    6882:	3310      	adds	r3, #16
    6884:	76ab      	strb	r3, [r5, #26]
    6886:	1c3c      	adds	r4, r7, #0
    6888:	7823      	ldrb	r3, [r4, #0]
    688a:	2b00      	cmp	r3, #0
    688c:	d103      	bne.n	6896 <_svfiprintf_r+0x52>
    688e:	1be3      	subs	r3, r4, r7
    6890:	9304      	str	r3, [sp, #16]
    6892:	d012      	beq.n	68ba <_svfiprintf_r+0x76>
    6894:	e003      	b.n	689e <_svfiprintf_r+0x5a>
    6896:	2b25      	cmp	r3, #37	; 0x25
    6898:	d0f9      	beq.n	688e <_svfiprintf_r+0x4a>
    689a:	3401      	adds	r4, #1
    689c:	e7f4      	b.n	6888 <_svfiprintf_r+0x44>
    689e:	9b04      	ldr	r3, [sp, #16]
    68a0:	9802      	ldr	r0, [sp, #8]
    68a2:	1c31      	adds	r1, r6, #0
    68a4:	1c3a      	adds	r2, r7, #0
    68a6:	f7ff ff6d 	bl	6784 <__ssputs_r>
    68aa:	1c43      	adds	r3, r0, #1
    68ac:	d100      	bne.n	68b0 <_svfiprintf_r+0x6c>
    68ae:	e0ac      	b.n	6a0a <_svfiprintf_r+0x1c6>
    68b0:	696a      	ldr	r2, [r5, #20]
    68b2:	9b04      	ldr	r3, [sp, #16]
    68b4:	4694      	mov	ip, r2
    68b6:	4463      	add	r3, ip
    68b8:	616b      	str	r3, [r5, #20]
    68ba:	7823      	ldrb	r3, [r4, #0]
    68bc:	2b00      	cmp	r3, #0
    68be:	d100      	bne.n	68c2 <_svfiprintf_r+0x7e>
    68c0:	e0a3      	b.n	6a0a <_svfiprintf_r+0x1c6>
    68c2:	2201      	movs	r2, #1
    68c4:	2300      	movs	r3, #0
    68c6:	4252      	negs	r2, r2
    68c8:	606a      	str	r2, [r5, #4]
    68ca:	a902      	add	r1, sp, #8
    68cc:	3254      	adds	r2, #84	; 0x54
    68ce:	1852      	adds	r2, r2, r1
    68d0:	3401      	adds	r4, #1
    68d2:	602b      	str	r3, [r5, #0]
    68d4:	60eb      	str	r3, [r5, #12]
    68d6:	60ab      	str	r3, [r5, #8]
    68d8:	7013      	strb	r3, [r2, #0]
    68da:	65ab      	str	r3, [r5, #88]	; 0x58
    68dc:	4f4f      	ldr	r7, [pc, #316]	; (6a1c <_svfiprintf_r+0x1d8>)
    68de:	7821      	ldrb	r1, [r4, #0]
    68e0:	1c38      	adds	r0, r7, #0
    68e2:	2205      	movs	r2, #5
    68e4:	f000 fa3c 	bl	6d60 <memchr>
    68e8:	2800      	cmp	r0, #0
    68ea:	d008      	beq.n	68fe <_svfiprintf_r+0xba>
    68ec:	1bc0      	subs	r0, r0, r7
    68ee:	2701      	movs	r7, #1
    68f0:	4087      	lsls	r7, r0
    68f2:	1c38      	adds	r0, r7, #0
    68f4:	682b      	ldr	r3, [r5, #0]
    68f6:	3401      	adds	r4, #1
    68f8:	4318      	orrs	r0, r3
    68fa:	6028      	str	r0, [r5, #0]
    68fc:	e7ee      	b.n	68dc <_svfiprintf_r+0x98>
    68fe:	682b      	ldr	r3, [r5, #0]
    6900:	06da      	lsls	r2, r3, #27
    6902:	d504      	bpl.n	690e <_svfiprintf_r+0xca>
    6904:	2253      	movs	r2, #83	; 0x53
    6906:	2120      	movs	r1, #32
    6908:	a802      	add	r0, sp, #8
    690a:	1812      	adds	r2, r2, r0
    690c:	7011      	strb	r1, [r2, #0]
    690e:	071a      	lsls	r2, r3, #28
    6910:	d504      	bpl.n	691c <_svfiprintf_r+0xd8>
    6912:	2253      	movs	r2, #83	; 0x53
    6914:	212b      	movs	r1, #43	; 0x2b
    6916:	a802      	add	r0, sp, #8
    6918:	1812      	adds	r2, r2, r0
    691a:	7011      	strb	r1, [r2, #0]
    691c:	7822      	ldrb	r2, [r4, #0]
    691e:	2a2a      	cmp	r2, #42	; 0x2a
    6920:	d001      	beq.n	6926 <_svfiprintf_r+0xe2>
    6922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6924:	e00e      	b.n	6944 <_svfiprintf_r+0x100>
    6926:	9a05      	ldr	r2, [sp, #20]
    6928:	1d11      	adds	r1, r2, #4
    692a:	6812      	ldr	r2, [r2, #0]
    692c:	9105      	str	r1, [sp, #20]
    692e:	2a00      	cmp	r2, #0
    6930:	db01      	blt.n	6936 <_svfiprintf_r+0xf2>
    6932:	9209      	str	r2, [sp, #36]	; 0x24
    6934:	e004      	b.n	6940 <_svfiprintf_r+0xfc>
    6936:	4252      	negs	r2, r2
    6938:	60ea      	str	r2, [r5, #12]
    693a:	2202      	movs	r2, #2
    693c:	4313      	orrs	r3, r2
    693e:	602b      	str	r3, [r5, #0]
    6940:	3401      	adds	r4, #1
    6942:	e009      	b.n	6958 <_svfiprintf_r+0x114>
    6944:	7822      	ldrb	r2, [r4, #0]
    6946:	3a30      	subs	r2, #48	; 0x30
    6948:	2a09      	cmp	r2, #9
    694a:	d804      	bhi.n	6956 <_svfiprintf_r+0x112>
    694c:	210a      	movs	r1, #10
    694e:	434b      	muls	r3, r1
    6950:	3401      	adds	r4, #1
    6952:	189b      	adds	r3, r3, r2
    6954:	e7f6      	b.n	6944 <_svfiprintf_r+0x100>
    6956:	9309      	str	r3, [sp, #36]	; 0x24
    6958:	7823      	ldrb	r3, [r4, #0]
    695a:	2b2e      	cmp	r3, #46	; 0x2e
    695c:	d118      	bne.n	6990 <_svfiprintf_r+0x14c>
    695e:	7863      	ldrb	r3, [r4, #1]
    6960:	2b2a      	cmp	r3, #42	; 0x2a
    6962:	d109      	bne.n	6978 <_svfiprintf_r+0x134>
    6964:	9b05      	ldr	r3, [sp, #20]
    6966:	3402      	adds	r4, #2
    6968:	1d1a      	adds	r2, r3, #4
    696a:	681b      	ldr	r3, [r3, #0]
    696c:	9205      	str	r2, [sp, #20]
    696e:	2b00      	cmp	r3, #0
    6970:	da0d      	bge.n	698e <_svfiprintf_r+0x14a>
    6972:	2301      	movs	r3, #1
    6974:	425b      	negs	r3, r3
    6976:	e00a      	b.n	698e <_svfiprintf_r+0x14a>
    6978:	2300      	movs	r3, #0
    697a:	3401      	adds	r4, #1
    697c:	7822      	ldrb	r2, [r4, #0]
    697e:	3a30      	subs	r2, #48	; 0x30
    6980:	2a09      	cmp	r2, #9
    6982:	d804      	bhi.n	698e <_svfiprintf_r+0x14a>
    6984:	210a      	movs	r1, #10
    6986:	434b      	muls	r3, r1
    6988:	3401      	adds	r4, #1
    698a:	189b      	adds	r3, r3, r2
    698c:	e7f6      	b.n	697c <_svfiprintf_r+0x138>
    698e:	9307      	str	r3, [sp, #28]
    6990:	4f23      	ldr	r7, [pc, #140]	; (6a20 <_svfiprintf_r+0x1dc>)
    6992:	7821      	ldrb	r1, [r4, #0]
    6994:	1c38      	adds	r0, r7, #0
    6996:	2203      	movs	r2, #3
    6998:	f000 f9e2 	bl	6d60 <memchr>
    699c:	2800      	cmp	r0, #0
    699e:	d007      	beq.n	69b0 <_svfiprintf_r+0x16c>
    69a0:	1bc0      	subs	r0, r0, r7
    69a2:	2740      	movs	r7, #64	; 0x40
    69a4:	4087      	lsls	r7, r0
    69a6:	1c38      	adds	r0, r7, #0
    69a8:	682b      	ldr	r3, [r5, #0]
    69aa:	3401      	adds	r4, #1
    69ac:	4318      	orrs	r0, r3
    69ae:	6028      	str	r0, [r5, #0]
    69b0:	7821      	ldrb	r1, [r4, #0]
    69b2:	481c      	ldr	r0, [pc, #112]	; (6a24 <_svfiprintf_r+0x1e0>)
    69b4:	2206      	movs	r2, #6
    69b6:	1c67      	adds	r7, r4, #1
    69b8:	7629      	strb	r1, [r5, #24]
    69ba:	f000 f9d1 	bl	6d60 <memchr>
    69be:	2800      	cmp	r0, #0
    69c0:	d012      	beq.n	69e8 <_svfiprintf_r+0x1a4>
    69c2:	4b19      	ldr	r3, [pc, #100]	; (6a28 <_svfiprintf_r+0x1e4>)
    69c4:	2b00      	cmp	r3, #0
    69c6:	d106      	bne.n	69d6 <_svfiprintf_r+0x192>
    69c8:	2207      	movs	r2, #7
    69ca:	9b05      	ldr	r3, [sp, #20]
    69cc:	3307      	adds	r3, #7
    69ce:	4393      	bics	r3, r2
    69d0:	3308      	adds	r3, #8
    69d2:	9305      	str	r3, [sp, #20]
    69d4:	e014      	b.n	6a00 <_svfiprintf_r+0x1bc>
    69d6:	ab05      	add	r3, sp, #20
    69d8:	9300      	str	r3, [sp, #0]
    69da:	9802      	ldr	r0, [sp, #8]
    69dc:	1c29      	adds	r1, r5, #0
    69de:	1c32      	adds	r2, r6, #0
    69e0:	4b12      	ldr	r3, [pc, #72]	; (6a2c <_svfiprintf_r+0x1e8>)
    69e2:	e000      	b.n	69e6 <_svfiprintf_r+0x1a2>
    69e4:	bf00      	nop
    69e6:	e007      	b.n	69f8 <_svfiprintf_r+0x1b4>
    69e8:	ab05      	add	r3, sp, #20
    69ea:	9300      	str	r3, [sp, #0]
    69ec:	9802      	ldr	r0, [sp, #8]
    69ee:	1c29      	adds	r1, r5, #0
    69f0:	1c32      	adds	r2, r6, #0
    69f2:	4b0e      	ldr	r3, [pc, #56]	; (6a2c <_svfiprintf_r+0x1e8>)
    69f4:	f000 f88a 	bl	6b0c <_printf_i>
    69f8:	9003      	str	r0, [sp, #12]
    69fa:	9b03      	ldr	r3, [sp, #12]
    69fc:	3301      	adds	r3, #1
    69fe:	d004      	beq.n	6a0a <_svfiprintf_r+0x1c6>
    6a00:	696b      	ldr	r3, [r5, #20]
    6a02:	9a03      	ldr	r2, [sp, #12]
    6a04:	189b      	adds	r3, r3, r2
    6a06:	616b      	str	r3, [r5, #20]
    6a08:	e73d      	b.n	6886 <_svfiprintf_r+0x42>
    6a0a:	89b3      	ldrh	r3, [r6, #12]
    6a0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6a0e:	065b      	lsls	r3, r3, #25
    6a10:	d501      	bpl.n	6a16 <_svfiprintf_r+0x1d2>
    6a12:	2001      	movs	r0, #1
    6a14:	4240      	negs	r0, r0
    6a16:	b01f      	add	sp, #124	; 0x7c
    6a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	00007078 	.word	0x00007078
    6a20:	0000707e 	.word	0x0000707e
    6a24:	00007082 	.word	0x00007082
    6a28:	00000000 	.word	0x00000000
    6a2c:	00006785 	.word	0x00006785

00006a30 <_printf_common>:
    6a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6a32:	1c17      	adds	r7, r2, #0
    6a34:	9301      	str	r3, [sp, #4]
    6a36:	690a      	ldr	r2, [r1, #16]
    6a38:	688b      	ldr	r3, [r1, #8]
    6a3a:	9000      	str	r0, [sp, #0]
    6a3c:	1c0c      	adds	r4, r1, #0
    6a3e:	4293      	cmp	r3, r2
    6a40:	da00      	bge.n	6a44 <_printf_common+0x14>
    6a42:	1c13      	adds	r3, r2, #0
    6a44:	1c22      	adds	r2, r4, #0
    6a46:	603b      	str	r3, [r7, #0]
    6a48:	3243      	adds	r2, #67	; 0x43
    6a4a:	7812      	ldrb	r2, [r2, #0]
    6a4c:	2a00      	cmp	r2, #0
    6a4e:	d001      	beq.n	6a54 <_printf_common+0x24>
    6a50:	3301      	adds	r3, #1
    6a52:	603b      	str	r3, [r7, #0]
    6a54:	6823      	ldr	r3, [r4, #0]
    6a56:	069b      	lsls	r3, r3, #26
    6a58:	d502      	bpl.n	6a60 <_printf_common+0x30>
    6a5a:	683b      	ldr	r3, [r7, #0]
    6a5c:	3302      	adds	r3, #2
    6a5e:	603b      	str	r3, [r7, #0]
    6a60:	2506      	movs	r5, #6
    6a62:	6823      	ldr	r3, [r4, #0]
    6a64:	401d      	ands	r5, r3
    6a66:	d01e      	beq.n	6aa6 <_printf_common+0x76>
    6a68:	1c23      	adds	r3, r4, #0
    6a6a:	3343      	adds	r3, #67	; 0x43
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	1e5a      	subs	r2, r3, #1
    6a70:	4193      	sbcs	r3, r2
    6a72:	6822      	ldr	r2, [r4, #0]
    6a74:	0692      	lsls	r2, r2, #26
    6a76:	d51c      	bpl.n	6ab2 <_printf_common+0x82>
    6a78:	2030      	movs	r0, #48	; 0x30
    6a7a:	18e1      	adds	r1, r4, r3
    6a7c:	3140      	adds	r1, #64	; 0x40
    6a7e:	70c8      	strb	r0, [r1, #3]
    6a80:	1c21      	adds	r1, r4, #0
    6a82:	1c5a      	adds	r2, r3, #1
    6a84:	3145      	adds	r1, #69	; 0x45
    6a86:	7809      	ldrb	r1, [r1, #0]
    6a88:	18a2      	adds	r2, r4, r2
    6a8a:	3240      	adds	r2, #64	; 0x40
    6a8c:	3302      	adds	r3, #2
    6a8e:	70d1      	strb	r1, [r2, #3]
    6a90:	e00f      	b.n	6ab2 <_printf_common+0x82>
    6a92:	1c22      	adds	r2, r4, #0
    6a94:	2301      	movs	r3, #1
    6a96:	9800      	ldr	r0, [sp, #0]
    6a98:	9901      	ldr	r1, [sp, #4]
    6a9a:	3219      	adds	r2, #25
    6a9c:	9e08      	ldr	r6, [sp, #32]
    6a9e:	47b0      	blx	r6
    6aa0:	1c43      	adds	r3, r0, #1
    6aa2:	d00e      	beq.n	6ac2 <_printf_common+0x92>
    6aa4:	3501      	adds	r5, #1
    6aa6:	68e3      	ldr	r3, [r4, #12]
    6aa8:	683a      	ldr	r2, [r7, #0]
    6aaa:	1a9b      	subs	r3, r3, r2
    6aac:	429d      	cmp	r5, r3
    6aae:	dbf0      	blt.n	6a92 <_printf_common+0x62>
    6ab0:	e7da      	b.n	6a68 <_printf_common+0x38>
    6ab2:	1c22      	adds	r2, r4, #0
    6ab4:	9800      	ldr	r0, [sp, #0]
    6ab6:	9901      	ldr	r1, [sp, #4]
    6ab8:	3243      	adds	r2, #67	; 0x43
    6aba:	9d08      	ldr	r5, [sp, #32]
    6abc:	47a8      	blx	r5
    6abe:	1c43      	adds	r3, r0, #1
    6ac0:	d102      	bne.n	6ac8 <_printf_common+0x98>
    6ac2:	2001      	movs	r0, #1
    6ac4:	4240      	negs	r0, r0
    6ac6:	e020      	b.n	6b0a <_printf_common+0xda>
    6ac8:	2306      	movs	r3, #6
    6aca:	6820      	ldr	r0, [r4, #0]
    6acc:	68e1      	ldr	r1, [r4, #12]
    6ace:	683a      	ldr	r2, [r7, #0]
    6ad0:	4003      	ands	r3, r0
    6ad2:	2500      	movs	r5, #0
    6ad4:	2b04      	cmp	r3, #4
    6ad6:	d103      	bne.n	6ae0 <_printf_common+0xb0>
    6ad8:	1a8d      	subs	r5, r1, r2
    6ada:	43eb      	mvns	r3, r5
    6adc:	17db      	asrs	r3, r3, #31
    6ade:	401d      	ands	r5, r3
    6ae0:	68a3      	ldr	r3, [r4, #8]
    6ae2:	6922      	ldr	r2, [r4, #16]
    6ae4:	4293      	cmp	r3, r2
    6ae6:	dd01      	ble.n	6aec <_printf_common+0xbc>
    6ae8:	1a9b      	subs	r3, r3, r2
    6aea:	18ed      	adds	r5, r5, r3
    6aec:	2700      	movs	r7, #0
    6aee:	42af      	cmp	r7, r5
    6af0:	da0a      	bge.n	6b08 <_printf_common+0xd8>
    6af2:	1c22      	adds	r2, r4, #0
    6af4:	2301      	movs	r3, #1
    6af6:	9800      	ldr	r0, [sp, #0]
    6af8:	9901      	ldr	r1, [sp, #4]
    6afa:	321a      	adds	r2, #26
    6afc:	9e08      	ldr	r6, [sp, #32]
    6afe:	47b0      	blx	r6
    6b00:	1c43      	adds	r3, r0, #1
    6b02:	d0de      	beq.n	6ac2 <_printf_common+0x92>
    6b04:	3701      	adds	r7, #1
    6b06:	e7f2      	b.n	6aee <_printf_common+0xbe>
    6b08:	2000      	movs	r0, #0
    6b0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006b0c <_printf_i>:
    6b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b0e:	b08b      	sub	sp, #44	; 0x2c
    6b10:	9206      	str	r2, [sp, #24]
    6b12:	1c0a      	adds	r2, r1, #0
    6b14:	3243      	adds	r2, #67	; 0x43
    6b16:	9307      	str	r3, [sp, #28]
    6b18:	9005      	str	r0, [sp, #20]
    6b1a:	9204      	str	r2, [sp, #16]
    6b1c:	7e0a      	ldrb	r2, [r1, #24]
    6b1e:	1c0c      	adds	r4, r1, #0
    6b20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b22:	2a6e      	cmp	r2, #110	; 0x6e
    6b24:	d100      	bne.n	6b28 <_printf_i+0x1c>
    6b26:	e0a8      	b.n	6c7a <_printf_i+0x16e>
    6b28:	d811      	bhi.n	6b4e <_printf_i+0x42>
    6b2a:	2a63      	cmp	r2, #99	; 0x63
    6b2c:	d022      	beq.n	6b74 <_printf_i+0x68>
    6b2e:	d809      	bhi.n	6b44 <_printf_i+0x38>
    6b30:	2a00      	cmp	r2, #0
    6b32:	d100      	bne.n	6b36 <_printf_i+0x2a>
    6b34:	e0b2      	b.n	6c9c <_printf_i+0x190>
    6b36:	2a58      	cmp	r2, #88	; 0x58
    6b38:	d000      	beq.n	6b3c <_printf_i+0x30>
    6b3a:	e0c2      	b.n	6cc2 <_printf_i+0x1b6>
    6b3c:	3145      	adds	r1, #69	; 0x45
    6b3e:	700a      	strb	r2, [r1, #0]
    6b40:	4a7c      	ldr	r2, [pc, #496]	; (6d34 <_printf_i+0x228>)
    6b42:	e04f      	b.n	6be4 <_printf_i+0xd8>
    6b44:	2a64      	cmp	r2, #100	; 0x64
    6b46:	d01d      	beq.n	6b84 <_printf_i+0x78>
    6b48:	2a69      	cmp	r2, #105	; 0x69
    6b4a:	d01b      	beq.n	6b84 <_printf_i+0x78>
    6b4c:	e0b9      	b.n	6cc2 <_printf_i+0x1b6>
    6b4e:	2a73      	cmp	r2, #115	; 0x73
    6b50:	d100      	bne.n	6b54 <_printf_i+0x48>
    6b52:	e0a7      	b.n	6ca4 <_printf_i+0x198>
    6b54:	d809      	bhi.n	6b6a <_printf_i+0x5e>
    6b56:	2a6f      	cmp	r2, #111	; 0x6f
    6b58:	d029      	beq.n	6bae <_printf_i+0xa2>
    6b5a:	2a70      	cmp	r2, #112	; 0x70
    6b5c:	d000      	beq.n	6b60 <_printf_i+0x54>
    6b5e:	e0b0      	b.n	6cc2 <_printf_i+0x1b6>
    6b60:	2220      	movs	r2, #32
    6b62:	6809      	ldr	r1, [r1, #0]
    6b64:	430a      	orrs	r2, r1
    6b66:	6022      	str	r2, [r4, #0]
    6b68:	e037      	b.n	6bda <_printf_i+0xce>
    6b6a:	2a75      	cmp	r2, #117	; 0x75
    6b6c:	d01f      	beq.n	6bae <_printf_i+0xa2>
    6b6e:	2a78      	cmp	r2, #120	; 0x78
    6b70:	d033      	beq.n	6bda <_printf_i+0xce>
    6b72:	e0a6      	b.n	6cc2 <_printf_i+0x1b6>
    6b74:	1c0e      	adds	r6, r1, #0
    6b76:	681a      	ldr	r2, [r3, #0]
    6b78:	3642      	adds	r6, #66	; 0x42
    6b7a:	1d11      	adds	r1, r2, #4
    6b7c:	6019      	str	r1, [r3, #0]
    6b7e:	6813      	ldr	r3, [r2, #0]
    6b80:	7033      	strb	r3, [r6, #0]
    6b82:	e0a1      	b.n	6cc8 <_printf_i+0x1bc>
    6b84:	6821      	ldr	r1, [r4, #0]
    6b86:	681a      	ldr	r2, [r3, #0]
    6b88:	0608      	lsls	r0, r1, #24
    6b8a:	d406      	bmi.n	6b9a <_printf_i+0x8e>
    6b8c:	0649      	lsls	r1, r1, #25
    6b8e:	d504      	bpl.n	6b9a <_printf_i+0x8e>
    6b90:	1d11      	adds	r1, r2, #4
    6b92:	6019      	str	r1, [r3, #0]
    6b94:	2300      	movs	r3, #0
    6b96:	5ed5      	ldrsh	r5, [r2, r3]
    6b98:	e002      	b.n	6ba0 <_printf_i+0x94>
    6b9a:	1d11      	adds	r1, r2, #4
    6b9c:	6019      	str	r1, [r3, #0]
    6b9e:	6815      	ldr	r5, [r2, #0]
    6ba0:	2d00      	cmp	r5, #0
    6ba2:	da3b      	bge.n	6c1c <_printf_i+0x110>
    6ba4:	232d      	movs	r3, #45	; 0x2d
    6ba6:	9a04      	ldr	r2, [sp, #16]
    6ba8:	426d      	negs	r5, r5
    6baa:	7013      	strb	r3, [r2, #0]
    6bac:	e036      	b.n	6c1c <_printf_i+0x110>
    6bae:	6821      	ldr	r1, [r4, #0]
    6bb0:	681a      	ldr	r2, [r3, #0]
    6bb2:	0608      	lsls	r0, r1, #24
    6bb4:	d406      	bmi.n	6bc4 <_printf_i+0xb8>
    6bb6:	0649      	lsls	r1, r1, #25
    6bb8:	d504      	bpl.n	6bc4 <_printf_i+0xb8>
    6bba:	6815      	ldr	r5, [r2, #0]
    6bbc:	1d11      	adds	r1, r2, #4
    6bbe:	6019      	str	r1, [r3, #0]
    6bc0:	b2ad      	uxth	r5, r5
    6bc2:	e002      	b.n	6bca <_printf_i+0xbe>
    6bc4:	1d11      	adds	r1, r2, #4
    6bc6:	6019      	str	r1, [r3, #0]
    6bc8:	6815      	ldr	r5, [r2, #0]
    6bca:	4b5a      	ldr	r3, [pc, #360]	; (6d34 <_printf_i+0x228>)
    6bcc:	7e22      	ldrb	r2, [r4, #24]
    6bce:	9303      	str	r3, [sp, #12]
    6bd0:	270a      	movs	r7, #10
    6bd2:	2a6f      	cmp	r2, #111	; 0x6f
    6bd4:	d11d      	bne.n	6c12 <_printf_i+0x106>
    6bd6:	2708      	movs	r7, #8
    6bd8:	e01b      	b.n	6c12 <_printf_i+0x106>
    6bda:	1c22      	adds	r2, r4, #0
    6bdc:	2178      	movs	r1, #120	; 0x78
    6bde:	3245      	adds	r2, #69	; 0x45
    6be0:	7011      	strb	r1, [r2, #0]
    6be2:	4a55      	ldr	r2, [pc, #340]	; (6d38 <_printf_i+0x22c>)
    6be4:	6819      	ldr	r1, [r3, #0]
    6be6:	9203      	str	r2, [sp, #12]
    6be8:	1d08      	adds	r0, r1, #4
    6bea:	6822      	ldr	r2, [r4, #0]
    6bec:	6018      	str	r0, [r3, #0]
    6bee:	680d      	ldr	r5, [r1, #0]
    6bf0:	0610      	lsls	r0, r2, #24
    6bf2:	d402      	bmi.n	6bfa <_printf_i+0xee>
    6bf4:	0650      	lsls	r0, r2, #25
    6bf6:	d500      	bpl.n	6bfa <_printf_i+0xee>
    6bf8:	b2ad      	uxth	r5, r5
    6bfa:	07d3      	lsls	r3, r2, #31
    6bfc:	d502      	bpl.n	6c04 <_printf_i+0xf8>
    6bfe:	2320      	movs	r3, #32
    6c00:	431a      	orrs	r2, r3
    6c02:	6022      	str	r2, [r4, #0]
    6c04:	2710      	movs	r7, #16
    6c06:	2d00      	cmp	r5, #0
    6c08:	d103      	bne.n	6c12 <_printf_i+0x106>
    6c0a:	2320      	movs	r3, #32
    6c0c:	6822      	ldr	r2, [r4, #0]
    6c0e:	439a      	bics	r2, r3
    6c10:	6022      	str	r2, [r4, #0]
    6c12:	1c23      	adds	r3, r4, #0
    6c14:	2200      	movs	r2, #0
    6c16:	3343      	adds	r3, #67	; 0x43
    6c18:	701a      	strb	r2, [r3, #0]
    6c1a:	e002      	b.n	6c22 <_printf_i+0x116>
    6c1c:	270a      	movs	r7, #10
    6c1e:	4b45      	ldr	r3, [pc, #276]	; (6d34 <_printf_i+0x228>)
    6c20:	9303      	str	r3, [sp, #12]
    6c22:	6863      	ldr	r3, [r4, #4]
    6c24:	60a3      	str	r3, [r4, #8]
    6c26:	2b00      	cmp	r3, #0
    6c28:	db03      	blt.n	6c32 <_printf_i+0x126>
    6c2a:	2204      	movs	r2, #4
    6c2c:	6821      	ldr	r1, [r4, #0]
    6c2e:	4391      	bics	r1, r2
    6c30:	6021      	str	r1, [r4, #0]
    6c32:	2d00      	cmp	r5, #0
    6c34:	d102      	bne.n	6c3c <_printf_i+0x130>
    6c36:	9e04      	ldr	r6, [sp, #16]
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d00e      	beq.n	6c5a <_printf_i+0x14e>
    6c3c:	9e04      	ldr	r6, [sp, #16]
    6c3e:	1c28      	adds	r0, r5, #0
    6c40:	1c39      	adds	r1, r7, #0
    6c42:	f7ff fc79 	bl	6538 <__aeabi_uidivmod>
    6c46:	9b03      	ldr	r3, [sp, #12]
    6c48:	3e01      	subs	r6, #1
    6c4a:	5c5b      	ldrb	r3, [r3, r1]
    6c4c:	1c28      	adds	r0, r5, #0
    6c4e:	7033      	strb	r3, [r6, #0]
    6c50:	1c39      	adds	r1, r7, #0
    6c52:	f7ff fbeb 	bl	642c <__aeabi_uidiv>
    6c56:	1e05      	subs	r5, r0, #0
    6c58:	d1f1      	bne.n	6c3e <_printf_i+0x132>
    6c5a:	2f08      	cmp	r7, #8
    6c5c:	d109      	bne.n	6c72 <_printf_i+0x166>
    6c5e:	6823      	ldr	r3, [r4, #0]
    6c60:	07db      	lsls	r3, r3, #31
    6c62:	d506      	bpl.n	6c72 <_printf_i+0x166>
    6c64:	6863      	ldr	r3, [r4, #4]
    6c66:	6922      	ldr	r2, [r4, #16]
    6c68:	4293      	cmp	r3, r2
    6c6a:	dc02      	bgt.n	6c72 <_printf_i+0x166>
    6c6c:	2330      	movs	r3, #48	; 0x30
    6c6e:	3e01      	subs	r6, #1
    6c70:	7033      	strb	r3, [r6, #0]
    6c72:	9b04      	ldr	r3, [sp, #16]
    6c74:	1b9b      	subs	r3, r3, r6
    6c76:	6123      	str	r3, [r4, #16]
    6c78:	e02b      	b.n	6cd2 <_printf_i+0x1c6>
    6c7a:	6809      	ldr	r1, [r1, #0]
    6c7c:	681a      	ldr	r2, [r3, #0]
    6c7e:	0608      	lsls	r0, r1, #24
    6c80:	d407      	bmi.n	6c92 <_printf_i+0x186>
    6c82:	0649      	lsls	r1, r1, #25
    6c84:	d505      	bpl.n	6c92 <_printf_i+0x186>
    6c86:	1d11      	adds	r1, r2, #4
    6c88:	6019      	str	r1, [r3, #0]
    6c8a:	6813      	ldr	r3, [r2, #0]
    6c8c:	8aa2      	ldrh	r2, [r4, #20]
    6c8e:	801a      	strh	r2, [r3, #0]
    6c90:	e004      	b.n	6c9c <_printf_i+0x190>
    6c92:	1d11      	adds	r1, r2, #4
    6c94:	6019      	str	r1, [r3, #0]
    6c96:	6813      	ldr	r3, [r2, #0]
    6c98:	6962      	ldr	r2, [r4, #20]
    6c9a:	601a      	str	r2, [r3, #0]
    6c9c:	2300      	movs	r3, #0
    6c9e:	9e04      	ldr	r6, [sp, #16]
    6ca0:	6123      	str	r3, [r4, #16]
    6ca2:	e016      	b.n	6cd2 <_printf_i+0x1c6>
    6ca4:	681a      	ldr	r2, [r3, #0]
    6ca6:	1d11      	adds	r1, r2, #4
    6ca8:	6019      	str	r1, [r3, #0]
    6caa:	6816      	ldr	r6, [r2, #0]
    6cac:	2100      	movs	r1, #0
    6cae:	1c30      	adds	r0, r6, #0
    6cb0:	6862      	ldr	r2, [r4, #4]
    6cb2:	f000 f855 	bl	6d60 <memchr>
    6cb6:	2800      	cmp	r0, #0
    6cb8:	d001      	beq.n	6cbe <_printf_i+0x1b2>
    6cba:	1b80      	subs	r0, r0, r6
    6cbc:	6060      	str	r0, [r4, #4]
    6cbe:	6863      	ldr	r3, [r4, #4]
    6cc0:	e003      	b.n	6cca <_printf_i+0x1be>
    6cc2:	1c26      	adds	r6, r4, #0
    6cc4:	3642      	adds	r6, #66	; 0x42
    6cc6:	7032      	strb	r2, [r6, #0]
    6cc8:	2301      	movs	r3, #1
    6cca:	6123      	str	r3, [r4, #16]
    6ccc:	2300      	movs	r3, #0
    6cce:	9a04      	ldr	r2, [sp, #16]
    6cd0:	7013      	strb	r3, [r2, #0]
    6cd2:	9b07      	ldr	r3, [sp, #28]
    6cd4:	9805      	ldr	r0, [sp, #20]
    6cd6:	9300      	str	r3, [sp, #0]
    6cd8:	1c21      	adds	r1, r4, #0
    6cda:	9b06      	ldr	r3, [sp, #24]
    6cdc:	aa09      	add	r2, sp, #36	; 0x24
    6cde:	f7ff fea7 	bl	6a30 <_printf_common>
    6ce2:	1c43      	adds	r3, r0, #1
    6ce4:	d102      	bne.n	6cec <_printf_i+0x1e0>
    6ce6:	2001      	movs	r0, #1
    6ce8:	4240      	negs	r0, r0
    6cea:	e021      	b.n	6d30 <_printf_i+0x224>
    6cec:	6923      	ldr	r3, [r4, #16]
    6cee:	9805      	ldr	r0, [sp, #20]
    6cf0:	9906      	ldr	r1, [sp, #24]
    6cf2:	1c32      	adds	r2, r6, #0
    6cf4:	9d07      	ldr	r5, [sp, #28]
    6cf6:	47a8      	blx	r5
    6cf8:	1c43      	adds	r3, r0, #1
    6cfa:	d0f4      	beq.n	6ce6 <_printf_i+0x1da>
    6cfc:	6823      	ldr	r3, [r4, #0]
    6cfe:	079b      	lsls	r3, r3, #30
    6d00:	d405      	bmi.n	6d0e <_printf_i+0x202>
    6d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d04:	68e0      	ldr	r0, [r4, #12]
    6d06:	4298      	cmp	r0, r3
    6d08:	da12      	bge.n	6d30 <_printf_i+0x224>
    6d0a:	1c18      	adds	r0, r3, #0
    6d0c:	e010      	b.n	6d30 <_printf_i+0x224>
    6d0e:	2500      	movs	r5, #0
    6d10:	68e3      	ldr	r3, [r4, #12]
    6d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6d14:	1a9b      	subs	r3, r3, r2
    6d16:	429d      	cmp	r5, r3
    6d18:	daf3      	bge.n	6d02 <_printf_i+0x1f6>
    6d1a:	1c22      	adds	r2, r4, #0
    6d1c:	2301      	movs	r3, #1
    6d1e:	9805      	ldr	r0, [sp, #20]
    6d20:	9906      	ldr	r1, [sp, #24]
    6d22:	3219      	adds	r2, #25
    6d24:	9e07      	ldr	r6, [sp, #28]
    6d26:	47b0      	blx	r6
    6d28:	1c43      	adds	r3, r0, #1
    6d2a:	d0dc      	beq.n	6ce6 <_printf_i+0x1da>
    6d2c:	3501      	adds	r5, #1
    6d2e:	e7ef      	b.n	6d10 <_printf_i+0x204>
    6d30:	b00b      	add	sp, #44	; 0x2c
    6d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d34:	00007089 	.word	0x00007089
    6d38:	0000709a 	.word	0x0000709a

00006d3c <_sbrk_r>:
    6d3c:	b538      	push	{r3, r4, r5, lr}
    6d3e:	2300      	movs	r3, #0
    6d40:	4c06      	ldr	r4, [pc, #24]	; (6d5c <_sbrk_r+0x20>)
    6d42:	1c05      	adds	r5, r0, #0
    6d44:	1c08      	adds	r0, r1, #0
    6d46:	6023      	str	r3, [r4, #0]
    6d48:	f7ff fab4 	bl	62b4 <_sbrk>
    6d4c:	1c43      	adds	r3, r0, #1
    6d4e:	d103      	bne.n	6d58 <_sbrk_r+0x1c>
    6d50:	6823      	ldr	r3, [r4, #0]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d000      	beq.n	6d58 <_sbrk_r+0x1c>
    6d56:	602b      	str	r3, [r5, #0]
    6d58:	bd38      	pop	{r3, r4, r5, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	20000794 	.word	0x20000794

00006d60 <memchr>:
    6d60:	b2c9      	uxtb	r1, r1
    6d62:	1882      	adds	r2, r0, r2
    6d64:	4290      	cmp	r0, r2
    6d66:	d004      	beq.n	6d72 <memchr+0x12>
    6d68:	7803      	ldrb	r3, [r0, #0]
    6d6a:	428b      	cmp	r3, r1
    6d6c:	d002      	beq.n	6d74 <memchr+0x14>
    6d6e:	3001      	adds	r0, #1
    6d70:	e7f8      	b.n	6d64 <memchr+0x4>
    6d72:	2000      	movs	r0, #0
    6d74:	4770      	bx	lr

00006d76 <memmove>:
    6d76:	b510      	push	{r4, lr}
    6d78:	4281      	cmp	r1, r0
    6d7a:	d208      	bcs.n	6d8e <memmove+0x18>
    6d7c:	188b      	adds	r3, r1, r2
    6d7e:	4298      	cmp	r0, r3
    6d80:	d205      	bcs.n	6d8e <memmove+0x18>
    6d82:	1a9b      	subs	r3, r3, r2
    6d84:	3a01      	subs	r2, #1
    6d86:	d309      	bcc.n	6d9c <memmove+0x26>
    6d88:	5c99      	ldrb	r1, [r3, r2]
    6d8a:	5481      	strb	r1, [r0, r2]
    6d8c:	e7fa      	b.n	6d84 <memmove+0xe>
    6d8e:	2300      	movs	r3, #0
    6d90:	4293      	cmp	r3, r2
    6d92:	d003      	beq.n	6d9c <memmove+0x26>
    6d94:	5ccc      	ldrb	r4, [r1, r3]
    6d96:	54c4      	strb	r4, [r0, r3]
    6d98:	3301      	adds	r3, #1
    6d9a:	e7f9      	b.n	6d90 <memmove+0x1a>
    6d9c:	bd10      	pop	{r4, pc}
	...

00006da0 <_free_r>:
    6da0:	b530      	push	{r4, r5, lr}
    6da2:	2900      	cmp	r1, #0
    6da4:	d03e      	beq.n	6e24 <_free_r+0x84>
    6da6:	3904      	subs	r1, #4
    6da8:	680b      	ldr	r3, [r1, #0]
    6daa:	2b00      	cmp	r3, #0
    6dac:	da00      	bge.n	6db0 <_free_r+0x10>
    6dae:	18c9      	adds	r1, r1, r3
    6db0:	4a1d      	ldr	r2, [pc, #116]	; (6e28 <_free_r+0x88>)
    6db2:	6813      	ldr	r3, [r2, #0]
    6db4:	1c14      	adds	r4, r2, #0
    6db6:	2b00      	cmp	r3, #0
    6db8:	d102      	bne.n	6dc0 <_free_r+0x20>
    6dba:	604b      	str	r3, [r1, #4]
    6dbc:	6011      	str	r1, [r2, #0]
    6dbe:	e031      	b.n	6e24 <_free_r+0x84>
    6dc0:	4299      	cmp	r1, r3
    6dc2:	d20d      	bcs.n	6de0 <_free_r+0x40>
    6dc4:	6808      	ldr	r0, [r1, #0]
    6dc6:	180a      	adds	r2, r1, r0
    6dc8:	429a      	cmp	r2, r3
    6dca:	d103      	bne.n	6dd4 <_free_r+0x34>
    6dcc:	6813      	ldr	r3, [r2, #0]
    6dce:	18c3      	adds	r3, r0, r3
    6dd0:	600b      	str	r3, [r1, #0]
    6dd2:	6853      	ldr	r3, [r2, #4]
    6dd4:	604b      	str	r3, [r1, #4]
    6dd6:	6021      	str	r1, [r4, #0]
    6dd8:	e024      	b.n	6e24 <_free_r+0x84>
    6dda:	428a      	cmp	r2, r1
    6ddc:	d803      	bhi.n	6de6 <_free_r+0x46>
    6dde:	1c13      	adds	r3, r2, #0
    6de0:	685a      	ldr	r2, [r3, #4]
    6de2:	2a00      	cmp	r2, #0
    6de4:	d1f9      	bne.n	6dda <_free_r+0x3a>
    6de6:	681d      	ldr	r5, [r3, #0]
    6de8:	195c      	adds	r4, r3, r5
    6dea:	428c      	cmp	r4, r1
    6dec:	d10b      	bne.n	6e06 <_free_r+0x66>
    6dee:	6809      	ldr	r1, [r1, #0]
    6df0:	1869      	adds	r1, r5, r1
    6df2:	1858      	adds	r0, r3, r1
    6df4:	6019      	str	r1, [r3, #0]
    6df6:	4290      	cmp	r0, r2
    6df8:	d114      	bne.n	6e24 <_free_r+0x84>
    6dfa:	6810      	ldr	r0, [r2, #0]
    6dfc:	6852      	ldr	r2, [r2, #4]
    6dfe:	1809      	adds	r1, r1, r0
    6e00:	6019      	str	r1, [r3, #0]
    6e02:	605a      	str	r2, [r3, #4]
    6e04:	e00e      	b.n	6e24 <_free_r+0x84>
    6e06:	428c      	cmp	r4, r1
    6e08:	d902      	bls.n	6e10 <_free_r+0x70>
    6e0a:	230c      	movs	r3, #12
    6e0c:	6003      	str	r3, [r0, #0]
    6e0e:	e009      	b.n	6e24 <_free_r+0x84>
    6e10:	6808      	ldr	r0, [r1, #0]
    6e12:	180c      	adds	r4, r1, r0
    6e14:	4294      	cmp	r4, r2
    6e16:	d103      	bne.n	6e20 <_free_r+0x80>
    6e18:	6814      	ldr	r4, [r2, #0]
    6e1a:	6852      	ldr	r2, [r2, #4]
    6e1c:	1900      	adds	r0, r0, r4
    6e1e:	6008      	str	r0, [r1, #0]
    6e20:	604a      	str	r2, [r1, #4]
    6e22:	6059      	str	r1, [r3, #4]
    6e24:	bd30      	pop	{r4, r5, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	200000e0 	.word	0x200000e0

00006e2c <_realloc_r>:
    6e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e2e:	1c06      	adds	r6, r0, #0
    6e30:	1c0c      	adds	r4, r1, #0
    6e32:	1c15      	adds	r5, r2, #0
    6e34:	2900      	cmp	r1, #0
    6e36:	d104      	bne.n	6e42 <_realloc_r+0x16>
    6e38:	1c11      	adds	r1, r2, #0
    6e3a:	f7ff fc4b 	bl	66d4 <_malloc_r>
    6e3e:	1c04      	adds	r4, r0, #0
    6e40:	e018      	b.n	6e74 <_realloc_r+0x48>
    6e42:	2a00      	cmp	r2, #0
    6e44:	d103      	bne.n	6e4e <_realloc_r+0x22>
    6e46:	f7ff ffab 	bl	6da0 <_free_r>
    6e4a:	1c2c      	adds	r4, r5, #0
    6e4c:	e012      	b.n	6e74 <_realloc_r+0x48>
    6e4e:	f000 f813 	bl	6e78 <_malloc_usable_size_r>
    6e52:	42a8      	cmp	r0, r5
    6e54:	d20e      	bcs.n	6e74 <_realloc_r+0x48>
    6e56:	1c30      	adds	r0, r6, #0
    6e58:	1c29      	adds	r1, r5, #0
    6e5a:	f7ff fc3b 	bl	66d4 <_malloc_r>
    6e5e:	1e07      	subs	r7, r0, #0
    6e60:	d007      	beq.n	6e72 <_realloc_r+0x46>
    6e62:	1c21      	adds	r1, r4, #0
    6e64:	1c2a      	adds	r2, r5, #0
    6e66:	f7ff fbc3 	bl	65f0 <memcpy>
    6e6a:	1c30      	adds	r0, r6, #0
    6e6c:	1c21      	adds	r1, r4, #0
    6e6e:	f7ff ff97 	bl	6da0 <_free_r>
    6e72:	1c3c      	adds	r4, r7, #0
    6e74:	1c20      	adds	r0, r4, #0
    6e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006e78 <_malloc_usable_size_r>:
    6e78:	1f0b      	subs	r3, r1, #4
    6e7a:	681a      	ldr	r2, [r3, #0]
    6e7c:	1f10      	subs	r0, r2, #4
    6e7e:	2a00      	cmp	r2, #0
    6e80:	da04      	bge.n	6e8c <_malloc_usable_size_r+0x14>
    6e82:	1889      	adds	r1, r1, r2
    6e84:	3904      	subs	r1, #4
    6e86:	680b      	ldr	r3, [r1, #0]
    6e88:	18d0      	adds	r0, r2, r3
    6e8a:	3804      	subs	r0, #4
    6e8c:	4770      	bx	lr
    6e8e:	0000      	movs	r0, r0
    6e90:	0a0d7461 	.word	0x0a0d7461
    6e94:	0a0d7461 	.word	0x0a0d7461
    6e98:	20746573 	.word	0x20746573
    6e9c:	6e207462 	.word	0x6e207462
    6ea0:	20656d61 	.word	0x20656d61
    6ea4:	00000000 	.word	0x00000000
    6ea8:	4c534941 	.word	0x4c534941
    6eac:	00323056 	.word	0x00323056
    6eb0:	00000a0d 	.word	0x00000a0d
    6eb4:	42544941 	.word	0x42544941
    6eb8:	00323056 	.word	0x00323056
    6ebc:	65730a0d 	.word	0x65730a0d
    6ec0:	6f632074 	.word	0x6f632074
    6ec4:	6f72746e 	.word	0x6f72746e
    6ec8:	6463206c 	.word	0x6463206c
    6ecc:	20303220 	.word	0x20303220
    6ed0:	30382032 	.word	0x30382032
    6ed4:	00000a0d 	.word	0x00000a0d
    6ed8:	0a0d7461 	.word	0x0a0d7461
	...
    6f00:	002b2b2b 	.word	0x002b2b2b
    6f04:	20746573 	.word	0x20746573
    6f08:	70207462 	.word	0x70207462
    6f0c:	0d726961 	.word	0x0d726961
    6f10:	0000000a 	.word	0x0000000a
    6f14:	20544553 	.word	0x20544553
    6f18:	50205442 	.word	0x50205442
    6f1c:	00524941 	.word	0x00524941
    6f20:	0a0d7461 	.word	0x0a0d7461
    6f24:	0a0d7461 	.word	0x0a0d7461
    6f28:	00000000 	.word	0x00000000
    6f2c:	0a0d4b4f 	.word	0x0a0d4b4f
    6f30:	00000000 	.word	0x00000000
    6f34:	0a0d7461 	.word	0x0a0d7461
    6f38:	20746573 	.word	0x20746573
    6f3c:	70207462 	.word	0x70207462
    6f40:	20726961 	.word	0x20726961
    6f44:	00000000 	.word	0x00000000
    6f48:	00000a0d 	.word	0x00000a0d
    6f4c:	78323025 	.word	0x78323025
    6f50:	00000000 	.word	0x00000000
    6f54:	0000002c 	.word	0x0000002c
    6f58:	00000a0d 	.word	0x00000a0d
    6f5c:	42000800 	.word	0x42000800
    6f60:	42000c00 	.word	0x42000c00
    6f64:	42001000 	.word	0x42001000
    6f68:	42001400 	.word	0x42001400
    6f6c:	42001800 	.word	0x42001800
    6f70:	42001c00 	.word	0x42001c00
    6f74:	0a090807 	.word	0x0a090807
    6f78:	00000c0b 	.word	0x00000c0b
    6f7c:	00004cfe 	.word	0x00004cfe
    6f80:	00004d60 	.word	0x00004d60
    6f84:	00004d60 	.word	0x00004d60
    6f88:	00004d20 	.word	0x00004d20
    6f8c:	00004d1a 	.word	0x00004d1a
    6f90:	00004d26 	.word	0x00004d26
    6f94:	00004d04 	.word	0x00004d04
    6f98:	00004d2c 	.word	0x00004d2c
    6f9c:	000050ac 	.word	0x000050ac
    6fa0:	000050e6 	.word	0x000050e6
    6fa4:	000050e6 	.word	0x000050e6
    6fa8:	000050e2 	.word	0x000050e2
    6fac:	0000509e 	.word	0x0000509e
    6fb0:	000050be 	.word	0x000050be
    6fb4:	0000508e 	.word	0x0000508e
    6fb8:	000050d0 	.word	0x000050d0
    6fbc:	00005132 	.word	0x00005132
    6fc0:	00005148 	.word	0x00005148
    6fc4:	00005148 	.word	0x00005148
    6fc8:	00005144 	.word	0x00005144
    6fcc:	0000512c 	.word	0x0000512c
    6fd0:	00005138 	.word	0x00005138
    6fd4:	00005126 	.word	0x00005126
    6fd8:	0000513e 	.word	0x0000513e
    6fdc:	42002000 	.word	0x42002000
    6fe0:	42002400 	.word	0x42002400
    6fe4:	42002800 	.word	0x42002800
    6fe8:	42002c00 	.word	0x42002c00
    6fec:	42003000 	.word	0x42003000
    6ff0:	42003400 	.word	0x42003400
    6ff4:	42003800 	.word	0x42003800
    6ff8:	42003c00 	.word	0x42003c00
    6ffc:	14141313 	.word	0x14141313
    7000:	16161515 	.word	0x16161515
    7004:	02000100 	.word	0x02000100
    7008:	08000400 	.word	0x08000400
    700c:	20001000 	.word	0x20001000
    7010:	80004000 	.word	0x80004000
    7014:	00000043 	.word	0x00000043

00007018 <__sf_fake_stdin>:
	...

00007038 <__sf_fake_stdout>:
	...

00007058 <__sf_fake_stderr>:
	...
    7078:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7088:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7098:	31300046 35343332 39383736 64636261     F.0123456789abcd
    70a8:	00006665                                ef..

000070ac <_init>:
    70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    70b2:	bc08      	pop	{r3}
    70b4:	469e      	mov	lr, r3
    70b6:	4770      	bx	lr

000070b8 <__init_array_start>:
    70b8:	000000cd 	.word	0x000000cd

000070bc <_fini>:
    70bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    70c2:	bc08      	pop	{r3}
    70c4:	469e      	mov	lr, r3
    70c6:	4770      	bx	lr

000070c8 <__fini_array_start>:
    70c8:	000000a5 	.word	0x000000a5
