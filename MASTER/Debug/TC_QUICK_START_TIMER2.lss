
TC_QUICK_START_TIMER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000034  20000000  00002f3c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  20000034  00002f70  00010034  2**2
                  ALLOC
  3 .stack        00002004  2000012c  00003068  00010034  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017814  00000000  00000000  000100b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000222d  00000000  00000000  000278cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000221a  00000000  00000000  00029af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000678  00000000  00000000  0002bd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000588  00000000  00000000  0002c38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012725  00000000  00000000  0002c912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ac6  00000000  00000000  0003f037  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ff97  00000000  00000000  00048afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001554  00000000  00000000  000a8a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002130 	.word	0x20002130
       4:	000025d1 	.word	0x000025d1
       8:	00002665 	.word	0x00002665
       c:	00002665 	.word	0x00002665
	...
      2c:	00002665 	.word	0x00002665
	...
      38:	00002665 	.word	0x00002665
      3c:	00002665 	.word	0x00002665
      40:	00002665 	.word	0x00002665
      44:	00002665 	.word	0x00002665
      48:	00002665 	.word	0x00002665
      4c:	00002665 	.word	0x00002665
      50:	00002665 	.word	0x00002665
      54:	00002665 	.word	0x00002665
      58:	00002665 	.word	0x00002665
      5c:	00000751 	.word	0x00000751
      60:	00000765 	.word	0x00000765
      64:	00000779 	.word	0x00000779
      68:	0000078d 	.word	0x0000078d
      6c:	000007a1 	.word	0x000007a1
      70:	000007b5 	.word	0x000007b5
      74:	00001f09 	.word	0x00001f09
      78:	00001f1d 	.word	0x00001f1d
      7c:	00001f31 	.word	0x00001f31
      80:	00001f45 	.word	0x00001f45
      84:	00001f59 	.word	0x00001f59
      88:	00001f6d 	.word	0x00001f6d
      8c:	00001f81 	.word	0x00001f81
      90:	00001f95 	.word	0x00001f95
      94:	00002665 	.word	0x00002665
      98:	00002665 	.word	0x00002665
      9c:	00002665 	.word	0x00002665
      a0:	00002665 	.word	0x00002665

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000034 	.word	0x20000034
      c4:	00000000 	.word	0x00000000
      c8:	00002f3c 	.word	0x00002f3c

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00002f3c 	.word	0x00002f3c
      f8:	20000038 	.word	0x20000038
      fc:	00002f3c 	.word	0x00002f3c
     100:	00000000 	.word	0x00000000

00000104 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     10a:	4b0f      	ldr	r3, [pc, #60]	; (148 <cpu_irq_enter_critical+0x44>)
     10c:	681b      	ldr	r3, [r3, #0]
     10e:	2b00      	cmp	r3, #0
     110:	d112      	bne.n	138 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     112:	f3ef 8310 	mrs	r3, PRIMASK
     116:	607b      	str	r3, [r7, #4]
  return(result);
     118:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     11a:	2b00      	cmp	r3, #0
     11c:	d109      	bne.n	132 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     11e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     120:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     124:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x48>)
     126:	2200      	movs	r2, #0
     128:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     12a:	4b09      	ldr	r3, [pc, #36]	; (150 <cpu_irq_enter_critical+0x4c>)
     12c:	2201      	movs	r2, #1
     12e:	701a      	strb	r2, [r3, #0]
     130:	e002      	b.n	138 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     132:	4b07      	ldr	r3, [pc, #28]	; (150 <cpu_irq_enter_critical+0x4c>)
     134:	2200      	movs	r2, #0
     136:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     138:	4b03      	ldr	r3, [pc, #12]	; (148 <cpu_irq_enter_critical+0x44>)
     13a:	681b      	ldr	r3, [r3, #0]
     13c:	1c5a      	adds	r2, r3, #1
     13e:	4b02      	ldr	r3, [pc, #8]	; (148 <cpu_irq_enter_critical+0x44>)
     140:	601a      	str	r2, [r3, #0]
}
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}
     148:	20000050 	.word	0x20000050
     14c:	20000000 	.word	0x20000000
     150:	20000054 	.word	0x20000054

00000154 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     154:	b580      	push	{r7, lr}
     156:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <cpu_irq_leave_critical+0x30>)
     15a:	681b      	ldr	r3, [r3, #0]
     15c:	1e5a      	subs	r2, r3, #1
     15e:	4b09      	ldr	r3, [pc, #36]	; (184 <cpu_irq_leave_critical+0x30>)
     160:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     162:	4b08      	ldr	r3, [pc, #32]	; (184 <cpu_irq_leave_critical+0x30>)
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d10a      	bne.n	180 <cpu_irq_leave_critical+0x2c>
     16a:	4b07      	ldr	r3, [pc, #28]	; (188 <cpu_irq_leave_critical+0x34>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	b2db      	uxtb	r3, r3
     170:	2b00      	cmp	r3, #0
     172:	d005      	beq.n	180 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     174:	4b05      	ldr	r3, [pc, #20]	; (18c <cpu_irq_leave_critical+0x38>)
     176:	2201      	movs	r2, #1
     178:	701a      	strb	r2, [r3, #0]
     17a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     17e:	b662      	cpsie	i
	}
}
     180:	46bd      	mov	sp, r7
     182:	bd80      	pop	{r7, pc}
     184:	20000050 	.word	0x20000050
     188:	20000054 	.word	0x20000054
     18c:	20000000 	.word	0x20000000

00000190 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     190:	b580      	push	{r7, lr}
     192:	b084      	sub	sp, #16
     194:	af00      	add	r7, sp, #0
     196:	1c02      	adds	r2, r0, #0
     198:	1dfb      	adds	r3, r7, #7
     19a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     19c:	230f      	movs	r3, #15
     19e:	18fb      	adds	r3, r7, r3
     1a0:	1dfa      	adds	r2, r7, #7
     1a2:	7812      	ldrb	r2, [r2, #0]
     1a4:	09d2      	lsrs	r2, r2, #7
     1a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1a8:	230e      	movs	r3, #14
     1aa:	18fb      	adds	r3, r7, r3
     1ac:	1dfa      	adds	r2, r7, #7
     1ae:	7812      	ldrb	r2, [r2, #0]
     1b0:	0952      	lsrs	r2, r2, #5
     1b2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1b6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1b8:	230f      	movs	r3, #15
     1ba:	18fb      	adds	r3, r7, r3
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	2b00      	cmp	r3, #0
     1c0:	d10f      	bne.n	1e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1c2:	230f      	movs	r3, #15
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	781b      	ldrb	r3, [r3, #0]
     1c8:	009b      	lsls	r3, r3, #2
     1ca:	2210      	movs	r2, #16
     1cc:	4694      	mov	ip, r2
     1ce:	44bc      	add	ip, r7
     1d0:	4463      	add	r3, ip
     1d2:	3b08      	subs	r3, #8
     1d4:	681a      	ldr	r2, [r3, #0]
     1d6:	230e      	movs	r3, #14
     1d8:	18fb      	adds	r3, r7, r3
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	01db      	lsls	r3, r3, #7
     1de:	18d3      	adds	r3, r2, r3
     1e0:	e000      	b.n	1e4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1e2:	2300      	movs	r3, #0
	}
}
     1e4:	1c18      	adds	r0, r3, #0
     1e6:	46bd      	mov	sp, r7
     1e8:	b004      	add	sp, #16
     1ea:	bd80      	pop	{r7, pc}
     1ec:	41004400 	.word	0x41004400

000001f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	1c02      	adds	r2, r0, #0
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1fc:	1dfb      	adds	r3, r7, #7
     1fe:	781b      	ldrb	r3, [r3, #0]
     200:	1c18      	adds	r0, r3, #0
     202:	4b03      	ldr	r3, [pc, #12]	; (210 <port_get_group_from_gpio_pin+0x20>)
     204:	4798      	blx	r3
     206:	1c03      	adds	r3, r0, #0
}
     208:	1c18      	adds	r0, r3, #0
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}
     210:	00000191 	.word	0x00000191

00000214 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     222:	687b      	ldr	r3, [r7, #4]
     224:	2201      	movs	r2, #1
     226:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	709a      	strb	r2, [r3, #2]
}
     22e:	46bd      	mov	sp, r7
     230:	b002      	add	sp, #8
     232:	bd80      	pop	{r7, pc}

00000234 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	1c02      	adds	r2, r0, #0
     23c:	1dfb      	adds	r3, r7, #7
     23e:	701a      	strb	r2, [r3, #0]
     240:	1dbb      	adds	r3, r7, #6
     242:	1c0a      	adds	r2, r1, #0
     244:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     246:	1dfb      	adds	r3, r7, #7
     248:	781b      	ldrb	r3, [r3, #0]
     24a:	1c18      	adds	r0, r3, #0
     24c:	4b0c      	ldr	r3, [pc, #48]	; (280 <port_pin_set_output_level+0x4c>)
     24e:	4798      	blx	r3
     250:	1c03      	adds	r3, r0, #0
     252:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
     258:	221f      	movs	r2, #31
     25a:	4013      	ands	r3, r2
     25c:	2201      	movs	r2, #1
     25e:	409a      	lsls	r2, r3
     260:	1c13      	adds	r3, r2, #0
     262:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     264:	1dbb      	adds	r3, r7, #6
     266:	781b      	ldrb	r3, [r3, #0]
     268:	2b00      	cmp	r3, #0
     26a:	d003      	beq.n	274 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	68ba      	ldr	r2, [r7, #8]
     270:	619a      	str	r2, [r3, #24]
     272:	e002      	b.n	27a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     274:	68fb      	ldr	r3, [r7, #12]
     276:	68ba      	ldr	r2, [r7, #8]
     278:	615a      	str	r2, [r3, #20]
	}
}
     27a:	46bd      	mov	sp, r7
     27c:	b004      	add	sp, #16
     27e:	bd80      	pop	{r7, pc}
     280:	000001f1 	.word	0x000001f1

00000284 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     284:	b580      	push	{r7, lr}
     286:	b082      	sub	sp, #8
     288:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     28a:	1d3b      	adds	r3, r7, #4
     28c:	1c18      	adds	r0, r3, #0
     28e:	4b0e      	ldr	r3, [pc, #56]	; (2c8 <system_board_init+0x44>)
     290:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     292:	1d3b      	adds	r3, r7, #4
     294:	2201      	movs	r2, #1
     296:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     298:	1d3b      	adds	r3, r7, #4
     29a:	200e      	movs	r0, #14
     29c:	1c19      	adds	r1, r3, #0
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <system_board_init+0x48>)
     2a0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     2a2:	200e      	movs	r0, #14
     2a4:	2101      	movs	r1, #1
     2a6:	4b0a      	ldr	r3, [pc, #40]	; (2d0 <system_board_init+0x4c>)
     2a8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2aa:	1d3b      	adds	r3, r7, #4
     2ac:	2200      	movs	r2, #0
     2ae:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2b0:	1d3b      	adds	r3, r7, #4
     2b2:	2201      	movs	r2, #1
     2b4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2b6:	1d3b      	adds	r3, r7, #4
     2b8:	200f      	movs	r0, #15
     2ba:	1c19      	adds	r1, r3, #0
     2bc:	4b03      	ldr	r3, [pc, #12]	; (2cc <system_board_init+0x48>)
     2be:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
     2c0:	46bd      	mov	sp, r7
     2c2:	b002      	add	sp, #8
     2c4:	bd80      	pop	{r7, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000215 	.word	0x00000215
     2cc:	000002fd 	.word	0x000002fd
     2d0:	00000235 	.word	0x00000235

000002d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     2d4:	b580      	push	{r7, lr}
     2d6:	b082      	sub	sp, #8
     2d8:	af00      	add	r7, sp, #0
     2da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	2280      	movs	r2, #128	; 0x80
     2e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2200      	movs	r2, #0
     2e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	2201      	movs	r2, #1
     2ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2200      	movs	r2, #0
     2f2:	70da      	strb	r2, [r3, #3]
}
     2f4:	46bd      	mov	sp, r7
     2f6:	b002      	add	sp, #8
     2f8:	bd80      	pop	{r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)

000002fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	1c02      	adds	r2, r0, #0
     304:	6039      	str	r1, [r7, #0]
     306:	1dfb      	adds	r3, r7, #7
     308:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     30a:	230c      	movs	r3, #12
     30c:	18fb      	adds	r3, r7, r3
     30e:	1c18      	adds	r0, r3, #0
     310:	4b0f      	ldr	r3, [pc, #60]	; (350 <port_pin_set_config+0x54>)
     312:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     314:	230c      	movs	r3, #12
     316:	18fb      	adds	r3, r7, r3
     318:	2280      	movs	r2, #128	; 0x80
     31a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     31c:	683b      	ldr	r3, [r7, #0]
     31e:	781a      	ldrb	r2, [r3, #0]
     320:	230c      	movs	r3, #12
     322:	18fb      	adds	r3, r7, r3
     324:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     326:	683b      	ldr	r3, [r7, #0]
     328:	785a      	ldrb	r2, [r3, #1]
     32a:	230c      	movs	r3, #12
     32c:	18fb      	adds	r3, r7, r3
     32e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     330:	683b      	ldr	r3, [r7, #0]
     332:	789a      	ldrb	r2, [r3, #2]
     334:	230c      	movs	r3, #12
     336:	18fb      	adds	r3, r7, r3
     338:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     33a:	1dfb      	adds	r3, r7, #7
     33c:	781a      	ldrb	r2, [r3, #0]
     33e:	230c      	movs	r3, #12
     340:	18fb      	adds	r3, r7, r3
     342:	1c10      	adds	r0, r2, #0
     344:	1c19      	adds	r1, r3, #0
     346:	4b03      	ldr	r3, [pc, #12]	; (354 <port_pin_set_config+0x58>)
     348:	4798      	blx	r3
}
     34a:	46bd      	mov	sp, r7
     34c:	b004      	add	sp, #16
     34e:	bd80      	pop	{r7, pc}
     350:	000002d5 	.word	0x000002d5
     354:	00001e0d 	.word	0x00001e0d

00000358 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     358:	b580      	push	{r7, lr}
     35a:	b082      	sub	sp, #8
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     360:	687b      	ldr	r3, [r7, #4]
     362:	2200      	movs	r2, #0
     364:	701a      	strb	r2, [r3, #0]
}
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}

0000036c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     36c:	b580      	push	{r7, lr}
     36e:	b086      	sub	sp, #24
     370:	af00      	add	r7, sp, #0
     372:	60f8      	str	r0, [r7, #12]
     374:	60b9      	str	r1, [r7, #8]
     376:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     378:	2316      	movs	r3, #22
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     380:	68bb      	ldr	r3, [r7, #8]
     382:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     384:	68bb      	ldr	r3, [r7, #8]
     386:	085a      	lsrs	r2, r3, #1
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	429a      	cmp	r2, r3
     38c:	d201      	bcs.n	392 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     38e:	2340      	movs	r3, #64	; 0x40
     390:	e026      	b.n	3e0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     392:	68bb      	ldr	r3, [r7, #8]
     394:	085b      	lsrs	r3, r3, #1
     396:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     398:	e00a      	b.n	3b0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     39a:	693a      	ldr	r2, [r7, #16]
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	1ad3      	subs	r3, r2, r3
     3a0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3a2:	2316      	movs	r3, #22
     3a4:	18fb      	adds	r3, r7, r3
     3a6:	881a      	ldrh	r2, [r3, #0]
     3a8:	2316      	movs	r3, #22
     3aa:	18fb      	adds	r3, r7, r3
     3ac:	3201      	adds	r2, #1
     3ae:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3b0:	693a      	ldr	r2, [r7, #16]
     3b2:	68fb      	ldr	r3, [r7, #12]
     3b4:	429a      	cmp	r2, r3
     3b6:	d2f0      	bcs.n	39a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     3b8:	2316      	movs	r3, #22
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	2216      	movs	r2, #22
     3be:	18ba      	adds	r2, r7, r2
     3c0:	8812      	ldrh	r2, [r2, #0]
     3c2:	3a01      	subs	r2, #1
     3c4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3c6:	2316      	movs	r3, #22
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	881b      	ldrh	r3, [r3, #0]
     3cc:	2bff      	cmp	r3, #255	; 0xff
     3ce:	d901      	bls.n	3d4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3d0:	2340      	movs	r3, #64	; 0x40
     3d2:	e005      	b.n	3e0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2216      	movs	r2, #22
     3d8:	18ba      	adds	r2, r7, r2
     3da:	8812      	ldrh	r2, [r2, #0]
     3dc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     3de:	2300      	movs	r3, #0
	}
}
     3e0:	1c18      	adds	r0, r3, #0
     3e2:	46bd      	mov	sp, r7
     3e4:	b006      	add	sp, #24
     3e6:	bd80      	pop	{r7, pc}

000003e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b084      	sub	sp, #16
     3ec:	af00      	add	r7, sp, #0
     3ee:	1c02      	adds	r2, r0, #0
     3f0:	1dfb      	adds	r3, r7, #7
     3f2:	701a      	strb	r2, [r3, #0]
     3f4:	1dbb      	adds	r3, r7, #6
     3f6:	1c0a      	adds	r2, r1, #0
     3f8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3fa:	4b1a      	ldr	r3, [pc, #104]	; (464 <sercom_set_gclk_generator+0x7c>)
     3fc:	781b      	ldrb	r3, [r3, #0]
     3fe:	2201      	movs	r2, #1
     400:	4053      	eors	r3, r2
     402:	b2db      	uxtb	r3, r3
     404:	2b00      	cmp	r3, #0
     406:	d103      	bne.n	410 <sercom_set_gclk_generator+0x28>
     408:	1dbb      	adds	r3, r7, #6
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	2b00      	cmp	r3, #0
     40e:	d01b      	beq.n	448 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     410:	230c      	movs	r3, #12
     412:	18fb      	adds	r3, r7, r3
     414:	1c18      	adds	r0, r3, #0
     416:	4b14      	ldr	r3, [pc, #80]	; (468 <sercom_set_gclk_generator+0x80>)
     418:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     41a:	230c      	movs	r3, #12
     41c:	18fb      	adds	r3, r7, r3
     41e:	1dfa      	adds	r2, r7, #7
     420:	7812      	ldrb	r2, [r2, #0]
     422:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     424:	230c      	movs	r3, #12
     426:	18fb      	adds	r3, r7, r3
     428:	200c      	movs	r0, #12
     42a:	1c19      	adds	r1, r3, #0
     42c:	4b0f      	ldr	r3, [pc, #60]	; (46c <sercom_set_gclk_generator+0x84>)
     42e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     430:	200c      	movs	r0, #12
     432:	4b0f      	ldr	r3, [pc, #60]	; (470 <sercom_set_gclk_generator+0x88>)
     434:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     436:	4b0b      	ldr	r3, [pc, #44]	; (464 <sercom_set_gclk_generator+0x7c>)
     438:	1dfa      	adds	r2, r7, #7
     43a:	7812      	ldrb	r2, [r2, #0]
     43c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     43e:	4b09      	ldr	r3, [pc, #36]	; (464 <sercom_set_gclk_generator+0x7c>)
     440:	2201      	movs	r2, #1
     442:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     444:	2300      	movs	r3, #0
     446:	e008      	b.n	45a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     448:	4b06      	ldr	r3, [pc, #24]	; (464 <sercom_set_gclk_generator+0x7c>)
     44a:	785b      	ldrb	r3, [r3, #1]
     44c:	1dfa      	adds	r2, r7, #7
     44e:	7812      	ldrb	r2, [r2, #0]
     450:	429a      	cmp	r2, r3
     452:	d101      	bne.n	458 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     454:	2300      	movs	r3, #0
     456:	e000      	b.n	45a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     458:	231d      	movs	r3, #29
}
     45a:	1c18      	adds	r0, r3, #0
     45c:	46bd      	mov	sp, r7
     45e:	b004      	add	sp, #16
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	20000058 	.word	0x20000058
     468:	00000359 	.word	0x00000359
     46c:	00001b21 	.word	0x00001b21
     470:	00001b65 	.word	0x00001b65

00000474 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     474:	b580      	push	{r7, lr}
     476:	b082      	sub	sp, #8
     478:	af00      	add	r7, sp, #0
     47a:	6078      	str	r0, [r7, #4]
     47c:	1c0a      	adds	r2, r1, #0
     47e:	1cfb      	adds	r3, r7, #3
     480:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     482:	687b      	ldr	r3, [r7, #4]
     484:	4a4d      	ldr	r2, [pc, #308]	; (5bc <_sercom_get_default_pad+0x148>)
     486:	4293      	cmp	r3, r2
     488:	d03f      	beq.n	50a <_sercom_get_default_pad+0x96>
     48a:	4a4c      	ldr	r2, [pc, #304]	; (5bc <_sercom_get_default_pad+0x148>)
     48c:	4293      	cmp	r3, r2
     48e:	d806      	bhi.n	49e <_sercom_get_default_pad+0x2a>
     490:	4a4b      	ldr	r2, [pc, #300]	; (5c0 <_sercom_get_default_pad+0x14c>)
     492:	4293      	cmp	r3, r2
     494:	d00f      	beq.n	4b6 <_sercom_get_default_pad+0x42>
     496:	4a4b      	ldr	r2, [pc, #300]	; (5c4 <_sercom_get_default_pad+0x150>)
     498:	4293      	cmp	r3, r2
     49a:	d021      	beq.n	4e0 <_sercom_get_default_pad+0x6c>
     49c:	e089      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     49e:	4a4a      	ldr	r2, [pc, #296]	; (5c8 <_sercom_get_default_pad+0x154>)
     4a0:	4293      	cmp	r3, r2
     4a2:	d100      	bne.n	4a6 <_sercom_get_default_pad+0x32>
     4a4:	e05b      	b.n	55e <_sercom_get_default_pad+0xea>
     4a6:	4a49      	ldr	r2, [pc, #292]	; (5cc <_sercom_get_default_pad+0x158>)
     4a8:	4293      	cmp	r3, r2
     4aa:	d100      	bne.n	4ae <_sercom_get_default_pad+0x3a>
     4ac:	e06c      	b.n	588 <_sercom_get_default_pad+0x114>
     4ae:	4a48      	ldr	r2, [pc, #288]	; (5d0 <_sercom_get_default_pad+0x15c>)
     4b0:	4293      	cmp	r3, r2
     4b2:	d03f      	beq.n	534 <_sercom_get_default_pad+0xc0>
     4b4:	e07d      	b.n	5b2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b6:	1cfb      	adds	r3, r7, #3
     4b8:	781b      	ldrb	r3, [r3, #0]
     4ba:	2b01      	cmp	r3, #1
     4bc:	d00a      	beq.n	4d4 <_sercom_get_default_pad+0x60>
     4be:	dc02      	bgt.n	4c6 <_sercom_get_default_pad+0x52>
     4c0:	2b00      	cmp	r3, #0
     4c2:	d005      	beq.n	4d0 <_sercom_get_default_pad+0x5c>
     4c4:	e075      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     4c6:	2b02      	cmp	r3, #2
     4c8:	d006      	beq.n	4d8 <_sercom_get_default_pad+0x64>
     4ca:	2b03      	cmp	r3, #3
     4cc:	d006      	beq.n	4dc <_sercom_get_default_pad+0x68>
     4ce:	e070      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     4d0:	4b40      	ldr	r3, [pc, #256]	; (5d4 <_sercom_get_default_pad+0x160>)
     4d2:	e06f      	b.n	5b4 <_sercom_get_default_pad+0x140>
     4d4:	4b40      	ldr	r3, [pc, #256]	; (5d8 <_sercom_get_default_pad+0x164>)
     4d6:	e06d      	b.n	5b4 <_sercom_get_default_pad+0x140>
     4d8:	4b40      	ldr	r3, [pc, #256]	; (5dc <_sercom_get_default_pad+0x168>)
     4da:	e06b      	b.n	5b4 <_sercom_get_default_pad+0x140>
     4dc:	4b40      	ldr	r3, [pc, #256]	; (5e0 <_sercom_get_default_pad+0x16c>)
     4de:	e069      	b.n	5b4 <_sercom_get_default_pad+0x140>
     4e0:	1cfb      	adds	r3, r7, #3
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	2b01      	cmp	r3, #1
     4e6:	d00a      	beq.n	4fe <_sercom_get_default_pad+0x8a>
     4e8:	dc02      	bgt.n	4f0 <_sercom_get_default_pad+0x7c>
     4ea:	2b00      	cmp	r3, #0
     4ec:	d005      	beq.n	4fa <_sercom_get_default_pad+0x86>
     4ee:	e060      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     4f0:	2b02      	cmp	r3, #2
     4f2:	d006      	beq.n	502 <_sercom_get_default_pad+0x8e>
     4f4:	2b03      	cmp	r3, #3
     4f6:	d006      	beq.n	506 <_sercom_get_default_pad+0x92>
     4f8:	e05b      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     4fa:	2303      	movs	r3, #3
     4fc:	e05a      	b.n	5b4 <_sercom_get_default_pad+0x140>
     4fe:	4b39      	ldr	r3, [pc, #228]	; (5e4 <_sercom_get_default_pad+0x170>)
     500:	e058      	b.n	5b4 <_sercom_get_default_pad+0x140>
     502:	4b39      	ldr	r3, [pc, #228]	; (5e8 <_sercom_get_default_pad+0x174>)
     504:	e056      	b.n	5b4 <_sercom_get_default_pad+0x140>
     506:	4b39      	ldr	r3, [pc, #228]	; (5ec <_sercom_get_default_pad+0x178>)
     508:	e054      	b.n	5b4 <_sercom_get_default_pad+0x140>
     50a:	1cfb      	adds	r3, r7, #3
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	2b01      	cmp	r3, #1
     510:	d00a      	beq.n	528 <_sercom_get_default_pad+0xb4>
     512:	dc02      	bgt.n	51a <_sercom_get_default_pad+0xa6>
     514:	2b00      	cmp	r3, #0
     516:	d005      	beq.n	524 <_sercom_get_default_pad+0xb0>
     518:	e04b      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     51a:	2b02      	cmp	r3, #2
     51c:	d006      	beq.n	52c <_sercom_get_default_pad+0xb8>
     51e:	2b03      	cmp	r3, #3
     520:	d006      	beq.n	530 <_sercom_get_default_pad+0xbc>
     522:	e046      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     524:	4b32      	ldr	r3, [pc, #200]	; (5f0 <_sercom_get_default_pad+0x17c>)
     526:	e045      	b.n	5b4 <_sercom_get_default_pad+0x140>
     528:	4b32      	ldr	r3, [pc, #200]	; (5f4 <_sercom_get_default_pad+0x180>)
     52a:	e043      	b.n	5b4 <_sercom_get_default_pad+0x140>
     52c:	4b32      	ldr	r3, [pc, #200]	; (5f8 <_sercom_get_default_pad+0x184>)
     52e:	e041      	b.n	5b4 <_sercom_get_default_pad+0x140>
     530:	4b32      	ldr	r3, [pc, #200]	; (5fc <_sercom_get_default_pad+0x188>)
     532:	e03f      	b.n	5b4 <_sercom_get_default_pad+0x140>
     534:	1cfb      	adds	r3, r7, #3
     536:	781b      	ldrb	r3, [r3, #0]
     538:	2b01      	cmp	r3, #1
     53a:	d00a      	beq.n	552 <_sercom_get_default_pad+0xde>
     53c:	dc02      	bgt.n	544 <_sercom_get_default_pad+0xd0>
     53e:	2b00      	cmp	r3, #0
     540:	d005      	beq.n	54e <_sercom_get_default_pad+0xda>
     542:	e036      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     544:	2b02      	cmp	r3, #2
     546:	d006      	beq.n	556 <_sercom_get_default_pad+0xe2>
     548:	2b03      	cmp	r3, #3
     54a:	d006      	beq.n	55a <_sercom_get_default_pad+0xe6>
     54c:	e031      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     54e:	4b2c      	ldr	r3, [pc, #176]	; (600 <_sercom_get_default_pad+0x18c>)
     550:	e030      	b.n	5b4 <_sercom_get_default_pad+0x140>
     552:	4b2c      	ldr	r3, [pc, #176]	; (604 <_sercom_get_default_pad+0x190>)
     554:	e02e      	b.n	5b4 <_sercom_get_default_pad+0x140>
     556:	4b2c      	ldr	r3, [pc, #176]	; (608 <_sercom_get_default_pad+0x194>)
     558:	e02c      	b.n	5b4 <_sercom_get_default_pad+0x140>
     55a:	4b2c      	ldr	r3, [pc, #176]	; (60c <_sercom_get_default_pad+0x198>)
     55c:	e02a      	b.n	5b4 <_sercom_get_default_pad+0x140>
     55e:	1cfb      	adds	r3, r7, #3
     560:	781b      	ldrb	r3, [r3, #0]
     562:	2b01      	cmp	r3, #1
     564:	d00a      	beq.n	57c <_sercom_get_default_pad+0x108>
     566:	dc02      	bgt.n	56e <_sercom_get_default_pad+0xfa>
     568:	2b00      	cmp	r3, #0
     56a:	d005      	beq.n	578 <_sercom_get_default_pad+0x104>
     56c:	e021      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     56e:	2b02      	cmp	r3, #2
     570:	d006      	beq.n	580 <_sercom_get_default_pad+0x10c>
     572:	2b03      	cmp	r3, #3
     574:	d006      	beq.n	584 <_sercom_get_default_pad+0x110>
     576:	e01c      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     578:	4b25      	ldr	r3, [pc, #148]	; (610 <_sercom_get_default_pad+0x19c>)
     57a:	e01b      	b.n	5b4 <_sercom_get_default_pad+0x140>
     57c:	4b25      	ldr	r3, [pc, #148]	; (614 <_sercom_get_default_pad+0x1a0>)
     57e:	e019      	b.n	5b4 <_sercom_get_default_pad+0x140>
     580:	4b25      	ldr	r3, [pc, #148]	; (618 <_sercom_get_default_pad+0x1a4>)
     582:	e017      	b.n	5b4 <_sercom_get_default_pad+0x140>
     584:	4b25      	ldr	r3, [pc, #148]	; (61c <_sercom_get_default_pad+0x1a8>)
     586:	e015      	b.n	5b4 <_sercom_get_default_pad+0x140>
     588:	1cfb      	adds	r3, r7, #3
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	2b01      	cmp	r3, #1
     58e:	d00a      	beq.n	5a6 <_sercom_get_default_pad+0x132>
     590:	dc02      	bgt.n	598 <_sercom_get_default_pad+0x124>
     592:	2b00      	cmp	r3, #0
     594:	d005      	beq.n	5a2 <_sercom_get_default_pad+0x12e>
     596:	e00c      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     598:	2b02      	cmp	r3, #2
     59a:	d006      	beq.n	5aa <_sercom_get_default_pad+0x136>
     59c:	2b03      	cmp	r3, #3
     59e:	d006      	beq.n	5ae <_sercom_get_default_pad+0x13a>
     5a0:	e007      	b.n	5b2 <_sercom_get_default_pad+0x13e>
     5a2:	4b1f      	ldr	r3, [pc, #124]	; (620 <_sercom_get_default_pad+0x1ac>)
     5a4:	e006      	b.n	5b4 <_sercom_get_default_pad+0x140>
     5a6:	4b1f      	ldr	r3, [pc, #124]	; (624 <_sercom_get_default_pad+0x1b0>)
     5a8:	e004      	b.n	5b4 <_sercom_get_default_pad+0x140>
     5aa:	4b1f      	ldr	r3, [pc, #124]	; (628 <_sercom_get_default_pad+0x1b4>)
     5ac:	e002      	b.n	5b4 <_sercom_get_default_pad+0x140>
     5ae:	4b1f      	ldr	r3, [pc, #124]	; (62c <_sercom_get_default_pad+0x1b8>)
     5b0:	e000      	b.n	5b4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     5b2:	2300      	movs	r3, #0
}
     5b4:	1c18      	adds	r0, r3, #0
     5b6:	46bd      	mov	sp, r7
     5b8:	b002      	add	sp, #8
     5ba:	bd80      	pop	{r7, pc}
     5bc:	42001000 	.word	0x42001000
     5c0:	42000800 	.word	0x42000800
     5c4:	42000c00 	.word	0x42000c00
     5c8:	42001800 	.word	0x42001800
     5cc:	42001c00 	.word	0x42001c00
     5d0:	42001400 	.word	0x42001400
     5d4:	00040003 	.word	0x00040003
     5d8:	00050003 	.word	0x00050003
     5dc:	00060003 	.word	0x00060003
     5e0:	00070003 	.word	0x00070003
     5e4:	00010003 	.word	0x00010003
     5e8:	001e0003 	.word	0x001e0003
     5ec:	001f0003 	.word	0x001f0003
     5f0:	00080003 	.word	0x00080003
     5f4:	00090003 	.word	0x00090003
     5f8:	000a0003 	.word	0x000a0003
     5fc:	000b0003 	.word	0x000b0003
     600:	00100003 	.word	0x00100003
     604:	00110003 	.word	0x00110003
     608:	00120003 	.word	0x00120003
     60c:	00130003 	.word	0x00130003
     610:	000c0003 	.word	0x000c0003
     614:	000d0003 	.word	0x000d0003
     618:	000e0003 	.word	0x000e0003
     61c:	000f0003 	.word	0x000f0003
     620:	00160003 	.word	0x00160003
     624:	00170003 	.word	0x00170003
     628:	00180003 	.word	0x00180003
     62c:	00190003 	.word	0x00190003

00000630 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     630:	b590      	push	{r4, r7, lr}
     632:	b08b      	sub	sp, #44	; 0x2c
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     638:	230c      	movs	r3, #12
     63a:	18fb      	adds	r3, r7, r3
     63c:	4a0e      	ldr	r2, [pc, #56]	; (678 <_sercom_get_sercom_inst_index+0x48>)
     63e:	ca13      	ldmia	r2!, {r0, r1, r4}
     640:	c313      	stmia	r3!, {r0, r1, r4}
     642:	ca13      	ldmia	r2!, {r0, r1, r4}
     644:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     646:	2300      	movs	r3, #0
     648:	627b      	str	r3, [r7, #36]	; 0x24
     64a:	e00d      	b.n	668 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	220c      	movs	r2, #12
     650:	18ba      	adds	r2, r7, r2
     652:	6a79      	ldr	r1, [r7, #36]	; 0x24
     654:	0089      	lsls	r1, r1, #2
     656:	588a      	ldr	r2, [r1, r2]
     658:	4293      	cmp	r3, r2
     65a:	d102      	bne.n	662 <_sercom_get_sercom_inst_index+0x32>
			return i;
     65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     65e:	b2db      	uxtb	r3, r3
     660:	e006      	b.n	670 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     664:	3301      	adds	r3, #1
     666:	627b      	str	r3, [r7, #36]	; 0x24
     668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     66a:	2b05      	cmp	r3, #5
     66c:	d9ee      	bls.n	64c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     66e:	2300      	movs	r3, #0
}
     670:	1c18      	adds	r0, r3, #0
     672:	46bd      	mov	sp, r7
     674:	b00b      	add	sp, #44	; 0x2c
     676:	bd90      	pop	{r4, r7, pc}
     678:	00002e64 	.word	0x00002e64

0000067c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	1c02      	adds	r2, r0, #0
     684:	1dfb      	adds	r3, r7, #7
     686:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     688:	46bd      	mov	sp, r7
     68a:	b002      	add	sp, #8
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)

00000690 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     690:	b580      	push	{r7, lr}
     692:	b084      	sub	sp, #16
     694:	af00      	add	r7, sp, #0
     696:	1c02      	adds	r2, r0, #0
     698:	6039      	str	r1, [r7, #0]
     69a:	1dfb      	adds	r3, r7, #7
     69c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     69e:	4b13      	ldr	r3, [pc, #76]	; (6ec <_sercom_set_handler+0x5c>)
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	2201      	movs	r2, #1
     6a4:	4053      	eors	r3, r2
     6a6:	b2db      	uxtb	r3, r3
     6a8:	2b00      	cmp	r3, #0
     6aa:	d015      	beq.n	6d8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ac:	2300      	movs	r3, #0
     6ae:	60fb      	str	r3, [r7, #12]
     6b0:	e00c      	b.n	6cc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6b2:	4b0f      	ldr	r3, [pc, #60]	; (6f0 <_sercom_set_handler+0x60>)
     6b4:	68fa      	ldr	r2, [r7, #12]
     6b6:	0092      	lsls	r2, r2, #2
     6b8:	490e      	ldr	r1, [pc, #56]	; (6f4 <_sercom_set_handler+0x64>)
     6ba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     6bc:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <_sercom_set_handler+0x68>)
     6be:	68fa      	ldr	r2, [r7, #12]
     6c0:	0092      	lsls	r2, r2, #2
     6c2:	2100      	movs	r1, #0
     6c4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	3301      	adds	r3, #1
     6ca:	60fb      	str	r3, [r7, #12]
     6cc:	68fb      	ldr	r3, [r7, #12]
     6ce:	2b05      	cmp	r3, #5
     6d0:	d9ef      	bls.n	6b2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <_sercom_set_handler+0x5c>)
     6d4:	2201      	movs	r2, #1
     6d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     6d8:	1dfb      	adds	r3, r7, #7
     6da:	781a      	ldrb	r2, [r3, #0]
     6dc:	4b04      	ldr	r3, [pc, #16]	; (6f0 <_sercom_set_handler+0x60>)
     6de:	0092      	lsls	r2, r2, #2
     6e0:	6839      	ldr	r1, [r7, #0]
     6e2:	50d1      	str	r1, [r2, r3]
}
     6e4:	46bd      	mov	sp, r7
     6e6:	b004      	add	sp, #16
     6e8:	bd80      	pop	{r7, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	2000005a 	.word	0x2000005a
     6f0:	2000005c 	.word	0x2000005c
     6f4:	0000067d 	.word	0x0000067d
     6f8:	200000a0 	.word	0x200000a0

000006fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     6fc:	b590      	push	{r4, r7, lr}
     6fe:	b085      	sub	sp, #20
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     704:	2308      	movs	r3, #8
     706:	18fa      	adds	r2, r7, r3
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <_sercom_get_interrupt_vector+0x48>)
     70a:	1c11      	adds	r1, r2, #0
     70c:	1c1a      	adds	r2, r3, #0
     70e:	2306      	movs	r3, #6
     710:	1c08      	adds	r0, r1, #0
     712:	1c11      	adds	r1, r2, #0
     714:	1c1a      	adds	r2, r3, #0
     716:	4b0c      	ldr	r3, [pc, #48]	; (748 <_sercom_get_interrupt_vector+0x4c>)
     718:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     71a:	230f      	movs	r3, #15
     71c:	18fc      	adds	r4, r7, r3
     71e:	687b      	ldr	r3, [r7, #4]
     720:	1c18      	adds	r0, r3, #0
     722:	4b0a      	ldr	r3, [pc, #40]	; (74c <_sercom_get_interrupt_vector+0x50>)
     724:	4798      	blx	r3
     726:	1c03      	adds	r3, r0, #0
     728:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     72a:	230f      	movs	r3, #15
     72c:	18fb      	adds	r3, r7, r3
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2208      	movs	r2, #8
     732:	18ba      	adds	r2, r7, r2
     734:	5cd3      	ldrb	r3, [r2, r3]
     736:	b2db      	uxtb	r3, r3
     738:	b25b      	sxtb	r3, r3
}
     73a:	1c18      	adds	r0, r3, #0
     73c:	46bd      	mov	sp, r7
     73e:	b005      	add	sp, #20
     740:	bd90      	pop	{r4, r7, pc}
     742:	46c0      	nop			; (mov r8, r8)
     744:	00002e7c 	.word	0x00002e7c
     748:	00002e41 	.word	0x00002e41
     74c:	00000631 	.word	0x00000631

00000750 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     750:	b580      	push	{r7, lr}
     752:	af00      	add	r7, sp, #0
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <SERCOM0_Handler+0x10>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	2000      	movs	r0, #0
     75a:	4798      	blx	r3
     75c:	46bd      	mov	sp, r7
     75e:	bd80      	pop	{r7, pc}
     760:	2000005c 	.word	0x2000005c

00000764 <SERCOM1_Handler>:
     764:	b580      	push	{r7, lr}
     766:	af00      	add	r7, sp, #0
     768:	4b02      	ldr	r3, [pc, #8]	; (774 <SERCOM1_Handler+0x10>)
     76a:	685b      	ldr	r3, [r3, #4]
     76c:	2001      	movs	r0, #1
     76e:	4798      	blx	r3
     770:	46bd      	mov	sp, r7
     772:	bd80      	pop	{r7, pc}
     774:	2000005c 	.word	0x2000005c

00000778 <SERCOM2_Handler>:
     778:	b580      	push	{r7, lr}
     77a:	af00      	add	r7, sp, #0
     77c:	4b02      	ldr	r3, [pc, #8]	; (788 <SERCOM2_Handler+0x10>)
     77e:	689b      	ldr	r3, [r3, #8]
     780:	2002      	movs	r0, #2
     782:	4798      	blx	r3
     784:	46bd      	mov	sp, r7
     786:	bd80      	pop	{r7, pc}
     788:	2000005c 	.word	0x2000005c

0000078c <SERCOM3_Handler>:
     78c:	b580      	push	{r7, lr}
     78e:	af00      	add	r7, sp, #0
     790:	4b02      	ldr	r3, [pc, #8]	; (79c <SERCOM3_Handler+0x10>)
     792:	68db      	ldr	r3, [r3, #12]
     794:	2003      	movs	r0, #3
     796:	4798      	blx	r3
     798:	46bd      	mov	sp, r7
     79a:	bd80      	pop	{r7, pc}
     79c:	2000005c 	.word	0x2000005c

000007a0 <SERCOM4_Handler>:
     7a0:	b580      	push	{r7, lr}
     7a2:	af00      	add	r7, sp, #0
     7a4:	4b02      	ldr	r3, [pc, #8]	; (7b0 <SERCOM4_Handler+0x10>)
     7a6:	691b      	ldr	r3, [r3, #16]
     7a8:	2004      	movs	r0, #4
     7aa:	4798      	blx	r3
     7ac:	46bd      	mov	sp, r7
     7ae:	bd80      	pop	{r7, pc}
     7b0:	2000005c 	.word	0x2000005c

000007b4 <SERCOM5_Handler>:
     7b4:	b580      	push	{r7, lr}
     7b6:	af00      	add	r7, sp, #0
     7b8:	4b02      	ldr	r3, [pc, #8]	; (7c4 <SERCOM5_Handler+0x10>)
     7ba:	695b      	ldr	r3, [r3, #20]
     7bc:	2005      	movs	r0, #5
     7be:	4798      	blx	r3
     7c0:	46bd      	mov	sp, r7
     7c2:	bd80      	pop	{r7, pc}
     7c4:	2000005c 	.word	0x2000005c

000007c8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	2280      	movs	r2, #128	; 0x80
     7d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d6:	687b      	ldr	r3, [r7, #4]
     7d8:	2200      	movs	r2, #0
     7da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	2201      	movs	r2, #1
     7e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	2200      	movs	r2, #0
     7e6:	70da      	strb	r2, [r3, #3]
}
     7e8:	46bd      	mov	sp, r7
     7ea:	b002      	add	sp, #8
     7ec:	bd80      	pop	{r7, pc}
     7ee:	46c0      	nop			; (mov r8, r8)

000007f0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b082      	sub	sp, #8
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	2200      	movs	r2, #0
     7fc:	701a      	strb	r2, [r3, #0]
}
     7fe:	46bd      	mov	sp, r7
     800:	b002      	add	sp, #8
     802:	bd80      	pop	{r7, pc}

00000804 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
     80a:	1c02      	adds	r2, r0, #0
     80c:	6039      	str	r1, [r7, #0]
     80e:	1dfb      	adds	r3, r7, #7
     810:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     812:	1dfb      	adds	r3, r7, #7
     814:	781b      	ldrb	r3, [r3, #0]
     816:	2b01      	cmp	r3, #1
     818:	d00a      	beq.n	830 <system_apb_clock_set_mask+0x2c>
     81a:	2b02      	cmp	r3, #2
     81c:	d00f      	beq.n	83e <system_apb_clock_set_mask+0x3a>
     81e:	2b00      	cmp	r3, #0
     820:	d114      	bne.n	84c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     822:	4b0e      	ldr	r3, [pc, #56]	; (85c <system_apb_clock_set_mask+0x58>)
     824:	4a0d      	ldr	r2, [pc, #52]	; (85c <system_apb_clock_set_mask+0x58>)
     826:	6991      	ldr	r1, [r2, #24]
     828:	683a      	ldr	r2, [r7, #0]
     82a:	430a      	orrs	r2, r1
     82c:	619a      	str	r2, [r3, #24]
			break;
     82e:	e00f      	b.n	850 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     830:	4b0a      	ldr	r3, [pc, #40]	; (85c <system_apb_clock_set_mask+0x58>)
     832:	4a0a      	ldr	r2, [pc, #40]	; (85c <system_apb_clock_set_mask+0x58>)
     834:	69d1      	ldr	r1, [r2, #28]
     836:	683a      	ldr	r2, [r7, #0]
     838:	430a      	orrs	r2, r1
     83a:	61da      	str	r2, [r3, #28]
			break;
     83c:	e008      	b.n	850 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     83e:	4b07      	ldr	r3, [pc, #28]	; (85c <system_apb_clock_set_mask+0x58>)
     840:	4a06      	ldr	r2, [pc, #24]	; (85c <system_apb_clock_set_mask+0x58>)
     842:	6a11      	ldr	r1, [r2, #32]
     844:	683a      	ldr	r2, [r7, #0]
     846:	430a      	orrs	r2, r1
     848:	621a      	str	r2, [r3, #32]
			break;
     84a:	e001      	b.n	850 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     84c:	2317      	movs	r3, #23
     84e:	e000      	b.n	852 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     850:	2300      	movs	r3, #0
}
     852:	1c18      	adds	r0, r3, #0
     854:	46bd      	mov	sp, r7
     856:	b002      	add	sp, #8
     858:	bd80      	pop	{r7, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	40000400 	.word	0x40000400

00000860 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     860:	b580      	push	{r7, lr}
     862:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     864:	4b05      	ldr	r3, [pc, #20]	; (87c <system_is_debugger_present+0x1c>)
     866:	789b      	ldrb	r3, [r3, #2]
     868:	b2db      	uxtb	r3, r3
     86a:	1c1a      	adds	r2, r3, #0
     86c:	2302      	movs	r3, #2
     86e:	4013      	ands	r3, r2
     870:	1e5a      	subs	r2, r3, #1
     872:	4193      	sbcs	r3, r2
     874:	b2db      	uxtb	r3, r3
}
     876:	1c18      	adds	r0, r3, #0
     878:	46bd      	mov	sp, r7
     87a:	bd80      	pop	{r7, pc}
     87c:	41002000 	.word	0x41002000

00000880 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     880:	b590      	push	{r4, r7, lr}
     882:	b093      	sub	sp, #76	; 0x4c
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
     888:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	681b      	ldr	r3, [r3, #0]
     88e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     890:	687b      	ldr	r3, [r7, #4]
     892:	681b      	ldr	r3, [r3, #0]
     894:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     896:	231c      	movs	r3, #28
     898:	18fb      	adds	r3, r7, r3
     89a:	1c18      	adds	r0, r3, #0
     89c:	4b7a      	ldr	r3, [pc, #488]	; (a88 <_spi_set_config+0x208>)
     89e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8a0:	231c      	movs	r3, #28
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	2200      	movs	r2, #0
     8a6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     8a8:	683b      	ldr	r3, [r7, #0]
     8aa:	781b      	ldrb	r3, [r3, #0]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d103      	bne.n	8b8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8b0:	231c      	movs	r3, #28
     8b2:	18fb      	adds	r3, r7, r3
     8b4:	2200      	movs	r2, #0
     8b6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     8b8:	683b      	ldr	r3, [r7, #0]
     8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     8bc:	230c      	movs	r3, #12
     8be:	18fb      	adds	r3, r7, r3
     8c0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     8c2:	683b      	ldr	r3, [r7, #0]
     8c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     8c6:	230c      	movs	r3, #12
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     8cc:	683b      	ldr	r3, [r7, #0]
     8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     8d0:	230c      	movs	r3, #12
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     8d6:	683b      	ldr	r3, [r7, #0]
     8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     8da:	230c      	movs	r3, #12
     8dc:	18fb      	adds	r3, r7, r3
     8de:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     8e0:	2347      	movs	r3, #71	; 0x47
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	2200      	movs	r2, #0
     8e6:	701a      	strb	r2, [r3, #0]
     8e8:	e02c      	b.n	944 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8ea:	2347      	movs	r3, #71	; 0x47
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	781a      	ldrb	r2, [r3, #0]
     8f0:	230c      	movs	r3, #12
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	0092      	lsls	r2, r2, #2
     8f6:	58d3      	ldr	r3, [r2, r3]
     8f8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8fc:	2b00      	cmp	r3, #0
     8fe:	d109      	bne.n	914 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     902:	2347      	movs	r3, #71	; 0x47
     904:	18fb      	adds	r3, r7, r3
     906:	781b      	ldrb	r3, [r3, #0]
     908:	1c10      	adds	r0, r2, #0
     90a:	1c19      	adds	r1, r3, #0
     90c:	4b5f      	ldr	r3, [pc, #380]	; (a8c <_spi_set_config+0x20c>)
     90e:	4798      	blx	r3
     910:	1c03      	adds	r3, r0, #0
     912:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     916:	3301      	adds	r3, #1
     918:	d00d      	beq.n	936 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     91c:	b2da      	uxtb	r2, r3
     91e:	231c      	movs	r3, #28
     920:	18fb      	adds	r3, r7, r3
     922:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     926:	0c1b      	lsrs	r3, r3, #16
     928:	b2da      	uxtb	r2, r3
     92a:	231c      	movs	r3, #28
     92c:	18fb      	adds	r3, r7, r3
     92e:	1c10      	adds	r0, r2, #0
     930:	1c19      	adds	r1, r3, #0
     932:	4b57      	ldr	r3, [pc, #348]	; (a90 <_spi_set_config+0x210>)
     934:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     936:	2347      	movs	r3, #71	; 0x47
     938:	18fb      	adds	r3, r7, r3
     93a:	781a      	ldrb	r2, [r3, #0]
     93c:	2347      	movs	r3, #71	; 0x47
     93e:	18fb      	adds	r3, r7, r3
     940:	3201      	adds	r2, #1
     942:	701a      	strb	r2, [r3, #0]
     944:	2347      	movs	r3, #71	; 0x47
     946:	18fb      	adds	r3, r7, r3
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	2b03      	cmp	r3, #3
     94c:	d9cd      	bls.n	8ea <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     94e:	683b      	ldr	r3, [r7, #0]
     950:	781a      	ldrb	r2, [r3, #0]
     952:	687b      	ldr	r3, [r7, #4]
     954:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     956:	683b      	ldr	r3, [r7, #0]
     958:	7c1a      	ldrb	r2, [r3, #16]
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     95e:	683b      	ldr	r3, [r7, #0]
     960:	7c9a      	ldrb	r2, [r3, #18]
     962:	687b      	ldr	r3, [r7, #4]
     964:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     966:	230a      	movs	r3, #10
     968:	18fb      	adds	r3, r7, r3
     96a:	2200      	movs	r2, #0
     96c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     96e:	2300      	movs	r3, #0
     970:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     972:	2300      	movs	r3, #0
     974:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     976:	683b      	ldr	r3, [r7, #0]
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2b01      	cmp	r3, #1
     97c:	d12b      	bne.n	9d6 <_spi_set_config+0x156>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     97e:	687b      	ldr	r3, [r7, #4]
     980:	681b      	ldr	r3, [r3, #0]
     982:	1c18      	adds	r0, r3, #0
     984:	4b43      	ldr	r3, [pc, #268]	; (a94 <_spi_set_config+0x214>)
     986:	4798      	blx	r3
     988:	1c03      	adds	r3, r0, #0
     98a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     98e:	330d      	adds	r3, #13
     990:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     992:	6abb      	ldr	r3, [r7, #40]	; 0x28
     994:	b2db      	uxtb	r3, r3
     996:	1c18      	adds	r0, r3, #0
     998:	4b3f      	ldr	r3, [pc, #252]	; (a98 <_spi_set_config+0x218>)
     99a:	4798      	blx	r3
     99c:	1c03      	adds	r3, r0, #0
     99e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     9a0:	683b      	ldr	r3, [r7, #0]
     9a2:	6959      	ldr	r1, [r3, #20]
     9a4:	2323      	movs	r3, #35	; 0x23
     9a6:	18fc      	adds	r4, r7, r3
     9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     9aa:	230a      	movs	r3, #10
     9ac:	18fb      	adds	r3, r7, r3
     9ae:	1c08      	adds	r0, r1, #0
     9b0:	1c11      	adds	r1, r2, #0
     9b2:	1c1a      	adds	r2, r3, #0
     9b4:	4b39      	ldr	r3, [pc, #228]	; (a9c <_spi_set_config+0x21c>)
     9b6:	4798      	blx	r3
     9b8:	1c03      	adds	r3, r0, #0
     9ba:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     9bc:	2323      	movs	r3, #35	; 0x23
     9be:	18fb      	adds	r3, r7, r3
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d001      	beq.n	9ca <_spi_set_config+0x14a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     9c6:	2317      	movs	r3, #23
     9c8:	e05a      	b.n	a80 <_spi_set_config+0x200>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     9ca:	230a      	movs	r3, #10
     9cc:	18fb      	adds	r3, r7, r3
     9ce:	881b      	ldrh	r3, [r3, #0]
     9d0:	b2da      	uxtb	r2, r3
     9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9d4:	729a      	strb	r2, [r3, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     9d6:	683b      	ldr	r3, [r7, #0]
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	d119      	bne.n	a12 <_spi_set_config+0x192>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     9de:	683b      	ldr	r3, [r7, #0]
     9e0:	695b      	ldr	r3, [r3, #20]
     9e2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     9e4:	683b      	ldr	r3, [r7, #0]
     9e6:	8b1b      	ldrh	r3, [r3, #24]
     9e8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9ec:	695b      	ldr	r3, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     9ee:	683a      	ldr	r2, [r7, #0]
     9f0:	7e92      	ldrb	r2, [r2, #26]
     9f2:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     9f4:	683a      	ldr	r2, [r7, #0]
     9f6:	7ed2      	ldrb	r2, [r2, #27]
     9f8:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     9fa:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     9fc:	431a      	orrs	r2, r3
     9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a00:	615a      	str	r2, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     a02:	683b      	ldr	r3, [r7, #0]
     a04:	7f1b      	ldrb	r3, [r3, #28]
     a06:	2b00      	cmp	r3, #0
     a08:	d003      	beq.n	a12 <_spi_set_config+0x192>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a0c:	2240      	movs	r2, #64	; 0x40
     a0e:	4313      	orrs	r3, r2
     a10:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     a12:	683b      	ldr	r3, [r7, #0]
     a14:	685b      	ldr	r3, [r3, #4]
     a16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a18:	4313      	orrs	r3, r2
     a1a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a1c:	683b      	ldr	r3, [r7, #0]
     a1e:	689b      	ldr	r3, [r3, #8]
     a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a22:	4313      	orrs	r3, r2
     a24:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a26:	683b      	ldr	r3, [r7, #0]
     a28:	68db      	ldr	r3, [r3, #12]
     a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a2c:	4313      	orrs	r3, r2
     a2e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a30:	683b      	ldr	r3, [r7, #0]
     a32:	7c1b      	ldrb	r3, [r3, #16]
     a34:	1c1a      	adds	r2, r3, #0
     a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a38:	4313      	orrs	r3, r2
     a3a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a3c:	683b      	ldr	r3, [r7, #0]
     a3e:	7c5b      	ldrb	r3, [r3, #17]
     a40:	2b00      	cmp	r3, #0
     a42:	d103      	bne.n	a4c <_spi_set_config+0x1cc>
     a44:	4b16      	ldr	r3, [pc, #88]	; (aa0 <_spi_set_config+0x220>)
     a46:	4798      	blx	r3
     a48:	1e03      	subs	r3, r0, #0
     a4a:	d003      	beq.n	a54 <_spi_set_config+0x1d4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	4313      	orrs	r3, r2
     a52:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     a54:	683b      	ldr	r3, [r7, #0]
     a56:	7c9b      	ldrb	r3, [r3, #18]
     a58:	2b00      	cmp	r3, #0
     a5a:	d004      	beq.n	a66 <_spi_set_config+0x1e6>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a5e:	2280      	movs	r2, #128	; 0x80
     a60:	0292      	lsls	r2, r2, #10
     a62:	4313      	orrs	r3, r2
     a64:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a68:	681a      	ldr	r2, [r3, #0]
     a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a6c:	431a      	orrs	r2, r3
     a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a70:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a74:	685a      	ldr	r2, [r3, #4]
     a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a78:	431a      	orrs	r2, r3
     a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a7c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     a7e:	2300      	movs	r3, #0
}
     a80:	1c18      	adds	r0, r3, #0
     a82:	46bd      	mov	sp, r7
     a84:	b013      	add	sp, #76	; 0x4c
     a86:	bd90      	pop	{r4, r7, pc}
     a88:	000007c9 	.word	0x000007c9
     a8c:	00000475 	.word	0x00000475
     a90:	00001e0d 	.word	0x00001e0d
     a94:	00000631 	.word	0x00000631
     a98:	00001c45 	.word	0x00001c45
     a9c:	0000036d 	.word	0x0000036d
     aa0:	00000861 	.word	0x00000861

00000aa4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     aa4:	b590      	push	{r4, r7, lr}
     aa6:	b08b      	sub	sp, #44	; 0x2c
     aa8:	af00      	add	r7, sp, #0
     aaa:	60f8      	str	r0, [r7, #12]
     aac:	60b9      	str	r1, [r7, #8]
     aae:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	68ba      	ldr	r2, [r7, #8]
     ab4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     abc:	6a3b      	ldr	r3, [r7, #32]
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	2202      	movs	r2, #2
     ac2:	4013      	ands	r3, r2
     ac4:	d001      	beq.n	aca <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     ac6:	231c      	movs	r3, #28
     ac8:	e0a5      	b.n	c16 <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     aca:	6a3b      	ldr	r3, [r7, #32]
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	2201      	movs	r2, #1
     ad0:	4013      	ands	r3, r2
     ad2:	d001      	beq.n	ad8 <spi_init+0x34>
		return STATUS_BUSY;
     ad4:	2305      	movs	r3, #5
     ad6:	e09e      	b.n	c16 <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	1c18      	adds	r0, r3, #0
     ade:	4b50      	ldr	r3, [pc, #320]	; (c20 <spi_init+0x17c>)
     ae0:	4798      	blx	r3
     ae2:	1c03      	adds	r3, r0, #0
     ae4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ae6:	69fb      	ldr	r3, [r7, #28]
     ae8:	3302      	adds	r3, #2
     aea:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aec:	69fb      	ldr	r3, [r7, #28]
     aee:	330d      	adds	r3, #13
     af0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     af2:	69bb      	ldr	r3, [r7, #24]
     af4:	2201      	movs	r2, #1
     af6:	409a      	lsls	r2, r3
     af8:	1c13      	adds	r3, r2, #0
     afa:	2002      	movs	r0, #2
     afc:	1c19      	adds	r1, r3, #0
     afe:	4b49      	ldr	r3, [pc, #292]	; (c24 <spi_init+0x180>)
     b00:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b02:	2310      	movs	r3, #16
     b04:	18fb      	adds	r3, r7, r3
     b06:	1c18      	adds	r0, r3, #0
     b08:	4b47      	ldr	r3, [pc, #284]	; (c28 <spi_init+0x184>)
     b0a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	2220      	movs	r2, #32
     b10:	5c9a      	ldrb	r2, [r3, r2]
     b12:	2310      	movs	r3, #16
     b14:	18fb      	adds	r3, r7, r3
     b16:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b18:	697b      	ldr	r3, [r7, #20]
     b1a:	b2da      	uxtb	r2, r3
     b1c:	2310      	movs	r3, #16
     b1e:	18fb      	adds	r3, r7, r3
     b20:	1c10      	adds	r0, r2, #0
     b22:	1c19      	adds	r1, r3, #0
     b24:	4b41      	ldr	r3, [pc, #260]	; (c2c <spi_init+0x188>)
     b26:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b28:	697b      	ldr	r3, [r7, #20]
     b2a:	b2db      	uxtb	r3, r3
     b2c:	1c18      	adds	r0, r3, #0
     b2e:	4b40      	ldr	r3, [pc, #256]	; (c30 <spi_init+0x18c>)
     b30:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2220      	movs	r2, #32
     b36:	5c9b      	ldrb	r3, [r3, r2]
     b38:	1c18      	adds	r0, r3, #0
     b3a:	2100      	movs	r1, #0
     b3c:	4b3d      	ldr	r3, [pc, #244]	; (c34 <spi_init+0x190>)
     b3e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b40:	687b      	ldr	r3, [r7, #4]
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	2b01      	cmp	r3, #1
     b46:	d105      	bne.n	b54 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b48:	6a3b      	ldr	r3, [r7, #32]
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	220c      	movs	r2, #12
     b4e:	431a      	orrs	r2, r3
     b50:	6a3b      	ldr	r3, [r7, #32]
     b52:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	781b      	ldrb	r3, [r3, #0]
     b58:	2b00      	cmp	r3, #0
     b5a:	d105      	bne.n	b68 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b5c:	6a3b      	ldr	r3, [r7, #32]
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2208      	movs	r2, #8
     b62:	431a      	orrs	r2, r3
     b64:	6a3b      	ldr	r3, [r7, #32]
     b66:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b68:	2327      	movs	r3, #39	; 0x27
     b6a:	18fb      	adds	r3, r7, r3
     b6c:	2200      	movs	r2, #0
     b6e:	701a      	strb	r2, [r3, #0]
     b70:	e00f      	b.n	b92 <spi_init+0xee>
		module->callback[i]        = NULL;
     b72:	2327      	movs	r3, #39	; 0x27
     b74:	18fb      	adds	r3, r7, r3
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	68fa      	ldr	r2, [r7, #12]
     b7a:	3302      	adds	r3, #2
     b7c:	009b      	lsls	r3, r3, #2
     b7e:	18d3      	adds	r3, r2, r3
     b80:	2200      	movs	r2, #0
     b82:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b84:	2327      	movs	r3, #39	; 0x27
     b86:	18fb      	adds	r3, r7, r3
     b88:	781a      	ldrb	r2, [r3, #0]
     b8a:	2327      	movs	r3, #39	; 0x27
     b8c:	18fb      	adds	r3, r7, r3
     b8e:	3201      	adds	r2, #1
     b90:	701a      	strb	r2, [r3, #0]
     b92:	2327      	movs	r3, #39	; 0x27
     b94:	18fb      	adds	r3, r7, r3
     b96:	781b      	ldrb	r3, [r3, #0]
     b98:	2b04      	cmp	r3, #4
     b9a:	d9ea      	bls.n	b72 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     b9c:	68fb      	ldr	r3, [r7, #12]
     b9e:	2200      	movs	r2, #0
     ba0:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_buffer_ptr              = NULL;
     ba2:	68fb      	ldr	r3, [r7, #12]
     ba4:	2200      	movs	r2, #0
     ba6:	621a      	str	r2, [r3, #32]
	module->remaining_tx_buffer_length = 0x0000;
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	2200      	movs	r2, #0
     bac:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     bae:	68fb      	ldr	r3, [r7, #12]
     bb0:	2200      	movs	r2, #0
     bb2:	851a      	strh	r2, [r3, #40]	; 0x28
	module->registered_callback        = 0x00;
     bb4:	68fb      	ldr	r3, [r7, #12]
     bb6:	222e      	movs	r2, #46	; 0x2e
     bb8:	2100      	movs	r1, #0
     bba:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
     bbc:	68fb      	ldr	r3, [r7, #12]
     bbe:	222f      	movs	r2, #47	; 0x2f
     bc0:	2100      	movs	r1, #0
     bc2:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
     bc4:	68fb      	ldr	r3, [r7, #12]
     bc6:	2230      	movs	r2, #48	; 0x30
     bc8:	2100      	movs	r1, #0
     bca:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     bcc:	68fb      	ldr	r3, [r7, #12]
     bce:	2203      	movs	r2, #3
     bd0:	721a      	strb	r2, [r3, #8]
	module->locked                     = false;
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	2200      	movs	r2, #0
     bd6:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     bd8:	68fb      	ldr	r3, [r7, #12]
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	2213      	movs	r2, #19
     bde:	18bc      	adds	r4, r7, r2
     be0:	1c18      	adds	r0, r3, #0
     be2:	4b0f      	ldr	r3, [pc, #60]	; (c20 <spi_init+0x17c>)
     be4:	4798      	blx	r3
     be6:	1c03      	adds	r3, r0, #0
     be8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     bea:	2313      	movs	r3, #19
     bec:	18fb      	adds	r3, r7, r3
     bee:	781a      	ldrb	r2, [r3, #0]
     bf0:	4b11      	ldr	r3, [pc, #68]	; (c38 <spi_init+0x194>)
     bf2:	1c10      	adds	r0, r2, #0
     bf4:	1c19      	adds	r1, r3, #0
     bf6:	4b11      	ldr	r3, [pc, #68]	; (c3c <spi_init+0x198>)
     bf8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bfa:	2313      	movs	r3, #19
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	4b0f      	ldr	r3, [pc, #60]	; (c40 <spi_init+0x19c>)
     c02:	0092      	lsls	r2, r2, #2
     c04:	68f9      	ldr	r1, [r7, #12]
     c06:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     c08:	68fa      	ldr	r2, [r7, #12]
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	1c10      	adds	r0, r2, #0
     c0e:	1c19      	adds	r1, r3, #0
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <spi_init+0x1a0>)
     c12:	4798      	blx	r3
     c14:	1c03      	adds	r3, r0, #0
}
     c16:	1c18      	adds	r0, r3, #0
     c18:	46bd      	mov	sp, r7
     c1a:	b00b      	add	sp, #44	; 0x2c
     c1c:	bd90      	pop	{r4, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	00000631 	.word	0x00000631
     c24:	00000805 	.word	0x00000805
     c28:	000007f1 	.word	0x000007f1
     c2c:	00001b21 	.word	0x00001b21
     c30:	00001b65 	.word	0x00001b65
     c34:	000003e9 	.word	0x000003e9
     c38:	00000e9d 	.word	0x00000e9d
     c3c:	00000691 	.word	0x00000691
     c40:	200000a0 	.word	0x200000a0
     c44:	00000881 	.word	0x00000881

00000c48 <_spi_transceive_buffer>:
static void _spi_transceive_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b086      	sub	sp, #24
     c4c:	af00      	add	r7, sp, #0
     c4e:	60f8      	str	r0, [r7, #12]
     c50:	60b9      	str	r1, [r7, #8]
     c52:	607a      	str	r2, [r7, #4]
     c54:	1c1a      	adds	r2, r3, #0
     c56:	1cbb      	adds	r3, r7, #2
     c58:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     c5a:	68fb      	ldr	r3, [r7, #12]
     c5c:	1cba      	adds	r2, r7, #2
     c5e:	8812      	ldrh	r2, [r2, #0]
     c60:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = length;
     c62:	68fb      	ldr	r3, [r7, #12]
     c64:	1cba      	adds	r2, r7, #2
     c66:	8812      	ldrh	r2, [r2, #0]
     c68:	851a      	strh	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr = rx_data;
     c6a:	68fb      	ldr	r3, [r7, #12]
     c6c:	687a      	ldr	r2, [r7, #4]
     c6e:	621a      	str	r2, [r3, #32]
	module->tx_buffer_ptr = tx_data;
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	68ba      	ldr	r2, [r7, #8]
     c74:	625a      	str	r2, [r3, #36]	; 0x24
	module->status = STATUS_BUSY;
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	2230      	movs	r2, #48	; 0x30
     c7a:	2105      	movs	r1, #5
     c7c:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
     c7e:	68fb      	ldr	r3, [r7, #12]
     c80:	2202      	movs	r2, #2
     c82:	721a      	strb	r2, [r3, #8]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
     c84:	68fb      	ldr	r3, [r7, #12]
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	617b      	str	r3, [r7, #20]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     c8a:	697b      	ldr	r3, [r7, #20]
     c8c:	2205      	movs	r2, #5
     c8e:	735a      	strb	r2, [r3, #13]
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	795b      	ldrb	r3, [r3, #5]
     c94:	2b00      	cmp	r3, #0
     c96:	d105      	bne.n	ca4 <_spi_transceive_buffer+0x5c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c98:	697b      	ldr	r3, [r7, #20]
     c9a:	2202      	movs	r2, #2
     c9c:	739a      	strb	r2, [r3, #14]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c9e:	697b      	ldr	r3, [r7, #20]
     ca0:	2202      	movs	r2, #2
     ca2:	735a      	strb	r2, [r3, #13]
	}
#  endif
}
     ca4:	46bd      	mov	sp, r7
     ca6:	b006      	add	sp, #24
     ca8:	bd80      	pop	{r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)

00000cac <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	1dfb      	adds	r3, r7, #7
     cb8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     cba:	1dfb      	adds	r3, r7, #7
     cbc:	781b      	ldrb	r3, [r3, #0]
     cbe:	68fa      	ldr	r2, [r7, #12]
     cc0:	3302      	adds	r3, #2
     cc2:	009b      	lsls	r3, r3, #2
     cc4:	18d3      	adds	r3, r2, r3
     cc6:	68ba      	ldr	r2, [r7, #8]
     cc8:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     cca:	68fb      	ldr	r3, [r7, #12]
     ccc:	222e      	movs	r2, #46	; 0x2e
     cce:	5c9b      	ldrb	r3, [r3, r2]
     cd0:	b2d9      	uxtb	r1, r3
     cd2:	1dfb      	adds	r3, r7, #7
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	2201      	movs	r2, #1
     cd8:	409a      	lsls	r2, r3
     cda:	1c13      	adds	r3, r2, #0
     cdc:	b2db      	uxtb	r3, r3
     cde:	1c0a      	adds	r2, r1, #0
     ce0:	4313      	orrs	r3, r2
     ce2:	b2db      	uxtb	r3, r3
     ce4:	b2d9      	uxtb	r1, r3
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	222e      	movs	r2, #46	; 0x2e
     cea:	5499      	strb	r1, [r3, r2]
}
     cec:	46bd      	mov	sp, r7
     cee:	b004      	add	sp, #16
     cf0:	bd80      	pop	{r7, pc}
     cf2:	46c0      	nop			; (mov r8, r8)

00000cf4 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     cf4:	b590      	push	{r4, r7, lr}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	60f8      	str	r0, [r7, #12]
     cfc:	60b9      	str	r1, [r7, #8]
     cfe:	607a      	str	r2, [r7, #4]
     d00:	1c1a      	adds	r2, r3, #0
     d02:	1cbb      	adds	r3, r7, #2
     d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     d06:	1cbb      	adds	r3, r7, #2
     d08:	881b      	ldrh	r3, [r3, #0]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d101      	bne.n	d12 <spi_transceive_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
     d0e:	2317      	movs	r3, #23
     d10:	e018      	b.n	d44 <spi_transceive_buffer_job+0x50>
	}

	if (!(module->receiver_enabled)) {
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	79db      	ldrb	r3, [r3, #7]
     d16:	2201      	movs	r2, #1
     d18:	4053      	eors	r3, r2
     d1a:	b2db      	uxtb	r3, r3
     d1c:	2b00      	cmp	r3, #0
     d1e:	d001      	beq.n	d24 <spi_transceive_buffer_job+0x30>
		return STATUS_ERR_DENIED;
     d20:	231c      	movs	r3, #28
     d22:	e00f      	b.n	d44 <spi_transceive_buffer_job+0x50>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	2230      	movs	r2, #48	; 0x30
     d28:	5c9b      	ldrb	r3, [r3, r2]
     d2a:	b2db      	uxtb	r3, r3
     d2c:	2b05      	cmp	r3, #5
     d2e:	d101      	bne.n	d34 <spi_transceive_buffer_job+0x40>
		return STATUS_BUSY;
     d30:	2305      	movs	r3, #5
     d32:	e007      	b.n	d44 <spi_transceive_buffer_job+0x50>
	}

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
     d34:	68f8      	ldr	r0, [r7, #12]
     d36:	68b9      	ldr	r1, [r7, #8]
     d38:	687a      	ldr	r2, [r7, #4]
     d3a:	1cbb      	adds	r3, r7, #2
     d3c:	881b      	ldrh	r3, [r3, #0]
     d3e:	4c03      	ldr	r4, [pc, #12]	; (d4c <spi_transceive_buffer_job+0x58>)
     d40:	47a0      	blx	r4

	return STATUS_OK;
     d42:	2300      	movs	r3, #0
}
     d44:	1c18      	adds	r0, r3, #0
     d46:	46bd      	mov	sp, r7
     d48:	b005      	add	sp, #20
     d4a:	bd90      	pop	{r4, r7, pc}
     d4c:	00000c49 	.word	0x00000c49

00000d50 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
     d50:	b580      	push	{r7, lr}
     d52:	b084      	sub	sp, #16
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	b2da      	uxtb	r2, r3
     d66:	230e      	movs	r3, #14
     d68:	18fb      	adds	r3, r7, r3
     d6a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     d70:	1c5a      	adds	r2, r3, #1
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	625a      	str	r2, [r3, #36]	; 0x24

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	799b      	ldrb	r3, [r3, #6]
     d7a:	2b01      	cmp	r3, #1
     d7c:	d112      	bne.n	da4 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	b2db      	uxtb	r3, r3
     d86:	021b      	lsls	r3, r3, #8
     d88:	b29a      	uxth	r2, r3
     d8a:	230e      	movs	r3, #14
     d8c:	18fb      	adds	r3, r7, r3
     d8e:	881b      	ldrh	r3, [r3, #0]
     d90:	4313      	orrs	r3, r2
     d92:	b29a      	uxth	r2, r3
     d94:	230e      	movs	r3, #14
     d96:	18fb      	adds	r3, r7, r3
     d98:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     d9e:	1c5a      	adds	r2, r3, #1
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     da4:	230e      	movs	r3, #14
     da6:	18fb      	adds	r3, r7, r3
     da8:	881b      	ldrh	r3, [r3, #0]
     daa:	05db      	lsls	r3, r3, #23
     dac:	0ddb      	lsrs	r3, r3, #23
     dae:	b29a      	uxth	r2, r3
     db0:	68bb      	ldr	r3, [r7, #8]
     db2:	831a      	strh	r2, [r3, #24]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     db8:	b29b      	uxth	r3, r3
     dba:	3b01      	subs	r3, #1
     dbc:	b29a      	uxth	r2, r3
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
}
     dc2:	46bd      	mov	sp, r7
     dc4:	b004      	add	sp, #16
     dc6:	bd80      	pop	{r7, pc}

00000dc8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
     dc8:	b580      	push	{r7, lr}
     dca:	b084      	sub	sp, #16
     dcc:	af00      	add	r7, sp, #0
     dce:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     dd6:	4b07      	ldr	r3, [pc, #28]	; (df4 <_spi_write_dummy+0x2c>)
     dd8:	881a      	ldrh	r2, [r3, #0]
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	831a      	strh	r2, [r3, #24]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
     de2:	b29b      	uxth	r3, r3
     de4:	3b01      	subs	r3, #1
     de6:	b29a      	uxth	r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
     dec:	46bd      	mov	sp, r7
     dee:	b004      	add	sp, #16
     df0:	bd80      	pop	{r7, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	200000b8 	.word	0x200000b8

00000df8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
     df8:	b580      	push	{r7, lr}
     dfa:	b084      	sub	sp, #16
     dfc:	af00      	add	r7, sp, #0
     dfe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
     e06:	230a      	movs	r3, #10
     e08:	18fb      	adds	r3, r7, r3
     e0a:	2200      	movs	r2, #0
     e0c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     e0e:	230a      	movs	r3, #10
     e10:	18fb      	adds	r3, r7, r3
     e12:	68fa      	ldr	r2, [r7, #12]
     e14:	8b12      	ldrh	r2, [r2, #24]
     e16:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
     e1c:	b29b      	uxth	r3, r3
     e1e:	3b01      	subs	r3, #1
     e20:	b29a      	uxth	r2, r3
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
     e26:	46bd      	mov	sp, r7
     e28:	b004      	add	sp, #16
     e2a:	bd80      	pop	{r7, pc}

00000e2c <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	b084      	sub	sp, #16
     e30:	af00      	add	r7, sp, #0
     e32:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	8b1b      	ldrh	r3, [r3, #24]
     e3e:	b29a      	uxth	r2, r3
     e40:	230a      	movs	r3, #10
     e42:	18fb      	adds	r3, r7, r3
     e44:	05d2      	lsls	r2, r2, #23
     e46:	0dd2      	lsrs	r2, r2, #23
     e48:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	6a1b      	ldr	r3, [r3, #32]
     e4e:	220a      	movs	r2, #10
     e50:	18ba      	adds	r2, r7, r2
     e52:	8812      	ldrh	r2, [r2, #0]
     e54:	b2d2      	uxtb	r2, r2
     e56:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	6a1b      	ldr	r3, [r3, #32]
     e5c:	1c5a      	adds	r2, r3, #1
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	621a      	str	r2, [r3, #32]

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	799b      	ldrb	r3, [r3, #6]
     e66:	2b01      	cmp	r3, #1
     e68:	d10d      	bne.n	e86 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	6a1b      	ldr	r3, [r3, #32]
     e6e:	220a      	movs	r2, #10
     e70:	18ba      	adds	r2, r7, r2
     e72:	8812      	ldrh	r2, [r2, #0]
     e74:	0a12      	lsrs	r2, r2, #8
     e76:	b292      	uxth	r2, r2
     e78:	b2d2      	uxtb	r2, r2
     e7a:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	6a1b      	ldr	r3, [r3, #32]
     e80:	1c5a      	adds	r2, r3, #1
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	621a      	str	r2, [r3, #32]
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     e8a:	b29b      	uxth	r3, r3
     e8c:	3b01      	subs	r3, #1
     e8e:	b29a      	uxth	r2, r3
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	851a      	strh	r2, [r3, #40]	; 0x28
}
     e94:	46bd      	mov	sp, r7
     e96:	b004      	add	sp, #16
     e98:	bd80      	pop	{r7, pc}
     e9a:	46c0      	nop			; (mov r8, r8)

00000e9c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b086      	sub	sp, #24
     ea0:	af00      	add	r7, sp, #0
     ea2:	1c02      	adds	r2, r0, #0
     ea4:	1dfb      	adds	r3, r7, #7
     ea6:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
     ea8:	1dfb      	adds	r3, r7, #7
     eaa:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
     eac:	4ba2      	ldr	r3, [pc, #648]	; (1138 <_spi_interrupt_handler+0x29c>)
     eae:	0092      	lsls	r2, r2, #2
     eb0:	58d3      	ldr	r3, [r2, r3]
     eb2:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     eb4:	697b      	ldr	r3, [r7, #20]
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     eba:	697b      	ldr	r3, [r7, #20]
     ebc:	222f      	movs	r2, #47	; 0x2f
     ebe:	5c9a      	ldrb	r2, [r3, r2]
     ec0:	697b      	ldr	r3, [r7, #20]
     ec2:	212e      	movs	r1, #46	; 0x2e
     ec4:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     ec6:	230f      	movs	r3, #15
     ec8:	18fb      	adds	r3, r7, r3
     eca:	400a      	ands	r2, r1
     ecc:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     ece:	693b      	ldr	r3, [r7, #16]
     ed0:	7b9b      	ldrb	r3, [r3, #14]
     ed2:	b2da      	uxtb	r2, r3
     ed4:	230c      	movs	r3, #12
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
     eda:	693b      	ldr	r3, [r7, #16]
     edc:	7b5b      	ldrb	r3, [r3, #13]
     ede:	b2db      	uxtb	r3, r3
     ee0:	b29a      	uxth	r2, r3
     ee2:	230c      	movs	r3, #12
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	210c      	movs	r1, #12
     ee8:	1879      	adds	r1, r7, r1
     eea:	8809      	ldrh	r1, [r1, #0]
     eec:	400a      	ands	r2, r1
     eee:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     ef0:	230c      	movs	r3, #12
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	881b      	ldrh	r3, [r3, #0]
     ef6:	2201      	movs	r2, #1
     ef8:	4013      	ands	r3, r2
     efa:	d041      	beq.n	f80 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     efc:	697b      	ldr	r3, [r7, #20]
     efe:	795b      	ldrb	r3, [r3, #5]
     f00:	2b01      	cmp	r3, #1
     f02:	d110      	bne.n	f26 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
     f04:	697b      	ldr	r3, [r7, #20]
     f06:	7a1b      	ldrb	r3, [r3, #8]
     f08:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f0a:	2b00      	cmp	r3, #0
     f0c:	d10b      	bne.n	f26 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
     f0e:	697b      	ldr	r3, [r7, #20]
     f10:	1c18      	adds	r0, r3, #0
     f12:	4b8a      	ldr	r3, [pc, #552]	; (113c <_spi_interrupt_handler+0x2a0>)
     f14:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
     f16:	697b      	ldr	r3, [r7, #20]
     f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
     f1a:	b29b      	uxth	r3, r3
     f1c:	2b00      	cmp	r3, #0
     f1e:	d102      	bne.n	f26 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f20:	693b      	ldr	r3, [r7, #16]
     f22:	2201      	movs	r2, #1
     f24:	731a      	strb	r2, [r3, #12]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     f26:	697b      	ldr	r3, [r7, #20]
     f28:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     f2a:	2b01      	cmp	r3, #1
     f2c:	d104      	bne.n	f38 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     f2e:	697b      	ldr	r3, [r7, #20]
     f30:	7a1b      	ldrb	r3, [r3, #8]
     f32:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     f34:	2b00      	cmp	r3, #0
     f36:	d108      	bne.n	f4a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f38:	697b      	ldr	r3, [r7, #20]
     f3a:	795b      	ldrb	r3, [r3, #5]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d11f      	bne.n	f80 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
     f40:	697b      	ldr	r3, [r7, #20]
     f42:	7a1b      	ldrb	r3, [r3, #8]
     f44:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f46:	2b00      	cmp	r3, #0
     f48:	d01a      	beq.n	f80 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
     f4a:	697b      	ldr	r3, [r7, #20]
     f4c:	1c18      	adds	r0, r3, #0
     f4e:	4b7c      	ldr	r3, [pc, #496]	; (1140 <_spi_interrupt_handler+0x2a4>)
     f50:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
     f52:	697b      	ldr	r3, [r7, #20]
     f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     f56:	b29b      	uxth	r3, r3
     f58:	2b00      	cmp	r3, #0
     f5a:	d111      	bne.n	f80 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f5c:	693b      	ldr	r3, [r7, #16]
     f5e:	2201      	movs	r2, #1
     f60:	731a      	strb	r2, [r3, #12]

				if (module->dir == SPI_DIRECTION_WRITE &&
     f62:	697b      	ldr	r3, [r7, #20]
     f64:	7a1b      	ldrb	r3, [r3, #8]
     f66:	b2db      	uxtb	r3, r3
     f68:	2b01      	cmp	r3, #1
     f6a:	d109      	bne.n	f80 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
     f6c:	697b      	ldr	r3, [r7, #20]
     f6e:	79db      	ldrb	r3, [r3, #7]
     f70:	2201      	movs	r2, #1
     f72:	4053      	eors	r3, r2
     f74:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
     f76:	2b00      	cmp	r3, #0
     f78:	d002      	beq.n	f80 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f7a:	693b      	ldr	r3, [r7, #16]
     f7c:	2202      	movs	r2, #2
     f7e:	735a      	strb	r2, [r3, #13]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     f80:	230c      	movs	r3, #12
     f82:	18fb      	adds	r3, r7, r3
     f84:	881b      	ldrh	r3, [r3, #0]
     f86:	2204      	movs	r2, #4
     f88:	4013      	ands	r3, r2
     f8a:	d100      	bne.n	f8e <_spi_interrupt_handler+0xf2>
     f8c:	e083      	b.n	1096 <_spi_interrupt_handler+0x1fa>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f8e:	693b      	ldr	r3, [r7, #16]
     f90:	8a1b      	ldrh	r3, [r3, #16]
     f92:	b29b      	uxth	r3, r3
     f94:	1c1a      	adds	r2, r3, #0
     f96:	2304      	movs	r3, #4
     f98:	4013      	ands	r3, r2
     f9a:	d027      	beq.n	fec <_spi_interrupt_handler+0x150>
			if (module->dir != SPI_DIRECTION_WRITE) {
     f9c:	697b      	ldr	r3, [r7, #20]
     f9e:	7a1b      	ldrb	r3, [r3, #8]
     fa0:	b2db      	uxtb	r3, r3
     fa2:	2b01      	cmp	r3, #1
     fa4:	d014      	beq.n	fd0 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     fa6:	697b      	ldr	r3, [r7, #20]
     fa8:	2230      	movs	r2, #48	; 0x30
     faa:	211e      	movs	r1, #30
     fac:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     fae:	697b      	ldr	r3, [r7, #20]
     fb0:	2203      	movs	r2, #3
     fb2:	721a      	strb	r2, [r3, #8]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     fb4:	693b      	ldr	r3, [r7, #16]
     fb6:	2205      	movs	r2, #5
     fb8:	731a      	strb	r2, [r3, #12]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     fba:	230f      	movs	r3, #15
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	2208      	movs	r2, #8
     fc2:	4013      	ands	r3, r2
     fc4:	d004      	beq.n	fd0 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     fc6:	697b      	ldr	r3, [r7, #20]
     fc8:	699b      	ldr	r3, [r3, #24]
     fca:	697a      	ldr	r2, [r7, #20]
     fcc:	1c10      	adds	r0, r2, #0
     fce:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     fd0:	230a      	movs	r3, #10
     fd2:	18fb      	adds	r3, r7, r3
     fd4:	693a      	ldr	r2, [r7, #16]
     fd6:	8b12      	ldrh	r2, [r2, #24]
     fd8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     fda:	693b      	ldr	r3, [r7, #16]
     fdc:	8a1b      	ldrh	r3, [r3, #16]
     fde:	b29b      	uxth	r3, r3
     fe0:	2204      	movs	r2, #4
     fe2:	4313      	orrs	r3, r2
     fe4:	b29a      	uxth	r2, r3
     fe6:	693b      	ldr	r3, [r7, #16]
     fe8:	821a      	strh	r2, [r3, #16]
     fea:	e054      	b.n	1096 <_spi_interrupt_handler+0x1fa>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     fec:	697b      	ldr	r3, [r7, #20]
     fee:	7a1b      	ldrb	r3, [r3, #8]
     ff0:	b2db      	uxtb	r3, r3
     ff2:	2b01      	cmp	r3, #1
     ff4:	d11e      	bne.n	1034 <_spi_interrupt_handler+0x198>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
     ff6:	697b      	ldr	r3, [r7, #20]
     ff8:	1c18      	adds	r0, r3, #0
     ffa:	4b52      	ldr	r3, [pc, #328]	; (1144 <_spi_interrupt_handler+0x2a8>)
     ffc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
     ffe:	697b      	ldr	r3, [r7, #20]
    1000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    1002:	b29b      	uxth	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d146      	bne.n	1096 <_spi_interrupt_handler+0x1fa>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1008:	693b      	ldr	r3, [r7, #16]
    100a:	2204      	movs	r2, #4
    100c:	731a      	strb	r2, [r3, #12]
					module->status = STATUS_OK;
    100e:	697b      	ldr	r3, [r7, #20]
    1010:	2230      	movs	r2, #48	; 0x30
    1012:	2100      	movs	r1, #0
    1014:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1016:	697b      	ldr	r3, [r7, #20]
    1018:	2203      	movs	r2, #3
    101a:	721a      	strb	r2, [r3, #8]
					/* Run callback if registered and enabled */
					if (callback_mask &
    101c:	230f      	movs	r3, #15
    101e:	18fb      	adds	r3, r7, r3
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2201      	movs	r2, #1
    1024:	4013      	ands	r3, r2
    1026:	d036      	beq.n	1096 <_spi_interrupt_handler+0x1fa>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1028:	697b      	ldr	r3, [r7, #20]
    102a:	68db      	ldr	r3, [r3, #12]
    102c:	697a      	ldr	r2, [r7, #20]
    102e:	1c10      	adds	r0, r2, #0
    1030:	4798      	blx	r3
    1032:	e030      	b.n	1096 <_spi_interrupt_handler+0x1fa>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    1034:	697b      	ldr	r3, [r7, #20]
    1036:	1c18      	adds	r0, r3, #0
    1038:	4b43      	ldr	r3, [pc, #268]	; (1148 <_spi_interrupt_handler+0x2ac>)
    103a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    103c:	697b      	ldr	r3, [r7, #20]
    103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1040:	b29b      	uxth	r3, r3
    1042:	2b00      	cmp	r3, #0
    1044:	d127      	bne.n	1096 <_spi_interrupt_handler+0x1fa>
					module->status = STATUS_OK;
    1046:	697b      	ldr	r3, [r7, #20]
    1048:	2230      	movs	r2, #48	; 0x30
    104a:	2100      	movs	r1, #0
    104c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    104e:	693b      	ldr	r3, [r7, #16]
    1050:	2204      	movs	r2, #4
    1052:	731a      	strb	r2, [r3, #12]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1054:	697b      	ldr	r3, [r7, #20]
    1056:	7a1b      	ldrb	r3, [r3, #8]
    1058:	b2db      	uxtb	r3, r3
    105a:	2b02      	cmp	r3, #2
    105c:	d10b      	bne.n	1076 <_spi_interrupt_handler+0x1da>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    105e:	230f      	movs	r3, #15
    1060:	18fb      	adds	r3, r7, r3
    1062:	781b      	ldrb	r3, [r3, #0]
    1064:	2204      	movs	r2, #4
    1066:	4013      	ands	r3, r2
    1068:	d015      	beq.n	1096 <_spi_interrupt_handler+0x1fa>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    106a:	697b      	ldr	r3, [r7, #20]
    106c:	695b      	ldr	r3, [r3, #20]
    106e:	697a      	ldr	r2, [r7, #20]
    1070:	1c10      	adds	r0, r2, #0
    1072:	4798      	blx	r3
    1074:	e00f      	b.n	1096 <_spi_interrupt_handler+0x1fa>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1076:	697b      	ldr	r3, [r7, #20]
    1078:	7a1b      	ldrb	r3, [r3, #8]
    107a:	b2db      	uxtb	r3, r3
    107c:	2b00      	cmp	r3, #0
    107e:	d10a      	bne.n	1096 <_spi_interrupt_handler+0x1fa>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1080:	230f      	movs	r3, #15
    1082:	18fb      	adds	r3, r7, r3
    1084:	781b      	ldrb	r3, [r3, #0]
    1086:	2202      	movs	r2, #2
    1088:	4013      	ands	r3, r2
    108a:	d004      	beq.n	1096 <_spi_interrupt_handler+0x1fa>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    108c:	697b      	ldr	r3, [r7, #20]
    108e:	691b      	ldr	r3, [r3, #16]
    1090:	697a      	ldr	r2, [r7, #20]
    1092:	1c10      	adds	r0, r2, #0
    1094:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1096:	230c      	movs	r3, #12
    1098:	18fb      	adds	r3, r7, r3
    109a:	881b      	ldrh	r3, [r3, #0]
    109c:	2202      	movs	r2, #2
    109e:	4013      	ands	r3, r2
    10a0:	d046      	beq.n	1130 <_spi_interrupt_handler+0x294>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    10a2:	697b      	ldr	r3, [r7, #20]
    10a4:	795b      	ldrb	r3, [r3, #5]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d11d      	bne.n	10e6 <_spi_interrupt_handler+0x24a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    10aa:	693b      	ldr	r3, [r7, #16]
    10ac:	2207      	movs	r2, #7
    10ae:	731a      	strb	r2, [r3, #12]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    10b0:	693b      	ldr	r3, [r7, #16]
    10b2:	2202      	movs	r2, #2
    10b4:	739a      	strb	r2, [r3, #14]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    10b6:	697b      	ldr	r3, [r7, #20]
    10b8:	2203      	movs	r2, #3
    10ba:	721a      	strb	r2, [r3, #8]
			module->remaining_tx_buffer_length = 0;
    10bc:	697b      	ldr	r3, [r7, #20]
    10be:	2200      	movs	r2, #0
    10c0:	859a      	strh	r2, [r3, #44]	; 0x2c
			module->remaining_rx_buffer_length = 0;
    10c2:	697b      	ldr	r3, [r7, #20]
    10c4:	2200      	movs	r2, #0
    10c6:	851a      	strh	r2, [r3, #40]	; 0x28
			module->status = STATUS_OK;
    10c8:	697b      	ldr	r3, [r7, #20]
    10ca:	2230      	movs	r2, #48	; 0x30
    10cc:	2100      	movs	r1, #0
    10ce:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    10d0:	230f      	movs	r3, #15
    10d2:	18fb      	adds	r3, r7, r3
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2210      	movs	r2, #16
    10d8:	4013      	ands	r3, r2
    10da:	d004      	beq.n	10e6 <_spi_interrupt_handler+0x24a>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    10dc:	697b      	ldr	r3, [r7, #20]
    10de:	69db      	ldr	r3, [r3, #28]
    10e0:	697a      	ldr	r2, [r7, #20]
    10e2:	1c10      	adds	r0, r2, #0
    10e4:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    10e6:	697b      	ldr	r3, [r7, #20]
    10e8:	795b      	ldrb	r3, [r3, #5]
    10ea:	2b01      	cmp	r3, #1
    10ec:	d120      	bne.n	1130 <_spi_interrupt_handler+0x294>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    10ee:	697b      	ldr	r3, [r7, #20]
    10f0:	7a1b      	ldrb	r3, [r3, #8]
    10f2:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    10f4:	2b01      	cmp	r3, #1
    10f6:	d11b      	bne.n	1130 <_spi_interrupt_handler+0x294>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    10f8:	697b      	ldr	r3, [r7, #20]
    10fa:	79db      	ldrb	r3, [r3, #7]
    10fc:	2201      	movs	r2, #1
    10fe:	4053      	eors	r3, r2
    1100:	b2db      	uxtb	r3, r3
    1102:	2b00      	cmp	r3, #0
    1104:	d014      	beq.n	1130 <_spi_interrupt_handler+0x294>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1106:	693b      	ldr	r3, [r7, #16]
    1108:	2202      	movs	r2, #2
    110a:	731a      	strb	r2, [r3, #12]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    110c:	697b      	ldr	r3, [r7, #20]
    110e:	2203      	movs	r2, #3
    1110:	721a      	strb	r2, [r3, #8]
			module->status = STATUS_OK;
    1112:	697b      	ldr	r3, [r7, #20]
    1114:	2230      	movs	r2, #48	; 0x30
    1116:	2100      	movs	r1, #0
    1118:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    111a:	230f      	movs	r3, #15
    111c:	18fb      	adds	r3, r7, r3
    111e:	781b      	ldrb	r3, [r3, #0]
    1120:	2201      	movs	r2, #1
    1122:	4013      	ands	r3, r2
    1124:	d004      	beq.n	1130 <_spi_interrupt_handler+0x294>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1126:	697b      	ldr	r3, [r7, #20]
    1128:	68db      	ldr	r3, [r3, #12]
    112a:	697a      	ldr	r2, [r7, #20]
    112c:	1c10      	adds	r0, r2, #0
    112e:	4798      	blx	r3
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1130:	46bd      	mov	sp, r7
    1132:	b006      	add	sp, #24
    1134:	bd80      	pop	{r7, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	200000a0 	.word	0x200000a0
    113c:	00000dc9 	.word	0x00000dc9
    1140:	00000d51 	.word	0x00000d51
    1144:	00000df9 	.word	0x00000df9
    1148:	00000e2d 	.word	0x00000e2d

0000114c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    114c:	b580      	push	{r7, lr}
    114e:	b082      	sub	sp, #8
    1150:	af00      	add	r7, sp, #0
    1152:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	2201      	movs	r2, #1
    1158:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	2200      	movs	r2, #0
    115e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	2206      	movs	r2, #6
    1164:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1166:	687b      	ldr	r3, [r7, #4]
    1168:	2200      	movs	r2, #0
    116a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	2200      	movs	r2, #0
    1170:	725a      	strb	r2, [r3, #9]
}
    1172:	46bd      	mov	sp, r7
    1174:	b002      	add	sp, #8
    1176:	bd80      	pop	{r7, pc}

00001178 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    1178:	b580      	push	{r7, lr}
    117a:	b082      	sub	sp, #8
    117c:	af00      	add	r7, sp, #0
    117e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1180:	687b      	ldr	r3, [r7, #4]
    1182:	2200      	movs	r2, #0
    1184:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	2204      	movs	r2, #4
    118a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	2200      	movs	r2, #0
    1190:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	0212      	lsls	r2, r2, #8
    1198:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	2200      	movs	r2, #0
    119e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    11a0:	687b      	ldr	r3, [r7, #4]
    11a2:	2201      	movs	r2, #1
    11a4:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    11a6:	687b      	ldr	r3, [r7, #4]
    11a8:	2200      	movs	r2, #0
    11aa:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	2201      	movs	r2, #1
    11b0:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	2200      	movs	r2, #0
    11b6:	739a      	strb	r2, [r3, #14]
}
    11b8:	46bd      	mov	sp, r7
    11ba:	b002      	add	sp, #8
    11bc:	bd80      	pop	{r7, pc}
    11be:	46c0      	nop			; (mov r8, r8)

000011c0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b082      	sub	sp, #8
    11c4:	af00      	add	r7, sp, #0
    11c6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	2203      	movs	r2, #3
    11cc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    11ce:	687b      	ldr	r3, [r7, #4]
    11d0:	2200      	movs	r2, #0
    11d2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    11d4:	687b      	ldr	r3, [r7, #4]
    11d6:	2201      	movs	r2, #1
    11d8:	709a      	strb	r2, [r3, #2]
}
    11da:	46bd      	mov	sp, r7
    11dc:	b002      	add	sp, #8
    11de:	bd80      	pop	{r7, pc}

000011e0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	1c02      	adds	r2, r0, #0
    11e8:	1dfb      	adds	r3, r7, #7
    11ea:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    11ec:	4a03      	ldr	r2, [pc, #12]	; (11fc <system_cpu_clock_set_divider+0x1c>)
    11ee:	1dfb      	adds	r3, r7, #7
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	7213      	strb	r3, [r2, #8]
}
    11f4:	46bd      	mov	sp, r7
    11f6:	b002      	add	sp, #8
    11f8:	bd80      	pop	{r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	40000400 	.word	0x40000400

00001200 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    1200:	b580      	push	{r7, lr}
    1202:	b082      	sub	sp, #8
    1204:	af00      	add	r7, sp, #0
    1206:	1c02      	adds	r2, r0, #0
    1208:	1dfb      	adds	r3, r7, #7
    120a:	701a      	strb	r2, [r3, #0]
    120c:	1dbb      	adds	r3, r7, #6
    120e:	1c0a      	adds	r2, r1, #0
    1210:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1212:	1dfb      	adds	r3, r7, #7
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	2b01      	cmp	r3, #1
    1218:	d008      	beq.n	122c <system_apb_clock_set_divider+0x2c>
    121a:	2b02      	cmp	r3, #2
    121c:	d00b      	beq.n	1236 <system_apb_clock_set_divider+0x36>
    121e:	2b00      	cmp	r3, #0
    1220:	d10e      	bne.n	1240 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1222:	4a0b      	ldr	r2, [pc, #44]	; (1250 <system_apb_clock_set_divider+0x50>)
    1224:	1dbb      	adds	r3, r7, #6
    1226:	781b      	ldrb	r3, [r3, #0]
    1228:	7253      	strb	r3, [r2, #9]
			break;
    122a:	e00b      	b.n	1244 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    122c:	4a08      	ldr	r2, [pc, #32]	; (1250 <system_apb_clock_set_divider+0x50>)
    122e:	1dbb      	adds	r3, r7, #6
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	7293      	strb	r3, [r2, #10]
			break;
    1234:	e006      	b.n	1244 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1236:	4a06      	ldr	r2, [pc, #24]	; (1250 <system_apb_clock_set_divider+0x50>)
    1238:	1dbb      	adds	r3, r7, #6
    123a:	781b      	ldrb	r3, [r3, #0]
    123c:	72d3      	strb	r3, [r2, #11]
			break;
    123e:	e001      	b.n	1244 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1240:	2317      	movs	r3, #23
    1242:	e000      	b.n	1246 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1244:	2300      	movs	r3, #0
}
    1246:	1c18      	adds	r0, r3, #0
    1248:	46bd      	mov	sp, r7
    124a:	b002      	add	sp, #8
    124c:	bd80      	pop	{r7, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	40000400 	.word	0x40000400

00001254 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1254:	b580      	push	{r7, lr}
    1256:	b082      	sub	sp, #8
    1258:	af00      	add	r7, sp, #0
    125a:	1c02      	adds	r2, r0, #0
    125c:	1dfb      	adds	r3, r7, #7
    125e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1260:	4b08      	ldr	r3, [pc, #32]	; (1284 <system_flash_set_waitstates+0x30>)
    1262:	1dfa      	adds	r2, r7, #7
    1264:	7812      	ldrb	r2, [r2, #0]
    1266:	210f      	movs	r1, #15
    1268:	400a      	ands	r2, r1
    126a:	b2d2      	uxtb	r2, r2
    126c:	210f      	movs	r1, #15
    126e:	400a      	ands	r2, r1
    1270:	0052      	lsls	r2, r2, #1
    1272:	6859      	ldr	r1, [r3, #4]
    1274:	201e      	movs	r0, #30
    1276:	4381      	bics	r1, r0
    1278:	430a      	orrs	r2, r1
    127a:	605a      	str	r2, [r3, #4]
}
    127c:	46bd      	mov	sp, r7
    127e:	b002      	add	sp, #8
    1280:	bd80      	pop	{r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	41004000 	.word	0x41004000

00001288 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    128c:	46c0      	nop			; (mov r8, r8)
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <_system_dfll_wait_for_sync+0x14>)
    1290:	68db      	ldr	r3, [r3, #12]
    1292:	2210      	movs	r2, #16
    1294:	4013      	ands	r3, r2
    1296:	d0fa      	beq.n	128e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1298:	46bd      	mov	sp, r7
    129a:	bd80      	pop	{r7, pc}
    129c:	40000800 	.word	0x40000800

000012a0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    12a4:	4a0c      	ldr	r2, [pc, #48]	; (12d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    12a6:	4b0d      	ldr	r3, [pc, #52]	; (12dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	b29b      	uxth	r3, r3
    12ac:	2180      	movs	r1, #128	; 0x80
    12ae:	438b      	bics	r3, r1
    12b0:	b29b      	uxth	r3, r3
    12b2:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    12b4:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    12b6:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    12b8:	4a07      	ldr	r2, [pc, #28]	; (12d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    12ba:	4b08      	ldr	r3, [pc, #32]	; (12dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    12bc:	689b      	ldr	r3, [r3, #8]
    12be:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    12c0:	4a05      	ldr	r2, [pc, #20]	; (12d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    12c4:	685b      	ldr	r3, [r3, #4]
    12c6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12c8:	4a03      	ldr	r2, [pc, #12]	; (12d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	b29b      	uxth	r3, r3
    12d0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    12d2:	46bd      	mov	sp, r7
    12d4:	bd80      	pop	{r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	40000800 	.word	0x40000800
    12dc:	20000074 	.word	0x20000074
    12e0:	00001289 	.word	0x00001289

000012e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b082      	sub	sp, #8
    12e8:	af00      	add	r7, sp, #0
    12ea:	1c02      	adds	r2, r0, #0
    12ec:	1dfb      	adds	r3, r7, #7
    12ee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    12f0:	1dfb      	adds	r3, r7, #7
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	2b07      	cmp	r3, #7
    12f6:	d835      	bhi.n	1364 <system_clock_source_get_hz+0x80>
    12f8:	009a      	lsls	r2, r3, #2
    12fa:	4b1d      	ldr	r3, [pc, #116]	; (1370 <system_clock_source_get_hz+0x8c>)
    12fc:	18d3      	adds	r3, r2, r3
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1302:	4b1c      	ldr	r3, [pc, #112]	; (1374 <system_clock_source_get_hz+0x90>)
    1304:	68db      	ldr	r3, [r3, #12]
    1306:	e02e      	b.n	1366 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1308:	4b1b      	ldr	r3, [pc, #108]	; (1378 <system_clock_source_get_hz+0x94>)
    130a:	6a1b      	ldr	r3, [r3, #32]
    130c:	0a1b      	lsrs	r3, r3, #8
    130e:	1c1a      	adds	r2, r3, #0
    1310:	2303      	movs	r3, #3
    1312:	4013      	ands	r3, r2
    1314:	b2db      	uxtb	r3, r3
    1316:	1c1a      	adds	r2, r3, #0
    1318:	4b18      	ldr	r3, [pc, #96]	; (137c <system_clock_source_get_hz+0x98>)
    131a:	40d3      	lsrs	r3, r2
    131c:	e023      	b.n	1366 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    131e:	2380      	movs	r3, #128	; 0x80
    1320:	021b      	lsls	r3, r3, #8
    1322:	e020      	b.n	1366 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	021b      	lsls	r3, r3, #8
    1328:	e01d      	b.n	1366 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    132a:	4b12      	ldr	r3, [pc, #72]	; (1374 <system_clock_source_get_hz+0x90>)
    132c:	691b      	ldr	r3, [r3, #16]
    132e:	e01a      	b.n	1366 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1330:	4b10      	ldr	r3, [pc, #64]	; (1374 <system_clock_source_get_hz+0x90>)
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	2202      	movs	r2, #2
    1336:	4013      	ands	r3, r2
    1338:	d101      	bne.n	133e <system_clock_source_get_hz+0x5a>
			return 0;
    133a:	2300      	movs	r3, #0
    133c:	e013      	b.n	1366 <system_clock_source_get_hz+0x82>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    133e:	4b10      	ldr	r3, [pc, #64]	; (1380 <system_clock_source_get_hz+0x9c>)
    1340:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1342:	4b0c      	ldr	r3, [pc, #48]	; (1374 <system_clock_source_get_hz+0x90>)
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	2204      	movs	r2, #4
    1348:	4013      	ands	r3, r2
    134a:	d009      	beq.n	1360 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    134c:	2000      	movs	r0, #0
    134e:	4b0d      	ldr	r3, [pc, #52]	; (1384 <system_clock_source_get_hz+0xa0>)
    1350:	4798      	blx	r3
    1352:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    1354:	4b07      	ldr	r3, [pc, #28]	; (1374 <system_clock_source_get_hz+0x90>)
    1356:	689b      	ldr	r3, [r3, #8]
    1358:	041b      	lsls	r3, r3, #16
    135a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    135c:	4353      	muls	r3, r2
    135e:	e002      	b.n	1366 <system_clock_source_get_hz+0x82>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1360:	4b09      	ldr	r3, [pc, #36]	; (1388 <system_clock_source_get_hz+0xa4>)
    1362:	e000      	b.n	1366 <system_clock_source_get_hz+0x82>

	default:
		return 0;
    1364:	2300      	movs	r3, #0
	}
}
    1366:	1c18      	adds	r0, r3, #0
    1368:	46bd      	mov	sp, r7
    136a:	b002      	add	sp, #8
    136c:	bd80      	pop	{r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	00002e84 	.word	0x00002e84
    1374:	20000074 	.word	0x20000074
    1378:	40000800 	.word	0x40000800
    137c:	007a1200 	.word	0x007a1200
    1380:	00001289 	.word	0x00001289
    1384:	00001c45 	.word	0x00001c45
    1388:	02dc6c00 	.word	0x02dc6c00

0000138c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1394:	4b1a      	ldr	r3, [pc, #104]	; (1400 <system_clock_source_osc8m_set_config+0x74>)
    1396:	6a1b      	ldr	r3, [r3, #32]
    1398:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	1c1a      	adds	r2, r3, #0
    13a0:	2303      	movs	r3, #3
    13a2:	4013      	ands	r3, r2
    13a4:	b2da      	uxtb	r2, r3
    13a6:	230d      	movs	r3, #13
    13a8:	18fb      	adds	r3, r7, r3
    13aa:	2103      	movs	r1, #3
    13ac:	400a      	ands	r2, r1
    13ae:	1c10      	adds	r0, r2, #0
    13b0:	781a      	ldrb	r2, [r3, #0]
    13b2:	2103      	movs	r1, #3
    13b4:	438a      	bics	r2, r1
    13b6:	1c11      	adds	r1, r2, #0
    13b8:	1c02      	adds	r2, r0, #0
    13ba:	430a      	orrs	r2, r1
    13bc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    13be:	687b      	ldr	r3, [r7, #4]
    13c0:	789a      	ldrb	r2, [r3, #2]
    13c2:	230c      	movs	r3, #12
    13c4:	18fb      	adds	r3, r7, r3
    13c6:	01d0      	lsls	r0, r2, #7
    13c8:	781a      	ldrb	r2, [r3, #0]
    13ca:	217f      	movs	r1, #127	; 0x7f
    13cc:	400a      	ands	r2, r1
    13ce:	1c11      	adds	r1, r2, #0
    13d0:	1c02      	adds	r2, r0, #0
    13d2:	430a      	orrs	r2, r1
    13d4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	785a      	ldrb	r2, [r3, #1]
    13da:	230c      	movs	r3, #12
    13dc:	18fb      	adds	r3, r7, r3
    13de:	2101      	movs	r1, #1
    13e0:	400a      	ands	r2, r1
    13e2:	0190      	lsls	r0, r2, #6
    13e4:	781a      	ldrb	r2, [r3, #0]
    13e6:	2140      	movs	r1, #64	; 0x40
    13e8:	438a      	bics	r2, r1
    13ea:	1c11      	adds	r1, r2, #0
    13ec:	1c02      	adds	r2, r0, #0
    13ee:	430a      	orrs	r2, r1
    13f0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    13f2:	4b03      	ldr	r3, [pc, #12]	; (1400 <system_clock_source_osc8m_set_config+0x74>)
    13f4:	68fa      	ldr	r2, [r7, #12]
    13f6:	621a      	str	r2, [r3, #32]
}
    13f8:	46bd      	mov	sp, r7
    13fa:	b004      	add	sp, #16
    13fc:	bd80      	pop	{r7, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	40000800 	.word	0x40000800

00001404 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1404:	b580      	push	{r7, lr}
    1406:	b084      	sub	sp, #16
    1408:	af00      	add	r7, sp, #0
    140a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    140c:	4a42      	ldr	r2, [pc, #264]	; (1518 <system_clock_source_xosc32k_set_config+0x114>)
    140e:	230c      	movs	r3, #12
    1410:	18fb      	adds	r3, r7, r3
    1412:	8a92      	ldrh	r2, [r2, #20]
    1414:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	785b      	ldrb	r3, [r3, #1]
    141a:	1c1a      	adds	r2, r3, #0
    141c:	2307      	movs	r3, #7
    141e:	4013      	ands	r3, r2
    1420:	b2da      	uxtb	r2, r3
    1422:	230c      	movs	r3, #12
    1424:	18fb      	adds	r3, r7, r3
    1426:	2107      	movs	r1, #7
    1428:	400a      	ands	r2, r1
    142a:	1c10      	adds	r0, r2, #0
    142c:	785a      	ldrb	r2, [r3, #1]
    142e:	2107      	movs	r1, #7
    1430:	438a      	bics	r2, r1
    1432:	1c11      	adds	r1, r2, #0
    1434:	1c02      	adds	r2, r0, #0
    1436:	430a      	orrs	r2, r1
    1438:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	2b00      	cmp	r3, #0
    1440:	d106      	bne.n	1450 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    1442:	230c      	movs	r3, #12
    1444:	18fb      	adds	r3, r7, r3
    1446:	781a      	ldrb	r2, [r3, #0]
    1448:	2104      	movs	r1, #4
    144a:	430a      	orrs	r2, r1
    144c:	701a      	strb	r2, [r3, #0]
    144e:	e005      	b.n	145c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    1450:	230c      	movs	r3, #12
    1452:	18fb      	adds	r3, r7, r3
    1454:	781a      	ldrb	r2, [r3, #0]
    1456:	2104      	movs	r1, #4
    1458:	438a      	bics	r2, r1
    145a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	789a      	ldrb	r2, [r3, #2]
    1460:	230c      	movs	r3, #12
    1462:	18fb      	adds	r3, r7, r3
    1464:	2101      	movs	r1, #1
    1466:	400a      	ands	r2, r1
    1468:	0150      	lsls	r0, r2, #5
    146a:	781a      	ldrb	r2, [r3, #0]
    146c:	2120      	movs	r1, #32
    146e:	438a      	bics	r2, r1
    1470:	1c11      	adds	r1, r2, #0
    1472:	1c02      	adds	r2, r0, #0
    1474:	430a      	orrs	r2, r1
    1476:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	78da      	ldrb	r2, [r3, #3]
    147c:	230c      	movs	r3, #12
    147e:	18fb      	adds	r3, r7, r3
    1480:	2101      	movs	r1, #1
    1482:	400a      	ands	r2, r1
    1484:	0110      	lsls	r0, r2, #4
    1486:	781a      	ldrb	r2, [r3, #0]
    1488:	2110      	movs	r1, #16
    148a:	438a      	bics	r2, r1
    148c:	1c11      	adds	r1, r2, #0
    148e:	1c02      	adds	r2, r0, #0
    1490:	430a      	orrs	r2, r1
    1492:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	791a      	ldrb	r2, [r3, #4]
    1498:	230c      	movs	r3, #12
    149a:	18fb      	adds	r3, r7, r3
    149c:	2101      	movs	r1, #1
    149e:	400a      	ands	r2, r1
    14a0:	00d0      	lsls	r0, r2, #3
    14a2:	781a      	ldrb	r2, [r3, #0]
    14a4:	2108      	movs	r1, #8
    14a6:	438a      	bics	r2, r1
    14a8:	1c11      	adds	r1, r2, #0
    14aa:	1c02      	adds	r2, r0, #0
    14ac:	430a      	orrs	r2, r1
    14ae:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	7b5a      	ldrb	r2, [r3, #13]
    14b4:	230c      	movs	r3, #12
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	01d0      	lsls	r0, r2, #7
    14ba:	781a      	ldrb	r2, [r3, #0]
    14bc:	217f      	movs	r1, #127	; 0x7f
    14be:	400a      	ands	r2, r1
    14c0:	1c11      	adds	r1, r2, #0
    14c2:	1c02      	adds	r2, r0, #0
    14c4:	430a      	orrs	r2, r1
    14c6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	7b1a      	ldrb	r2, [r3, #12]
    14cc:	230c      	movs	r3, #12
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	2101      	movs	r1, #1
    14d2:	400a      	ands	r2, r1
    14d4:	0190      	lsls	r0, r2, #6
    14d6:	781a      	ldrb	r2, [r3, #0]
    14d8:	2140      	movs	r1, #64	; 0x40
    14da:	438a      	bics	r2, r1
    14dc:	1c11      	adds	r1, r2, #0
    14de:	1c02      	adds	r2, r0, #0
    14e0:	430a      	orrs	r2, r1
    14e2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	7b9a      	ldrb	r2, [r3, #14]
    14e8:	230c      	movs	r3, #12
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	2101      	movs	r1, #1
    14ee:	400a      	ands	r2, r1
    14f0:	0110      	lsls	r0, r2, #4
    14f2:	785a      	ldrb	r2, [r3, #1]
    14f4:	2110      	movs	r1, #16
    14f6:	438a      	bics	r2, r1
    14f8:	1c11      	adds	r1, r2, #0
    14fa:	1c02      	adds	r2, r0, #0
    14fc:	430a      	orrs	r2, r1
    14fe:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	689a      	ldr	r2, [r3, #8]
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <system_clock_source_xosc32k_set_config+0x118>)
    1506:	611a      	str	r2, [r3, #16]

	SYSCTRL->XOSC32K = temp;
    1508:	4a03      	ldr	r2, [pc, #12]	; (1518 <system_clock_source_xosc32k_set_config+0x114>)
    150a:	230c      	movs	r3, #12
    150c:	18fb      	adds	r3, r7, r3
    150e:	881b      	ldrh	r3, [r3, #0]
    1510:	8293      	strh	r3, [r2, #20]
}
    1512:	46bd      	mov	sp, r7
    1514:	b004      	add	sp, #16
    1516:	bd80      	pop	{r7, pc}
    1518:	40000800 	.word	0x40000800
    151c:	20000074 	.word	0x20000074

00001520 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1520:	b580      	push	{r7, lr}
    1522:	b082      	sub	sp, #8
    1524:	af00      	add	r7, sp, #0
    1526:	1c02      	adds	r2, r0, #0
    1528:	1dfb      	adds	r3, r7, #7
    152a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    152c:	1dfb      	adds	r3, r7, #7
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	2b07      	cmp	r3, #7
    1532:	d830      	bhi.n	1596 <system_clock_source_enable+0x76>
    1534:	009a      	lsls	r2, r3, #2
    1536:	4b1b      	ldr	r3, [pc, #108]	; (15a4 <system_clock_source_enable+0x84>)
    1538:	18d3      	adds	r3, r2, r3
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    153e:	4b1a      	ldr	r3, [pc, #104]	; (15a8 <system_clock_source_enable+0x88>)
    1540:	4a19      	ldr	r2, [pc, #100]	; (15a8 <system_clock_source_enable+0x88>)
    1542:	6a12      	ldr	r2, [r2, #32]
    1544:	2102      	movs	r1, #2
    1546:	430a      	orrs	r2, r1
    1548:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    154a:	2300      	movs	r3, #0
    154c:	e026      	b.n	159c <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    154e:	4b16      	ldr	r3, [pc, #88]	; (15a8 <system_clock_source_enable+0x88>)
    1550:	4a15      	ldr	r2, [pc, #84]	; (15a8 <system_clock_source_enable+0x88>)
    1552:	6992      	ldr	r2, [r2, #24]
    1554:	2102      	movs	r1, #2
    1556:	430a      	orrs	r2, r1
    1558:	619a      	str	r2, [r3, #24]
		break;
    155a:	e01e      	b.n	159a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    155c:	4a12      	ldr	r2, [pc, #72]	; (15a8 <system_clock_source_enable+0x88>)
    155e:	4b12      	ldr	r3, [pc, #72]	; (15a8 <system_clock_source_enable+0x88>)
    1560:	8a1b      	ldrh	r3, [r3, #16]
    1562:	b29b      	uxth	r3, r3
    1564:	2102      	movs	r1, #2
    1566:	430b      	orrs	r3, r1
    1568:	b29b      	uxth	r3, r3
    156a:	8213      	strh	r3, [r2, #16]
		break;
    156c:	e015      	b.n	159a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    156e:	4a0e      	ldr	r2, [pc, #56]	; (15a8 <system_clock_source_enable+0x88>)
    1570:	4b0d      	ldr	r3, [pc, #52]	; (15a8 <system_clock_source_enable+0x88>)
    1572:	8a9b      	ldrh	r3, [r3, #20]
    1574:	b29b      	uxth	r3, r3
    1576:	2102      	movs	r1, #2
    1578:	430b      	orrs	r3, r1
    157a:	b29b      	uxth	r3, r3
    157c:	8293      	strh	r3, [r2, #20]
		break;
    157e:	e00c      	b.n	159a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1580:	4b0a      	ldr	r3, [pc, #40]	; (15ac <system_clock_source_enable+0x8c>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	2202      	movs	r2, #2
    1586:	431a      	orrs	r2, r3
    1588:	4b08      	ldr	r3, [pc, #32]	; (15ac <system_clock_source_enable+0x8c>)
    158a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    158c:	4b08      	ldr	r3, [pc, #32]	; (15b0 <system_clock_source_enable+0x90>)
    158e:	4798      	blx	r3
		break;
    1590:	e003      	b.n	159a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1592:	2300      	movs	r3, #0
    1594:	e002      	b.n	159c <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1596:	2317      	movs	r3, #23
    1598:	e000      	b.n	159c <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    159a:	2300      	movs	r3, #0
}
    159c:	1c18      	adds	r0, r3, #0
    159e:	46bd      	mov	sp, r7
    15a0:	b002      	add	sp, #8
    15a2:	bd80      	pop	{r7, pc}
    15a4:	00002ea4 	.word	0x00002ea4
    15a8:	40000800 	.word	0x40000800
    15ac:	20000074 	.word	0x20000074
    15b0:	000012a1 	.word	0x000012a1

000015b4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	b084      	sub	sp, #16
    15b8:	af00      	add	r7, sp, #0
    15ba:	1c02      	adds	r2, r0, #0
    15bc:	1dfb      	adds	r3, r7, #7
    15be:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    15c0:	2300      	movs	r3, #0
    15c2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    15c4:	1dfb      	adds	r3, r7, #7
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	2b07      	cmp	r3, #7
    15ca:	d815      	bhi.n	15f8 <system_clock_source_is_ready+0x44>
    15cc:	009a      	lsls	r2, r3, #2
    15ce:	4b12      	ldr	r3, [pc, #72]	; (1618 <system_clock_source_is_ready+0x64>)
    15d0:	18d3      	adds	r3, r2, r3
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    15d6:	2308      	movs	r3, #8
    15d8:	60fb      	str	r3, [r7, #12]
		break;
    15da:	e00f      	b.n	15fc <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    15dc:	2304      	movs	r3, #4
    15de:	60fb      	str	r3, [r7, #12]
		break;
    15e0:	e00c      	b.n	15fc <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    15e2:	2301      	movs	r3, #1
    15e4:	60fb      	str	r3, [r7, #12]
		break;
    15e6:	e009      	b.n	15fc <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    15e8:	2302      	movs	r3, #2
    15ea:	60fb      	str	r3, [r7, #12]
		break;
    15ec:	e006      	b.n	15fc <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    15ee:	2310      	movs	r3, #16
    15f0:	60fb      	str	r3, [r7, #12]
		}
		break;
    15f2:	e003      	b.n	15fc <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    15f4:	2301      	movs	r3, #1
    15f6:	e00a      	b.n	160e <system_clock_source_is_ready+0x5a>

	default:
		return false;
    15f8:	2300      	movs	r3, #0
    15fa:	e008      	b.n	160e <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    15fc:	4b07      	ldr	r3, [pc, #28]	; (161c <system_clock_source_is_ready+0x68>)
    15fe:	68db      	ldr	r3, [r3, #12]
    1600:	68fa      	ldr	r2, [r7, #12]
    1602:	401a      	ands	r2, r3
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	1ad3      	subs	r3, r2, r3
    1608:	425a      	negs	r2, r3
    160a:	4153      	adcs	r3, r2
    160c:	b2db      	uxtb	r3, r3
}
    160e:	1c18      	adds	r0, r3, #0
    1610:	46bd      	mov	sp, r7
    1612:	b004      	add	sp, #16
    1614:	bd80      	pop	{r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00002ec4 	.word	0x00002ec4
    161c:	40000800 	.word	0x40000800

00001620 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1626:	1c3b      	adds	r3, r7, #0
    1628:	2202      	movs	r2, #2
    162a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    162c:	2300      	movs	r3, #0
    162e:	607b      	str	r3, [r7, #4]
    1630:	e009      	b.n	1646 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	b2da      	uxtb	r2, r3
    1636:	1c3b      	adds	r3, r7, #0
    1638:	1c10      	adds	r0, r2, #0
    163a:	1c19      	adds	r1, r3, #0
    163c:	4b05      	ldr	r3, [pc, #20]	; (1654 <_switch_peripheral_gclk+0x34>)
    163e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	3301      	adds	r3, #1
    1644:	607b      	str	r3, [r7, #4]
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	2b1b      	cmp	r3, #27
    164a:	d9f2      	bls.n	1632 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    164c:	46bd      	mov	sp, r7
    164e:	b002      	add	sp, #8
    1650:	bd80      	pop	{r7, pc}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	00001b21 	.word	0x00001b21

00001658 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1658:	b580      	push	{r7, lr}
    165a:	b0a0      	sub	sp, #128	; 0x80
    165c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    165e:	4b55      	ldr	r3, [pc, #340]	; (17b4 <system_clock_init+0x15c>)
    1660:	22c2      	movs	r2, #194	; 0xc2
    1662:	00d2      	lsls	r2, r2, #3
    1664:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1666:	2000      	movs	r0, #0
    1668:	4b53      	ldr	r3, [pc, #332]	; (17b8 <system_clock_init+0x160>)
    166a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    166c:	4b53      	ldr	r3, [pc, #332]	; (17bc <system_clock_init+0x164>)
    166e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    1670:	2370      	movs	r3, #112	; 0x70
    1672:	18fb      	adds	r3, r7, r3
    1674:	1c18      	adds	r0, r3, #0
    1676:	4b52      	ldr	r3, [pc, #328]	; (17c0 <system_clock_init+0x168>)
    1678:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    167a:	2370      	movs	r3, #112	; 0x70
    167c:	18fb      	adds	r3, r7, r3
    167e:	2280      	movs	r2, #128	; 0x80
    1680:	0212      	lsls	r2, r2, #8
    1682:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    1684:	2370      	movs	r3, #112	; 0x70
    1686:	18fb      	adds	r3, r7, r3
    1688:	2200      	movs	r2, #0
    168a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    168c:	2370      	movs	r3, #112	; 0x70
    168e:	18fb      	adds	r3, r7, r3
    1690:	2206      	movs	r2, #6
    1692:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1694:	2370      	movs	r3, #112	; 0x70
    1696:	18fb      	adds	r3, r7, r3
    1698:	2200      	movs	r2, #0
    169a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    169c:	2370      	movs	r3, #112	; 0x70
    169e:	18fb      	adds	r3, r7, r3
    16a0:	2200      	movs	r2, #0
    16a2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    16a4:	2370      	movs	r3, #112	; 0x70
    16a6:	18fb      	adds	r3, r7, r3
    16a8:	2201      	movs	r2, #1
    16aa:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    16ac:	2370      	movs	r3, #112	; 0x70
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	2200      	movs	r2, #0
    16b2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    16b4:	2370      	movs	r3, #112	; 0x70
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	2200      	movs	r2, #0
    16ba:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16bc:	2370      	movs	r3, #112	; 0x70
    16be:	18fb      	adds	r3, r7, r3
    16c0:	1c18      	adds	r0, r3, #0
    16c2:	4b40      	ldr	r3, [pc, #256]	; (17c4 <system_clock_init+0x16c>)
    16c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16c6:	2005      	movs	r0, #5
    16c8:	4b3f      	ldr	r3, [pc, #252]	; (17c8 <system_clock_init+0x170>)
    16ca:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16cc:	46c0      	nop			; (mov r8, r8)
    16ce:	2005      	movs	r0, #5
    16d0:	4b3e      	ldr	r3, [pc, #248]	; (17cc <system_clock_init+0x174>)
    16d2:	4798      	blx	r3
    16d4:	1c03      	adds	r3, r0, #0
    16d6:	1c1a      	adds	r2, r3, #0
    16d8:	2301      	movs	r3, #1
    16da:	4053      	eors	r3, r2
    16dc:	b2db      	uxtb	r3, r3
    16de:	2b00      	cmp	r3, #0
    16e0:	d1f5      	bne.n	16ce <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16e2:	4b34      	ldr	r3, [pc, #208]	; (17b4 <system_clock_init+0x15c>)
    16e4:	8a9a      	ldrh	r2, [r3, #20]
    16e6:	2180      	movs	r1, #128	; 0x80
    16e8:	430a      	orrs	r2, r1
    16ea:	829a      	strh	r2, [r3, #20]
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    16ec:	236c      	movs	r3, #108	; 0x6c
    16ee:	18fb      	adds	r3, r7, r3
    16f0:	1c18      	adds	r0, r3, #0
    16f2:	4b37      	ldr	r3, [pc, #220]	; (17d0 <system_clock_init+0x178>)
    16f4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16f6:	236c      	movs	r3, #108	; 0x6c
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	2200      	movs	r2, #0
    16fc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    16fe:	236c      	movs	r3, #108	; 0x6c
    1700:	18fb      	adds	r3, r7, r3
    1702:	2201      	movs	r2, #1
    1704:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1706:	236c      	movs	r3, #108	; 0x6c
    1708:	18fb      	adds	r3, r7, r3
    170a:	2200      	movs	r2, #0
    170c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    170e:	236c      	movs	r3, #108	; 0x6c
    1710:	18fb      	adds	r3, r7, r3
    1712:	1c18      	adds	r0, r3, #0
    1714:	4b2f      	ldr	r3, [pc, #188]	; (17d4 <system_clock_init+0x17c>)
    1716:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1718:	2006      	movs	r0, #6
    171a:	4b2b      	ldr	r3, [pc, #172]	; (17c8 <system_clock_init+0x170>)
    171c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    171e:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <system_clock_init+0x180>)
    1720:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1722:	2354      	movs	r3, #84	; 0x54
    1724:	18fb      	adds	r3, r7, r3
    1726:	1c18      	adds	r0, r3, #0
    1728:	4b2c      	ldr	r3, [pc, #176]	; (17dc <system_clock_init+0x184>)
    172a:	4798      	blx	r3
    172c:	2354      	movs	r3, #84	; 0x54
    172e:	18fb      	adds	r3, r7, r3
    1730:	2205      	movs	r2, #5
    1732:	701a      	strb	r2, [r3, #0]
    1734:	2354      	movs	r3, #84	; 0x54
    1736:	18fb      	adds	r3, r7, r3
    1738:	2201      	movs	r2, #1
    173a:	605a      	str	r2, [r3, #4]
    173c:	2354      	movs	r3, #84	; 0x54
    173e:	18fb      	adds	r3, r7, r3
    1740:	2200      	movs	r2, #0
    1742:	721a      	strb	r2, [r3, #8]
    1744:	2354      	movs	r3, #84	; 0x54
    1746:	18fb      	adds	r3, r7, r3
    1748:	2200      	movs	r2, #0
    174a:	725a      	strb	r2, [r3, #9]
    174c:	2354      	movs	r3, #84	; 0x54
    174e:	18fb      	adds	r3, r7, r3
    1750:	2001      	movs	r0, #1
    1752:	1c19      	adds	r1, r3, #0
    1754:	4b22      	ldr	r3, [pc, #136]	; (17e0 <system_clock_init+0x188>)
    1756:	4798      	blx	r3
    1758:	2001      	movs	r0, #1
    175a:	4b22      	ldr	r3, [pc, #136]	; (17e4 <system_clock_init+0x18c>)
    175c:	4798      	blx	r3
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    175e:	2000      	movs	r0, #0
    1760:	4b21      	ldr	r3, [pc, #132]	; (17e8 <system_clock_init+0x190>)
    1762:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1764:	2000      	movs	r0, #0
    1766:	2100      	movs	r1, #0
    1768:	4b20      	ldr	r3, [pc, #128]	; (17ec <system_clock_init+0x194>)
    176a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    176c:	2001      	movs	r0, #1
    176e:	2100      	movs	r1, #0
    1770:	4b1e      	ldr	r3, [pc, #120]	; (17ec <system_clock_init+0x194>)
    1772:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1774:	2002      	movs	r0, #2
    1776:	2100      	movs	r1, #0
    1778:	4b1c      	ldr	r3, [pc, #112]	; (17ec <system_clock_init+0x194>)
    177a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    177c:	1c3b      	adds	r3, r7, #0
    177e:	1c18      	adds	r0, r3, #0
    1780:	4b16      	ldr	r3, [pc, #88]	; (17dc <system_clock_init+0x184>)
    1782:	4798      	blx	r3
    1784:	1c3b      	adds	r3, r7, #0
    1786:	2206      	movs	r2, #6
    1788:	701a      	strb	r2, [r3, #0]
    178a:	1c3b      	adds	r3, r7, #0
    178c:	2201      	movs	r2, #1
    178e:	605a      	str	r2, [r3, #4]
    1790:	1c3b      	adds	r3, r7, #0
    1792:	2200      	movs	r2, #0
    1794:	721a      	strb	r2, [r3, #8]
    1796:	1c3b      	adds	r3, r7, #0
    1798:	2200      	movs	r2, #0
    179a:	725a      	strb	r2, [r3, #9]
    179c:	1c3b      	adds	r3, r7, #0
    179e:	2000      	movs	r0, #0
    17a0:	1c19      	adds	r1, r3, #0
    17a2:	4b0f      	ldr	r3, [pc, #60]	; (17e0 <system_clock_init+0x188>)
    17a4:	4798      	blx	r3
    17a6:	2000      	movs	r0, #0
    17a8:	4b0e      	ldr	r3, [pc, #56]	; (17e4 <system_clock_init+0x18c>)
    17aa:	4798      	blx	r3
#endif
}
    17ac:	46bd      	mov	sp, r7
    17ae:	b020      	add	sp, #128	; 0x80
    17b0:	bd80      	pop	{r7, pc}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	40000800 	.word	0x40000800
    17b8:	00001255 	.word	0x00001255
    17bc:	00001621 	.word	0x00001621
    17c0:	00001179 	.word	0x00001179
    17c4:	00001405 	.word	0x00001405
    17c8:	00001521 	.word	0x00001521
    17cc:	000015b5 	.word	0x000015b5
    17d0:	000011c1 	.word	0x000011c1
    17d4:	0000138d 	.word	0x0000138d
    17d8:	00001891 	.word	0x00001891
    17dc:	0000114d 	.word	0x0000114d
    17e0:	000018c1 	.word	0x000018c1
    17e4:	000019e1 	.word	0x000019e1
    17e8:	000011e1 	.word	0x000011e1
    17ec:	00001201 	.word	0x00001201

000017f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    17f0:	b580      	push	{r7, lr}
    17f2:	b082      	sub	sp, #8
    17f4:	af00      	add	r7, sp, #0
    17f6:	1c02      	adds	r2, r0, #0
    17f8:	6039      	str	r1, [r7, #0]
    17fa:	1dfb      	adds	r3, r7, #7
    17fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    17fe:	1dfb      	adds	r3, r7, #7
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b01      	cmp	r3, #1
    1804:	d00a      	beq.n	181c <system_apb_clock_set_mask+0x2c>
    1806:	2b02      	cmp	r3, #2
    1808:	d00f      	beq.n	182a <system_apb_clock_set_mask+0x3a>
    180a:	2b00      	cmp	r3, #0
    180c:	d114      	bne.n	1838 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    180e:	4b0e      	ldr	r3, [pc, #56]	; (1848 <system_apb_clock_set_mask+0x58>)
    1810:	4a0d      	ldr	r2, [pc, #52]	; (1848 <system_apb_clock_set_mask+0x58>)
    1812:	6991      	ldr	r1, [r2, #24]
    1814:	683a      	ldr	r2, [r7, #0]
    1816:	430a      	orrs	r2, r1
    1818:	619a      	str	r2, [r3, #24]
			break;
    181a:	e00f      	b.n	183c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <system_apb_clock_set_mask+0x58>)
    181e:	4a0a      	ldr	r2, [pc, #40]	; (1848 <system_apb_clock_set_mask+0x58>)
    1820:	69d1      	ldr	r1, [r2, #28]
    1822:	683a      	ldr	r2, [r7, #0]
    1824:	430a      	orrs	r2, r1
    1826:	61da      	str	r2, [r3, #28]
			break;
    1828:	e008      	b.n	183c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <system_apb_clock_set_mask+0x58>)
    182c:	4a06      	ldr	r2, [pc, #24]	; (1848 <system_apb_clock_set_mask+0x58>)
    182e:	6a11      	ldr	r1, [r2, #32]
    1830:	683a      	ldr	r2, [r7, #0]
    1832:	430a      	orrs	r2, r1
    1834:	621a      	str	r2, [r3, #32]
			break;
    1836:	e001      	b.n	183c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1838:	2317      	movs	r3, #23
    183a:	e000      	b.n	183e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    183c:	2300      	movs	r3, #0
}
    183e:	1c18      	adds	r0, r3, #0
    1840:	46bd      	mov	sp, r7
    1842:	b002      	add	sp, #8
    1844:	bd80      	pop	{r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	40000400 	.word	0x40000400

0000184c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1850:	4b01      	ldr	r3, [pc, #4]	; (1858 <system_interrupt_enter_critical_section+0xc>)
    1852:	4798      	blx	r3
}
    1854:	46bd      	mov	sp, r7
    1856:	bd80      	pop	{r7, pc}
    1858:	00000105 	.word	0x00000105

0000185c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1860:	4b01      	ldr	r3, [pc, #4]	; (1868 <system_interrupt_leave_critical_section+0xc>)
    1862:	4798      	blx	r3
}
    1864:	46bd      	mov	sp, r7
    1866:	bd80      	pop	{r7, pc}
    1868:	00000155 	.word	0x00000155

0000186c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1870:	4b06      	ldr	r3, [pc, #24]	; (188c <system_gclk_is_syncing+0x20>)
    1872:	785b      	ldrb	r3, [r3, #1]
    1874:	b2db      	uxtb	r3, r3
    1876:	b2db      	uxtb	r3, r3
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	da01      	bge.n	1882 <system_gclk_is_syncing+0x16>
		return true;
    187e:	2301      	movs	r3, #1
    1880:	e000      	b.n	1884 <system_gclk_is_syncing+0x18>
	}

	return false;
    1882:	2300      	movs	r3, #0
}
    1884:	1c18      	adds	r0, r3, #0
    1886:	46bd      	mov	sp, r7
    1888:	bd80      	pop	{r7, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	40000c00 	.word	0x40000c00

00001890 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1894:	2000      	movs	r0, #0
    1896:	2108      	movs	r1, #8
    1898:	4b07      	ldr	r3, [pc, #28]	; (18b8 <system_gclk_init+0x28>)
    189a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <system_gclk_init+0x2c>)
    189e:	2201      	movs	r2, #1
    18a0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_gclk_init+0x2c>)
    18a6:	781b      	ldrb	r3, [r3, #0]
    18a8:	b2db      	uxtb	r3, r3
    18aa:	1c1a      	adds	r2, r3, #0
    18ac:	2301      	movs	r3, #1
    18ae:	4013      	ands	r3, r2
    18b0:	d1f8      	bne.n	18a4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    18b2:	46bd      	mov	sp, r7
    18b4:	bd80      	pop	{r7, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	000017f1 	.word	0x000017f1
    18bc:	40000c00 	.word	0x40000c00

000018c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b086      	sub	sp, #24
    18c4:	af00      	add	r7, sp, #0
    18c6:	1c02      	adds	r2, r0, #0
    18c8:	6039      	str	r1, [r7, #0]
    18ca:	1dfb      	adds	r3, r7, #7
    18cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18ce:	1dfb      	adds	r3, r7, #7
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    18d4:	1dfb      	adds	r3, r7, #7
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18da:	683b      	ldr	r3, [r7, #0]
    18dc:	781b      	ldrb	r3, [r3, #0]
    18de:	021b      	lsls	r3, r3, #8
    18e0:	1c1a      	adds	r2, r3, #0
    18e2:	697b      	ldr	r3, [r7, #20]
    18e4:	4313      	orrs	r3, r2
    18e6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18e8:	683b      	ldr	r3, [r7, #0]
    18ea:	785b      	ldrb	r3, [r3, #1]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d004      	beq.n	18fa <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18f0:	697b      	ldr	r3, [r7, #20]
    18f2:	2280      	movs	r2, #128	; 0x80
    18f4:	02d2      	lsls	r2, r2, #11
    18f6:	4313      	orrs	r3, r2
    18f8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18fa:	683b      	ldr	r3, [r7, #0]
    18fc:	7a5b      	ldrb	r3, [r3, #9]
    18fe:	2b00      	cmp	r3, #0
    1900:	d004      	beq.n	190c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1902:	697b      	ldr	r3, [r7, #20]
    1904:	2280      	movs	r2, #128	; 0x80
    1906:	0312      	lsls	r2, r2, #12
    1908:	4313      	orrs	r3, r2
    190a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    190c:	683b      	ldr	r3, [r7, #0]
    190e:	685b      	ldr	r3, [r3, #4]
    1910:	2b01      	cmp	r3, #1
    1912:	d92c      	bls.n	196e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	685a      	ldr	r2, [r3, #4]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	685b      	ldr	r3, [r3, #4]
    191c:	3b01      	subs	r3, #1
    191e:	4013      	ands	r3, r2
    1920:	d11a      	bne.n	1958 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1922:	2300      	movs	r3, #0
    1924:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1926:	2302      	movs	r3, #2
    1928:	60bb      	str	r3, [r7, #8]
    192a:	e005      	b.n	1938 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	3301      	adds	r3, #1
    1930:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1932:	68bb      	ldr	r3, [r7, #8]
    1934:	005b      	lsls	r3, r3, #1
    1936:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1938:	683b      	ldr	r3, [r7, #0]
    193a:	685a      	ldr	r2, [r3, #4]
    193c:	68bb      	ldr	r3, [r7, #8]
    193e:	429a      	cmp	r2, r3
    1940:	d8f4      	bhi.n	192c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	021b      	lsls	r3, r3, #8
    1946:	693a      	ldr	r2, [r7, #16]
    1948:	4313      	orrs	r3, r2
    194a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    194c:	697b      	ldr	r3, [r7, #20]
    194e:	2280      	movs	r2, #128	; 0x80
    1950:	0352      	lsls	r2, r2, #13
    1952:	4313      	orrs	r3, r2
    1954:	617b      	str	r3, [r7, #20]
    1956:	e00a      	b.n	196e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1958:	683b      	ldr	r3, [r7, #0]
    195a:	685b      	ldr	r3, [r3, #4]
    195c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    195e:	693a      	ldr	r2, [r7, #16]
    1960:	4313      	orrs	r3, r2
    1962:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1964:	697b      	ldr	r3, [r7, #20]
    1966:	2280      	movs	r2, #128	; 0x80
    1968:	0292      	lsls	r2, r2, #10
    196a:	4313      	orrs	r3, r2
    196c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    196e:	683b      	ldr	r3, [r7, #0]
    1970:	7a1b      	ldrb	r3, [r3, #8]
    1972:	2b00      	cmp	r3, #0
    1974:	d004      	beq.n	1980 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1976:	697b      	ldr	r3, [r7, #20]
    1978:	2280      	movs	r2, #128	; 0x80
    197a:	0392      	lsls	r2, r2, #14
    197c:	4313      	orrs	r3, r2
    197e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1980:	46c0      	nop			; (mov r8, r8)
    1982:	4b12      	ldr	r3, [pc, #72]	; (19cc <system_gclk_gen_set_config+0x10c>)
    1984:	4798      	blx	r3
    1986:	1e03      	subs	r3, r0, #0
    1988:	d1fb      	bne.n	1982 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    198a:	4b11      	ldr	r3, [pc, #68]	; (19d0 <system_gclk_gen_set_config+0x110>)
    198c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    198e:	4a11      	ldr	r2, [pc, #68]	; (19d4 <system_gclk_gen_set_config+0x114>)
    1990:	1dfb      	adds	r3, r7, #7
    1992:	781b      	ldrb	r3, [r3, #0]
    1994:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	4b0c      	ldr	r3, [pc, #48]	; (19cc <system_gclk_gen_set_config+0x10c>)
    199a:	4798      	blx	r3
    199c:	1e03      	subs	r3, r0, #0
    199e:	d1fb      	bne.n	1998 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    19a0:	4b0d      	ldr	r3, [pc, #52]	; (19d8 <system_gclk_gen_set_config+0x118>)
    19a2:	693a      	ldr	r2, [r7, #16]
    19a4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <system_gclk_gen_set_config+0x10c>)
    19aa:	4798      	blx	r3
    19ac:	1e03      	subs	r3, r0, #0
    19ae:	d1fb      	bne.n	19a8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    19b0:	4b09      	ldr	r3, [pc, #36]	; (19d8 <system_gclk_gen_set_config+0x118>)
    19b2:	4a09      	ldr	r2, [pc, #36]	; (19d8 <system_gclk_gen_set_config+0x118>)
    19b4:	6851      	ldr	r1, [r2, #4]
    19b6:	2280      	movs	r2, #128	; 0x80
    19b8:	0252      	lsls	r2, r2, #9
    19ba:	4011      	ands	r1, r2
    19bc:	697a      	ldr	r2, [r7, #20]
    19be:	430a      	orrs	r2, r1
    19c0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    19c2:	4b06      	ldr	r3, [pc, #24]	; (19dc <system_gclk_gen_set_config+0x11c>)
    19c4:	4798      	blx	r3
}
    19c6:	46bd      	mov	sp, r7
    19c8:	b006      	add	sp, #24
    19ca:	bd80      	pop	{r7, pc}
    19cc:	0000186d 	.word	0x0000186d
    19d0:	0000184d 	.word	0x0000184d
    19d4:	40000c08 	.word	0x40000c08
    19d8:	40000c00 	.word	0x40000c00
    19dc:	0000185d 	.word	0x0000185d

000019e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	b082      	sub	sp, #8
    19e4:	af00      	add	r7, sp, #0
    19e6:	1c02      	adds	r2, r0, #0
    19e8:	1dfb      	adds	r3, r7, #7
    19ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    19ec:	46c0      	nop			; (mov r8, r8)
    19ee:	4b0d      	ldr	r3, [pc, #52]	; (1a24 <system_gclk_gen_enable+0x44>)
    19f0:	4798      	blx	r3
    19f2:	1e03      	subs	r3, r0, #0
    19f4:	d1fb      	bne.n	19ee <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    19f6:	4b0c      	ldr	r3, [pc, #48]	; (1a28 <system_gclk_gen_enable+0x48>)
    19f8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19fa:	4a0c      	ldr	r2, [pc, #48]	; (1a2c <system_gclk_gen_enable+0x4c>)
    19fc:	1dfb      	adds	r3, r7, #7
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	4b07      	ldr	r3, [pc, #28]	; (1a24 <system_gclk_gen_enable+0x44>)
    1a06:	4798      	blx	r3
    1a08:	1e03      	subs	r3, r0, #0
    1a0a:	d1fb      	bne.n	1a04 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a0c:	4b08      	ldr	r3, [pc, #32]	; (1a30 <system_gclk_gen_enable+0x50>)
    1a0e:	4a08      	ldr	r2, [pc, #32]	; (1a30 <system_gclk_gen_enable+0x50>)
    1a10:	6852      	ldr	r2, [r2, #4]
    1a12:	2180      	movs	r1, #128	; 0x80
    1a14:	0249      	lsls	r1, r1, #9
    1a16:	430a      	orrs	r2, r1
    1a18:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1a1a:	4b06      	ldr	r3, [pc, #24]	; (1a34 <system_gclk_gen_enable+0x54>)
    1a1c:	4798      	blx	r3
}
    1a1e:	46bd      	mov	sp, r7
    1a20:	b002      	add	sp, #8
    1a22:	bd80      	pop	{r7, pc}
    1a24:	0000186d 	.word	0x0000186d
    1a28:	0000184d 	.word	0x0000184d
    1a2c:	40000c04 	.word	0x40000c04
    1a30:	40000c00 	.word	0x40000c00
    1a34:	0000185d 	.word	0x0000185d

00001a38 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	b086      	sub	sp, #24
    1a3c:	af00      	add	r7, sp, #0
    1a3e:	1c02      	adds	r2, r0, #0
    1a40:	1dfb      	adds	r3, r7, #7
    1a42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1a44:	46c0      	nop			; (mov r8, r8)
    1a46:	4b2e      	ldr	r3, [pc, #184]	; (1b00 <system_gclk_gen_get_hz+0xc8>)
    1a48:	4798      	blx	r3
    1a4a:	1e03      	subs	r3, r0, #0
    1a4c:	d1fb      	bne.n	1a46 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1a4e:	4b2d      	ldr	r3, [pc, #180]	; (1b04 <system_gclk_gen_get_hz+0xcc>)
    1a50:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a52:	4a2d      	ldr	r2, [pc, #180]	; (1b08 <system_gclk_gen_get_hz+0xd0>)
    1a54:	1dfb      	adds	r3, r7, #7
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	4b28      	ldr	r3, [pc, #160]	; (1b00 <system_gclk_gen_get_hz+0xc8>)
    1a5e:	4798      	blx	r3
    1a60:	1e03      	subs	r3, r0, #0
    1a62:	d1fb      	bne.n	1a5c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a64:	4b29      	ldr	r3, [pc, #164]	; (1b0c <system_gclk_gen_get_hz+0xd4>)
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	0a1b      	lsrs	r3, r3, #8
    1a6a:	1c1a      	adds	r2, r3, #0
    1a6c:	231f      	movs	r3, #31
    1a6e:	4013      	ands	r3, r2
    1a70:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a72:	1c18      	adds	r0, r3, #0
    1a74:	4b26      	ldr	r3, [pc, #152]	; (1b10 <system_gclk_gen_get_hz+0xd8>)
    1a76:	4798      	blx	r3
    1a78:	1c03      	adds	r3, r0, #0
    1a7a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a7c:	4a22      	ldr	r2, [pc, #136]	; (1b08 <system_gclk_gen_get_hz+0xd0>)
    1a7e:	1dfb      	adds	r3, r7, #7
    1a80:	781b      	ldrb	r3, [r3, #0]
    1a82:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a84:	4b21      	ldr	r3, [pc, #132]	; (1b0c <system_gclk_gen_get_hz+0xd4>)
    1a86:	685b      	ldr	r3, [r3, #4]
    1a88:	0d1b      	lsrs	r3, r3, #20
    1a8a:	1c1a      	adds	r2, r3, #0
    1a8c:	2301      	movs	r3, #1
    1a8e:	4013      	ands	r3, r2
    1a90:	b2da      	uxtb	r2, r3
    1a92:	2313      	movs	r3, #19
    1a94:	18fb      	adds	r3, r7, r3
    1a96:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a98:	4a1e      	ldr	r2, [pc, #120]	; (1b14 <system_gclk_gen_get_hz+0xdc>)
    1a9a:	1dfb      	adds	r3, r7, #7
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1aa0:	46c0      	nop			; (mov r8, r8)
    1aa2:	4b17      	ldr	r3, [pc, #92]	; (1b00 <system_gclk_gen_get_hz+0xc8>)
    1aa4:	4798      	blx	r3
    1aa6:	1e03      	subs	r3, r0, #0
    1aa8:	d1fb      	bne.n	1aa2 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1aaa:	4b18      	ldr	r3, [pc, #96]	; (1b0c <system_gclk_gen_get_hz+0xd4>)
    1aac:	689b      	ldr	r3, [r3, #8]
    1aae:	0a1b      	lsrs	r3, r3, #8
    1ab0:	1c1a      	adds	r2, r3, #0
    1ab2:	2300      	movs	r3, #0
    1ab4:	439a      	bics	r2, r3
    1ab6:	1c13      	adds	r3, r2, #0
    1ab8:	b29b      	uxth	r3, r3
    1aba:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1abc:	4b16      	ldr	r3, [pc, #88]	; (1b18 <system_gclk_gen_get_hz+0xe0>)
    1abe:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ac0:	2313      	movs	r3, #19
    1ac2:	18fb      	adds	r3, r7, r3
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d109      	bne.n	1ade <system_gclk_gen_get_hz+0xa6>
    1aca:	68fb      	ldr	r3, [r7, #12]
    1acc:	2b01      	cmp	r3, #1
    1ace:	d906      	bls.n	1ade <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    1ad0:	4b12      	ldr	r3, [pc, #72]	; (1b1c <system_gclk_gen_get_hz+0xe4>)
    1ad2:	6978      	ldr	r0, [r7, #20]
    1ad4:	68f9      	ldr	r1, [r7, #12]
    1ad6:	4798      	blx	r3
    1ad8:	1c03      	adds	r3, r0, #0
    1ada:	617b      	str	r3, [r7, #20]
    1adc:	e00a      	b.n	1af4 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    1ade:	2313      	movs	r3, #19
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d005      	beq.n	1af4 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    1ae8:	68fb      	ldr	r3, [r7, #12]
    1aea:	3301      	adds	r3, #1
    1aec:	1c1a      	adds	r2, r3, #0
    1aee:	697b      	ldr	r3, [r7, #20]
    1af0:	40d3      	lsrs	r3, r2
    1af2:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1af4:	697b      	ldr	r3, [r7, #20]
}
    1af6:	1c18      	adds	r0, r3, #0
    1af8:	46bd      	mov	sp, r7
    1afa:	b006      	add	sp, #24
    1afc:	bd80      	pop	{r7, pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	0000186d 	.word	0x0000186d
    1b04:	0000184d 	.word	0x0000184d
    1b08:	40000c04 	.word	0x40000c04
    1b0c:	40000c00 	.word	0x40000c00
    1b10:	000012e5 	.word	0x000012e5
    1b14:	40000c08 	.word	0x40000c08
    1b18:	0000185d 	.word	0x0000185d
    1b1c:	00002cd1 	.word	0x00002cd1

00001b20 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	1c02      	adds	r2, r0, #0
    1b28:	6039      	str	r1, [r7, #0]
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1b2e:	1dfb      	adds	r3, r7, #7
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1b34:	683b      	ldr	r3, [r7, #0]
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	021b      	lsls	r3, r3, #8
    1b3a:	1c1a      	adds	r2, r3, #0
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	4313      	orrs	r3, r2
    1b40:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1b42:	1dfb      	adds	r3, r7, #7
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	1c18      	adds	r0, r3, #0
    1b48:	4b04      	ldr	r3, [pc, #16]	; (1b5c <system_gclk_chan_set_config+0x3c>)
    1b4a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <system_gclk_chan_set_config+0x40>)
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	b292      	uxth	r2, r2
    1b52:	805a      	strh	r2, [r3, #2]
}
    1b54:	46bd      	mov	sp, r7
    1b56:	b004      	add	sp, #16
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	00001ba9 	.word	0x00001ba9
    1b60:	40000c00 	.word	0x40000c00

00001b64 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b082      	sub	sp, #8
    1b68:	af00      	add	r7, sp, #0
    1b6a:	1c02      	adds	r2, r0, #0
    1b6c:	1dfb      	adds	r3, r7, #7
    1b6e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1b70:	4b09      	ldr	r3, [pc, #36]	; (1b98 <system_gclk_chan_enable+0x34>)
    1b72:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b74:	4a09      	ldr	r2, [pc, #36]	; (1b9c <system_gclk_chan_enable+0x38>)
    1b76:	1dfb      	adds	r3, r7, #7
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1b7c:	4908      	ldr	r1, [pc, #32]	; (1ba0 <system_gclk_chan_enable+0x3c>)
    1b7e:	4b08      	ldr	r3, [pc, #32]	; (1ba0 <system_gclk_chan_enable+0x3c>)
    1b80:	885b      	ldrh	r3, [r3, #2]
    1b82:	b29b      	uxth	r3, r3
    1b84:	2280      	movs	r2, #128	; 0x80
    1b86:	01d2      	lsls	r2, r2, #7
    1b88:	4313      	orrs	r3, r2
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <system_gclk_chan_enable+0x40>)
    1b90:	4798      	blx	r3
}
    1b92:	46bd      	mov	sp, r7
    1b94:	b002      	add	sp, #8
    1b96:	bd80      	pop	{r7, pc}
    1b98:	0000184d 	.word	0x0000184d
    1b9c:	40000c02 	.word	0x40000c02
    1ba0:	40000c00 	.word	0x40000c00
    1ba4:	0000185d 	.word	0x0000185d

00001ba8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ba8:	b580      	push	{r7, lr}
    1baa:	b084      	sub	sp, #16
    1bac:	af00      	add	r7, sp, #0
    1bae:	1c02      	adds	r2, r0, #0
    1bb0:	1dfb      	adds	r3, r7, #7
    1bb2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1bb4:	4b1d      	ldr	r3, [pc, #116]	; (1c2c <system_gclk_chan_disable+0x84>)
    1bb6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bb8:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <system_gclk_chan_disable+0x88>)
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bc0:	4b1c      	ldr	r3, [pc, #112]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1bc2:	885b      	ldrh	r3, [r3, #2]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	0a1b      	lsrs	r3, r3, #8
    1bc8:	1c1a      	adds	r2, r3, #0
    1bca:	230f      	movs	r3, #15
    1bcc:	4013      	ands	r3, r2
    1bce:	b2db      	uxtb	r3, r3
    1bd0:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1bd2:	4b18      	ldr	r3, [pc, #96]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1bd4:	885a      	ldrh	r2, [r3, #2]
    1bd6:	4918      	ldr	r1, [pc, #96]	; (1c38 <system_gclk_chan_disable+0x90>)
    1bd8:	400a      	ands	r2, r1
    1bda:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1bdc:	4a15      	ldr	r2, [pc, #84]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1bde:	4b15      	ldr	r3, [pc, #84]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1be0:	885b      	ldrh	r3, [r3, #2]
    1be2:	b29b      	uxth	r3, r3
    1be4:	4915      	ldr	r1, [pc, #84]	; (1c3c <system_gclk_chan_disable+0x94>)
    1be6:	400b      	ands	r3, r1
    1be8:	b29b      	uxth	r3, r3
    1bea:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	4b11      	ldr	r3, [pc, #68]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1bf0:	885b      	ldrh	r3, [r3, #2]
    1bf2:	b29b      	uxth	r3, r3
    1bf4:	1c1a      	adds	r2, r3, #0
    1bf6:	2380      	movs	r3, #128	; 0x80
    1bf8:	01db      	lsls	r3, r3, #7
    1bfa:	4013      	ands	r3, r2
    1bfc:	d1f7      	bne.n	1bee <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1bfe:	4b0d      	ldr	r3, [pc, #52]	; (1c34 <system_gclk_chan_disable+0x8c>)
    1c00:	68fa      	ldr	r2, [r7, #12]
    1c02:	b2d2      	uxtb	r2, r2
    1c04:	1c11      	adds	r1, r2, #0
    1c06:	220f      	movs	r2, #15
    1c08:	400a      	ands	r2, r1
    1c0a:	b2d2      	uxtb	r2, r2
    1c0c:	1c11      	adds	r1, r2, #0
    1c0e:	220f      	movs	r2, #15
    1c10:	400a      	ands	r2, r1
    1c12:	0210      	lsls	r0, r2, #8
    1c14:	885a      	ldrh	r2, [r3, #2]
    1c16:	4908      	ldr	r1, [pc, #32]	; (1c38 <system_gclk_chan_disable+0x90>)
    1c18:	400a      	ands	r2, r1
    1c1a:	1c11      	adds	r1, r2, #0
    1c1c:	1c02      	adds	r2, r0, #0
    1c1e:	430a      	orrs	r2, r1
    1c20:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1c22:	4b07      	ldr	r3, [pc, #28]	; (1c40 <system_gclk_chan_disable+0x98>)
    1c24:	4798      	blx	r3
}
    1c26:	46bd      	mov	sp, r7
    1c28:	b004      	add	sp, #16
    1c2a:	bd80      	pop	{r7, pc}
    1c2c:	0000184d 	.word	0x0000184d
    1c30:	40000c02 	.word	0x40000c02
    1c34:	40000c00 	.word	0x40000c00
    1c38:	fffff0ff 	.word	0xfffff0ff
    1c3c:	ffffbfff 	.word	0xffffbfff
    1c40:	0000185d 	.word	0x0000185d

00001c44 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b084      	sub	sp, #16
    1c48:	af00      	add	r7, sp, #0
    1c4a:	1c02      	adds	r2, r0, #0
    1c4c:	1dfb      	adds	r3, r7, #7
    1c4e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1c50:	4b0e      	ldr	r3, [pc, #56]	; (1c8c <system_gclk_chan_get_hz+0x48>)
    1c52:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c54:	4a0e      	ldr	r2, [pc, #56]	; (1c90 <system_gclk_chan_get_hz+0x4c>)
    1c56:	1dfb      	adds	r3, r7, #7
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c5c:	4b0d      	ldr	r3, [pc, #52]	; (1c94 <system_gclk_chan_get_hz+0x50>)
    1c5e:	885b      	ldrh	r3, [r3, #2]
    1c60:	b29b      	uxth	r3, r3
    1c62:	0a1b      	lsrs	r3, r3, #8
    1c64:	1c1a      	adds	r2, r3, #0
    1c66:	230f      	movs	r3, #15
    1c68:	4013      	ands	r3, r2
    1c6a:	b2da      	uxtb	r2, r3
    1c6c:	230f      	movs	r3, #15
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1c72:	4b09      	ldr	r3, [pc, #36]	; (1c98 <system_gclk_chan_get_hz+0x54>)
    1c74:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c76:	230f      	movs	r3, #15
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	1c18      	adds	r0, r3, #0
    1c7e:	4b07      	ldr	r3, [pc, #28]	; (1c9c <system_gclk_chan_get_hz+0x58>)
    1c80:	4798      	blx	r3
    1c82:	1c03      	adds	r3, r0, #0
}
    1c84:	1c18      	adds	r0, r3, #0
    1c86:	46bd      	mov	sp, r7
    1c88:	b004      	add	sp, #16
    1c8a:	bd80      	pop	{r7, pc}
    1c8c:	0000184d 	.word	0x0000184d
    1c90:	40000c02 	.word	0x40000c02
    1c94:	40000c00 	.word	0x40000c00
    1c98:	0000185d 	.word	0x0000185d
    1c9c:	00001a39 	.word	0x00001a39

00001ca0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b084      	sub	sp, #16
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	1c02      	adds	r2, r0, #0
    1ca8:	1dfb      	adds	r3, r7, #7
    1caa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1cac:	230f      	movs	r3, #15
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	1dfa      	adds	r2, r7, #7
    1cb2:	7812      	ldrb	r2, [r2, #0]
    1cb4:	09d2      	lsrs	r2, r2, #7
    1cb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1cb8:	230e      	movs	r3, #14
    1cba:	18fb      	adds	r3, r7, r3
    1cbc:	1dfa      	adds	r2, r7, #7
    1cbe:	7812      	ldrb	r2, [r2, #0]
    1cc0:	0952      	lsrs	r2, r2, #5
    1cc2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1cc4:	4b0d      	ldr	r3, [pc, #52]	; (1cfc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1cc6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1cc8:	230f      	movs	r3, #15
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d10f      	bne.n	1cf2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1cd2:	230f      	movs	r3, #15
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	009b      	lsls	r3, r3, #2
    1cda:	2210      	movs	r2, #16
    1cdc:	4694      	mov	ip, r2
    1cde:	44bc      	add	ip, r7
    1ce0:	4463      	add	r3, ip
    1ce2:	3b08      	subs	r3, #8
    1ce4:	681a      	ldr	r2, [r3, #0]
    1ce6:	230e      	movs	r3, #14
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	01db      	lsls	r3, r3, #7
    1cee:	18d3      	adds	r3, r2, r3
    1cf0:	e000      	b.n	1cf4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1cf2:	2300      	movs	r3, #0
	}
}
    1cf4:	1c18      	adds	r0, r3, #0
    1cf6:	46bd      	mov	sp, r7
    1cf8:	b004      	add	sp, #16
    1cfa:	bd80      	pop	{r7, pc}
    1cfc:	41004400 	.word	0x41004400

00001d00 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b088      	sub	sp, #32
    1d04:	af00      	add	r7, sp, #0
    1d06:	60f8      	str	r0, [r7, #12]
    1d08:	60b9      	str	r1, [r7, #8]
    1d0a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1d0c:	2300      	movs	r3, #0
    1d0e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	78db      	ldrb	r3, [r3, #3]
    1d14:	2201      	movs	r2, #1
    1d16:	4053      	eors	r3, r2
    1d18:	b2db      	uxtb	r3, r3
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d035      	beq.n	1d8a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b80      	cmp	r3, #128	; 0x80
    1d24:	d00b      	beq.n	1d3e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1d26:	69fb      	ldr	r3, [r7, #28]
    1d28:	2280      	movs	r2, #128	; 0x80
    1d2a:	0252      	lsls	r2, r2, #9
    1d2c:	4313      	orrs	r3, r2
    1d2e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	061b      	lsls	r3, r3, #24
    1d36:	1c1a      	adds	r2, r3, #0
    1d38:	69fb      	ldr	r3, [r7, #28]
    1d3a:	4313      	orrs	r3, r2
    1d3c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	785b      	ldrb	r3, [r3, #1]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d003      	beq.n	1d4e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d4a:	2b02      	cmp	r3, #2
    1d4c:	d110      	bne.n	1d70 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d4e:	69fb      	ldr	r3, [r7, #28]
    1d50:	2280      	movs	r2, #128	; 0x80
    1d52:	0292      	lsls	r2, r2, #10
    1d54:	4313      	orrs	r3, r2
    1d56:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	789b      	ldrb	r3, [r3, #2]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d004      	beq.n	1d6a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d60:	69fb      	ldr	r3, [r7, #28]
    1d62:	2280      	movs	r2, #128	; 0x80
    1d64:	02d2      	lsls	r2, r2, #11
    1d66:	4313      	orrs	r3, r2
    1d68:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d6a:	68fb      	ldr	r3, [r7, #12]
    1d6c:	68ba      	ldr	r2, [r7, #8]
    1d6e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	785b      	ldrb	r3, [r3, #1]
    1d74:	2b01      	cmp	r3, #1
    1d76:	d003      	beq.n	1d80 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d7c:	2b02      	cmp	r3, #2
    1d7e:	d107      	bne.n	1d90 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d80:	69fb      	ldr	r3, [r7, #28]
    1d82:	4a21      	ldr	r2, [pc, #132]	; (1e08 <_system_pinmux_config+0x108>)
    1d84:	4013      	ands	r3, r2
    1d86:	61fb      	str	r3, [r7, #28]
    1d88:	e002      	b.n	1d90 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	68ba      	ldr	r2, [r7, #8]
    1d8e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d90:	68bb      	ldr	r3, [r7, #8]
    1d92:	041b      	lsls	r3, r3, #16
    1d94:	0c1b      	lsrs	r3, r3, #16
    1d96:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d98:	68bb      	ldr	r3, [r7, #8]
    1d9a:	0c1b      	lsrs	r3, r3, #16
    1d9c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d9e:	69ba      	ldr	r2, [r7, #24]
    1da0:	69fb      	ldr	r3, [r7, #28]
    1da2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1da4:	22a0      	movs	r2, #160	; 0xa0
    1da6:	05d2      	lsls	r2, r2, #23
    1da8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dae:	697a      	ldr	r2, [r7, #20]
    1db0:	69fb      	ldr	r3, [r7, #28]
    1db2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1db4:	22d0      	movs	r2, #208	; 0xd0
    1db6:	0612      	lsls	r2, r2, #24
    1db8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dba:	68fb      	ldr	r3, [r7, #12]
    1dbc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	78db      	ldrb	r3, [r3, #3]
    1dc2:	2201      	movs	r2, #1
    1dc4:	4053      	eors	r3, r2
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d01a      	beq.n	1e02 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1dcc:	69fa      	ldr	r2, [r7, #28]
    1dce:	2380      	movs	r3, #128	; 0x80
    1dd0:	02db      	lsls	r3, r3, #11
    1dd2:	4013      	ands	r3, r2
    1dd4:	d00a      	beq.n	1dec <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	789b      	ldrb	r3, [r3, #2]
    1dda:	2b01      	cmp	r3, #1
    1ddc:	d103      	bne.n	1de6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	68ba      	ldr	r2, [r7, #8]
    1de2:	619a      	str	r2, [r3, #24]
    1de4:	e002      	b.n	1dec <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	68ba      	ldr	r2, [r7, #8]
    1dea:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	785b      	ldrb	r3, [r3, #1]
    1df0:	2b01      	cmp	r3, #1
    1df2:	d003      	beq.n	1dfc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1df8:	2b02      	cmp	r3, #2
    1dfa:	d102      	bne.n	1e02 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1dfc:	68fb      	ldr	r3, [r7, #12]
    1dfe:	68ba      	ldr	r2, [r7, #8]
    1e00:	609a      	str	r2, [r3, #8]
		}
	}
}
    1e02:	46bd      	mov	sp, r7
    1e04:	b008      	add	sp, #32
    1e06:	bd80      	pop	{r7, pc}
    1e08:	fffbffff 	.word	0xfffbffff

00001e0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b084      	sub	sp, #16
    1e10:	af00      	add	r7, sp, #0
    1e12:	1c02      	adds	r2, r0, #0
    1e14:	6039      	str	r1, [r7, #0]
    1e16:	1dfb      	adds	r3, r7, #7
    1e18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1e1a:	1dfb      	adds	r3, r7, #7
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	1c18      	adds	r0, r3, #0
    1e20:	4b0b      	ldr	r3, [pc, #44]	; (1e50 <system_pinmux_pin_set_config+0x44>)
    1e22:	4798      	blx	r3
    1e24:	1c03      	adds	r3, r0, #0
    1e26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e28:	1dfb      	adds	r3, r7, #7
    1e2a:	781b      	ldrb	r3, [r3, #0]
    1e2c:	221f      	movs	r2, #31
    1e2e:	4013      	ands	r3, r2
    1e30:	2201      	movs	r2, #1
    1e32:	409a      	lsls	r2, r3
    1e34:	1c13      	adds	r3, r2, #0
    1e36:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1e38:	68f9      	ldr	r1, [r7, #12]
    1e3a:	68ba      	ldr	r2, [r7, #8]
    1e3c:	683b      	ldr	r3, [r7, #0]
    1e3e:	1c08      	adds	r0, r1, #0
    1e40:	1c11      	adds	r1, r2, #0
    1e42:	1c1a      	adds	r2, r3, #0
    1e44:	4b03      	ldr	r3, [pc, #12]	; (1e54 <system_pinmux_pin_set_config+0x48>)
    1e46:	4798      	blx	r3
}
    1e48:	46bd      	mov	sp, r7
    1e4a:	b004      	add	sp, #16
    1e4c:	bd80      	pop	{r7, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00001ca1 	.word	0x00001ca1
    1e54:	00001d01 	.word	0x00001d01

00001e58 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	af00      	add	r7, sp, #0
	return;
    1e5c:	46c0      	nop			; (mov r8, r8)
}
    1e5e:	46bd      	mov	sp, r7
    1e60:	bd80      	pop	{r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)

00001e64 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e64:	b580      	push	{r7, lr}
    1e66:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e68:	4b05      	ldr	r3, [pc, #20]	; (1e80 <system_init+0x1c>)
    1e6a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e6c:	4b05      	ldr	r3, [pc, #20]	; (1e84 <system_init+0x20>)
    1e6e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e70:	4b05      	ldr	r3, [pc, #20]	; (1e88 <system_init+0x24>)
    1e72:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e74:	4b05      	ldr	r3, [pc, #20]	; (1e8c <system_init+0x28>)
    1e76:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e78:	4b05      	ldr	r3, [pc, #20]	; (1e90 <system_init+0x2c>)
    1e7a:	4798      	blx	r3
}
    1e7c:	46bd      	mov	sp, r7
    1e7e:	bd80      	pop	{r7, pc}
    1e80:	00001659 	.word	0x00001659
    1e84:	00000285 	.word	0x00000285
    1e88:	00001e59 	.word	0x00001e59
    1e8c:	00001e59 	.word	0x00001e59
    1e90:	00001e59 	.word	0x00001e59

00001e94 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b084      	sub	sp, #16
    1e98:	af00      	add	r7, sp, #0
    1e9a:	60f8      	str	r0, [r7, #12]
    1e9c:	60b9      	str	r1, [r7, #8]
    1e9e:	1dfb      	adds	r3, r7, #7
    1ea0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1ea2:	1dfb      	adds	r3, r7, #7
    1ea4:	781a      	ldrb	r2, [r3, #0]
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	3202      	adds	r2, #2
    1eaa:	0092      	lsls	r2, r2, #2
    1eac:	68b9      	ldr	r1, [r7, #8]
    1eae:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1eb0:	1dfb      	adds	r3, r7, #7
    1eb2:	781b      	ldrb	r3, [r3, #0]
    1eb4:	2b02      	cmp	r3, #2
    1eb6:	d107      	bne.n	1ec8 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1eb8:	68fb      	ldr	r3, [r7, #12]
    1eba:	7e1b      	ldrb	r3, [r3, #24]
    1ebc:	2210      	movs	r2, #16
    1ebe:	4313      	orrs	r3, r2
    1ec0:	b2da      	uxtb	r2, r3
    1ec2:	68fb      	ldr	r3, [r7, #12]
    1ec4:	761a      	strb	r2, [r3, #24]
    1ec6:	e01a      	b.n	1efe <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1ec8:	1dfb      	adds	r3, r7, #7
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b03      	cmp	r3, #3
    1ece:	d107      	bne.n	1ee0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1ed0:	68fb      	ldr	r3, [r7, #12]
    1ed2:	7e1b      	ldrb	r3, [r3, #24]
    1ed4:	2220      	movs	r2, #32
    1ed6:	4313      	orrs	r3, r2
    1ed8:	b2da      	uxtb	r2, r3
    1eda:	68fb      	ldr	r3, [r7, #12]
    1edc:	761a      	strb	r2, [r3, #24]
    1ede:	e00e      	b.n	1efe <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	7e1b      	ldrb	r3, [r3, #24]
    1ee4:	b2d9      	uxtb	r1, r3
    1ee6:	1dfb      	adds	r3, r7, #7
    1ee8:	781b      	ldrb	r3, [r3, #0]
    1eea:	2201      	movs	r2, #1
    1eec:	409a      	lsls	r2, r3
    1eee:	1c13      	adds	r3, r2, #0
    1ef0:	b2db      	uxtb	r3, r3
    1ef2:	1c0a      	adds	r2, r1, #0
    1ef4:	4313      	orrs	r3, r2
    1ef6:	b2db      	uxtb	r3, r3
    1ef8:	b2da      	uxtb	r2, r3
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    1efe:	2300      	movs	r3, #0
}
    1f00:	1c18      	adds	r0, r3, #0
    1f02:	46bd      	mov	sp, r7
    1f04:	b004      	add	sp, #16
    1f06:	bd80      	pop	{r7, pc}

00001f08 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1f08:	b580      	push	{r7, lr}
    1f0a:	af00      	add	r7, sp, #0
    1f0c:	2000      	movs	r0, #0
    1f0e:	4b02      	ldr	r3, [pc, #8]	; (1f18 <TC0_Handler+0x10>)
    1f10:	4798      	blx	r3
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	00001fa9 	.word	0x00001fa9

00001f1c <TC1_Handler>:
    1f1c:	b580      	push	{r7, lr}
    1f1e:	af00      	add	r7, sp, #0
    1f20:	2001      	movs	r0, #1
    1f22:	4b02      	ldr	r3, [pc, #8]	; (1f2c <TC1_Handler+0x10>)
    1f24:	4798      	blx	r3
    1f26:	46bd      	mov	sp, r7
    1f28:	bd80      	pop	{r7, pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	00001fa9 	.word	0x00001fa9

00001f30 <TC2_Handler>:
    1f30:	b580      	push	{r7, lr}
    1f32:	af00      	add	r7, sp, #0
    1f34:	2002      	movs	r0, #2
    1f36:	4b02      	ldr	r3, [pc, #8]	; (1f40 <TC2_Handler+0x10>)
    1f38:	4798      	blx	r3
    1f3a:	46bd      	mov	sp, r7
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001fa9 	.word	0x00001fa9

00001f44 <TC3_Handler>:
    1f44:	b580      	push	{r7, lr}
    1f46:	af00      	add	r7, sp, #0
    1f48:	2003      	movs	r0, #3
    1f4a:	4b02      	ldr	r3, [pc, #8]	; (1f54 <TC3_Handler+0x10>)
    1f4c:	4798      	blx	r3
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	00001fa9 	.word	0x00001fa9

00001f58 <TC4_Handler>:
    1f58:	b580      	push	{r7, lr}
    1f5a:	af00      	add	r7, sp, #0
    1f5c:	2004      	movs	r0, #4
    1f5e:	4b02      	ldr	r3, [pc, #8]	; (1f68 <TC4_Handler+0x10>)
    1f60:	4798      	blx	r3
    1f62:	46bd      	mov	sp, r7
    1f64:	bd80      	pop	{r7, pc}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	00001fa9 	.word	0x00001fa9

00001f6c <TC5_Handler>:
    1f6c:	b580      	push	{r7, lr}
    1f6e:	af00      	add	r7, sp, #0
    1f70:	2005      	movs	r0, #5
    1f72:	4b02      	ldr	r3, [pc, #8]	; (1f7c <TC5_Handler+0x10>)
    1f74:	4798      	blx	r3
    1f76:	46bd      	mov	sp, r7
    1f78:	bd80      	pop	{r7, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	00001fa9 	.word	0x00001fa9

00001f80 <TC6_Handler>:
    1f80:	b580      	push	{r7, lr}
    1f82:	af00      	add	r7, sp, #0
    1f84:	2006      	movs	r0, #6
    1f86:	4b02      	ldr	r3, [pc, #8]	; (1f90 <TC6_Handler+0x10>)
    1f88:	4798      	blx	r3
    1f8a:	46bd      	mov	sp, r7
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	00001fa9 	.word	0x00001fa9

00001f94 <TC7_Handler>:
    1f94:	b580      	push	{r7, lr}
    1f96:	af00      	add	r7, sp, #0
    1f98:	2007      	movs	r0, #7
    1f9a:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <TC7_Handler+0x10>)
    1f9c:	4798      	blx	r3
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	00001fa9 	.word	0x00001fa9

00001fa8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b084      	sub	sp, #16
    1fac:	af00      	add	r7, sp, #0
    1fae:	1c02      	adds	r2, r0, #0
    1fb0:	1dfb      	adds	r3, r7, #7
    1fb2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1fb4:	1dfb      	adds	r3, r7, #7
    1fb6:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1fb8:	4b28      	ldr	r3, [pc, #160]	; (205c <STACK_SIZE+0x5c>)
    1fba:	0092      	lsls	r2, r2, #2
    1fbc:	58d3      	ldr	r3, [r2, r3]
    1fbe:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1fc0:	68fb      	ldr	r3, [r7, #12]
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	7b9b      	ldrb	r3, [r3, #14]
    1fc6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1fc8:	68fa      	ldr	r2, [r7, #12]
    1fca:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1fcc:	4013      	ands	r3, r2
    1fce:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1fd0:	68fb      	ldr	r3, [r7, #12]
    1fd2:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1fd4:	230b      	movs	r3, #11
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	400a      	ands	r2, r1
    1fda:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1fdc:	230b      	movs	r3, #11
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	2201      	movs	r2, #1
    1fe4:	4013      	ands	r3, r2
    1fe6:	d008      	beq.n	1ffa <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1fe8:	68fb      	ldr	r3, [r7, #12]
    1fea:	689b      	ldr	r3, [r3, #8]
    1fec:	68fa      	ldr	r2, [r7, #12]
    1fee:	1c10      	adds	r0, r2, #0
    1ff0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	2201      	movs	r2, #1
    1ff8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1ffa:	230b      	movs	r3, #11
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	2202      	movs	r2, #2
    2002:	4013      	ands	r3, r2
    2004:	d008      	beq.n	2018 <STACK_SIZE+0x18>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	68db      	ldr	r3, [r3, #12]
    200a:	68fa      	ldr	r2, [r7, #12]
    200c:	1c10      	adds	r0, r2, #0
    200e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2010:	68fb      	ldr	r3, [r7, #12]
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	2202      	movs	r2, #2
    2016:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2018:	230b      	movs	r3, #11
    201a:	18fb      	adds	r3, r7, r3
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	2210      	movs	r2, #16
    2020:	4013      	ands	r3, r2
    2022:	d008      	beq.n	2036 <STACK_SIZE+0x36>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2024:	68fb      	ldr	r3, [r7, #12]
    2026:	691b      	ldr	r3, [r3, #16]
    2028:	68fa      	ldr	r2, [r7, #12]
    202a:	1c10      	adds	r0, r2, #0
    202c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    202e:	68fb      	ldr	r3, [r7, #12]
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	2210      	movs	r2, #16
    2034:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2036:	230b      	movs	r3, #11
    2038:	18fb      	adds	r3, r7, r3
    203a:	781b      	ldrb	r3, [r3, #0]
    203c:	2220      	movs	r2, #32
    203e:	4013      	ands	r3, r2
    2040:	d008      	beq.n	2054 <STACK_SIZE+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2042:	68fb      	ldr	r3, [r7, #12]
    2044:	695b      	ldr	r3, [r3, #20]
    2046:	68fa      	ldr	r2, [r7, #12]
    2048:	1c10      	adds	r0, r2, #0
    204a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    204c:	68fb      	ldr	r3, [r7, #12]
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	2220      	movs	r2, #32
    2052:	739a      	strb	r2, [r3, #14]
	}
}
    2054:	46bd      	mov	sp, r7
    2056:	b004      	add	sp, #16
    2058:	bd80      	pop	{r7, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	200000bc 	.word	0x200000bc

00002060 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2060:	b580      	push	{r7, lr}
    2062:	b082      	sub	sp, #8
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	2200      	movs	r2, #0
    206c:	701a      	strb	r2, [r3, #0]
}
    206e:	46bd      	mov	sp, r7
    2070:	b002      	add	sp, #8
    2072:	bd80      	pop	{r7, pc}

00002074 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2074:	b580      	push	{r7, lr}
    2076:	b082      	sub	sp, #8
    2078:	af00      	add	r7, sp, #0
    207a:	1c02      	adds	r2, r0, #0
    207c:	6039      	str	r1, [r7, #0]
    207e:	1dfb      	adds	r3, r7, #7
    2080:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2082:	1dfb      	adds	r3, r7, #7
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	2b01      	cmp	r3, #1
    2088:	d00a      	beq.n	20a0 <system_apb_clock_set_mask+0x2c>
    208a:	2b02      	cmp	r3, #2
    208c:	d00f      	beq.n	20ae <system_apb_clock_set_mask+0x3a>
    208e:	2b00      	cmp	r3, #0
    2090:	d114      	bne.n	20bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2092:	4b0e      	ldr	r3, [pc, #56]	; (20cc <system_apb_clock_set_mask+0x58>)
    2094:	4a0d      	ldr	r2, [pc, #52]	; (20cc <system_apb_clock_set_mask+0x58>)
    2096:	6991      	ldr	r1, [r2, #24]
    2098:	683a      	ldr	r2, [r7, #0]
    209a:	430a      	orrs	r2, r1
    209c:	619a      	str	r2, [r3, #24]
			break;
    209e:	e00f      	b.n	20c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    20a0:	4b0a      	ldr	r3, [pc, #40]	; (20cc <system_apb_clock_set_mask+0x58>)
    20a2:	4a0a      	ldr	r2, [pc, #40]	; (20cc <system_apb_clock_set_mask+0x58>)
    20a4:	69d1      	ldr	r1, [r2, #28]
    20a6:	683a      	ldr	r2, [r7, #0]
    20a8:	430a      	orrs	r2, r1
    20aa:	61da      	str	r2, [r3, #28]
			break;
    20ac:	e008      	b.n	20c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20ae:	4b07      	ldr	r3, [pc, #28]	; (20cc <system_apb_clock_set_mask+0x58>)
    20b0:	4a06      	ldr	r2, [pc, #24]	; (20cc <system_apb_clock_set_mask+0x58>)
    20b2:	6a11      	ldr	r1, [r2, #32]
    20b4:	683a      	ldr	r2, [r7, #0]
    20b6:	430a      	orrs	r2, r1
    20b8:	621a      	str	r2, [r3, #32]
			break;
    20ba:	e001      	b.n	20c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    20bc:	2317      	movs	r3, #23
    20be:	e000      	b.n	20c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    20c0:	2300      	movs	r3, #0
}
    20c2:	1c18      	adds	r0, r3, #0
    20c4:	46bd      	mov	sp, r7
    20c6:	b002      	add	sp, #8
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	40000400 	.word	0x40000400

000020d0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	2280      	movs	r2, #128	; 0x80
    20dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	2200      	movs	r2, #0
    20e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	2201      	movs	r2, #1
    20e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	2200      	movs	r2, #0
    20ee:	70da      	strb	r2, [r3, #3]
}
    20f0:	46bd      	mov	sp, r7
    20f2:	b002      	add	sp, #8
    20f4:	bd80      	pop	{r7, pc}
    20f6:	46c0      	nop			; (mov r8, r8)

000020f8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b084      	sub	sp, #16
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	7bdb      	ldrb	r3, [r3, #15]
    210a:	b2db      	uxtb	r3, r3
    210c:	1c1a      	adds	r2, r3, #0
    210e:	2380      	movs	r3, #128	; 0x80
    2110:	4013      	ands	r3, r2
    2112:	1e5a      	subs	r2, r3, #1
    2114:	4193      	sbcs	r3, r2
    2116:	b2db      	uxtb	r3, r3
#endif
}
    2118:	1c18      	adds	r0, r3, #0
    211a:	46bd      	mov	sp, r7
    211c:	b004      	add	sp, #16
    211e:	bd80      	pop	{r7, pc}

00002120 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2120:	b590      	push	{r4, r7, lr}
    2122:	b08d      	sub	sp, #52	; 0x34
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2128:	230c      	movs	r3, #12
    212a:	18fb      	adds	r3, r7, r3
    212c:	4a0f      	ldr	r2, [pc, #60]	; (216c <_tc_get_inst_index+0x4c>)
    212e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2130:	c313      	stmia	r3!, {r0, r1, r4}
    2132:	ca13      	ldmia	r2!, {r0, r1, r4}
    2134:	c313      	stmia	r3!, {r0, r1, r4}
    2136:	ca03      	ldmia	r2!, {r0, r1}
    2138:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    213a:	2300      	movs	r3, #0
    213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    213e:	e00d      	b.n	215c <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    2140:	230c      	movs	r3, #12
    2142:	18fb      	adds	r3, r7, r3
    2144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2146:	0092      	lsls	r2, r2, #2
    2148:	58d2      	ldr	r2, [r2, r3]
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	429a      	cmp	r2, r3
    214e:	d102      	bne.n	2156 <_tc_get_inst_index+0x36>
			return i;
    2150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2152:	b2db      	uxtb	r3, r3
    2154:	e006      	b.n	2164 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2158:	3301      	adds	r3, #1
    215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    215e:	2b07      	cmp	r3, #7
    2160:	d9ee      	bls.n	2140 <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2162:	2300      	movs	r3, #0
}
    2164:	1c18      	adds	r0, r3, #0
    2166:	46bd      	mov	sp, r7
    2168:	b00d      	add	sp, #52	; 0x34
    216a:	bd90      	pop	{r4, r7, pc}
    216c:	00002ee4 	.word	0x00002ee4

00002170 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2170:	b590      	push	{r4, r7, lr}
    2172:	b08f      	sub	sp, #60	; 0x3c
    2174:	af00      	add	r7, sp, #0
    2176:	60f8      	str	r0, [r7, #12]
    2178:	60b9      	str	r1, [r7, #8]
    217a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    217c:	2336      	movs	r3, #54	; 0x36
    217e:	18fb      	adds	r3, r7, r3
    2180:	2200      	movs	r2, #0
    2182:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    2184:	2335      	movs	r3, #53	; 0x35
    2186:	18fb      	adds	r3, r7, r3
    2188:	2200      	movs	r2, #0
    218a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    218c:	2334      	movs	r3, #52	; 0x34
    218e:	18fb      	adds	r3, r7, r3
    2190:	2200      	movs	r2, #0
    2192:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2194:	2331      	movs	r3, #49	; 0x31
    2196:	18fc      	adds	r4, r7, r3
    2198:	68bb      	ldr	r3, [r7, #8]
    219a:	1c18      	adds	r0, r3, #0
    219c:	4bc0      	ldr	r3, [pc, #768]	; (24a0 <tc_init+0x330>)
    219e:	4798      	blx	r3
    21a0:	1c03      	adds	r3, r0, #0
    21a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    21a4:	2328      	movs	r3, #40	; 0x28
    21a6:	18fa      	adds	r2, r7, r3
    21a8:	4bbe      	ldr	r3, [pc, #760]	; (24a4 <tc_init+0x334>)
    21aa:	1c11      	adds	r1, r2, #0
    21ac:	1c1a      	adds	r2, r3, #0
    21ae:	2308      	movs	r3, #8
    21b0:	1c08      	adds	r0, r1, #0
    21b2:	1c11      	adds	r1, r2, #0
    21b4:	1c1a      	adds	r2, r3, #0
    21b6:	4bbc      	ldr	r3, [pc, #752]	; (24a8 <tc_init+0x338>)
    21b8:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    21ba:	2318      	movs	r3, #24
    21bc:	18fa      	adds	r2, r7, r3
    21be:	4bbb      	ldr	r3, [pc, #748]	; (24ac <tc_init+0x33c>)
    21c0:	1c11      	adds	r1, r2, #0
    21c2:	1c1a      	adds	r2, r3, #0
    21c4:	2310      	movs	r3, #16
    21c6:	1c08      	adds	r0, r1, #0
    21c8:	1c11      	adds	r1, r2, #0
    21ca:	1c1a      	adds	r2, r3, #0
    21cc:	4bb6      	ldr	r3, [pc, #728]	; (24a8 <tc_init+0x338>)
    21ce:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    21d0:	2333      	movs	r3, #51	; 0x33
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	2200      	movs	r2, #0
    21d6:	701a      	strb	r2, [r3, #0]
    21d8:	e00e      	b.n	21f8 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    21da:	2333      	movs	r3, #51	; 0x33
    21dc:	18fb      	adds	r3, r7, r3
    21de:	781a      	ldrb	r2, [r3, #0]
    21e0:	68fb      	ldr	r3, [r7, #12]
    21e2:	3202      	adds	r2, #2
    21e4:	0092      	lsls	r2, r2, #2
    21e6:	2100      	movs	r1, #0
    21e8:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    21ea:	2333      	movs	r3, #51	; 0x33
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	781a      	ldrb	r2, [r3, #0]
    21f0:	2333      	movs	r3, #51	; 0x33
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	3201      	adds	r2, #1
    21f6:	701a      	strb	r2, [r3, #0]
    21f8:	2333      	movs	r3, #51	; 0x33
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	781b      	ldrb	r3, [r3, #0]
    21fe:	2b03      	cmp	r3, #3
    2200:	d9eb      	bls.n	21da <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	2200      	movs	r2, #0
    2206:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	2200      	movs	r2, #0
    220c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    220e:	2331      	movs	r3, #49	; 0x31
    2210:	18fb      	adds	r3, r7, r3
    2212:	781a      	ldrb	r2, [r3, #0]
    2214:	4ba6      	ldr	r3, [pc, #664]	; (24b0 <tc_init+0x340>)
    2216:	0092      	lsls	r2, r2, #2
    2218:	68f9      	ldr	r1, [r7, #12]
    221a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    221c:	68fb      	ldr	r3, [r7, #12]
    221e:	68ba      	ldr	r2, [r7, #8]
    2220:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	789b      	ldrb	r3, [r3, #2]
    2226:	2b08      	cmp	r3, #8
    2228:	d107      	bne.n	223a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    222a:	2331      	movs	r3, #49	; 0x31
    222c:	18fb      	adds	r3, r7, r3
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	2201      	movs	r2, #1
    2232:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2234:	d001      	beq.n	223a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2236:	2317      	movs	r3, #23
    2238:	e1c3      	b.n	25c2 <tc_init+0x452>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	789a      	ldrb	r2, [r3, #2]
    223e:	68fb      	ldr	r3, [r7, #12]
    2240:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2242:	68bb      	ldr	r3, [r7, #8]
    2244:	881b      	ldrh	r3, [r3, #0]
    2246:	b29b      	uxth	r3, r3
    2248:	1c1a      	adds	r2, r3, #0
    224a:	2301      	movs	r3, #1
    224c:	4013      	ands	r3, r2
    224e:	d001      	beq.n	2254 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2250:	2305      	movs	r3, #5
    2252:	e1b6      	b.n	25c2 <tc_init+0x452>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2254:	68bb      	ldr	r3, [r7, #8]
    2256:	7bdb      	ldrb	r3, [r3, #15]
    2258:	b2db      	uxtb	r3, r3
    225a:	1c1a      	adds	r2, r3, #0
    225c:	2310      	movs	r3, #16
    225e:	4013      	ands	r3, r2
    2260:	d001      	beq.n	2266 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2262:	231c      	movs	r3, #28
    2264:	e1ad      	b.n	25c2 <tc_init+0x452>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2266:	68bb      	ldr	r3, [r7, #8]
    2268:	881b      	ldrh	r3, [r3, #0]
    226a:	b29b      	uxth	r3, r3
    226c:	1c1a      	adds	r2, r3, #0
    226e:	2302      	movs	r3, #2
    2270:	4013      	ands	r3, r2
    2272:	d001      	beq.n	2278 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2274:	231c      	movs	r3, #28
    2276:	e1a4      	b.n	25c2 <tc_init+0x452>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	7c1b      	ldrb	r3, [r3, #16]
    227c:	2b00      	cmp	r3, #0
    227e:	d017      	beq.n	22b0 <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    2280:	2314      	movs	r3, #20
    2282:	18fb      	adds	r3, r7, r3
    2284:	1c18      	adds	r0, r3, #0
    2286:	4b8b      	ldr	r3, [pc, #556]	; (24b4 <tc_init+0x344>)
    2288:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	699b      	ldr	r3, [r3, #24]
    228e:	b2da      	uxtb	r2, r3
    2290:	2314      	movs	r3, #20
    2292:	18fb      	adds	r3, r7, r3
    2294:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2296:	2314      	movs	r3, #20
    2298:	18fb      	adds	r3, r7, r3
    229a:	2201      	movs	r2, #1
    229c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    22a2:	b2da      	uxtb	r2, r3
    22a4:	2314      	movs	r3, #20
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	1c10      	adds	r0, r2, #0
    22aa:	1c19      	adds	r1, r3, #0
    22ac:	4b82      	ldr	r3, [pc, #520]	; (24b8 <tc_init+0x348>)
    22ae:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	7f1b      	ldrb	r3, [r3, #28]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d017      	beq.n	22e8 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    22b8:	2314      	movs	r3, #20
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	1c18      	adds	r0, r3, #0
    22be:	4b7d      	ldr	r3, [pc, #500]	; (24b4 <tc_init+0x344>)
    22c0:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22c6:	b2da      	uxtb	r2, r3
    22c8:	2314      	movs	r3, #20
    22ca:	18fb      	adds	r3, r7, r3
    22cc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    22ce:	2314      	movs	r3, #20
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	2201      	movs	r2, #1
    22d4:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    22da:	b2da      	uxtb	r2, r3
    22dc:	2314      	movs	r3, #20
    22de:	18fb      	adds	r3, r7, r3
    22e0:	1c10      	adds	r0, r2, #0
    22e2:	1c19      	adds	r1, r3, #0
    22e4:	4b74      	ldr	r3, [pc, #464]	; (24b8 <tc_init+0x348>)
    22e6:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    22e8:	2331      	movs	r3, #49	; 0x31
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	781a      	ldrb	r2, [r3, #0]
    22ee:	2318      	movs	r3, #24
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	0052      	lsls	r2, r2, #1
    22f4:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    22f6:	2002      	movs	r0, #2
    22f8:	1c19      	adds	r1, r3, #0
    22fa:	4b70      	ldr	r3, [pc, #448]	; (24bc <tc_init+0x34c>)
    22fc:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	789b      	ldrb	r3, [r3, #2]
    2302:	2b08      	cmp	r3, #8
    2304:	d10b      	bne.n	231e <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2306:	2331      	movs	r3, #49	; 0x31
    2308:	18fb      	adds	r3, r7, r3
    230a:	781b      	ldrb	r3, [r3, #0]
    230c:	1c5a      	adds	r2, r3, #1
    230e:	2318      	movs	r3, #24
    2310:	18fb      	adds	r3, r7, r3
    2312:	0052      	lsls	r2, r2, #1
    2314:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2316:	2002      	movs	r0, #2
    2318:	1c19      	adds	r1, r3, #0
    231a:	4b68      	ldr	r3, [pc, #416]	; (24bc <tc_init+0x34c>)
    231c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    231e:	2310      	movs	r3, #16
    2320:	18fb      	adds	r3, r7, r3
    2322:	1c18      	adds	r0, r3, #0
    2324:	4b66      	ldr	r3, [pc, #408]	; (24c0 <tc_init+0x350>)
    2326:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	781a      	ldrb	r2, [r3, #0]
    232c:	2310      	movs	r3, #16
    232e:	18fb      	adds	r3, r7, r3
    2330:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2332:	2331      	movs	r3, #49	; 0x31
    2334:	18fb      	adds	r3, r7, r3
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2228      	movs	r2, #40	; 0x28
    233a:	18ba      	adds	r2, r7, r2
    233c:	5cd2      	ldrb	r2, [r2, r3]
    233e:	2310      	movs	r3, #16
    2340:	18fb      	adds	r3, r7, r3
    2342:	1c10      	adds	r0, r2, #0
    2344:	1c19      	adds	r1, r3, #0
    2346:	4b5f      	ldr	r3, [pc, #380]	; (24c4 <tc_init+0x354>)
    2348:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    234a:	2331      	movs	r3, #49	; 0x31
    234c:	18fb      	adds	r3, r7, r3
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	2228      	movs	r2, #40	; 0x28
    2352:	18ba      	adds	r2, r7, r2
    2354:	5cd3      	ldrb	r3, [r2, r3]
    2356:	1c18      	adds	r0, r3, #0
    2358:	4b5b      	ldr	r3, [pc, #364]	; (24c8 <tc_init+0x358>)
    235a:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2364:	4313      	orrs	r3, r2
    2366:	b2db      	uxtb	r3, r3
    2368:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    236e:	4313      	orrs	r3, r2
    2370:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    2372:	687b      	ldr	r3, [r7, #4]
    2374:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2376:	2336      	movs	r3, #54	; 0x36
    2378:	18fb      	adds	r3, r7, r3
    237a:	430a      	orrs	r2, r1
    237c:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	785b      	ldrb	r3, [r3, #1]
    2382:	2b00      	cmp	r3, #0
    2384:	d008      	beq.n	2398 <tc_init+0x228>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2386:	2336      	movs	r3, #54	; 0x36
    2388:	18fb      	adds	r3, r7, r3
    238a:	2236      	movs	r2, #54	; 0x36
    238c:	18ba      	adds	r2, r7, r2
    238e:	8812      	ldrh	r2, [r2, #0]
    2390:	2180      	movs	r1, #128	; 0x80
    2392:	0109      	lsls	r1, r1, #4
    2394:	430a      	orrs	r2, r1
    2396:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2398:	46c0      	nop			; (mov r8, r8)
    239a:	68fb      	ldr	r3, [r7, #12]
    239c:	1c18      	adds	r0, r3, #0
    239e:	4b4b      	ldr	r3, [pc, #300]	; (24cc <tc_init+0x35c>)
    23a0:	4798      	blx	r3
    23a2:	1e03      	subs	r3, r0, #0
    23a4:	d1f9      	bne.n	239a <tc_init+0x22a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    23a6:	68bb      	ldr	r3, [r7, #8]
    23a8:	2236      	movs	r2, #54	; 0x36
    23aa:	18ba      	adds	r2, r7, r2
    23ac:	8812      	ldrh	r2, [r2, #0]
    23ae:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	7b5b      	ldrb	r3, [r3, #13]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d003      	beq.n	23c0 <tc_init+0x250>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    23b8:	2335      	movs	r3, #53	; 0x35
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	2204      	movs	r2, #4
    23be:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	7b9b      	ldrb	r3, [r3, #14]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d007      	beq.n	23d8 <tc_init+0x268>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    23c8:	2335      	movs	r3, #53	; 0x35
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	2235      	movs	r2, #53	; 0x35
    23ce:	18ba      	adds	r2, r7, r2
    23d0:	7812      	ldrb	r2, [r2, #0]
    23d2:	2101      	movs	r1, #1
    23d4:	430a      	orrs	r2, r1
    23d6:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    23d8:	46c0      	nop			; (mov r8, r8)
    23da:	68fb      	ldr	r3, [r7, #12]
    23dc:	1c18      	adds	r0, r3, #0
    23de:	4b3b      	ldr	r3, [pc, #236]	; (24cc <tc_init+0x35c>)
    23e0:	4798      	blx	r3
    23e2:	1e03      	subs	r3, r0, #0
    23e4:	d1f9      	bne.n	23da <tc_init+0x26a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    23e6:	68bb      	ldr	r3, [r7, #8]
    23e8:	22ff      	movs	r2, #255	; 0xff
    23ea:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    23ec:	2335      	movs	r3, #53	; 0x35
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d00b      	beq.n	240e <tc_init+0x29e>
		while (tc_is_syncing(module_inst)) {
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	1c18      	adds	r0, r3, #0
    23fc:	4b33      	ldr	r3, [pc, #204]	; (24cc <tc_init+0x35c>)
    23fe:	4798      	blx	r3
    2400:	1e03      	subs	r3, r0, #0
    2402:	d1f9      	bne.n	23f8 <tc_init+0x288>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2404:	68bb      	ldr	r3, [r7, #8]
    2406:	2235      	movs	r2, #53	; 0x35
    2408:	18ba      	adds	r2, r7, r2
    240a:	7812      	ldrb	r2, [r2, #0]
    240c:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    240e:	2334      	movs	r3, #52	; 0x34
    2410:	18fb      	adds	r3, r7, r3
    2412:	687a      	ldr	r2, [r7, #4]
    2414:	7a92      	ldrb	r2, [r2, #10]
    2416:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2418:	2332      	movs	r3, #50	; 0x32
    241a:	18fb      	adds	r3, r7, r3
    241c:	2200      	movs	r2, #0
    241e:	701a      	strb	r2, [r3, #0]
    2420:	e01c      	b.n	245c <tc_init+0x2ec>
		if (config->enable_capture_on_channel[i] == true) {
    2422:	2332      	movs	r3, #50	; 0x32
    2424:	18fb      	adds	r3, r7, r3
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	687a      	ldr	r2, [r7, #4]
    242a:	18d3      	adds	r3, r2, r3
    242c:	7adb      	ldrb	r3, [r3, #11]
    242e:	2b00      	cmp	r3, #0
    2430:	d00d      	beq.n	244e <tc_init+0x2de>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2432:	2332      	movs	r3, #50	; 0x32
    2434:	18fb      	adds	r3, r7, r3
    2436:	781b      	ldrb	r3, [r3, #0]
    2438:	2210      	movs	r2, #16
    243a:	409a      	lsls	r2, r3
    243c:	1c13      	adds	r3, r2, #0
    243e:	b2d9      	uxtb	r1, r3
    2440:	2334      	movs	r3, #52	; 0x34
    2442:	18fb      	adds	r3, r7, r3
    2444:	2234      	movs	r2, #52	; 0x34
    2446:	18ba      	adds	r2, r7, r2
    2448:	7812      	ldrb	r2, [r2, #0]
    244a:	430a      	orrs	r2, r1
    244c:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    244e:	2332      	movs	r3, #50	; 0x32
    2450:	18fb      	adds	r3, r7, r3
    2452:	781a      	ldrb	r2, [r3, #0]
    2454:	2332      	movs	r3, #50	; 0x32
    2456:	18fb      	adds	r3, r7, r3
    2458:	3201      	adds	r2, #1
    245a:	701a      	strb	r2, [r3, #0]
    245c:	2332      	movs	r3, #50	; 0x32
    245e:	18fb      	adds	r3, r7, r3
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b01      	cmp	r3, #1
    2464:	d9dd      	bls.n	2422 <tc_init+0x2b2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	68fb      	ldr	r3, [r7, #12]
    246a:	1c18      	adds	r0, r3, #0
    246c:	4b17      	ldr	r3, [pc, #92]	; (24cc <tc_init+0x35c>)
    246e:	4798      	blx	r3
    2470:	1e03      	subs	r3, r0, #0
    2472:	d1f9      	bne.n	2468 <tc_init+0x2f8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	2234      	movs	r2, #52	; 0x34
    2478:	18ba      	adds	r2, r7, r2
    247a:	7812      	ldrb	r2, [r2, #0]
    247c:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	68fb      	ldr	r3, [r7, #12]
    2482:	1c18      	adds	r0, r3, #0
    2484:	4b11      	ldr	r3, [pc, #68]	; (24cc <tc_init+0x35c>)
    2486:	4798      	blx	r3
    2488:	1e03      	subs	r3, r0, #0
    248a:	d1f9      	bne.n	2480 <tc_init+0x310>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	791b      	ldrb	r3, [r3, #4]
    2490:	2b04      	cmp	r3, #4
    2492:	d01d      	beq.n	24d0 <tc_init+0x360>
    2494:	2b08      	cmp	r3, #8
    2496:	d100      	bne.n	249a <tc_init+0x32a>
    2498:	e06f      	b.n	257a <tc_init+0x40a>
    249a:	2b00      	cmp	r3, #0
    249c:	d04a      	beq.n	2534 <tc_init+0x3c4>
    249e:	e08f      	b.n	25c0 <tc_init+0x450>
    24a0:	00002121 	.word	0x00002121
    24a4:	00002f04 	.word	0x00002f04
    24a8:	00002e41 	.word	0x00002e41
    24ac:	00002f0c 	.word	0x00002f0c
    24b0:	200000bc 	.word	0x200000bc
    24b4:	000020d1 	.word	0x000020d1
    24b8:	00001e0d 	.word	0x00001e0d
    24bc:	00002075 	.word	0x00002075
    24c0:	00002061 	.word	0x00002061
    24c4:	00001b21 	.word	0x00001b21
    24c8:	00001b65 	.word	0x00001b65
    24cc:	000020f9 	.word	0x000020f9
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    24d0:	46c0      	nop			; (mov r8, r8)
    24d2:	68fb      	ldr	r3, [r7, #12]
    24d4:	1c18      	adds	r0, r3, #0
    24d6:	4b3d      	ldr	r3, [pc, #244]	; (25cc <tc_init+0x45c>)
    24d8:	4798      	blx	r3
    24da:	1e03      	subs	r3, r0, #0
    24dc:	d1f9      	bne.n	24d2 <tc_init+0x362>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	2228      	movs	r2, #40	; 0x28
    24e2:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    24e4:	68bb      	ldr	r3, [r7, #8]
    24e6:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    24e8:	46c0      	nop			; (mov r8, r8)
    24ea:	68fb      	ldr	r3, [r7, #12]
    24ec:	1c18      	adds	r0, r3, #0
    24ee:	4b37      	ldr	r3, [pc, #220]	; (25cc <tc_init+0x45c>)
    24f0:	4798      	blx	r3
    24f2:	1e03      	subs	r3, r0, #0
    24f4:	d1f9      	bne.n	24ea <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	2229      	movs	r2, #41	; 0x29
    24fa:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    24fc:	68bb      	ldr	r3, [r7, #8]
    24fe:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2500:	46c0      	nop			; (mov r8, r8)
    2502:	68fb      	ldr	r3, [r7, #12]
    2504:	1c18      	adds	r0, r3, #0
    2506:	4b31      	ldr	r3, [pc, #196]	; (25cc <tc_init+0x45c>)
    2508:	4798      	blx	r3
    250a:	1e03      	subs	r3, r0, #0
    250c:	d1f9      	bne.n	2502 <tc_init+0x392>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	222a      	movs	r2, #42	; 0x2a
    2512:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    2514:	68bb      	ldr	r3, [r7, #8]
    2516:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2518:	46c0      	nop			; (mov r8, r8)
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	1c18      	adds	r0, r3, #0
    251e:	4b2b      	ldr	r3, [pc, #172]	; (25cc <tc_init+0x45c>)
    2520:	4798      	blx	r3
    2522:	1e03      	subs	r3, r0, #0
    2524:	d1f9      	bne.n	251a <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	222b      	movs	r2, #43	; 0x2b
    252a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    252c:	68bb      	ldr	r3, [r7, #8]
    252e:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    2530:	2300      	movs	r3, #0
    2532:	e046      	b.n	25c2 <tc_init+0x452>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    2534:	46c0      	nop			; (mov r8, r8)
    2536:	68fb      	ldr	r3, [r7, #12]
    2538:	1c18      	adds	r0, r3, #0
    253a:	4b24      	ldr	r3, [pc, #144]	; (25cc <tc_init+0x45c>)
    253c:	4798      	blx	r3
    253e:	1e03      	subs	r3, r0, #0
    2540:	d1f9      	bne.n	2536 <tc_init+0x3c6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2546:	68bb      	ldr	r3, [r7, #8]
    2548:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	1c18      	adds	r0, r3, #0
    2550:	4b1e      	ldr	r3, [pc, #120]	; (25cc <tc_init+0x45c>)
    2552:	4798      	blx	r3
    2554:	1e03      	subs	r3, r0, #0
    2556:	d1f9      	bne.n	254c <tc_init+0x3dc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    255c:	68bb      	ldr	r3, [r7, #8]
    255e:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	68fb      	ldr	r3, [r7, #12]
    2564:	1c18      	adds	r0, r3, #0
    2566:	4b19      	ldr	r3, [pc, #100]	; (25cc <tc_init+0x45c>)
    2568:	4798      	blx	r3
    256a:	1e03      	subs	r3, r0, #0
    256c:	d1f9      	bne.n	2562 <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    256e:	687b      	ldr	r3, [r7, #4]
    2570:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    2572:	68bb      	ldr	r3, [r7, #8]
    2574:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2576:	2300      	movs	r3, #0
    2578:	e023      	b.n	25c2 <tc_init+0x452>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	68fb      	ldr	r3, [r7, #12]
    257e:	1c18      	adds	r0, r3, #0
    2580:	4b12      	ldr	r3, [pc, #72]	; (25cc <tc_init+0x45c>)
    2582:	4798      	blx	r3
    2584:	1e03      	subs	r3, r0, #0
    2586:	d1f9      	bne.n	257c <tc_init+0x40c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    258c:	68bb      	ldr	r3, [r7, #8]
    258e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    2590:	46c0      	nop			; (mov r8, r8)
    2592:	68fb      	ldr	r3, [r7, #12]
    2594:	1c18      	adds	r0, r3, #0
    2596:	4b0d      	ldr	r3, [pc, #52]	; (25cc <tc_init+0x45c>)
    2598:	4798      	blx	r3
    259a:	1e03      	subs	r3, r0, #0
    259c:	d1f9      	bne.n	2592 <tc_init+0x422>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    259e:	687b      	ldr	r3, [r7, #4]
    25a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    25a2:	68bb      	ldr	r3, [r7, #8]
    25a4:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	1c18      	adds	r0, r3, #0
    25ac:	4b07      	ldr	r3, [pc, #28]	; (25cc <tc_init+0x45c>)
    25ae:	4798      	blx	r3
    25b0:	1e03      	subs	r3, r0, #0
    25b2:	d1f9      	bne.n	25a8 <tc_init+0x438>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    25b8:	68bb      	ldr	r3, [r7, #8]
    25ba:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    25bc:	2300      	movs	r3, #0
    25be:	e000      	b.n	25c2 <tc_init+0x452>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    25c0:	2317      	movs	r3, #23
}
    25c2:	1c18      	adds	r0, r3, #0
    25c4:	46bd      	mov	sp, r7
    25c6:	b00f      	add	sp, #60	; 0x3c
    25c8:	bd90      	pop	{r4, r7, pc}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	000020f9 	.word	0x000020f9

000025d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	b082      	sub	sp, #8
    25d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    25d6:	4b19      	ldr	r3, [pc, #100]	; (263c <Reset_Handler+0x6c>)
    25d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    25da:	4b19      	ldr	r3, [pc, #100]	; (2640 <Reset_Handler+0x70>)
    25dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    25de:	687a      	ldr	r2, [r7, #4]
    25e0:	683b      	ldr	r3, [r7, #0]
    25e2:	429a      	cmp	r2, r3
    25e4:	d00c      	beq.n	2600 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    25e6:	e007      	b.n	25f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    25e8:	683b      	ldr	r3, [r7, #0]
    25ea:	1d1a      	adds	r2, r3, #4
    25ec:	603a      	str	r2, [r7, #0]
    25ee:	687a      	ldr	r2, [r7, #4]
    25f0:	1d11      	adds	r1, r2, #4
    25f2:	6079      	str	r1, [r7, #4]
    25f4:	6812      	ldr	r2, [r2, #0]
    25f6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    25f8:	683a      	ldr	r2, [r7, #0]
    25fa:	4b12      	ldr	r3, [pc, #72]	; (2644 <Reset_Handler+0x74>)
    25fc:	429a      	cmp	r2, r3
    25fe:	d3f3      	bcc.n	25e8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2600:	4b11      	ldr	r3, [pc, #68]	; (2648 <Reset_Handler+0x78>)
    2602:	603b      	str	r3, [r7, #0]
    2604:	e004      	b.n	2610 <Reset_Handler+0x40>
                *pDest++ = 0;
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	1d1a      	adds	r2, r3, #4
    260a:	603a      	str	r2, [r7, #0]
    260c:	2200      	movs	r2, #0
    260e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2610:	683a      	ldr	r2, [r7, #0]
    2612:	4b0e      	ldr	r3, [pc, #56]	; (264c <Reset_Handler+0x7c>)
    2614:	429a      	cmp	r2, r3
    2616:	d3f6      	bcc.n	2606 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <Reset_Handler+0x80>)
    261a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    261c:	4b0d      	ldr	r3, [pc, #52]	; (2654 <Reset_Handler+0x84>)
    261e:	687a      	ldr	r2, [r7, #4]
    2620:	21ff      	movs	r1, #255	; 0xff
    2622:	438a      	bics	r2, r1
    2624:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2626:	4b0c      	ldr	r3, [pc, #48]	; (2658 <Reset_Handler+0x88>)
    2628:	685a      	ldr	r2, [r3, #4]
    262a:	2180      	movs	r1, #128	; 0x80
    262c:	430a      	orrs	r2, r1
    262e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    2630:	4b0a      	ldr	r3, [pc, #40]	; (265c <Reset_Handler+0x8c>)
    2632:	4798      	blx	r3

        /* Branch to main function */
        main();
    2634:	4b0a      	ldr	r3, [pc, #40]	; (2660 <Reset_Handler+0x90>)
    2636:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2638:	e7fe      	b.n	2638 <Reset_Handler+0x68>
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	00002f3c 	.word	0x00002f3c
    2640:	20000000 	.word	0x20000000
    2644:	20000034 	.word	0x20000034
    2648:	20000034 	.word	0x20000034
    264c:	2000012c 	.word	0x2000012c
    2650:	00000000 	.word	0x00000000
    2654:	e000ed00 	.word	0xe000ed00
    2658:	41004000 	.word	0x41004000
    265c:	00002df5 	.word	0x00002df5
    2660:	00002bc9 	.word	0x00002bc9

00002664 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2664:	b580      	push	{r7, lr}
    2666:	af00      	add	r7, sp, #0
        while (1) {
        }
    2668:	e7fe      	b.n	2668 <Dummy_Handler+0x4>
    266a:	46c0      	nop			; (mov r8, r8)

0000266c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    266c:	b580      	push	{r7, lr}
    266e:	b084      	sub	sp, #16
    2670:	af00      	add	r7, sp, #0
    2672:	1c02      	adds	r2, r0, #0
    2674:	1dfb      	adds	r3, r7, #7
    2676:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2678:	230f      	movs	r3, #15
    267a:	18fb      	adds	r3, r7, r3
    267c:	1dfa      	adds	r2, r7, #7
    267e:	7812      	ldrb	r2, [r2, #0]
    2680:	09d2      	lsrs	r2, r2, #7
    2682:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2684:	230e      	movs	r3, #14
    2686:	18fb      	adds	r3, r7, r3
    2688:	1dfa      	adds	r2, r7, #7
    268a:	7812      	ldrb	r2, [r2, #0]
    268c:	0952      	lsrs	r2, r2, #5
    268e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2690:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2692:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2694:	230f      	movs	r3, #15
    2696:	18fb      	adds	r3, r7, r3
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d10f      	bne.n	26be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    269e:	230f      	movs	r3, #15
    26a0:	18fb      	adds	r3, r7, r3
    26a2:	781b      	ldrb	r3, [r3, #0]
    26a4:	009b      	lsls	r3, r3, #2
    26a6:	2210      	movs	r2, #16
    26a8:	4694      	mov	ip, r2
    26aa:	44bc      	add	ip, r7
    26ac:	4463      	add	r3, ip
    26ae:	3b08      	subs	r3, #8
    26b0:	681a      	ldr	r2, [r3, #0]
    26b2:	230e      	movs	r3, #14
    26b4:	18fb      	adds	r3, r7, r3
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	01db      	lsls	r3, r3, #7
    26ba:	18d3      	adds	r3, r2, r3
    26bc:	e000      	b.n	26c0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    26be:	2300      	movs	r3, #0
	}
}
    26c0:	1c18      	adds	r0, r3, #0
    26c2:	46bd      	mov	sp, r7
    26c4:	b004      	add	sp, #16
    26c6:	bd80      	pop	{r7, pc}
    26c8:	41004400 	.word	0x41004400

000026cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b082      	sub	sp, #8
    26d0:	af00      	add	r7, sp, #0
    26d2:	1c02      	adds	r2, r0, #0
    26d4:	1dfb      	adds	r3, r7, #7
    26d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    26d8:	1dfb      	adds	r3, r7, #7
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	1c18      	adds	r0, r3, #0
    26de:	4b03      	ldr	r3, [pc, #12]	; (26ec <port_get_group_from_gpio_pin+0x20>)
    26e0:	4798      	blx	r3
    26e2:	1c03      	adds	r3, r0, #0
}
    26e4:	1c18      	adds	r0, r3, #0
    26e6:	46bd      	mov	sp, r7
    26e8:	b002      	add	sp, #8
    26ea:	bd80      	pop	{r7, pc}
    26ec:	0000266d 	.word	0x0000266d

000026f0 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	b084      	sub	sp, #16
    26f4:	af00      	add	r7, sp, #0
    26f6:	1c02      	adds	r2, r0, #0
    26f8:	1dfb      	adds	r3, r7, #7
    26fa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    26fc:	1dfb      	adds	r3, r7, #7
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	1c18      	adds	r0, r3, #0
    2702:	4b09      	ldr	r3, [pc, #36]	; (2728 <port_pin_toggle_output_level+0x38>)
    2704:	4798      	blx	r3
    2706:	1c03      	adds	r3, r0, #0
    2708:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    270a:	1dfb      	adds	r3, r7, #7
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	221f      	movs	r2, #31
    2710:	4013      	ands	r3, r2
    2712:	2201      	movs	r2, #1
    2714:	409a      	lsls	r2, r3
    2716:	1c13      	adds	r3, r2, #0
    2718:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    271a:	68fb      	ldr	r3, [r7, #12]
    271c:	68ba      	ldr	r2, [r7, #8]
    271e:	61da      	str	r2, [r3, #28]
}
    2720:	46bd      	mov	sp, r7
    2722:	b004      	add	sp, #16
    2724:	bd80      	pop	{r7, pc}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	000026cd 	.word	0x000026cd

0000272c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    272c:	b580      	push	{r7, lr}
    272e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2730:	4b03      	ldr	r3, [pc, #12]	; (2740 <system_interrupt_enable_global+0x14>)
    2732:	2201      	movs	r2, #1
    2734:	701a      	strb	r2, [r3, #0]
    2736:	f3bf 8f5f 	dmb	sy
    273a:	b662      	cpsie	i
}
    273c:	46bd      	mov	sp, r7
    273e:	bd80      	pop	{r7, pc}
    2740:	20000000 	.word	0x20000000

00002744 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
    274a:	1c02      	adds	r2, r0, #0
    274c:	1dfb      	adds	r3, r7, #7
    274e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2750:	4b06      	ldr	r3, [pc, #24]	; (276c <system_interrupt_enable+0x28>)
    2752:	1dfa      	adds	r2, r7, #7
    2754:	7812      	ldrb	r2, [r2, #0]
    2756:	1c11      	adds	r1, r2, #0
    2758:	221f      	movs	r2, #31
    275a:	400a      	ands	r2, r1
    275c:	2101      	movs	r1, #1
    275e:	4091      	lsls	r1, r2
    2760:	1c0a      	adds	r2, r1, #0
    2762:	601a      	str	r2, [r3, #0]
}
    2764:	46bd      	mov	sp, r7
    2766:	b002      	add	sp, #8
    2768:	bd80      	pop	{r7, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	e000e100 	.word	0xe000e100

00002770 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2770:	b580      	push	{r7, lr}
    2772:	b084      	sub	sp, #16
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    277e:	68fb      	ldr	r3, [r7, #12]
    2780:	8a1b      	ldrh	r3, [r3, #16]
    2782:	b29b      	uxth	r3, r3
    2784:	1c1a      	adds	r2, r3, #0
    2786:	2380      	movs	r3, #128	; 0x80
    2788:	021b      	lsls	r3, r3, #8
    278a:	4013      	ands	r3, r2
    278c:	1e5a      	subs	r2, r3, #1
    278e:	4193      	sbcs	r3, r2
    2790:	b2db      	uxtb	r3, r3
#  endif
}
    2792:	1c18      	adds	r0, r3, #0
    2794:	46bd      	mov	sp, r7
    2796:	b004      	add	sp, #16
    2798:	bd80      	pop	{r7, pc}
    279a:	46c0      	nop			; (mov r8, r8)

0000279c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	2201      	movs	r2, #1
    27a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	2200      	movs	r2, #0
    27ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	2200      	movs	r2, #0
    27b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	22c0      	movs	r2, #192	; 0xc0
    27ba:	0392      	lsls	r2, r2, #14
    27bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	2200      	movs	r2, #0
    27c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	2200      	movs	r2, #0
    27c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	2201      	movs	r2, #1
    27ce:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    27d0:	687b      	ldr	r3, [r7, #4]
    27d2:	2220      	movs	r2, #32
    27d4:	2100      	movs	r1, #0
    27d6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	3314      	adds	r3, #20
    27dc:	1c18      	adds	r0, r3, #0
    27de:	2100      	movs	r1, #0
    27e0:	220c      	movs	r2, #12
    27e2:	4b0a      	ldr	r3, [pc, #40]	; (280c <spi_get_config_defaults+0x70>)
    27e4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	4a09      	ldr	r2, [pc, #36]	; (2810 <spi_get_config_defaults+0x74>)
    27ea:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	2200      	movs	r2, #0
    27f0:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	2200      	movs	r2, #0
    27f6:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	2200      	movs	r2, #0
    27fc:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	2200      	movs	r2, #0
    2802:	631a      	str	r2, [r3, #48]	; 0x30

};
    2804:	46bd      	mov	sp, r7
    2806:	b002      	add	sp, #8
    2808:	bd80      	pop	{r7, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	00002e53 	.word	0x00002e53
    2810:	000186a0 	.word	0x000186a0

00002814 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2814:	b580      	push	{r7, lr}
    2816:	b084      	sub	sp, #16
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	681b      	ldr	r3, [r3, #0]
    2820:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	1c18      	adds	r0, r3, #0
    2828:	4b0a      	ldr	r3, [pc, #40]	; (2854 <spi_enable+0x40>)
    282a:	4798      	blx	r3
    282c:	1c03      	adds	r3, r0, #0
    282e:	1c18      	adds	r0, r3, #0
    2830:	4b09      	ldr	r3, [pc, #36]	; (2858 <spi_enable+0x44>)
    2832:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2834:	46c0      	nop			; (mov r8, r8)
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	1c18      	adds	r0, r3, #0
    283a:	4b08      	ldr	r3, [pc, #32]	; (285c <spi_enable+0x48>)
    283c:	4798      	blx	r3
    283e:	1e03      	subs	r3, r0, #0
    2840:	d1f9      	bne.n	2836 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2842:	68fb      	ldr	r3, [r7, #12]
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	2202      	movs	r2, #2
    2848:	431a      	orrs	r2, r3
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	601a      	str	r2, [r3, #0]
}
    284e:	46bd      	mov	sp, r7
    2850:	b004      	add	sp, #16
    2852:	bd80      	pop	{r7, pc}
    2854:	000006fd 	.word	0x000006fd
    2858:	00002745 	.word	0x00002745
    285c:	00002771 	.word	0x00002771

00002860 <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
    2860:	b580      	push	{r7, lr}
    2862:	b082      	sub	sp, #8
    2864:	af00      	add	r7, sp, #0
    2866:	6078      	str	r0, [r7, #4]
    2868:	1c0a      	adds	r2, r1, #0
    286a:	1cfb      	adds	r3, r7, #3
    286c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	222f      	movs	r2, #47	; 0x2f
    2872:	5c9b      	ldrb	r3, [r3, r2]
    2874:	b2d9      	uxtb	r1, r3
    2876:	1cfb      	adds	r3, r7, #3
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	2201      	movs	r2, #1
    287c:	409a      	lsls	r2, r3
    287e:	1c13      	adds	r3, r2, #0
    2880:	b2db      	uxtb	r3, r3
    2882:	1c0a      	adds	r2, r1, #0
    2884:	4313      	orrs	r3, r2
    2886:	b2db      	uxtb	r3, r3
    2888:	b2d9      	uxtb	r1, r3
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	222f      	movs	r2, #47	; 0x2f
    288e:	5499      	strb	r1, [r3, r2]
}
    2890:	46bd      	mov	sp, r7
    2892:	b002      	add	sp, #8
    2894:	bd80      	pop	{r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)

00002898 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	7bdb      	ldrb	r3, [r3, #15]
    28aa:	b2db      	uxtb	r3, r3
    28ac:	1c1a      	adds	r2, r3, #0
    28ae:	2380      	movs	r3, #128	; 0x80
    28b0:	4013      	ands	r3, r2
    28b2:	1e5a      	subs	r2, r3, #1
    28b4:	4193      	sbcs	r3, r2
    28b6:	b2db      	uxtb	r3, r3
#endif
}
    28b8:	1c18      	adds	r0, r3, #0
    28ba:	46bd      	mov	sp, r7
    28bc:	b004      	add	sp, #16
    28be:	bd80      	pop	{r7, pc}

000028c0 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	af00      	add	r7, sp, #0
    28c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	2200      	movs	r2, #0
    28cc:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	2200      	movs	r2, #0
    28d2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	2200      	movs	r2, #0
    28d8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	2200      	movs	r2, #0
    28de:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	2200      	movs	r2, #0
    28e4:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	2200      	movs	r2, #0
    28ea:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	2200      	movs	r2, #0
    28f0:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	2200      	movs	r2, #0
    28f6:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	2200      	movs	r2, #0
    28fc:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	2200      	movs	r2, #0
    2902:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	2200      	movs	r2, #0
    2908:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	2200      	movs	r2, #0
    290e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	2200      	movs	r2, #0
    2914:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2200      	movs	r2, #0
    291a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	2200      	movs	r2, #0
    2920:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	2200      	movs	r2, #0
    2926:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	2200      	movs	r2, #0
    292c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	2200      	movs	r2, #0
    2932:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	2200      	movs	r2, #0
    2938:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	2200      	movs	r2, #0
    293e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    2940:	46bd      	mov	sp, r7
    2942:	b002      	add	sp, #8
    2944:	bd80      	pop	{r7, pc}
    2946:	46c0      	nop			; (mov r8, r8)

00002948 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    2948:	b580      	push	{r7, lr}
    294a:	b084      	sub	sp, #16
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	1c18      	adds	r0, r3, #0
    295c:	4b07      	ldr	r3, [pc, #28]	; (297c <tc_enable+0x34>)
    295e:	4798      	blx	r3
    2960:	1e03      	subs	r3, r0, #0
    2962:	d1f9      	bne.n	2958 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	881b      	ldrh	r3, [r3, #0]
    2968:	b29b      	uxth	r3, r3
    296a:	2202      	movs	r2, #2
    296c:	4313      	orrs	r3, r2
    296e:	b29a      	uxth	r2, r3
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	801a      	strh	r2, [r3, #0]
}
    2974:	46bd      	mov	sp, r7
    2976:	b004      	add	sp, #16
    2978:	bd80      	pop	{r7, pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	00002899 	.word	0x00002899

00002980 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    2980:	b580      	push	{r7, lr}
    2982:	b082      	sub	sp, #8
    2984:	af00      	add	r7, sp, #0
    2986:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2988:	4a04      	ldr	r2, [pc, #16]	; (299c <_tc_interrupt_get_interrupt_vector+0x1c>)
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	18d3      	adds	r3, r2, r3
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	b2db      	uxtb	r3, r3
    2992:	b25b      	sxtb	r3, r3
}
    2994:	1c18      	adds	r0, r3, #0
    2996:	46bd      	mov	sp, r7
    2998:	b002      	add	sp, #8
    299a:	bd80      	pop	{r7, pc}
    299c:	2000002c 	.word	0x2000002c

000029a0 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b082      	sub	sp, #8
    29a4:	af00      	add	r7, sp, #0
    29a6:	6078      	str	r0, [r7, #4]
    29a8:	1c0a      	adds	r2, r1, #0
    29aa:	1cfb      	adds	r3, r7, #3
    29ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    29ae:	687b      	ldr	r3, [r7, #4]
    29b0:	681b      	ldr	r3, [r3, #0]
    29b2:	1c18      	adds	r0, r3, #0
    29b4:	4b22      	ldr	r3, [pc, #136]	; (2a40 <tc_enable_callback+0xa0>)
    29b6:	4798      	blx	r3
    29b8:	1c03      	adds	r3, r0, #0
    29ba:	1c18      	adds	r0, r3, #0
    29bc:	4b21      	ldr	r3, [pc, #132]	; (2a44 <tc_enable_callback+0xa4>)
    29be:	4798      	blx	r3
    29c0:	1c03      	adds	r3, r0, #0
    29c2:	1c18      	adds	r0, r3, #0
    29c4:	4b20      	ldr	r3, [pc, #128]	; (2a48 <tc_enable_callback+0xa8>)
    29c6:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    29c8:	1cfb      	adds	r3, r7, #3
    29ca:	781b      	ldrb	r3, [r3, #0]
    29cc:	2b02      	cmp	r3, #2
    29ce:	d10b      	bne.n	29e8 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	7e5b      	ldrb	r3, [r3, #25]
    29d4:	2210      	movs	r2, #16
    29d6:	4313      	orrs	r3, r2
    29d8:	b2da      	uxtb	r2, r3
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	2210      	movs	r2, #16
    29e4:	735a      	strb	r2, [r3, #13]
    29e6:	e027      	b.n	2a38 <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    29e8:	1cfb      	adds	r3, r7, #3
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	2b03      	cmp	r3, #3
    29ee:	d10b      	bne.n	2a08 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	7e5b      	ldrb	r3, [r3, #25]
    29f4:	2220      	movs	r2, #32
    29f6:	4313      	orrs	r3, r2
    29f8:	b2da      	uxtb	r2, r3
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	2220      	movs	r2, #32
    2a04:	735a      	strb	r2, [r3, #13]
    2a06:	e017      	b.n	2a38 <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	7e5b      	ldrb	r3, [r3, #25]
    2a0c:	b2d9      	uxtb	r1, r3
    2a0e:	1cfb      	adds	r3, r7, #3
    2a10:	781b      	ldrb	r3, [r3, #0]
    2a12:	2201      	movs	r2, #1
    2a14:	409a      	lsls	r2, r3
    2a16:	1c13      	adds	r3, r2, #0
    2a18:	b2db      	uxtb	r3, r3
    2a1a:	1c0a      	adds	r2, r1, #0
    2a1c:	4313      	orrs	r3, r2
    2a1e:	b2db      	uxtb	r3, r3
    2a20:	b2da      	uxtb	r2, r3
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	1cfa      	adds	r2, r7, #3
    2a2c:	7812      	ldrb	r2, [r2, #0]
    2a2e:	2101      	movs	r1, #1
    2a30:	4091      	lsls	r1, r2
    2a32:	1c0a      	adds	r2, r1, #0
    2a34:	b2d2      	uxtb	r2, r2
    2a36:	735a      	strb	r2, [r3, #13]
	}
}
    2a38:	46bd      	mov	sp, r7
    2a3a:	b002      	add	sp, #8
    2a3c:	bd80      	pop	{r7, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00002121 	.word	0x00002121
    2a44:	00002981 	.word	0x00002981
    2a48:	00002745 	.word	0x00002745

00002a4c <spi_slave_callback>:
void configure_spi_slave_callbacks(void);
void configure_spi_slave(void);

//! [callback]
static void spi_slave_callback(struct spi_module *const module)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b082      	sub	sp, #8
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
//! [callback_var]
	transfer_complete_spi_slave = true;
    2a54:	4b02      	ldr	r3, [pc, #8]	; (2a60 <spi_slave_callback+0x14>)
    2a56:	2201      	movs	r2, #1
    2a58:	701a      	strb	r2, [r3, #0]
//! [callback_var]
}
    2a5a:	46bd      	mov	sp, r7
    2a5c:	b002      	add	sp, #8
    2a5e:	bd80      	pop	{r7, pc}
    2a60:	2000009c 	.word	0x2000009c

00002a64 <configure_spi_slave_callbacks>:
//! [callback]

//! [conf_callback]
void configure_spi_slave_callbacks(void)
{
    2a64:	b580      	push	{r7, lr}
    2a66:	af00      	add	r7, sp, #0
//! [reg_callback]
	spi_register_callback(&spi_slave_instance, spi_slave_callback,
    2a68:	4a06      	ldr	r2, [pc, #24]	; (2a84 <configure_spi_slave_callbacks+0x20>)
    2a6a:	4b07      	ldr	r3, [pc, #28]	; (2a88 <configure_spi_slave_callbacks+0x24>)
    2a6c:	1c10      	adds	r0, r2, #0
    2a6e:	1c19      	adds	r1, r3, #0
    2a70:	2202      	movs	r2, #2
    2a72:	4b06      	ldr	r3, [pc, #24]	; (2a8c <configure_spi_slave_callbacks+0x28>)
    2a74:	4798      	blx	r3
			SPI_CALLBACK_BUFFER_TRANSCEIVED);
//! [reg_callback]
//! [en_callback]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    2a76:	4b03      	ldr	r3, [pc, #12]	; (2a84 <configure_spi_slave_callbacks+0x20>)
    2a78:	1c18      	adds	r0, r3, #0
    2a7a:	2102      	movs	r1, #2
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <configure_spi_slave_callbacks+0x2c>)
    2a7e:	4798      	blx	r3
//! [en_callback]
}
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}
    2a84:	200000dc 	.word	0x200000dc
    2a88:	00002a4d 	.word	0x00002a4d
    2a8c:	00000cad 	.word	0x00000cad
    2a90:	00002861 	.word	0x00002861

00002a94 <configure_spi_slave>:
//! [conf_callback]

//! [configure_spi]
void configure_spi_slave(void)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b08e      	sub	sp, #56	; 0x38
    2a98:	af00      	add	r7, sp, #0
//! [config]
	struct spi_config config_spi_slave;
//! [config]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_slave);
    2a9a:	1d3b      	adds	r3, r7, #4
    2a9c:	1c18      	adds	r0, r3, #0
    2a9e:	4b14      	ldr	r3, [pc, #80]	; (2af0 <configure_spi_slave+0x5c>)
    2aa0:	4798      	blx	r3
//! [conf_defaults]
//! [conf_spi_slave_instance]
	config_spi_slave.mode = SPI_MODE_SLAVE;
    2aa2:	1d3b      	adds	r3, r7, #4
    2aa4:	2200      	movs	r2, #0
    2aa6:	701a      	strb	r2, [r3, #0]
//! [conf_spi_slave_instance]
//! [conf_preload]
	config_spi_slave.mode_specific.slave.preload_enable = true;
    2aa8:	1d3b      	adds	r3, r7, #4
    2aaa:	2201      	movs	r2, #1
    2aac:	771a      	strb	r2, [r3, #28]
//! [conf_preload]
//! [conf_format]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
    2aae:	1d3b      	adds	r3, r7, #4
    2ab0:	2200      	movs	r2, #0
    2ab2:	615a      	str	r2, [r3, #20]
	config_spi_slave.pinmux_pad1 = EXT1_SPI_SERCOM_PINMUX_PAD1;
	config_spi_slave.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
	config_spi_slave.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
	spi_init(&spi_slave_instance, EXT1_SPI_MODULE, &config_spi_slave);
	//! [init]	*/
	config_spi_slave.mux_setting = TREBLE_SPI_SERCOM_MUX_SETTING;
    2ab4:	1d3b      	adds	r3, r7, #4
    2ab6:	2280      	movs	r2, #128	; 0x80
    2ab8:	0252      	lsls	r2, r2, #9
    2aba:	60da      	str	r2, [r3, #12]
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_slave.pinmux_pad0 = TREBLE_SPI_SERCOM_PINMUX_PAD0;
    2abc:	1d3b      	adds	r3, r7, #4
    2abe:	4a0d      	ldr	r2, [pc, #52]	; (2af4 <configure_spi_slave+0x60>)
    2ac0:	625a      	str	r2, [r3, #36]	; 0x24
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_slave.pinmux_pad1 = TREBLE_SPI_SERCOM_PINMUX_PAD1;
    2ac2:	1d3b      	adds	r3, r7, #4
    2ac4:	4a0c      	ldr	r2, [pc, #48]	; (2af8 <configure_spi_slave+0x64>)
    2ac6:	629a      	str	r2, [r3, #40]	; 0x28
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_slave.pinmux_pad2 = TREBLE_SPI_SERCOM_PINMUX_PAD2;
    2ac8:	1d3b      	adds	r3, r7, #4
    2aca:	4a0c      	ldr	r2, [pc, #48]	; (2afc <configure_spi_slave+0x68>)
    2acc:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
    2ace:	1d3b      	adds	r3, r7, #4
    2ad0:	4a0b      	ldr	r2, [pc, #44]	; (2b00 <configure_spi_slave+0x6c>)
    2ad2:	631a      	str	r2, [r3, #48]	; 0x30
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
    2ad4:	4a0b      	ldr	r2, [pc, #44]	; (2b04 <configure_spi_slave+0x70>)
    2ad6:	490c      	ldr	r1, [pc, #48]	; (2b08 <configure_spi_slave+0x74>)
    2ad8:	1d3b      	adds	r3, r7, #4
    2ada:	1c10      	adds	r0, r2, #0
    2adc:	1c1a      	adds	r2, r3, #0
    2ade:	4b0b      	ldr	r3, [pc, #44]	; (2b0c <configure_spi_slave+0x78>)
    2ae0:	4798      	blx	r3
	//! [init]

//! [enable]
	spi_enable(&spi_slave_instance);
    2ae2:	4b08      	ldr	r3, [pc, #32]	; (2b04 <configure_spi_slave+0x70>)
    2ae4:	1c18      	adds	r0, r3, #0
    2ae6:	4b0a      	ldr	r3, [pc, #40]	; (2b10 <configure_spi_slave+0x7c>)
    2ae8:	4798      	blx	r3
//! [enable]

}
    2aea:	46bd      	mov	sp, r7
    2aec:	b00e      	add	sp, #56	; 0x38
    2aee:	bd80      	pop	{r7, pc}
    2af0:	0000279d 	.word	0x0000279d
    2af4:	002c0002 	.word	0x002c0002
    2af8:	002d0002 	.word	0x002d0002
    2afc:	002e0002 	.word	0x002e0002
    2b00:	002f0002 	.word	0x002f0002
    2b04:	200000dc 	.word	0x200000dc
    2b08:	42001800 	.word	0x42001800
    2b0c:	00000aa5 	.word	0x00000aa5
    2b10:	00002815 	.word	0x00002815

00002b14 <tc_callback_to_toggle_led>:
//! [module_inst]

//! [callback_funcs]
void tc_callback_to_toggle_led(
		struct tc_module *const module_inst)
{
    2b14:	b580      	push	{r7, lr}
    2b16:	b082      	sub	sp, #8
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
	port_pin_toggle_output_level(LED0_PIN);
    2b1c:	200e      	movs	r0, #14
    2b1e:	4b02      	ldr	r3, [pc, #8]	; (2b28 <tc_callback_to_toggle_led+0x14>)
    2b20:	4798      	blx	r3
}
    2b22:	46bd      	mov	sp, r7
    2b24:	b002      	add	sp, #8
    2b26:	bd80      	pop	{r7, pc}
    2b28:	000026f1 	.word	0x000026f1

00002b2c <configure_tc>:
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b08e      	sub	sp, #56	; 0x38
    2b30:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    2b32:	1d3b      	adds	r3, r7, #4
    2b34:	1c18      	adds	r0, r3, #0
    2b36:	4b13      	ldr	r3, [pc, #76]	; (2b84 <configure_tc+0x58>)
    2b38:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    2b3a:	1d3b      	adds	r3, r7, #4
    2b3c:	2204      	movs	r2, #4
    2b3e:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
    2b40:	1d3b      	adds	r3, r7, #4
    2b42:	2201      	movs	r2, #1
    2b44:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;//TC_CLOCK_PRESCALER_DIV1024;
    2b46:	1d3b      	adds	r3, r7, #4
    2b48:	22c0      	movs	r2, #192	; 0xc0
    2b4a:	00d2      	lsls	r2, r2, #3
    2b4c:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 100;
    2b4e:	1d3b      	adds	r3, r7, #4
    2b50:	2229      	movs	r2, #41	; 0x29
    2b52:	2164      	movs	r1, #100	; 0x64
    2b54:	5499      	strb	r1, [r3, r2]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
    2b56:	1d3b      	adds	r3, r7, #4
    2b58:	222a      	movs	r2, #42	; 0x2a
    2b5a:	2132      	movs	r1, #50	; 0x32
    2b5c:	5499      	strb	r1, [r3, r2]
	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
    2b5e:	1d3b      	adds	r3, r7, #4
    2b60:	222b      	movs	r2, #43	; 0x2b
    2b62:	2136      	movs	r1, #54	; 0x36
    2b64:	5499      	strb	r1, [r3, r2]
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    2b66:	4a08      	ldr	r2, [pc, #32]	; (2b88 <configure_tc+0x5c>)
    2b68:	4908      	ldr	r1, [pc, #32]	; (2b8c <configure_tc+0x60>)
    2b6a:	1d3b      	adds	r3, r7, #4
    2b6c:	1c10      	adds	r0, r2, #0
    2b6e:	1c1a      	adds	r2, r3, #0
    2b70:	4b07      	ldr	r3, [pc, #28]	; (2b90 <configure_tc+0x64>)
    2b72:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
    2b74:	4b04      	ldr	r3, [pc, #16]	; (2b88 <configure_tc+0x5c>)
    2b76:	1c18      	adds	r0, r3, #0
    2b78:	4b06      	ldr	r3, [pc, #24]	; (2b94 <configure_tc+0x68>)
    2b7a:	4798      	blx	r3
	//! [setup_enable]
}
    2b7c:	46bd      	mov	sp, r7
    2b7e:	b00e      	add	sp, #56	; 0x38
    2b80:	bd80      	pop	{r7, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	000028c1 	.word	0x000028c1
    2b88:	20000110 	.word	0x20000110
    2b8c:	42002c00 	.word	0x42002c00
    2b90:	00002171 	.word	0x00002171
    2b94:	00002949 	.word	0x00002949

00002b98 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
    2b9c:	4a06      	ldr	r2, [pc, #24]	; (2bb8 <configure_tc_callbacks+0x20>)
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <configure_tc_callbacks+0x24>)
    2ba0:	1c10      	adds	r0, r2, #0
    2ba2:	1c19      	adds	r1, r3, #0
    2ba4:	2200      	movs	r2, #0
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <configure_tc_callbacks+0x28>)
    2ba8:	4798      	blx	r3
			TC_CALLBACK_CC_CHANNEL1);
	*/
//! [setup_register_callback]

	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    2baa:	4b03      	ldr	r3, [pc, #12]	; (2bb8 <configure_tc_callbacks+0x20>)
    2bac:	1c18      	adds	r0, r3, #0
    2bae:	2100      	movs	r1, #0
    2bb0:	4b04      	ldr	r3, [pc, #16]	; (2bc4 <configure_tc_callbacks+0x2c>)
    2bb2:	4798      	blx	r3
/*	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
*/	//! [setup_enable_callback]
}
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bd80      	pop	{r7, pc}
    2bb8:	20000110 	.word	0x20000110
    2bbc:	00002b15 	.word	0x00002b15
    2bc0:	00001e95 	.word	0x00001e95
    2bc4:	000029a1 	.word	0x000029a1

00002bc8 <main>:
//! [setup]

int main(void)
{
    2bc8:	b590      	push	{r4, r7, lr}
    2bca:	b085      	sub	sp, #20
    2bcc:	af00      	add	r7, sp, #0
	uint8_t result = 0;
    2bce:	230f      	movs	r3, #15
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	2200      	movs	r2, #0
    2bd4:	701a      	strb	r2, [r3, #0]

	system_init();
    2bd6:	4b2f      	ldr	r3, [pc, #188]	; (2c94 <main+0xcc>)
    2bd8:	4798      	blx	r3

//! [setup_init]
	configure_tc();
    2bda:	4b2f      	ldr	r3, [pc, #188]	; (2c98 <main+0xd0>)
    2bdc:	4798      	blx	r3
	configure_tc_callbacks();
    2bde:	4b2f      	ldr	r3, [pc, #188]	; (2c9c <main+0xd4>)
    2be0:	4798      	blx	r3
//! [setup_init]

//! [main]
	//! [enable_global_interrupts]
	system_interrupt_enable_global();
    2be2:	4b2f      	ldr	r3, [pc, #188]	; (2ca0 <main+0xd8>)
    2be4:	4798      	blx	r3
	//! [enable_global_interrupts]

	configure_spi_slave();
    2be6:	4b2f      	ldr	r3, [pc, #188]	; (2ca4 <main+0xdc>)
    2be8:	4798      	blx	r3
	//! [run_config]
	//! [run_callback_config]
	configure_spi_slave_callbacks();
    2bea:	4b2f      	ldr	r3, [pc, #188]	; (2ca8 <main+0xe0>)
    2bec:	4798      	blx	r3
	//! [run_callback_config]
	//! [main_start]

	//! [main_use_case]
	//! [read]
	spi_transceive_buffer_job (&spi_slave_instance, buffer_tx, buffer_rx, BUF_LENGTH);
    2bee:	492f      	ldr	r1, [pc, #188]	; (2cac <main+0xe4>)
    2bf0:	4a2f      	ldr	r2, [pc, #188]	; (2cb0 <main+0xe8>)
    2bf2:	4b30      	ldr	r3, [pc, #192]	; (2cb4 <main+0xec>)
    2bf4:	1c08      	adds	r0, r1, #0
    2bf6:	1c11      	adds	r1, r2, #0
    2bf8:	1c1a      	adds	r2, r3, #0
    2bfa:	2314      	movs	r3, #20
    2bfc:	4c2e      	ldr	r4, [pc, #184]	; (2cb8 <main+0xf0>)
    2bfe:	47a0      	blx	r4


	while(!transfer_complete_spi_slave) {
    2c00:	46c0      	nop			; (mov r8, r8)
    2c02:	4b2e      	ldr	r3, [pc, #184]	; (2cbc <main+0xf4>)
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	b2db      	uxtb	r3, r3
    2c08:	2201      	movs	r2, #1
    2c0a:	4053      	eors	r3, r2
    2c0c:	b2db      	uxtb	r3, r3
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d1f7      	bne.n	2c02 <main+0x3a>
		/* Wait for transfer from master */
	}
	//! [transf_complete]
	//! [compare]
	for (uint8_t i = 0; i < BUF_LENGTH; i++) {
    2c12:	230e      	movs	r3, #14
    2c14:	18fb      	adds	r3, r7, r3
    2c16:	2200      	movs	r2, #0
    2c18:	701a      	strb	r2, [r3, #0]
    2c1a:	e019      	b.n	2c50 <main+0x88>
		if(buffer_rx[i] != buffer_expect[i]) {
    2c1c:	230e      	movs	r3, #14
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	781b      	ldrb	r3, [r3, #0]
    2c22:	4a24      	ldr	r2, [pc, #144]	; (2cb4 <main+0xec>)
    2c24:	5cd2      	ldrb	r2, [r2, r3]
    2c26:	230e      	movs	r3, #14
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	4924      	ldr	r1, [pc, #144]	; (2cc0 <main+0xf8>)
    2c2e:	5ccb      	ldrb	r3, [r1, r3]
    2c30:	429a      	cmp	r2, r3
    2c32:	d006      	beq.n	2c42 <main+0x7a>
			result++;
    2c34:	230f      	movs	r3, #15
    2c36:	18fb      	adds	r3, r7, r3
    2c38:	781a      	ldrb	r2, [r3, #0]
    2c3a:	230f      	movs	r3, #15
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	3201      	adds	r2, #1
    2c40:	701a      	strb	r2, [r3, #0]
	while(!transfer_complete_spi_slave) {
		/* Wait for transfer from master */
	}
	//! [transf_complete]
	//! [compare]
	for (uint8_t i = 0; i < BUF_LENGTH; i++) {
    2c42:	230e      	movs	r3, #14
    2c44:	18fb      	adds	r3, r7, r3
    2c46:	781a      	ldrb	r2, [r3, #0]
    2c48:	230e      	movs	r3, #14
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	3201      	adds	r2, #1
    2c4e:	701a      	strb	r2, [r3, #0]
    2c50:	230e      	movs	r3, #14
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	781b      	ldrb	r3, [r3, #0]
    2c56:	2b13      	cmp	r3, #19
    2c58:	d9e0      	bls.n	2c1c <main+0x54>
	//! [compare]

	//! [inf_loop]
	while (true) {
		/* Infinite loop */
		if (result) {
    2c5a:	230f      	movs	r3, #15
    2c5c:	18fb      	adds	r3, r7, r3
    2c5e:	781b      	ldrb	r3, [r3, #0]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d00b      	beq.n	2c7c <main+0xb4>
			port_pin_toggle_output_level(LED_0_PIN);
    2c64:	200e      	movs	r0, #14
    2c66:	4b17      	ldr	r3, [pc, #92]	; (2cc4 <main+0xfc>)
    2c68:	4798      	blx	r3
			/* Add a short delay to see LED toggle */
			volatile uint32_t delay = 30000;
    2c6a:	4b17      	ldr	r3, [pc, #92]	; (2cc8 <main+0x100>)
    2c6c:	60bb      	str	r3, [r7, #8]
			while(delay--) {
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	68bb      	ldr	r3, [r7, #8]
    2c72:	1e5a      	subs	r2, r3, #1
    2c74:	60ba      	str	r2, [r7, #8]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d1fa      	bne.n	2c70 <main+0xa8>
    2c7a:	e00a      	b.n	2c92 <main+0xca>
			}
			} else {
			port_pin_toggle_output_level(LED_0_PIN);
    2c7c:	200e      	movs	r0, #14
    2c7e:	4b11      	ldr	r3, [pc, #68]	; (2cc4 <main+0xfc>)
    2c80:	4798      	blx	r3
			/* Add a short delay to see LED toggle */
			volatile uint32_t delay = 600000;
    2c82:	4b12      	ldr	r3, [pc, #72]	; (2ccc <main+0x104>)
    2c84:	607b      	str	r3, [r7, #4]
			while(delay--) {
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	1e5a      	subs	r2, r3, #1
    2c8c:	607a      	str	r2, [r7, #4]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d1fa      	bne.n	2c88 <main+0xc0>
			}
		}
	}
    2c92:	e7e2      	b.n	2c5a <main+0x92>
    2c94:	00001e65 	.word	0x00001e65
    2c98:	00002b2d 	.word	0x00002b2d
    2c9c:	00002b99 	.word	0x00002b99
    2ca0:	0000272d 	.word	0x0000272d
    2ca4:	00002a95 	.word	0x00002a95
    2ca8:	00002a65 	.word	0x00002a65
    2cac:	200000dc 	.word	0x200000dc
    2cb0:	20000018 	.word	0x20000018
    2cb4:	20000088 	.word	0x20000088
    2cb8:	00000cf5 	.word	0x00000cf5
    2cbc:	2000009c 	.word	0x2000009c
    2cc0:	20000004 	.word	0x20000004
    2cc4:	000026f1 	.word	0x000026f1
    2cc8:	00007530 	.word	0x00007530
    2ccc:	000927c0 	.word	0x000927c0

00002cd0 <__aeabi_uidiv>:
    2cd0:	2200      	movs	r2, #0
    2cd2:	0843      	lsrs	r3, r0, #1
    2cd4:	428b      	cmp	r3, r1
    2cd6:	d374      	bcc.n	2dc2 <__aeabi_uidiv+0xf2>
    2cd8:	0903      	lsrs	r3, r0, #4
    2cda:	428b      	cmp	r3, r1
    2cdc:	d35f      	bcc.n	2d9e <__aeabi_uidiv+0xce>
    2cde:	0a03      	lsrs	r3, r0, #8
    2ce0:	428b      	cmp	r3, r1
    2ce2:	d344      	bcc.n	2d6e <__aeabi_uidiv+0x9e>
    2ce4:	0b03      	lsrs	r3, r0, #12
    2ce6:	428b      	cmp	r3, r1
    2ce8:	d328      	bcc.n	2d3c <__aeabi_uidiv+0x6c>
    2cea:	0c03      	lsrs	r3, r0, #16
    2cec:	428b      	cmp	r3, r1
    2cee:	d30d      	bcc.n	2d0c <__aeabi_uidiv+0x3c>
    2cf0:	22ff      	movs	r2, #255	; 0xff
    2cf2:	0209      	lsls	r1, r1, #8
    2cf4:	ba12      	rev	r2, r2
    2cf6:	0c03      	lsrs	r3, r0, #16
    2cf8:	428b      	cmp	r3, r1
    2cfa:	d302      	bcc.n	2d02 <__aeabi_uidiv+0x32>
    2cfc:	1212      	asrs	r2, r2, #8
    2cfe:	0209      	lsls	r1, r1, #8
    2d00:	d065      	beq.n	2dce <__aeabi_uidiv+0xfe>
    2d02:	0b03      	lsrs	r3, r0, #12
    2d04:	428b      	cmp	r3, r1
    2d06:	d319      	bcc.n	2d3c <__aeabi_uidiv+0x6c>
    2d08:	e000      	b.n	2d0c <__aeabi_uidiv+0x3c>
    2d0a:	0a09      	lsrs	r1, r1, #8
    2d0c:	0bc3      	lsrs	r3, r0, #15
    2d0e:	428b      	cmp	r3, r1
    2d10:	d301      	bcc.n	2d16 <__aeabi_uidiv+0x46>
    2d12:	03cb      	lsls	r3, r1, #15
    2d14:	1ac0      	subs	r0, r0, r3
    2d16:	4152      	adcs	r2, r2
    2d18:	0b83      	lsrs	r3, r0, #14
    2d1a:	428b      	cmp	r3, r1
    2d1c:	d301      	bcc.n	2d22 <__aeabi_uidiv+0x52>
    2d1e:	038b      	lsls	r3, r1, #14
    2d20:	1ac0      	subs	r0, r0, r3
    2d22:	4152      	adcs	r2, r2
    2d24:	0b43      	lsrs	r3, r0, #13
    2d26:	428b      	cmp	r3, r1
    2d28:	d301      	bcc.n	2d2e <__aeabi_uidiv+0x5e>
    2d2a:	034b      	lsls	r3, r1, #13
    2d2c:	1ac0      	subs	r0, r0, r3
    2d2e:	4152      	adcs	r2, r2
    2d30:	0b03      	lsrs	r3, r0, #12
    2d32:	428b      	cmp	r3, r1
    2d34:	d301      	bcc.n	2d3a <__aeabi_uidiv+0x6a>
    2d36:	030b      	lsls	r3, r1, #12
    2d38:	1ac0      	subs	r0, r0, r3
    2d3a:	4152      	adcs	r2, r2
    2d3c:	0ac3      	lsrs	r3, r0, #11
    2d3e:	428b      	cmp	r3, r1
    2d40:	d301      	bcc.n	2d46 <__aeabi_uidiv+0x76>
    2d42:	02cb      	lsls	r3, r1, #11
    2d44:	1ac0      	subs	r0, r0, r3
    2d46:	4152      	adcs	r2, r2
    2d48:	0a83      	lsrs	r3, r0, #10
    2d4a:	428b      	cmp	r3, r1
    2d4c:	d301      	bcc.n	2d52 <__aeabi_uidiv+0x82>
    2d4e:	028b      	lsls	r3, r1, #10
    2d50:	1ac0      	subs	r0, r0, r3
    2d52:	4152      	adcs	r2, r2
    2d54:	0a43      	lsrs	r3, r0, #9
    2d56:	428b      	cmp	r3, r1
    2d58:	d301      	bcc.n	2d5e <__aeabi_uidiv+0x8e>
    2d5a:	024b      	lsls	r3, r1, #9
    2d5c:	1ac0      	subs	r0, r0, r3
    2d5e:	4152      	adcs	r2, r2
    2d60:	0a03      	lsrs	r3, r0, #8
    2d62:	428b      	cmp	r3, r1
    2d64:	d301      	bcc.n	2d6a <__aeabi_uidiv+0x9a>
    2d66:	020b      	lsls	r3, r1, #8
    2d68:	1ac0      	subs	r0, r0, r3
    2d6a:	4152      	adcs	r2, r2
    2d6c:	d2cd      	bcs.n	2d0a <__aeabi_uidiv+0x3a>
    2d6e:	09c3      	lsrs	r3, r0, #7
    2d70:	428b      	cmp	r3, r1
    2d72:	d301      	bcc.n	2d78 <__aeabi_uidiv+0xa8>
    2d74:	01cb      	lsls	r3, r1, #7
    2d76:	1ac0      	subs	r0, r0, r3
    2d78:	4152      	adcs	r2, r2
    2d7a:	0983      	lsrs	r3, r0, #6
    2d7c:	428b      	cmp	r3, r1
    2d7e:	d301      	bcc.n	2d84 <__aeabi_uidiv+0xb4>
    2d80:	018b      	lsls	r3, r1, #6
    2d82:	1ac0      	subs	r0, r0, r3
    2d84:	4152      	adcs	r2, r2
    2d86:	0943      	lsrs	r3, r0, #5
    2d88:	428b      	cmp	r3, r1
    2d8a:	d301      	bcc.n	2d90 <__aeabi_uidiv+0xc0>
    2d8c:	014b      	lsls	r3, r1, #5
    2d8e:	1ac0      	subs	r0, r0, r3
    2d90:	4152      	adcs	r2, r2
    2d92:	0903      	lsrs	r3, r0, #4
    2d94:	428b      	cmp	r3, r1
    2d96:	d301      	bcc.n	2d9c <__aeabi_uidiv+0xcc>
    2d98:	010b      	lsls	r3, r1, #4
    2d9a:	1ac0      	subs	r0, r0, r3
    2d9c:	4152      	adcs	r2, r2
    2d9e:	08c3      	lsrs	r3, r0, #3
    2da0:	428b      	cmp	r3, r1
    2da2:	d301      	bcc.n	2da8 <__aeabi_uidiv+0xd8>
    2da4:	00cb      	lsls	r3, r1, #3
    2da6:	1ac0      	subs	r0, r0, r3
    2da8:	4152      	adcs	r2, r2
    2daa:	0883      	lsrs	r3, r0, #2
    2dac:	428b      	cmp	r3, r1
    2dae:	d301      	bcc.n	2db4 <__aeabi_uidiv+0xe4>
    2db0:	008b      	lsls	r3, r1, #2
    2db2:	1ac0      	subs	r0, r0, r3
    2db4:	4152      	adcs	r2, r2
    2db6:	0843      	lsrs	r3, r0, #1
    2db8:	428b      	cmp	r3, r1
    2dba:	d301      	bcc.n	2dc0 <__aeabi_uidiv+0xf0>
    2dbc:	004b      	lsls	r3, r1, #1
    2dbe:	1ac0      	subs	r0, r0, r3
    2dc0:	4152      	adcs	r2, r2
    2dc2:	1a41      	subs	r1, r0, r1
    2dc4:	d200      	bcs.n	2dc8 <__aeabi_uidiv+0xf8>
    2dc6:	4601      	mov	r1, r0
    2dc8:	4152      	adcs	r2, r2
    2dca:	4610      	mov	r0, r2
    2dcc:	4770      	bx	lr
    2dce:	e7ff      	b.n	2dd0 <__aeabi_uidiv+0x100>
    2dd0:	b501      	push	{r0, lr}
    2dd2:	2000      	movs	r0, #0
    2dd4:	f000 f80c 	bl	2df0 <__aeabi_idiv0>
    2dd8:	bd02      	pop	{r1, pc}
    2dda:	46c0      	nop			; (mov r8, r8)

00002ddc <__aeabi_uidivmod>:
    2ddc:	2900      	cmp	r1, #0
    2dde:	d0f7      	beq.n	2dd0 <__aeabi_uidiv+0x100>
    2de0:	b503      	push	{r0, r1, lr}
    2de2:	f7ff ff75 	bl	2cd0 <__aeabi_uidiv>
    2de6:	bc0e      	pop	{r1, r2, r3}
    2de8:	4342      	muls	r2, r0
    2dea:	1a89      	subs	r1, r1, r2
    2dec:	4718      	bx	r3
    2dee:	46c0      	nop			; (mov r8, r8)

00002df0 <__aeabi_idiv0>:
    2df0:	4770      	bx	lr
    2df2:	46c0      	nop			; (mov r8, r8)

00002df4 <__libc_init_array>:
    2df4:	4b0e      	ldr	r3, [pc, #56]	; (2e30 <__libc_init_array+0x3c>)
    2df6:	b570      	push	{r4, r5, r6, lr}
    2df8:	2500      	movs	r5, #0
    2dfa:	1c1e      	adds	r6, r3, #0
    2dfc:	4c0d      	ldr	r4, [pc, #52]	; (2e34 <__libc_init_array+0x40>)
    2dfe:	1ae4      	subs	r4, r4, r3
    2e00:	10a4      	asrs	r4, r4, #2
    2e02:	42a5      	cmp	r5, r4
    2e04:	d004      	beq.n	2e10 <__libc_init_array+0x1c>
    2e06:	00ab      	lsls	r3, r5, #2
    2e08:	58f3      	ldr	r3, [r6, r3]
    2e0a:	4798      	blx	r3
    2e0c:	3501      	adds	r5, #1
    2e0e:	e7f8      	b.n	2e02 <__libc_init_array+0xe>
    2e10:	f000 f884 	bl	2f1c <_init>
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <__libc_init_array+0x44>)
    2e16:	2500      	movs	r5, #0
    2e18:	1c1e      	adds	r6, r3, #0
    2e1a:	4c08      	ldr	r4, [pc, #32]	; (2e3c <__libc_init_array+0x48>)
    2e1c:	1ae4      	subs	r4, r4, r3
    2e1e:	10a4      	asrs	r4, r4, #2
    2e20:	42a5      	cmp	r5, r4
    2e22:	d004      	beq.n	2e2e <__libc_init_array+0x3a>
    2e24:	00ab      	lsls	r3, r5, #2
    2e26:	58f3      	ldr	r3, [r6, r3]
    2e28:	4798      	blx	r3
    2e2a:	3501      	adds	r5, #1
    2e2c:	e7f8      	b.n	2e20 <__libc_init_array+0x2c>
    2e2e:	bd70      	pop	{r4, r5, r6, pc}
    2e30:	00002f28 	.word	0x00002f28
    2e34:	00002f28 	.word	0x00002f28
    2e38:	00002f28 	.word	0x00002f28
    2e3c:	00002f2c 	.word	0x00002f2c

00002e40 <memcpy>:
    2e40:	2300      	movs	r3, #0
    2e42:	b510      	push	{r4, lr}
    2e44:	4293      	cmp	r3, r2
    2e46:	d003      	beq.n	2e50 <memcpy+0x10>
    2e48:	5ccc      	ldrb	r4, [r1, r3]
    2e4a:	54c4      	strb	r4, [r0, r3]
    2e4c:	3301      	adds	r3, #1
    2e4e:	e7f9      	b.n	2e44 <memcpy+0x4>
    2e50:	bd10      	pop	{r4, pc}

00002e52 <memset>:
    2e52:	1c03      	adds	r3, r0, #0
    2e54:	1882      	adds	r2, r0, r2
    2e56:	4293      	cmp	r3, r2
    2e58:	d002      	beq.n	2e60 <memset+0xe>
    2e5a:	7019      	strb	r1, [r3, #0]
    2e5c:	3301      	adds	r3, #1
    2e5e:	e7fa      	b.n	2e56 <memset+0x4>
    2e60:	4770      	bx	lr
    2e62:	0000      	movs	r0, r0
    2e64:	42000800 	.word	0x42000800
    2e68:	42000c00 	.word	0x42000c00
    2e6c:	42001000 	.word	0x42001000
    2e70:	42001400 	.word	0x42001400
    2e74:	42001800 	.word	0x42001800
    2e78:	42001c00 	.word	0x42001c00
    2e7c:	0a090807 	.word	0x0a090807
    2e80:	00000c0b 	.word	0x00000c0b
    2e84:	00001302 	.word	0x00001302
    2e88:	00001364 	.word	0x00001364
    2e8c:	00001364 	.word	0x00001364
    2e90:	00001324 	.word	0x00001324
    2e94:	0000131e 	.word	0x0000131e
    2e98:	0000132a 	.word	0x0000132a
    2e9c:	00001308 	.word	0x00001308
    2ea0:	00001330 	.word	0x00001330
    2ea4:	0000155c 	.word	0x0000155c
    2ea8:	00001596 	.word	0x00001596
    2eac:	00001596 	.word	0x00001596
    2eb0:	00001592 	.word	0x00001592
    2eb4:	0000154e 	.word	0x0000154e
    2eb8:	0000156e 	.word	0x0000156e
    2ebc:	0000153e 	.word	0x0000153e
    2ec0:	00001580 	.word	0x00001580
    2ec4:	000015e2 	.word	0x000015e2
    2ec8:	000015f8 	.word	0x000015f8
    2ecc:	000015f8 	.word	0x000015f8
    2ed0:	000015f4 	.word	0x000015f4
    2ed4:	000015dc 	.word	0x000015dc
    2ed8:	000015e8 	.word	0x000015e8
    2edc:	000015d6 	.word	0x000015d6
    2ee0:	000015ee 	.word	0x000015ee
    2ee4:	42002000 	.word	0x42002000
    2ee8:	42002400 	.word	0x42002400
    2eec:	42002800 	.word	0x42002800
    2ef0:	42002c00 	.word	0x42002c00
    2ef4:	42003000 	.word	0x42003000
    2ef8:	42003400 	.word	0x42003400
    2efc:	42003800 	.word	0x42003800
    2f00:	42003c00 	.word	0x42003c00
    2f04:	14141313 	.word	0x14141313
    2f08:	16161515 	.word	0x16161515
    2f0c:	02000100 	.word	0x02000100
    2f10:	08000400 	.word	0x08000400
    2f14:	20001000 	.word	0x20001000
    2f18:	80004000 	.word	0x80004000

00002f1c <_init>:
    2f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f22:	bc08      	pop	{r3}
    2f24:	469e      	mov	lr, r3
    2f26:	4770      	bx	lr

00002f28 <__init_array_start>:
    2f28:	000000cd 	.word	0x000000cd

00002f2c <_fini>:
    2f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f32:	bc08      	pop	{r3}
    2f34:	469e      	mov	lr, r3
    2f36:	4770      	bx	lr

00002f38 <__fini_array_start>:
    2f38:	000000a5 	.word	0x000000a5
