
TREBLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fe8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001fe8  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000204  20000004  00001fec  00010004  2**2
                  ALLOC
  3 .stack        00002000  20000208  000021f0  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023039  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000389b  00000000  00000000  000330c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000718c  00000000  00000000  0003695b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000528  00000000  00000000  0003dae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011e8  00000000  00000000  0003e00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001412d  00000000  00000000  0003f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dca9  00000000  00000000  00053324  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061205  00000000  00000000  00060fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c50  00000000  00000000  000c21d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002208 	.word	0x20002208
       4:	00001afd 	.word	0x00001afd
       8:	00001af9 	.word	0x00001af9
       c:	00001af9 	.word	0x00001af9
	...
      2c:	00001af9 	.word	0x00001af9
	...
      38:	00001af9 	.word	0x00001af9
      3c:	00001af9 	.word	0x00001af9
      40:	00001af9 	.word	0x00001af9
      44:	00001af9 	.word	0x00001af9
      48:	00001af9 	.word	0x00001af9
      4c:	00001af9 	.word	0x00001af9
      50:	00001af9 	.word	0x00001af9
      54:	00001af9 	.word	0x00001af9
      58:	00001af9 	.word	0x00001af9
      5c:	00000c31 	.word	0x00000c31
      60:	00000c41 	.word	0x00000c41
      64:	00000c51 	.word	0x00000c51
      68:	00000c61 	.word	0x00000c61
      6c:	00000c71 	.word	0x00000c71
      70:	00000c81 	.word	0x00000c81
      74:	00001799 	.word	0x00001799
      78:	000017a9 	.word	0x000017a9
      7c:	000017b9 	.word	0x000017b9
      80:	000017c9 	.word	0x000017c9
      84:	000017d9 	.word	0x000017d9
      88:	000017e9 	.word	0x000017e9
      8c:	000017f9 	.word	0x000017f9
      90:	00001809 	.word	0x00001809
      94:	0000064d 	.word	0x0000064d
      98:	00001af9 	.word	0x00001af9
      9c:	00001af9 	.word	0x00001af9
      a0:	00001af9 	.word	0x00001af9

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000004 	.word	0x20000004
      c4:	00000000 	.word	0x00000000
      c8:	00001fe8 	.word	0x00001fe8

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00001fe8 	.word	0x00001fe8
      f8:	20000008 	.word	0x20000008
      fc:	00001fe8 	.word	0x00001fe8
     100:	00000000 	.word	0x00000000

00000104 <spi_slave_callback>:

//! [callback]
static void spi_slave_callback(struct spi_module *const module)
{
//! [callback_var]
	transfer_complete_spi_slave = true;
     104:	2201      	movs	r2, #1
     106:	4b01      	ldr	r3, [pc, #4]	; (10c <spi_slave_callback+0x8>)
     108:	701a      	strb	r2, [r3, #0]
//! [callback_var]
}
     10a:	4770      	bx	lr
     10c:	20000059 	.word	0x20000059

00000110 <configure_spi_slave_callbacks>:
//! [callback]

//! [conf_callback]
void configure_spi_slave_callbacks(void)
{
     110:	b510      	push	{r4, lr}
//! [reg_callback]
	spi_register_callback(&spi_slave_instance, spi_slave_callback,
     112:	4c06      	ldr	r4, [pc, #24]	; (12c <configure_spi_slave_callbacks+0x1c>)
     114:	4906      	ldr	r1, [pc, #24]	; (130 <configure_spi_slave_callbacks+0x20>)
     116:	1c20      	adds	r0, r4, #0
     118:	2202      	movs	r2, #2
     11a:	4b06      	ldr	r3, [pc, #24]	; (134 <configure_spi_slave_callbacks+0x24>)
     11c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     11e:	222f      	movs	r2, #47	; 0x2f
     120:	2304      	movs	r3, #4
     122:	5ca1      	ldrb	r1, [r4, r2]
     124:	430b      	orrs	r3, r1
     126:	54a3      	strb	r3, [r4, r2]
			SPI_CALLBACK_BUFFER_TRANSCEIVED);
//! [reg_callback]
//! [en_callback]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
//! [en_callback]
}
     128:	bd10      	pop	{r4, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	200000b8 	.word	0x200000b8
     130:	00000105 	.word	0x00000105
     134:	00000ea9 	.word	0x00000ea9

00000138 <configure_spi_slave>:
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     138:	2300      	movs	r3, #0
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     13a:	2120      	movs	r1, #32
//! [conf_callback]

//! [configure_spi]
void configure_spi_slave(void)
{
     13c:	b570      	push	{r4, r5, r6, lr}
     13e:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     140:	aa01      	add	r2, sp, #4
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     142:	5453      	strb	r3, [r2, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     144:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     146:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     148:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     14a:	7453      	strb	r3, [r2, #17]
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     14c:	9308      	str	r3, [sp, #32]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_slave);
//! [conf_defaults]
//! [conf_spi_slave_instance]
	config_spi_slave.mode = SPI_MODE_SLAVE;
     14e:	7013      	strb	r3, [r2, #0]
     150:	9306      	str	r3, [sp, #24]
     152:	9307      	str	r3, [sp, #28]
	config_spi_slave.pinmux_pad1 = EXT1_SPI_SERCOM_PINMUX_PAD1;
	config_spi_slave.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
	config_spi_slave.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
	spi_init(&spi_slave_instance, EXT1_SPI_MODULE, &config_spi_slave);
	//! [init]	*/
	config_spi_slave.mux_setting = TREBLE_SPI_SERCOM_MUX_SETTING;
     154:	2380      	movs	r3, #128	; 0x80
	config->data_order       = SPI_DATA_ORDER_MSB;
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
	config->run_in_standby   = false;
	config->receiver_enable  = true;
     156:	2401      	movs	r4, #1
     158:	025b      	lsls	r3, r3, #9
     15a:	60d3      	str	r3, [r2, #12]
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_slave.pinmux_pad0 = TREBLE_SPI_SERCOM_PINMUX_PAD0;
     15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <configure_spi_slave+0x68>)
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     15e:	4e11      	ldr	r6, [pc, #68]	; (1a4 <configure_spi_slave+0x6c>)
	//! [init]	*/
	config_spi_slave.mux_setting = TREBLE_SPI_SERCOM_MUX_SETTING;
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_slave.pinmux_pad0 = TREBLE_SPI_SERCOM_PINMUX_PAD0;
     160:	6253      	str	r3, [r2, #36]	; 0x24
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_slave.pinmux_pad1 = TREBLE_SPI_SERCOM_PINMUX_PAD1;
     162:	4b11      	ldr	r3, [pc, #68]	; (1a8 <configure_spi_slave+0x70>)
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <configure_spi_slave+0x74>)
	//! [di]
	config_spi_slave.pinmux_pad0 = TREBLE_SPI_SERCOM_PINMUX_PAD0;
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_slave.pinmux_pad1 = TREBLE_SPI_SERCOM_PINMUX_PAD1;
     166:	6293      	str	r3, [r2, #40]	; 0x28
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_slave.pinmux_pad2 = TREBLE_SPI_SERCOM_PINMUX_PAD2;
     168:	4b11      	ldr	r3, [pc, #68]	; (1b0 <configure_spi_slave+0x78>)
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     16a:	1c30      	adds	r0, r6, #0
	//! [ss]
	config_spi_slave.pinmux_pad1 = TREBLE_SPI_SERCOM_PINMUX_PAD1;
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_slave.pinmux_pad2 = TREBLE_SPI_SERCOM_PINMUX_PAD2;
     16c:	62d3      	str	r3, [r2, #44]	; 0x2c
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
     16e:	4b11      	ldr	r3, [pc, #68]	; (1b4 <configure_spi_slave+0x7c>)
     170:	7494      	strb	r4, [r2, #18]
     172:	6313      	str	r3, [r2, #48]	; 0x30
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <configure_spi_slave+0x80>)
//! [conf_defaults]
//! [conf_spi_slave_instance]
	config_spi_slave.mode = SPI_MODE_SLAVE;
//! [conf_spi_slave_instance]
//! [conf_preload]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     176:	7714      	strb	r4, [r2, #28]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     178:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     17a:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     17c:	4b0f      	ldr	r3, [pc, #60]	; (1bc <configure_spi_slave+0x84>)
     17e:	1c28      	adds	r0, r5, #0
     180:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     182:	231f      	movs	r3, #31
     184:	4018      	ands	r0, r3
     186:	4084      	lsls	r4, r0
     188:	4b0d      	ldr	r3, [pc, #52]	; (1c0 <configure_spi_slave+0x88>)
     18a:	601c      	str	r4, [r3, #0]
     18c:	6832      	ldr	r2, [r6, #0]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
     18e:	8a13      	ldrh	r3, [r2, #16]
     190:	0bdb      	lsrs	r3, r3, #15

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     192:	d1fc      	bne.n	18e <configure_spi_slave+0x56>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     194:	682a      	ldr	r2, [r5, #0]
     196:	3302      	adds	r3, #2
     198:	4313      	orrs	r3, r2
     19a:	602b      	str	r3, [r5, #0]

//! [enable]
	spi_enable(&spi_slave_instance);
//! [enable]

}
     19c:	b00e      	add	sp, #56	; 0x38
     19e:	bd70      	pop	{r4, r5, r6, pc}
     1a0:	002c0002 	.word	0x002c0002
     1a4:	200000b8 	.word	0x200000b8
     1a8:	002d0002 	.word	0x002d0002
     1ac:	42001800 	.word	0x42001800
     1b0:	002e0002 	.word	0x002e0002
     1b4:	002f0002 	.word	0x002f0002
     1b8:	00000c91 	.word	0x00000c91
     1bc:	00000c05 	.word	0x00000c05
     1c0:	e000e100 	.word	0xe000e100

000001c4 <adc_get_config_defaults>:
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1c4:	21c0      	movs	r1, #192	; 0xc0
     1c6:	0149      	lsls	r1, r1, #5
void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
	config->reference                     = ADC_REFERENCE_INT1V;
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1c8:	2300      	movs	r3, #0
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1ca:	2200      	movs	r2, #0
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1cc:	81c1      	strh	r1, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
	config->left_adjust                   = false;
	config->differential_mode             = false;
	config->freerunning                   = false;
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1ce:	212a      	movs	r1, #42	; 0x2a
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1d0:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1d2:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1d4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
	config->window.window_upper_value     = 0;
     1d6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1d8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1da:	6082      	str	r2, [r0, #8]
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
	config->reference                     = ADC_REFERENCE_INT1V;
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1dc:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1de:	7603      	strb	r3, [r0, #24]
	config->window.window_lower_value     = 0;
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1e0:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1e2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1e4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1e6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1e8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1ea:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1ec:	5443      	strb	r3, [r0, r1]
	config->run_in_standby                = false;
	config->reference_compensation_enable = false;
	config->correction.correction_enable  = false;
     1ee:	3906      	subs	r1, #6
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
	config->left_adjust                   = false;
	config->differential_mode             = false;
	config->freerunning                   = false;
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
	config->run_in_standby                = false;
     1f0:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1f2:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1f4:	5443      	strb	r3, [r0, r1]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1f6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1f8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
	config->pin_scan.offset_start_scan    = 0;
     1fa:	322b      	adds	r2, #43	; 0x2b
	config->run_in_standby                = false;
	config->reference_compensation_enable = false;
	config->correction.correction_enable  = false;
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
	config->sample_length                 = 0;
     1fc:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1fe:	5483      	strb	r3, [r0, r2]
	config->pin_scan.inputs_to_scan       = 0;
     200:	3201      	adds	r2, #1
     202:	5483      	strb	r3, [r0, r2]
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)

00000208 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	464d      	mov	r5, r9
     20c:	4644      	mov	r4, r8
     20e:	465f      	mov	r7, fp
     210:	4656      	mov	r6, sl
     212:	b4f0      	push	{r4, r5, r6, r7}
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     214:	2580      	movs	r5, #128	; 0x80
     216:	4ccb      	ldr	r4, [pc, #812]	; (544 <adc_init+0x33c>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     218:	6001      	str	r1, [r0, #0]
     21a:	6a23      	ldr	r3, [r4, #32]
     21c:	026d      	lsls	r5, r5, #9
     21e:	432b      	orrs	r3, r5
     220:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     222:	780c      	ldrb	r4, [r1, #0]
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     224:	b09b      	sub	sp, #108	; 0x6c
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     226:	2305      	movs	r3, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     228:	07e4      	lsls	r4, r4, #31
     22a:	d507      	bpl.n	23c <adc_init+0x34>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     22c:	1c18      	adds	r0, r3, #0
     22e:	b01b      	add	sp, #108	; 0x6c
     230:	bc3c      	pop	{r2, r3, r4, r5}
     232:	4690      	mov	r8, r2
     234:	4699      	mov	r9, r3
     236:	46a2      	mov	sl, r4
     238:	46ab      	mov	fp, r5
     23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     23c:	780b      	ldrb	r3, [r1, #0]
     23e:	2102      	movs	r1, #2
     240:	4019      	ands	r1, r3
     242:	9100      	str	r1, [sp, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     244:	231c      	movs	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     246:	2900      	cmp	r1, #0
     248:	d1f0      	bne.n	22c <adc_init+0x24>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     24a:	7853      	ldrb	r3, [r2, #1]
     24c:	7103      	strb	r3, [r0, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     24e:	2b00      	cmp	r3, #0
     250:	d104      	bne.n	25c <adc_init+0x54>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     252:	49bd      	ldr	r1, [pc, #756]	; (548 <adc_init+0x340>)
     254:	3304      	adds	r3, #4
     256:	6c0c      	ldr	r4, [r1, #64]	; 0x40
     258:	4323      	orrs	r3, r4
     25a:	640b      	str	r3, [r1, #64]	; 0x40
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     25c:	2300      	movs	r3, #0
	};

	module_inst->registered_callback_mask = 0;
	module_inst->enabled_callback_mask = 0;
	module_inst->remaining_conversions = 0;
     25e:	8303      	strh	r3, [r0, #24]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     260:	6083      	str	r3, [r0, #8]
     262:	60c3      	str	r3, [r0, #12]
     264:	6103      	str	r3, [r0, #16]
	};

	module_inst->registered_callback_mask = 0;
     266:	7683      	strb	r3, [r0, #26]
	module_inst->enabled_callback_mask = 0;
     268:	76c3      	strb	r3, [r0, #27]
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;
     26a:	7703      	strb	r3, [r0, #28]

	_adc_instances[0] = module_inst;
     26c:	4bb7      	ldr	r3, [pc, #732]	; (54c <adc_init+0x344>)
     26e:	6018      	str	r0, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     270:	232a      	movs	r3, #42	; 0x2a
     272:	5cd3      	ldrb	r3, [r2, r3]
     274:	2b00      	cmp	r3, #0
     276:	d102      	bne.n	27e <adc_init+0x76>
     278:	7d13      	ldrb	r3, [r2, #20]
     27a:	2b00      	cmp	r3, #0
     27c:	d07c      	beq.n	378 <adc_init+0x170>
			!config->freerunning) {
		module_inst->software_trigger = true;
	} else {
		module_inst->software_trigger = false;
     27e:	2300      	movs	r3, #0
     280:	7743      	strb	r3, [r0, #29]
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
     282:	4bb3      	ldr	r3, [pc, #716]	; (550 <adc_init+0x348>)
     284:	9003      	str	r0, [sp, #12]
     286:	681b      	ldr	r3, [r3, #0]
     288:	1c16      	adds	r6, r2, #0
     28a:	041b      	lsls	r3, r3, #16
     28c:	0f1b      	lsrs	r3, r3, #28
     28e:	9302      	str	r3, [sp, #8]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     290:	6803      	ldr	r3, [r0, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     292:	2017      	movs	r0, #23
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     294:	9301      	str	r3, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     296:	7813      	ldrb	r3, [r2, #0]
     298:	aa04      	add	r2, sp, #16
     29a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     29c:	1c11      	adds	r1, r2, #0
     29e:	4bad      	ldr	r3, [pc, #692]	; (554 <adc_init+0x34c>)
     2a0:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     2a2:	4bad      	ldr	r3, [pc, #692]	; (558 <adc_init+0x350>)
     2a4:	2017      	movs	r0, #23
     2a6:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     2a8:	232c      	movs	r3, #44	; 0x2c
     2aa:	5cf7      	ldrb	r7, [r6, r3]
     2ac:	2f00      	cmp	r7, #0
     2ae:	d100      	bne.n	2b2 <adc_init+0xaa>
     2b0:	e11d      	b.n	4ee <adc_init+0x2e6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     2b2:	3b01      	subs	r3, #1
     2b4:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     2b6:	7b33      	ldrb	r3, [r6, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     2b8:	195a      	adds	r2, r3, r5
     2ba:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     2bc:	19d7      	adds	r7, r2, r7
     2be:	b2ff      	uxtb	r7, r7
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     2c0:	42ba      	cmp	r2, r7
     2c2:	d300      	bcc.n	2c6 <adc_init+0xbe>
     2c4:	e12e      	b.n	524 <adc_init+0x31c>
     2c6:	1e69      	subs	r1, r5, #1
     2c8:	187f      	adds	r7, r7, r1
     2ca:	1aba      	subs	r2, r7, r2
     2cc:	b2d2      	uxtb	r2, r2
     2ce:	4691      	mov	r9, r2
     2d0:	aa06      	add	r2, sp, #24
     2d2:	4690      	mov	r8, r2
     2d4:	4aa1      	ldr	r2, [pc, #644]	; (55c <adc_init+0x354>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	af05      	add	r7, sp, #20
     2d8:	4693      	mov	fp, r2
     2da:	4aa1      	ldr	r2, [pc, #644]	; (560 <adc_init+0x358>)
     2dc:	4692      	mov	sl, r2

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     2de:	1c32      	adds	r2, r6, #0
     2e0:	4646      	mov	r6, r8
     2e2:	4690      	mov	r8, r2
     2e4:	e002      	b.n	2ec <adc_init+0xe4>
     2e6:	3501      	adds	r5, #1
     2e8:	7b1b      	ldrb	r3, [r3, #12]
     2ea:	b2ed      	uxtb	r5, r5
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2ec:	240f      	movs	r4, #15
     2ee:	402c      	ands	r4, r5
     2f0:	18e4      	adds	r4, r4, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2f2:	1c30      	adds	r0, r6, #0
     2f4:	4659      	mov	r1, fp
     2f6:	2250      	movs	r2, #80	; 0x50
     2f8:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2fa:	2c13      	cmp	r4, #19
     2fc:	dc0b      	bgt.n	316 <adc_init+0x10e>
     2fe:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     300:	00a4      	lsls	r4, r4, #2
     302:	5930      	ldr	r0, [r6, r4]
     304:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     306:	70fb      	strb	r3, [r7, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     308:	70bb      	strb	r3, [r7, #2]
		config.mux_position = 1;
     30a:	3301      	adds	r3, #1
     30c:	703b      	strb	r3, [r7, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	b2c0      	uxtb	r0, r0
     310:	1c39      	adds	r1, r7, #0
     312:	4b94      	ldr	r3, [pc, #592]	; (564 <adc_init+0x35c>)
     314:	4798      	blx	r3
     316:	4643      	mov	r3, r8
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     318:	454d      	cmp	r5, r9
     31a:	d1e4      	bne.n	2e6 <adc_init+0xde>
     31c:	46b0      	mov	r8, r6
     31e:	1c1e      	adds	r6, r3, #0
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     320:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     322:	4640      	mov	r0, r8
     324:	4659      	mov	r1, fp
     326:	2250      	movs	r2, #80	; 0x50
     328:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     32a:	2c13      	cmp	r4, #19
     32c:	d80c      	bhi.n	348 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     32e:	4643      	mov	r3, r8
     330:	00a4      	lsls	r4, r4, #2
     332:	5918      	ldr	r0, [r3, r4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     334:	2300      	movs	r3, #0
     336:	a905      	add	r1, sp, #20
     338:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     33a:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     33c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     33e:	3301      	adds	r3, #1
     340:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     342:	b2c0      	uxtb	r0, r0
     344:	4b87      	ldr	r3, [pc, #540]	; (564 <adc_init+0x35c>)
     346:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     348:	7d73      	ldrb	r3, [r6, #21]
     34a:	9901      	ldr	r1, [sp, #4]
     34c:	009b      	lsls	r3, r3, #2
     34e:	b2db      	uxtb	r3, r3
     350:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     352:	7db3      	ldrb	r3, [r6, #22]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     354:	7872      	ldrb	r2, [r6, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     356:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     358:	4313      	orrs	r3, r2
     35a:	b2db      	uxtb	r3, r3
     35c:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     35e:	7933      	ldrb	r3, [r6, #4]
     360:	2b34      	cmp	r3, #52	; 0x34
     362:	d807      	bhi.n	374 <adc_init+0x16c>
     364:	4a80      	ldr	r2, [pc, #512]	; (568 <adc_init+0x360>)
     366:	009b      	lsls	r3, r3, #2
     368:	58d3      	ldr	r3, [r2, r3]
     36a:	469f      	mov	pc, r3
	if (inputs_to_scan > 0) {
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     36c:	3b01      	subs	r3, #1
     36e:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     370:	2b0f      	cmp	r3, #15
     372:	d95b      	bls.n	42c <adc_init+0x224>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     374:	2317      	movs	r3, #23
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     376:	e759      	b.n	22c <adc_init+0x24>

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
			!config->freerunning) {
		module_inst->software_trigger = true;
     378:	3301      	adds	r3, #1
     37a:	7743      	strb	r3, [r0, #29]
     37c:	e781      	b.n	282 <adc_init+0x7a>
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     37e:	2312      	movs	r3, #18
	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     380:	2210      	movs	r2, #16
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     382:	9300      	str	r3, [sp, #0]
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     384:	4669      	mov	r1, sp
     386:	9b01      	ldr	r3, [sp, #4]
     388:	7809      	ldrb	r1, [r1, #0]
     38a:	7099      	strb	r1, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     38c:	7df3      	ldrb	r3, [r6, #23]
     38e:	2b3f      	cmp	r3, #63	; 0x3f
     390:	d8f0      	bhi.n	374 <adc_init+0x16c>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     392:	9901      	ldr	r1, [sp, #4]
     394:	70cb      	strb	r3, [r1, #3]
     396:	9b03      	ldr	r3, [sp, #12]
     398:	6819      	ldr	r1, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     39a:	7e4b      	ldrb	r3, [r1, #25]
     39c:	b25b      	sxtb	r3, r3
     39e:	2b00      	cmp	r3, #0
     3a0:	dbfb      	blt.n	39a <adc_init+0x192>
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     3a2:	7cf1      	ldrb	r1, [r6, #19]
     3a4:	8873      	ldrh	r3, [r6, #2]
     3a6:	430b      	orrs	r3, r1
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3a8:	2124      	movs	r1, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     3aa:	5c71      	ldrb	r1, [r6, r1]
     3ac:	00c9      	lsls	r1, r1, #3
     3ae:	430b      	orrs	r3, r1
     3b0:	7d31      	ldrb	r1, [r6, #20]
     3b2:	0089      	lsls	r1, r1, #2
     3b4:	430b      	orrs	r3, r1
     3b6:	7cb1      	ldrb	r1, [r6, #18]
     3b8:	0049      	lsls	r1, r1, #1
     3ba:	430b      	orrs	r3, r1
     3bc:	9901      	ldr	r1, [sp, #4]
     3be:	4313      	orrs	r3, r2
     3c0:	808b      	strh	r3, [r1, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3c2:	7e33      	ldrb	r3, [r6, #24]
     3c4:	2b00      	cmp	r3, #0
     3c6:	d013      	beq.n	3f0 <adc_init+0x1e8>
		switch (resolution) {
     3c8:	2a10      	cmp	r2, #16
     3ca:	d100      	bne.n	3ce <adc_init+0x1c6>
     3cc:	e0e5      	b.n	59a <adc_init+0x392>
     3ce:	d800      	bhi.n	3d2 <adc_init+0x1ca>
     3d0:	e0d2      	b.n	578 <adc_init+0x370>
     3d2:	2a20      	cmp	r2, #32
     3d4:	d100      	bne.n	3d8 <adc_init+0x1d0>
     3d6:	e0e9      	b.n	5ac <adc_init+0x3a4>
     3d8:	2a30      	cmp	r2, #48	; 0x30
     3da:	d109      	bne.n	3f0 <adc_init+0x1e8>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     3dc:	7cf2      	ldrb	r2, [r6, #19]
     3de:	2a00      	cmp	r2, #0
     3e0:	d000      	beq.n	3e4 <adc_init+0x1dc>
     3e2:	e0ec      	b.n	5be <adc_init+0x3b6>
     3e4:	69f2      	ldr	r2, [r6, #28]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     3e6:	2aff      	cmp	r2, #255	; 0xff
     3e8:	dcc4      	bgt.n	374 <adc_init+0x16c>
     3ea:	6a32      	ldr	r2, [r6, #32]
     3ec:	2aff      	cmp	r2, #255	; 0xff
     3ee:	dcc1      	bgt.n	374 <adc_init+0x16c>
     3f0:	9a03      	ldr	r2, [sp, #12]
     3f2:	6811      	ldr	r1, [r2, #0]
     3f4:	7e4a      	ldrb	r2, [r1, #25]
     3f6:	b252      	sxtb	r2, r2
     3f8:	2a00      	cmp	r2, #0
     3fa:	dbfb      	blt.n	3f4 <adc_init+0x1ec>
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     3fc:	9a01      	ldr	r2, [sp, #4]
     3fe:	7213      	strb	r3, [r2, #8]
     400:	9b03      	ldr	r3, [sp, #12]
     402:	681a      	ldr	r2, [r3, #0]
     404:	7e53      	ldrb	r3, [r2, #25]
     406:	b25b      	sxtb	r3, r3
     408:	2b00      	cmp	r3, #0
     40a:	dbfb      	blt.n	404 <adc_init+0x1fc>
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     40c:	8bb3      	ldrh	r3, [r6, #28]
     40e:	9a01      	ldr	r2, [sp, #4]
     410:	8393      	strh	r3, [r2, #28]
     412:	9b03      	ldr	r3, [sp, #12]
     414:	681a      	ldr	r2, [r3, #0]
     416:	7e53      	ldrb	r3, [r2, #25]
     418:	b25b      	sxtb	r3, r3
     41a:	2b00      	cmp	r3, #0
     41c:	dbfb      	blt.n	416 <adc_init+0x20e>
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     41e:	8c33      	ldrh	r3, [r6, #32]
     420:	9a01      	ldr	r2, [sp, #4]
     422:	8413      	strh	r3, [r2, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     424:	232c      	movs	r3, #44	; 0x2c
     426:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     428:	2b00      	cmp	r3, #0
     42a:	d19f      	bne.n	36c <adc_init+0x164>
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     42c:	222b      	movs	r2, #43	; 0x2b
     42e:	5cb2      	ldrb	r2, [r6, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     430:	2a0f      	cmp	r2, #15
     432:	d89f      	bhi.n	374 <adc_init+0x16c>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     434:	9903      	ldr	r1, [sp, #12]
     436:	6808      	ldr	r0, [r1, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     438:	7e41      	ldrb	r1, [r0, #25]
     43a:	b249      	sxtb	r1, r1
     43c:	2900      	cmp	r1, #0
     43e:	dbfb      	blt.n	438 <adc_init+0x230>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     440:	89f0      	ldrh	r0, [r6, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     442:	7b31      	ldrb	r1, [r6, #12]
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     444:	0512      	lsls	r2, r2, #20
     446:	4301      	orrs	r1, r0
     448:	68b0      	ldr	r0, [r6, #8]
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     44a:	041b      	lsls	r3, r3, #16
     44c:	4301      	orrs	r1, r0
     44e:	430a      	orrs	r2, r1
			config->negative_input |
     450:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     452:	9a01      	ldr	r2, [sp, #4]
     454:	6113      	str	r3, [r2, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     456:	232a      	movs	r3, #42	; 0x2a
     458:	5cf3      	ldrb	r3, [r6, r3]
     45a:	7513      	strb	r3, [r2, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     45c:	230f      	movs	r3, #15
     45e:	7593      	strb	r3, [r2, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     460:	3315      	adds	r3, #21
     462:	5cf3      	ldrb	r3, [r6, r3]
     464:	2b00      	cmp	r3, #0
     466:	d010      	beq.n	48a <adc_init+0x282>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     468:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     46a:	4940      	ldr	r1, [pc, #256]	; (56c <adc_init+0x364>)
     46c:	428b      	cmp	r3, r1
     46e:	d900      	bls.n	472 <adc_init+0x26a>
     470:	e780      	b.n	374 <adc_init+0x16c>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     472:	9a01      	ldr	r2, [sp, #4]
     474:	8493      	strh	r3, [r2, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     476:	2380      	movs	r3, #128	; 0x80
     478:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     47a:	011b      	lsls	r3, r3, #4
     47c:	18d3      	adds	r3, r2, r3
     47e:	b29b      	uxth	r3, r3
     480:	428b      	cmp	r3, r1
     482:	d900      	bls.n	486 <adc_init+0x27e>
     484:	e776      	b.n	374 <adc_init+0x16c>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     486:	9b01      	ldr	r3, [sp, #4]
     488:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     48a:	4b39      	ldr	r3, [pc, #228]	; (570 <adc_init+0x368>)
     48c:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     48e:	23e0      	movs	r3, #224	; 0xe0
     490:	0150      	lsls	r0, r2, #5
     492:	00db      	lsls	r3, r3, #3
     494:	4018      	ands	r0, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     496:	4b37      	ldr	r3, [pc, #220]	; (574 <adc_init+0x36c>)
     498:	0151      	lsls	r1, r2, #5
     49a:	681a      	ldr	r2, [r3, #0]
     49c:	0ed3      	lsrs	r3, r2, #27
     49e:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     4a0:	b2db      	uxtb	r3, r3
     4a2:	9a01      	ldr	r2, [sp, #4]
     4a4:	4303      	orrs	r3, r0
     4a6:	8513      	strh	r3, [r2, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     4a8:	2300      	movs	r3, #0
     4aa:	e6bf      	b.n	22c <adc_init+0x24>
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4ac:	2324      	movs	r3, #36	; 0x24
	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ae:	2210      	movs	r2, #16
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4b0:	9300      	str	r3, [sp, #0]
     4b2:	e767      	b.n	384 <adc_init+0x17c>
     4b4:	2270      	movs	r2, #112	; 0x70
     4b6:	7c73      	ldrb	r3, [r6, #17]
     4b8:	011b      	lsls	r3, r3, #4
     4ba:	4013      	ands	r3, r2
     4bc:	7c32      	ldrb	r2, [r6, #16]
     4be:	4313      	orrs	r3, r2
     4c0:	9300      	str	r3, [sp, #0]

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
		accumulate = config->accumulate_samples;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c2:	2210      	movs	r2, #16
     4c4:	e75e      	b.n	384 <adc_init+0x17c>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
     4c6:	9b02      	ldr	r3, [sp, #8]
     4c8:	2b02      	cmp	r3, #2
     4ca:	d932      	bls.n	532 <adc_init+0x32a>
     4cc:	2316      	movs	r3, #22
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ce:	2210      	movs	r2, #16
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
     4d0:	9300      	str	r3, [sp, #0]
     4d2:	e757      	b.n	384 <adc_init+0x17c>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4d4:	2230      	movs	r2, #48	; 0x30
     4d6:	e755      	b.n	384 <adc_init+0x17c>
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
     4d8:	9b02      	ldr	r3, [sp, #8]
     4da:	2b02      	cmp	r3, #2
     4dc:	d92d      	bls.n	53a <adc_init+0x332>
     4de:	2308      	movs	r3, #8
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e0:	2210      	movs	r2, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
     4e2:	9300      	str	r3, [sp, #0]
     4e4:	e74e      	b.n	384 <adc_init+0x17c>
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4e6:	2200      	movs	r2, #0
     4e8:	e74c      	b.n	384 <adc_init+0x17c>
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4ea:	2220      	movs	r2, #32
     4ec:	e74a      	b.n	384 <adc_init+0x17c>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     4ee:	ab06      	add	r3, sp, #24
     4f0:	4698      	mov	r8, r3
     4f2:	4b1a      	ldr	r3, [pc, #104]	; (55c <adc_init+0x354>)
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     4f4:	7b34      	ldrb	r4, [r6, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     4f6:	469b      	mov	fp, r3
     4f8:	1c19      	adds	r1, r3, #0
     4fa:	4b19      	ldr	r3, [pc, #100]	; (560 <adc_init+0x358>)
     4fc:	4640      	mov	r0, r8
     4fe:	2250      	movs	r2, #80	; 0x50
     500:	469a      	mov	sl, r3
     502:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     504:	2c13      	cmp	r4, #19
     506:	d900      	bls.n	50a <adc_init+0x302>
     508:	e70a      	b.n	320 <adc_init+0x118>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     50a:	4643      	mov	r3, r8
     50c:	00a4      	lsls	r4, r4, #2
     50e:	5918      	ldr	r0, [r3, r4]
		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
		config.mux_position = 1;
     510:	2301      	movs	r3, #1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     512:	a905      	add	r1, sp, #20
     514:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     516:	b2c0      	uxtb	r0, r0
     518:	4b12      	ldr	r3, [pc, #72]	; (564 <adc_init+0x35c>)
     51a:	704f      	strb	r7, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     51c:	70cf      	strb	r7, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     51e:	708f      	strb	r7, [r1, #2]
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     520:	4798      	blx	r3
     522:	e6fd      	b.n	320 <adc_init+0x118>
     524:	ab06      	add	r3, sp, #24
     526:	4698      	mov	r8, r3
     528:	4b0c      	ldr	r3, [pc, #48]	; (55c <adc_init+0x354>)
     52a:	469b      	mov	fp, r3
     52c:	4b0c      	ldr	r3, [pc, #48]	; (560 <adc_init+0x358>)
     52e:	469a      	mov	sl, r3
     530:	e6f6      	b.n	320 <adc_init+0x118>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
     532:	2336      	movs	r3, #54	; 0x36
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     534:	2210      	movs	r2, #16
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
     536:	9300      	str	r3, [sp, #0]
     538:	e724      	b.n	384 <adc_init+0x17c>
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
     53a:	2348      	movs	r3, #72	; 0x48
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     53c:	2210      	movs	r2, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
     53e:	9300      	str	r3, [sp, #0]
     540:	e720      	b.n	384 <adc_init+0x17c>
     542:	46c0      	nop			; (mov r8, r8)
     544:	40000400 	.word	0x40000400
     548:	40000800 	.word	0x40000800
     54c:	2000005c 	.word	0x2000005c
     550:	41002018 	.word	0x41002018
     554:	000015a5 	.word	0x000015a5
     558:	00001519 	.word	0x00001519
     55c:	00001ed8 	.word	0x00001ed8
     560:	00001df1 	.word	0x00001df1
     564:	000016a5 	.word	0x000016a5
     568:	00001e04 	.word	0x00001e04
     56c:	00000fff 	.word	0x00000fff
     570:	00806024 	.word	0x00806024
     574:	00806020 	.word	0x00806020
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
     578:	2a00      	cmp	r2, #0
     57a:	d000      	beq.n	57e <adc_init+0x376>
     57c:	e738      	b.n	3f0 <adc_init+0x1e8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     57e:	7cf2      	ldrb	r2, [r6, #19]
     580:	2a00      	cmp	r2, #0
     582:	d13a      	bne.n	5fa <adc_init+0x3f2>
     584:	69f2      	ldr	r2, [r6, #28]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     586:	492e      	ldr	r1, [pc, #184]	; (640 <adc_init+0x438>)
     588:	428a      	cmp	r2, r1
     58a:	dd00      	ble.n	58e <adc_init+0x386>
     58c:	e6f2      	b.n	374 <adc_init+0x16c>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     58e:	6a32      	ldr	r2, [r6, #32]
     590:	428a      	cmp	r2, r1
     592:	dc00      	bgt.n	596 <adc_init+0x38e>
     594:	e72c      	b.n	3f0 <adc_init+0x1e8>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     596:	2317      	movs	r3, #23
     598:	e648      	b.n	22c <adc_init+0x24>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     59a:	7cf2      	ldrb	r2, [r6, #19]
     59c:	2a00      	cmp	r2, #0
     59e:	d11b      	bne.n	5d8 <adc_init+0x3d0>
     5a0:	69f2      	ldr	r2, [r6, #28]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     5a2:	4928      	ldr	r1, [pc, #160]	; (644 <adc_init+0x43c>)
     5a4:	428a      	cmp	r2, r1
     5a6:	ddf2      	ble.n	58e <adc_init+0x386>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5a8:	2317      	movs	r3, #23
     5aa:	e63f      	b.n	22c <adc_init+0x24>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5ac:	7cf2      	ldrb	r2, [r6, #19]
     5ae:	2a00      	cmp	r2, #0
     5b0:	d134      	bne.n	61c <adc_init+0x414>
     5b2:	69f2      	ldr	r2, [r6, #28]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     5b4:	4924      	ldr	r1, [pc, #144]	; (648 <adc_init+0x440>)
     5b6:	428a      	cmp	r2, r1
     5b8:	dde9      	ble.n	58e <adc_init+0x386>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5ba:	2317      	movs	r3, #23
     5bc:	e636      	b.n	22c <adc_init+0x24>
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     5be:	69f2      	ldr	r2, [r6, #28]
     5c0:	1c11      	adds	r1, r2, #0
     5c2:	3180      	adds	r1, #128	; 0x80

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     5c4:	29ff      	cmp	r1, #255	; 0xff
     5c6:	d900      	bls.n	5ca <adc_init+0x3c2>
     5c8:	e6d4      	b.n	374 <adc_init+0x16c>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     5ca:	6a31      	ldr	r1, [r6, #32]
     5cc:	3180      	adds	r1, #128	; 0x80
     5ce:	29ff      	cmp	r1, #255	; 0xff
     5d0:	d800      	bhi.n	5d4 <adc_init+0x3cc>
     5d2:	e708      	b.n	3e6 <adc_init+0x1de>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5d4:	2317      	movs	r3, #23
     5d6:	e629      	b.n	22c <adc_init+0x24>
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     5d8:	2180      	movs	r1, #128	; 0x80
     5da:	69f2      	ldr	r2, [r6, #28]
     5dc:	0209      	lsls	r1, r1, #8
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     5de:	4819      	ldr	r0, [pc, #100]	; (644 <adc_init+0x43c>)
					(config->window.window_lower_value > 32767 ||
     5e0:	1851      	adds	r1, r2, r1
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     5e2:	4281      	cmp	r1, r0
     5e4:	d900      	bls.n	5e8 <adc_init+0x3e0>
     5e6:	e6c5      	b.n	374 <adc_init+0x16c>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     5e8:	2480      	movs	r4, #128	; 0x80
     5ea:	0224      	lsls	r4, r4, #8
     5ec:	46a4      	mov	ip, r4
     5ee:	6a31      	ldr	r1, [r6, #32]
     5f0:	4461      	add	r1, ip
     5f2:	4281      	cmp	r1, r0
     5f4:	d9d5      	bls.n	5a2 <adc_init+0x39a>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5f6:	2317      	movs	r3, #23
     5f8:	e618      	b.n	22c <adc_init+0x24>
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     5fa:	2180      	movs	r1, #128	; 0x80
     5fc:	69f2      	ldr	r2, [r6, #28]
     5fe:	0109      	lsls	r1, r1, #4
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     600:	480f      	ldr	r0, [pc, #60]	; (640 <adc_init+0x438>)
					(config->window.window_lower_value > 2047 ||
     602:	1851      	adds	r1, r2, r1
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     604:	4281      	cmp	r1, r0
     606:	d900      	bls.n	60a <adc_init+0x402>
     608:	e6b4      	b.n	374 <adc_init+0x16c>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     60a:	2480      	movs	r4, #128	; 0x80
     60c:	0124      	lsls	r4, r4, #4
     60e:	46a4      	mov	ip, r4
     610:	6a31      	ldr	r1, [r6, #32]
     612:	4461      	add	r1, ip
     614:	4281      	cmp	r1, r0
     616:	d9b6      	bls.n	586 <adc_init+0x37e>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     618:	2317      	movs	r3, #23
     61a:	e607      	b.n	22c <adc_init+0x24>
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     61c:	2180      	movs	r1, #128	; 0x80
     61e:	69f2      	ldr	r2, [r6, #28]
     620:	0089      	lsls	r1, r1, #2
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     622:	4809      	ldr	r0, [pc, #36]	; (648 <adc_init+0x440>)
					(config->window.window_lower_value > 511 ||
     624:	1851      	adds	r1, r2, r1
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     626:	4281      	cmp	r1, r0
     628:	d900      	bls.n	62c <adc_init+0x424>
     62a:	e6a3      	b.n	374 <adc_init+0x16c>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     62c:	2480      	movs	r4, #128	; 0x80
     62e:	00a4      	lsls	r4, r4, #2
     630:	46a4      	mov	ip, r4
     632:	6a31      	ldr	r1, [r6, #32]
     634:	4461      	add	r1, ip
     636:	4281      	cmp	r1, r0
     638:	d9bc      	bls.n	5b4 <adc_init+0x3ac>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     63a:	2317      	movs	r3, #23
     63c:	e5f6      	b.n	22c <adc_init+0x24>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	00000fff 	.word	0x00000fff
     644:	0000ffff 	.word	0x0000ffff
     648:	000003ff 	.word	0x000003ff

0000064c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     64c:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     64e:	4b2f      	ldr	r3, [pc, #188]	; (70c <ADC_Handler+0xc0>)
     650:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
     652:	2301      	movs	r3, #1
static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     654:	6822      	ldr	r2, [r4, #0]
     656:	7e15      	ldrb	r5, [r2, #24]
     658:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     65a:	422b      	tst	r3, r5
     65c:	d002      	beq.n	664 <ADC_Handler+0x18>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     65e:	7ee1      	ldrb	r1, [r4, #27]
     660:	420b      	tst	r3, r1
     662:	d11c      	bne.n	69e <ADC_Handler+0x52>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     664:	2304      	movs	r3, #4
     666:	422b      	tst	r3, r5
     668:	d005      	beq.n	676 <ADC_Handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     66a:	6822      	ldr	r2, [r4, #0]
     66c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     66e:	7ee2      	ldrb	r2, [r4, #27]
     670:	3b02      	subs	r3, #2
     672:	4213      	tst	r3, r2
     674:	d10c      	bne.n	690 <ADC_Handler+0x44>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     676:	2302      	movs	r3, #2
     678:	422b      	tst	r3, r5
     67a:	d008      	beq.n	68e <ADC_Handler+0x42>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     67c:	6822      	ldr	r2, [r4, #0]
     67e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     680:	7ee2      	ldrb	r2, [r4, #27]
     682:	3302      	adds	r3, #2
     684:	4213      	tst	r3, r2
     686:	d002      	beq.n	68e <ADC_Handler+0x42>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     688:	7ea2      	ldrb	r2, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     68a:	4213      	tst	r3, r2
     68c:	d12e      	bne.n	6ec <ADC_Handler+0xa0>

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     68e:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     690:	7ea2      	ldrb	r2, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     692:	4213      	tst	r3, r2
     694:	d0ef      	beq.n	676 <ADC_Handler+0x2a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     696:	1c20      	adds	r0, r4, #0
     698:	68e3      	ldr	r3, [r4, #12]
     69a:	4798      	blx	r3
     69c:	e7eb      	b.n	676 <ADC_Handler+0x2a>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     69e:	7ea1      	ldrb	r1, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     6a0:	420b      	tst	r3, r1
     6a2:	d0df      	beq.n	664 <ADC_Handler+0x18>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6a4:	7613      	strb	r3, [r2, #24]
     6a6:	6822      	ldr	r2, [r4, #0]
     6a8:	7e53      	ldrb	r3, [r2, #25]
     6aa:	b25b      	sxtb	r3, r3
     6ac:	2b00      	cmp	r3, #0
     6ae:	dbfb      	blt.n	6a8 <ADC_Handler+0x5c>
			while (adc_is_syncing(module)) {
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     6b0:	6961      	ldr	r1, [r4, #20]
     6b2:	1c8b      	adds	r3, r1, #2
     6b4:	6163      	str	r3, [r4, #20]
     6b6:	8b53      	ldrh	r3, [r2, #26]
     6b8:	b29b      	uxth	r3, r3
     6ba:	800b      	strh	r3, [r1, #0]

			if (--module->remaining_conversions > 0) {
     6bc:	8b23      	ldrh	r3, [r4, #24]
     6be:	3b01      	subs	r3, #1
     6c0:	b29b      	uxth	r3, r3
     6c2:	8323      	strh	r3, [r4, #24]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d015      	beq.n	6f4 <ADC_Handler+0xa8>
				if (module->software_trigger == true) {
     6c8:	7f63      	ldrb	r3, [r4, #29]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d0ca      	beq.n	664 <ADC_Handler+0x18>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     6ce:	6822      	ldr	r2, [r4, #0]
     6d0:	7e53      	ldrb	r3, [r2, #25]
     6d2:	b25b      	sxtb	r3, r3
     6d4:	2b00      	cmp	r3, #0
     6d6:	dbfb      	blt.n	6d0 <ADC_Handler+0x84>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6d8:	2302      	movs	r3, #2
     6da:	7b11      	ldrb	r1, [r2, #12]
     6dc:	430b      	orrs	r3, r1
     6de:	7313      	strb	r3, [r2, #12]
     6e0:	6822      	ldr	r2, [r4, #0]
     6e2:	7e53      	ldrb	r3, [r2, #25]
     6e4:	b25b      	sxtb	r3, r3
     6e6:	2b00      	cmp	r3, #0
     6e8:	dabc      	bge.n	664 <ADC_Handler+0x18>
     6ea:	e7fa      	b.n	6e2 <ADC_Handler+0x96>

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6ec:	6923      	ldr	r3, [r4, #16]
     6ee:	1c20      	adds	r0, r4, #0
     6f0:	4798      	blx	r3
     6f2:	e7cc      	b.n	68e <ADC_Handler+0x42>
			if (--module->remaining_conversions > 0) {
				if (module->software_trigger == true) {
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     6f4:	7f22      	ldrb	r2, [r4, #28]
     6f6:	2a05      	cmp	r2, #5
     6f8:	d1b4      	bne.n	664 <ADC_Handler+0x18>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     6fa:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6fc:	2301      	movs	r3, #1
     6fe:	6822      	ldr	r2, [r4, #0]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     700:	1c20      	adds	r0, r4, #0
     702:	7593      	strb	r3, [r2, #22]
     704:	68a3      	ldr	r3, [r4, #8]
     706:	4798      	blx	r3
     708:	e7ac      	b.n	664 <ADC_Handler+0x18>
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	2000005c 	.word	0x2000005c

00000710 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     710:	1c93      	adds	r3, r2, #2
     712:	009b      	lsls	r3, r3, #2
     714:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     716:	2301      	movs	r3, #1
     718:	4093      	lsls	r3, r2
     71a:	1c1a      	adds	r2, r3, #0
     71c:	7e83      	ldrb	r3, [r0, #26]
     71e:	431a      	orrs	r2, r3
     720:	7682      	strb	r2, [r0, #26]
}
     722:	4770      	bx	lr

00000724 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     724:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     726:	8b04      	ldrh	r4, [r0, #24]
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     728:	2305      	movs	r3, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     72a:	2c00      	cmp	r4, #0
     72c:	d001      	beq.n	732 <adc_read_buffer_job+0xe>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     72e:	1c18      	adds	r0, r3, #0
     730:	bd10      	pop	{r4, pc}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
			module_inst->job_status == STATUS_BUSY){
     732:	7f03      	ldrb	r3, [r0, #28]
     734:	b2db      	uxtb	r3, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     736:	2b05      	cmp	r3, #5
     738:	d0f9      	beq.n	72e <adc_read_buffer_job+0xa>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
     73a:	2305      	movs	r3, #5
     73c:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     73e:	8302      	strh	r2, [r0, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
     740:	6802      	ldr	r2, [r0, #0]
     742:	3b04      	subs	r3, #4
	module_inst->job_buffer = buffer;
     744:	6141      	str	r1, [r0, #20]
     746:	75d3      	strb	r3, [r2, #23]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
     748:	7f43      	ldrb	r3, [r0, #29]
     74a:	2b00      	cmp	r3, #0
     74c:	d101      	bne.n	752 <adc_read_buffer_job+0x2e>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
     74e:	2300      	movs	r3, #0
     750:	e7ed      	b.n	72e <adc_read_buffer_job+0xa>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     752:	6802      	ldr	r2, [r0, #0]
     754:	7e53      	ldrb	r3, [r2, #25]
     756:	b25b      	sxtb	r3, r3
     758:	2b00      	cmp	r3, #0
     75a:	dbfb      	blt.n	754 <adc_read_buffer_job+0x30>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     75c:	2302      	movs	r3, #2
     75e:	7b11      	ldrb	r1, [r2, #12]
     760:	430b      	orrs	r3, r1
     762:	7313      	strb	r3, [r2, #12]
     764:	6802      	ldr	r2, [r0, #0]
     766:	7e53      	ldrb	r3, [r2, #25]
     768:	b25b      	sxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	dbfb      	blt.n	766 <adc_read_buffer_job+0x42>
     76e:	2300      	movs	r3, #0
     770:	e7dd      	b.n	72e <adc_read_buffer_job+0xa>
     772:	46c0      	nop			; (mov r8, r8)

00000774 <adc_complete_callback>:
extern volatile bool adc_read_done;

void adc_complete_callback(
struct adc_module *const module)
{
	adc_read_done = true;
     774:	2201      	movs	r2, #1
     776:	4b01      	ldr	r3, [pc, #4]	; (77c <adc_complete_callback+0x8>)
     778:	701a      	strb	r2, [r3, #0]
}
     77a:	4770      	bx	lr
     77c:	20000058 	.word	0x20000058

00000780 <configure_adc>:


void configure_adc(void)
{
     780:	b510      	push	{r4, lr}
     782:	b08c      	sub	sp, #48	; 0x30
	//! [setup_config]
	struct adc_config config_adc;
	//! [setup_config]
	//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
     784:	4668      	mov	r0, sp
     786:	4b14      	ldr	r3, [pc, #80]	; (7d8 <configure_adc+0x58>)
     788:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_modify_conf]
	#if (!SAML21) && (!SAML22) && (!SAMC21)
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
     78a:	23f0      	movs	r3, #240	; 0xf0
     78c:	051b      	lsls	r3, r3, #20
     78e:	9302      	str	r3, [sp, #8]
	#endif
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
     790:	2380      	movs	r3, #128	; 0x80
     792:	466a      	mov	r2, sp
     794:	005b      	lsls	r3, r3, #1
     796:	8053      	strh	r3, [r2, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
     798:	3bfe      	subs	r3, #254	; 0xfe
     79a:	7053      	strb	r3, [r2, #1]
	#if (SAMC21)
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN5;
	#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;		  // start at AD0
     79c:	2300      	movs	r3, #0

	//! [setup_set_config]
	#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
	#else
	adc_init(&adc_instance, ADC, &config_adc);
     79e:	4c0f      	ldr	r4, [pc, #60]	; (7dc <configure_adc+0x5c>)
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
	#if (SAMC21)
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN5;
	#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;		  // start at AD0
     7a0:	7313      	strb	r3, [r2, #12]
	#endif
	config_adc.resolution      = ADC_RESOLUTION_8BIT;
     7a2:	3330      	adds	r3, #48	; 0x30
     7a4:	7113      	strb	r3, [r2, #4]

	//! [setup_set_config]
	#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
	#else
	adc_init(&adc_instance, ADC, &config_adc);
     7a6:	1c20      	adds	r0, r4, #0
     7a8:	490d      	ldr	r1, [pc, #52]	; (7e0 <configure_adc+0x60>)
     7aa:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <configure_adc+0x64>)
     7ac:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     7ae:	6822      	ldr	r2, [r4, #0]
     7b0:	7e53      	ldrb	r3, [r2, #25]
     7b2:	b25b      	sxtb	r3, r3
     7b4:	2b00      	cmp	r3, #0
     7b6:	dbfb      	blt.n	7b0 <configure_adc+0x30>
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <configure_adc+0x68>)
     7bc:	0389      	lsls	r1, r1, #14
     7be:	6019      	str	r1, [r3, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     7c0:	2302      	movs	r3, #2
     7c2:	7811      	ldrb	r1, [r2, #0]
     7c4:	430b      	orrs	r3, r1
     7c6:	7013      	strb	r3, [r2, #0]
     7c8:	6822      	ldr	r2, [r4, #0]
     7ca:	7e53      	ldrb	r3, [r2, #25]
     7cc:	b25b      	sxtb	r3, r3
     7ce:	2b00      	cmp	r3, #0
     7d0:	dbfb      	blt.n	7ca <configure_adc+0x4a>
	//! [setup_set_config]

	//! [setup_enable]
	adc_enable(&adc_instance);
	//! [setup_enable]
}
     7d2:	b00c      	add	sp, #48	; 0x30
     7d4:	bd10      	pop	{r4, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	000001c5 	.word	0x000001c5
     7dc:	200001e8 	.word	0x200001e8
     7e0:	42004000 	.word	0x42004000
     7e4:	00000209 	.word	0x00000209
     7e8:	e000e100 	.word	0xe000e100

000007ec <configure_adc_callbacks>:

void configure_adc_callbacks(void)
{
     7ec:	b510      	push	{r4, lr}
	//! [setup_register_callback]
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
     7ee:	4c05      	ldr	r4, [pc, #20]	; (804 <configure_adc_callbacks+0x18>)
     7f0:	4905      	ldr	r1, [pc, #20]	; (808 <configure_adc_callbacks+0x1c>)
     7f2:	1c20      	adds	r0, r4, #0
     7f4:	2200      	movs	r2, #0
     7f6:	4b05      	ldr	r3, [pc, #20]	; (80c <configure_adc_callbacks+0x20>)
     7f8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
     7fa:	2301      	movs	r3, #1
     7fc:	7ee2      	ldrb	r2, [r4, #27]
     7fe:	4313      	orrs	r3, r2
     800:	76e3      	strb	r3, [r4, #27]
	//! [setup_register_callback]
	//! [setup_enable_callback]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
	//! [setup_enable_callback]
}
     802:	bd10      	pop	{r4, pc}
     804:	200001e8 	.word	0x200001e8
     808:	00000775 	.word	0x00000775
     80c:	00000711 	.word	0x00000711

00000810 <tc_callback_to_toggle_led>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     810:	2280      	movs	r2, #128	; 0x80
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <tc_callback_to_toggle_led+0xc>)
     814:	01d2      	lsls	r2, r2, #7
     816:	61da      	str	r2, [r3, #28]
//! [callback_funcs]
void tc_callback_to_toggle_led(
		struct tc_module *const module_inst)
{
	port_pin_toggle_output_level(LED0_PIN);
}
     818:	4770      	bx	lr
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	41004400 	.word	0x41004400

00000820 <configure_tc>:

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     820:	2300      	movs	r3, #0
//! [callback_funcs]

//! [setup]
void configure_tc(void)
{
     822:	b510      	push	{r4, lr}
     824:	b08e      	sub	sp, #56	; 0x38
     826:	aa01      	add	r2, sp, #4

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     828:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     82a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     82c:	8113      	strh	r3, [r2, #8]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
	config->oneshot                    = false;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     82e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     830:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     832:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     834:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     836:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     838:	3304      	adds	r3, #4
     83a:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
     83c:	3b03      	subs	r3, #3
     83e:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;//TC_CLOCK_PRESCALER_DIV1024;
     840:	23c0      	movs	r3, #192	; 0xc0
	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     842:	2100      	movs	r1, #0
     844:	00db      	lsls	r3, r3, #3
	config->run_in_standby             = false;
     846:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     848:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     84a:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     84c:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     84e:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     850:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     852:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     854:	7711      	strb	r1, [r2, #28]
     856:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 100;
     858:	2164      	movs	r1, #100	; 0x64
     85a:	2329      	movs	r3, #41	; 0x29
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     85c:	4c0b      	ldr	r4, [pc, #44]	; (88c <configure_tc+0x6c>)

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
	config_tc.clock_source = GCLK_GENERATOR_1;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;//TC_CLOCK_PRESCALER_DIV1024;
	config_tc.counter_8_bit.period = 100;
     85e:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
     860:	3932      	subs	r1, #50	; 0x32
     862:	3301      	adds	r3, #1
     864:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
     866:	3104      	adds	r1, #4
     868:	3301      	adds	r3, #1
     86a:	54d1      	strb	r1, [r2, r3]
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     86c:	1c20      	adds	r0, r4, #0
     86e:	4908      	ldr	r1, [pc, #32]	; (890 <configure_tc+0x70>)
     870:	4b08      	ldr	r3, [pc, #32]	; (894 <configure_tc+0x74>)
     872:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     874:	217f      	movs	r1, #127	; 0x7f
     876:	6822      	ldr	r2, [r4, #0]
     878:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     87a:	438b      	bics	r3, r1
     87c:	d1fc      	bne.n	878 <configure_tc+0x58>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     87e:	8811      	ldrh	r1, [r2, #0]
     880:	3302      	adds	r3, #2
     882:	430b      	orrs	r3, r1
     884:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
}
     886:	b00e      	add	sp, #56	; 0x38
     888:	bd10      	pop	{r4, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	20000060 	.word	0x20000060
     890:	42002c00 	.word	0x42002c00
     894:	0000184d 	.word	0x0000184d

00000898 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
     898:	b510      	push	{r4, lr}
	//! [setup_register_callback]
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
     89a:	4c0d      	ldr	r4, [pc, #52]	; (8d0 <configure_tc_callbacks+0x38>)
     89c:	490d      	ldr	r1, [pc, #52]	; (8d4 <configure_tc_callbacks+0x3c>)
     89e:	2200      	movs	r2, #0
     8a0:	1c20      	adds	r0, r4, #0
     8a2:	4b0d      	ldr	r3, [pc, #52]	; (8d8 <configure_tc_callbacks+0x40>)
     8a4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     8a6:	6820      	ldr	r0, [r4, #0]
     8a8:	4b0c      	ldr	r3, [pc, #48]	; (8dc <configure_tc_callbacks+0x44>)
     8aa:	4798      	blx	r3
     8ac:	221f      	movs	r2, #31
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     8ae:	4b0c      	ldr	r3, [pc, #48]	; (8e0 <configure_tc_callbacks+0x48>)
     8b0:	5c1b      	ldrb	r3, [r3, r0]
     8b2:	4013      	ands	r3, r2
     8b4:	3a1e      	subs	r2, #30
     8b6:	1c11      	adds	r1, r2, #0
     8b8:	4099      	lsls	r1, r3
     8ba:	1c0b      	adds	r3, r1, #0
     8bc:	4909      	ldr	r1, [pc, #36]	; (8e4 <configure_tc_callbacks+0x4c>)
     8be:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     8c0:	2301      	movs	r3, #1
     8c2:	7e61      	ldrb	r1, [r4, #25]
     8c4:	430b      	orrs	r3, r1
     8c6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     8c8:	6823      	ldr	r3, [r4, #0]
     8ca:	735a      	strb	r2, [r3, #13]
	//! [setup_enable_callback]
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
/*	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
*/	//! [setup_enable_callback]
}
     8cc:	bd10      	pop	{r4, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	20000060 	.word	0x20000060
     8d4:	00000811 	.word	0x00000811
     8d8:	00001705 	.word	0x00001705
     8dc:	00001819 	.word	0x00001819
     8e0:	00001f28 	.word	0x00001f28
     8e4:	e000e100 	.word	0xe000e100

000008e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8e8:	4b0b      	ldr	r3, [pc, #44]	; (918 <cpu_irq_enter_critical+0x30>)
     8ea:	681a      	ldr	r2, [r3, #0]
     8ec:	2a00      	cmp	r2, #0
     8ee:	d105      	bne.n	8fc <cpu_irq_enter_critical+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8f0:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
     8f4:	2900      	cmp	r1, #0
     8f6:	d005      	beq.n	904 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8f8:	4908      	ldr	r1, [pc, #32]	; (91c <cpu_irq_enter_critical+0x34>)
     8fa:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8fc:	681a      	ldr	r2, [r3, #0]
     8fe:	3201      	adds	r2, #1
     900:	601a      	str	r2, [r3, #0]
}
     902:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     904:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     906:	f3bf 8f5f 	dmb	sy

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
     90a:	4a05      	ldr	r2, [pc, #20]	; (920 <cpu_irq_enter_critical+0x38>)
     90c:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
     90e:	4a03      	ldr	r2, [pc, #12]	; (91c <cpu_irq_enter_critical+0x34>)
     910:	3101      	adds	r1, #1
     912:	7011      	strb	r1, [r2, #0]
     914:	e7f2      	b.n	8fc <cpu_irq_enter_critical+0x14>
     916:	46c0      	nop			; (mov r8, r8)
     918:	20000020 	.word	0x20000020
     91c:	20000024 	.word	0x20000024
     920:	20000000 	.word	0x20000000

00000924 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     924:	4b08      	ldr	r3, [pc, #32]	; (948 <cpu_irq_leave_critical+0x24>)
     926:	681a      	ldr	r2, [r3, #0]
     928:	3a01      	subs	r2, #1
     92a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     92c:	681b      	ldr	r3, [r3, #0]
     92e:	2b00      	cmp	r3, #0
     930:	d109      	bne.n	946 <cpu_irq_leave_critical+0x22>
     932:	4b06      	ldr	r3, [pc, #24]	; (94c <cpu_irq_leave_critical+0x28>)
     934:	781b      	ldrb	r3, [r3, #0]
     936:	2b00      	cmp	r3, #0
     938:	d005      	beq.n	946 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     93a:	2201      	movs	r2, #1
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <cpu_irq_leave_critical+0x2c>)
     93e:	701a      	strb	r2, [r3, #0]
     940:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     944:	b662      	cpsie	i
	}
}
     946:	4770      	bx	lr
     948:	20000020 	.word	0x20000020
     94c:	20000024 	.word	0x20000024
     950:	20000000 	.word	0x20000000

00000954 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     954:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     956:	2601      	movs	r6, #1
	config->powersave  = false;
     958:	2700      	movs	r7, #0
     95a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     95c:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     95e:	4d0c      	ldr	r5, [pc, #48]	; (990 <system_board_init+0x3c>)
     960:	1c21      	adds	r1, r4, #0
     962:	200e      	movs	r0, #14
     964:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     966:	70a7      	strb	r7, [r4, #2]
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     968:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     96a:	47a8      	blx	r5
	port_pin_set_config(PIN_PB16, &pin_conf);		   // mod mike
     96c:	1c21      	adds	r1, r4, #0
     96e:	2030      	movs	r0, #48	; 0x30
     970:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     972:	2280      	movs	r2, #128	; 0x80
     974:	4b07      	ldr	r3, [pc, #28]	; (994 <system_board_init+0x40>)
     976:	01d2      	lsls	r2, r2, #7
     978:	619a      	str	r2, [r3, #24]
     97a:	2280      	movs	r2, #128	; 0x80
     97c:	3380      	adds	r3, #128	; 0x80
     97e:	0252      	lsls	r2, r2, #9
     980:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB16, 1);					   // mod mike
		
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     982:	200f      	movs	r0, #15
     984:	1c21      	adds	r1, r4, #0
		
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	port_pin_set_output_level(PIN_PB16, 1);					   // mod mike
		
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     986:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     988:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     98a:	47a8      	blx	r5

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
     98c:	b003      	add	sp, #12
     98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     990:	00000999 	.word	0x00000999
     994:	41004400 	.word	0x41004400

00000998 <port_pin_set_config>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     998:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     99a:	b500      	push	{lr}
     99c:	b083      	sub	sp, #12
     99e:	ab01      	add	r3, sp, #4
     9a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9a2:	780a      	ldrb	r2, [r1, #0]
     9a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9a6:	784a      	ldrb	r2, [r1, #1]
     9a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9aa:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9ac:	1c19      	adds	r1, r3, #0
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
	pinmux_config.powersave    = config->powersave;
     9ae:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9b0:	4b01      	ldr	r3, [pc, #4]	; (9b8 <port_pin_set_config+0x20>)
     9b2:	4798      	blx	r3
}
     9b4:	b003      	add	sp, #12
     9b6:	bd00      	pop	{pc}
     9b8:	000016a5 	.word	0x000016a5

000009bc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     9bc:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9be:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9c0:	2340      	movs	r3, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9c2:	2400      	movs	r4, #0
     9c4:	4281      	cmp	r1, r0
     9c6:	d202      	bcs.n	9ce <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     9c8:	1c18      	adds	r0, r3, #0
     9ca:	bd10      	pop	{r4, pc}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     9cc:	1c1c      	adds	r4, r3, #0
     9ce:	1c63      	adds	r3, r4, #1
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     9d0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     9d2:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     9d4:	4288      	cmp	r0, r1
     9d6:	d9f9      	bls.n	9cc <_sercom_get_sync_baud_val+0x10>


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9d8:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     9da:	2cff      	cmp	r4, #255	; 0xff
     9dc:	d8f4      	bhi.n	9c8 <_sercom_get_sync_baud_val+0xc>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     9de:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     9e0:	2300      	movs	r3, #0
     9e2:	e7f1      	b.n	9c8 <_sercom_get_sync_baud_val+0xc>

000009e4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9e4:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9e6:	4c0e      	ldr	r4, [pc, #56]	; (a20 <sercom_set_gclk_generator+0x3c>)
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9e8:	b083      	sub	sp, #12
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9ea:	7823      	ldrb	r3, [r4, #0]
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9ec:	1c05      	adds	r5, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9ee:	2b00      	cmp	r3, #0
     9f0:	d006      	beq.n	a00 <sercom_set_gclk_generator+0x1c>
     9f2:	2900      	cmp	r1, #0
     9f4:	d104      	bne.n	a00 <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     9f6:	7863      	ldrb	r3, [r4, #1]
     9f8:	4283      	cmp	r3, r0
     9fa:	d00f      	beq.n	a1c <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9fc:	201d      	movs	r0, #29
     9fe:	e00b      	b.n	a18 <sercom_set_gclk_generator+0x34>
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     a00:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a02:	200c      	movs	r0, #12
     a04:	4b07      	ldr	r3, [pc, #28]	; (a24 <sercom_set_gclk_generator+0x40>)
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     a06:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a08:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a0a:	200c      	movs	r0, #12
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <sercom_set_gclk_generator+0x44>)
     a0e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     a10:	2301      	movs	r3, #1

		return STATUS_OK;
     a12:	2000      	movs	r0, #0
		gclk_chan_conf.source_generator = generator_source;
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(SERCOM_GCLK_ID);

		/* Save config */
		_sercom_config.generator_source = generator_source;
     a14:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     a16:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a18:	b003      	add	sp, #12
     a1a:	bd30      	pop	{r4, r5, pc}
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     a1c:	2000      	movs	r0, #0
     a1e:	e7fb      	b.n	a18 <sercom_set_gclk_generator+0x34>
     a20:	20000028 	.word	0x20000028
     a24:	000015a5 	.word	0x000015a5
     a28:	00001519 	.word	0x00001519

00000a2c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a2c:	4b3a      	ldr	r3, [pc, #232]	; (b18 <_sercom_get_default_pad+0xec>)
     a2e:	4298      	cmp	r0, r3
     a30:	d043      	beq.n	aba <_sercom_get_default_pad+0x8e>
     a32:	d90a      	bls.n	a4a <_sercom_get_default_pad+0x1e>
     a34:	4b39      	ldr	r3, [pc, #228]	; (b1c <_sercom_get_default_pad+0xf0>)
     a36:	4298      	cmp	r0, r3
     a38:	d017      	beq.n	a6a <_sercom_get_default_pad+0x3e>
     a3a:	4b39      	ldr	r3, [pc, #228]	; (b20 <_sercom_get_default_pad+0xf4>)
     a3c:	4298      	cmp	r0, r3
     a3e:	d032      	beq.n	aa6 <_sercom_get_default_pad+0x7a>
     a40:	4b38      	ldr	r3, [pc, #224]	; (b24 <_sercom_get_default_pad+0xf8>)
     a42:	4298      	cmp	r0, r3
     a44:	d01b      	beq.n	a7e <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a46:	2000      	movs	r0, #0
}
     a48:	4770      	bx	lr
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a4a:	4b37      	ldr	r3, [pc, #220]	; (b28 <_sercom_get_default_pad+0xfc>)
     a4c:	4298      	cmp	r0, r3
     a4e:	d020      	beq.n	a92 <_sercom_get_default_pad+0x66>
     a50:	4b36      	ldr	r3, [pc, #216]	; (b2c <_sercom_get_default_pad+0x100>)
     a52:	4298      	cmp	r0, r3
     a54:	d1f7      	bne.n	a46 <_sercom_get_default_pad+0x1a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a56:	2901      	cmp	r1, #1
     a58:	d043      	beq.n	ae2 <_sercom_get_default_pad+0xb6>
     a5a:	2900      	cmp	r1, #0
     a5c:	d03f      	beq.n	ade <_sercom_get_default_pad+0xb2>
     a5e:	2902      	cmp	r1, #2
     a60:	d03b      	beq.n	ada <_sercom_get_default_pad+0xae>
     a62:	2903      	cmp	r1, #3
     a64:	d1ef      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     a66:	4832      	ldr	r0, [pc, #200]	; (b30 <_sercom_get_default_pad+0x104>)
     a68:	e7ee      	b.n	a48 <_sercom_get_default_pad+0x1c>
     a6a:	2901      	cmp	r1, #1
     a6c:	d031      	beq.n	ad2 <_sercom_get_default_pad+0xa6>
     a6e:	2900      	cmp	r1, #0
     a70:	d02d      	beq.n	ace <_sercom_get_default_pad+0xa2>
     a72:	2902      	cmp	r1, #2
     a74:	d02f      	beq.n	ad6 <_sercom_get_default_pad+0xaa>
     a76:	2903      	cmp	r1, #3
     a78:	d1e5      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     a7a:	482e      	ldr	r0, [pc, #184]	; (b34 <_sercom_get_default_pad+0x108>)
     a7c:	e7e4      	b.n	a48 <_sercom_get_default_pad+0x1c>
     a7e:	2901      	cmp	r1, #1
     a80:	d03f      	beq.n	b02 <_sercom_get_default_pad+0xd6>
     a82:	2900      	cmp	r1, #0
     a84:	d03b      	beq.n	afe <_sercom_get_default_pad+0xd2>
     a86:	2902      	cmp	r1, #2
     a88:	d037      	beq.n	afa <_sercom_get_default_pad+0xce>
     a8a:	2903      	cmp	r1, #3
     a8c:	d1db      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     a8e:	482a      	ldr	r0, [pc, #168]	; (b38 <_sercom_get_default_pad+0x10c>)
     a90:	e7da      	b.n	a48 <_sercom_get_default_pad+0x1c>
     a92:	2901      	cmp	r1, #1
     a94:	d03d      	beq.n	b12 <_sercom_get_default_pad+0xe6>
     a96:	2900      	cmp	r1, #0
     a98:	d039      	beq.n	b0e <_sercom_get_default_pad+0xe2>
     a9a:	2902      	cmp	r1, #2
     a9c:	d02b      	beq.n	af6 <_sercom_get_default_pad+0xca>
     a9e:	2903      	cmp	r1, #3
     aa0:	d1d1      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     aa2:	4826      	ldr	r0, [pc, #152]	; (b3c <_sercom_get_default_pad+0x110>)
     aa4:	e7d0      	b.n	a48 <_sercom_get_default_pad+0x1c>
     aa6:	2901      	cmp	r1, #1
     aa8:	d023      	beq.n	af2 <_sercom_get_default_pad+0xc6>
     aaa:	2900      	cmp	r1, #0
     aac:	d01f      	beq.n	aee <_sercom_get_default_pad+0xc2>
     aae:	2902      	cmp	r1, #2
     ab0:	d01b      	beq.n	aea <_sercom_get_default_pad+0xbe>
     ab2:	2903      	cmp	r1, #3
     ab4:	d1c7      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     ab6:	4822      	ldr	r0, [pc, #136]	; (b40 <_sercom_get_default_pad+0x114>)
     ab8:	e7c6      	b.n	a48 <_sercom_get_default_pad+0x1c>
     aba:	2901      	cmp	r1, #1
     abc:	d025      	beq.n	b0a <_sercom_get_default_pad+0xde>
     abe:	2900      	cmp	r1, #0
     ac0:	d021      	beq.n	b06 <_sercom_get_default_pad+0xda>
     ac2:	2902      	cmp	r1, #2
     ac4:	d00f      	beq.n	ae6 <_sercom_get_default_pad+0xba>
     ac6:	2903      	cmp	r1, #3
     ac8:	d1bd      	bne.n	a46 <_sercom_get_default_pad+0x1a>
     aca:	481e      	ldr	r0, [pc, #120]	; (b44 <_sercom_get_default_pad+0x118>)
     acc:	e7bc      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ace:	481e      	ldr	r0, [pc, #120]	; (b48 <_sercom_get_default_pad+0x11c>)
     ad0:	e7ba      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ad2:	481e      	ldr	r0, [pc, #120]	; (b4c <_sercom_get_default_pad+0x120>)
     ad4:	e7b8      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ad6:	481e      	ldr	r0, [pc, #120]	; (b50 <_sercom_get_default_pad+0x124>)
     ad8:	e7b6      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ada:	481e      	ldr	r0, [pc, #120]	; (b54 <_sercom_get_default_pad+0x128>)
     adc:	e7b4      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ade:	2003      	movs	r0, #3
     ae0:	e7b2      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ae2:	481d      	ldr	r0, [pc, #116]	; (b58 <_sercom_get_default_pad+0x12c>)
     ae4:	e7b0      	b.n	a48 <_sercom_get_default_pad+0x1c>
     ae6:	481d      	ldr	r0, [pc, #116]	; (b5c <_sercom_get_default_pad+0x130>)
     ae8:	e7ae      	b.n	a48 <_sercom_get_default_pad+0x1c>
     aea:	481d      	ldr	r0, [pc, #116]	; (b60 <_sercom_get_default_pad+0x134>)
     aec:	e7ac      	b.n	a48 <_sercom_get_default_pad+0x1c>
     aee:	481d      	ldr	r0, [pc, #116]	; (b64 <_sercom_get_default_pad+0x138>)
     af0:	e7aa      	b.n	a48 <_sercom_get_default_pad+0x1c>
     af2:	481d      	ldr	r0, [pc, #116]	; (b68 <_sercom_get_default_pad+0x13c>)
     af4:	e7a8      	b.n	a48 <_sercom_get_default_pad+0x1c>
     af6:	481d      	ldr	r0, [pc, #116]	; (b6c <_sercom_get_default_pad+0x140>)
     af8:	e7a6      	b.n	a48 <_sercom_get_default_pad+0x1c>
     afa:	481d      	ldr	r0, [pc, #116]	; (b70 <_sercom_get_default_pad+0x144>)
     afc:	e7a4      	b.n	a48 <_sercom_get_default_pad+0x1c>
     afe:	481d      	ldr	r0, [pc, #116]	; (b74 <_sercom_get_default_pad+0x148>)
     b00:	e7a2      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b02:	481d      	ldr	r0, [pc, #116]	; (b78 <_sercom_get_default_pad+0x14c>)
     b04:	e7a0      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b06:	481d      	ldr	r0, [pc, #116]	; (b7c <_sercom_get_default_pad+0x150>)
     b08:	e79e      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b0a:	481d      	ldr	r0, [pc, #116]	; (b80 <_sercom_get_default_pad+0x154>)
     b0c:	e79c      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b0e:	481d      	ldr	r0, [pc, #116]	; (b84 <_sercom_get_default_pad+0x158>)
     b10:	e79a      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b12:	481d      	ldr	r0, [pc, #116]	; (b88 <_sercom_get_default_pad+0x15c>)
     b14:	e798      	b.n	a48 <_sercom_get_default_pad+0x1c>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	42001000 	.word	0x42001000
     b1c:	42001800 	.word	0x42001800
     b20:	42001c00 	.word	0x42001c00
     b24:	42001400 	.word	0x42001400
     b28:	42000800 	.word	0x42000800
     b2c:	42000c00 	.word	0x42000c00
     b30:	001f0003 	.word	0x001f0003
     b34:	000f0003 	.word	0x000f0003
     b38:	00130003 	.word	0x00130003
     b3c:	00070003 	.word	0x00070003
     b40:	00190003 	.word	0x00190003
     b44:	000b0003 	.word	0x000b0003
     b48:	000c0003 	.word	0x000c0003
     b4c:	000d0003 	.word	0x000d0003
     b50:	000e0003 	.word	0x000e0003
     b54:	001e0003 	.word	0x001e0003
     b58:	00010003 	.word	0x00010003
     b5c:	000a0003 	.word	0x000a0003
     b60:	00180003 	.word	0x00180003
     b64:	00160003 	.word	0x00160003
     b68:	00170003 	.word	0x00170003
     b6c:	00060003 	.word	0x00060003
     b70:	00120003 	.word	0x00120003
     b74:	00100003 	.word	0x00100003
     b78:	00110003 	.word	0x00110003
     b7c:	00080003 	.word	0x00080003
     b80:	00090003 	.word	0x00090003
     b84:	00040003 	.word	0x00040003
     b88:	00050003 	.word	0x00050003

00000b8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b8c:	b570      	push	{r4, r5, r6, lr}
     b8e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b90:	4669      	mov	r1, sp
     b92:	4b09      	ldr	r3, [pc, #36]	; (bb8 <_sercom_get_sercom_inst_index+0x2c>)
     b94:	466a      	mov	r2, sp
     b96:	cb70      	ldmia	r3!, {r4, r5, r6}
     b98:	c170      	stmia	r1!, {r4, r5, r6}
     b9a:	cb70      	ldmia	r3!, {r4, r5, r6}
     b9c:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b9e:	2300      	movs	r3, #0
     ba0:	0099      	lsls	r1, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ba2:	5851      	ldr	r1, [r2, r1]
     ba4:	4281      	cmp	r1, r0
     ba6:	d005      	beq.n	bb4 <_sercom_get_sercom_inst_index+0x28>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ba8:	3301      	adds	r3, #1
     baa:	2b06      	cmp	r3, #6
     bac:	d1f8      	bne.n	ba0 <_sercom_get_sercom_inst_index+0x14>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     bae:	2000      	movs	r0, #0
}
     bb0:	b006      	add	sp, #24
     bb2:	bd70      	pop	{r4, r5, r6, pc}
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     bb4:	b2d8      	uxtb	r0, r3
     bb6:	e7fb      	b.n	bb0 <_sercom_get_sercom_inst_index+0x24>
     bb8:	00001f30 	.word	0x00001f30

00000bbc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     bbc:	4770      	bx	lr
     bbe:	46c0      	nop			; (mov r8, r8)

00000bc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	468c      	mov	ip, r1
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     bc4:	490b      	ldr	r1, [pc, #44]	; (bf4 <_sercom_set_handler+0x34>)
     bc6:	780b      	ldrb	r3, [r1, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d110      	bne.n	bee <_sercom_set_handler+0x2e>
     bcc:	2300      	movs	r3, #0
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     bce:	2500      	movs	r5, #0
     bd0:	4c09      	ldr	r4, [pc, #36]	; (bf8 <_sercom_set_handler+0x38>)
     bd2:	4f0a      	ldr	r7, [pc, #40]	; (bfc <_sercom_set_handler+0x3c>)
     bd4:	4e0a      	ldr	r6, [pc, #40]	; (c00 <_sercom_set_handler+0x40>)
     bd6:	18f2      	adds	r2, r6, r3
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bd8:	50e7      	str	r7, [r4, r3]
     bda:	3304      	adds	r3, #4
			_sercom_instances[i] = NULL;
     bdc:	6015      	str	r5, [r2, #0]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bde:	2b18      	cmp	r3, #24
     be0:	d1f9      	bne.n	bd6 <_sercom_set_handler+0x16>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     be2:	3b17      	subs	r3, #23
     be4:	700b      	strb	r3, [r1, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     be6:	4663      	mov	r3, ip
     be8:	0080      	lsls	r0, r0, #2
     bea:	5023      	str	r3, [r4, r0]
}
     bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bee:	4c02      	ldr	r4, [pc, #8]	; (bf8 <_sercom_set_handler+0x38>)
     bf0:	e7f9      	b.n	be6 <_sercom_set_handler+0x26>
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	2000002a 	.word	0x2000002a
     bf8:	2000002c 	.word	0x2000002c
     bfc:	00000bbd 	.word	0x00000bbd
     c00:	2000007c 	.word	0x2000007c

00000c04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c04:	b510      	push	{r4, lr}
     c06:	1c04      	adds	r4, r0, #0
     c08:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c0a:	4906      	ldr	r1, [pc, #24]	; (c24 <_sercom_get_interrupt_vector+0x20>)
     c0c:	2206      	movs	r2, #6
     c0e:	4668      	mov	r0, sp
     c10:	4b05      	ldr	r3, [pc, #20]	; (c28 <_sercom_get_interrupt_vector+0x24>)
     c12:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c14:	1c20      	adds	r0, r4, #0
     c16:	4b05      	ldr	r3, [pc, #20]	; (c2c <_sercom_get_interrupt_vector+0x28>)
     c18:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c1a:	466b      	mov	r3, sp
     c1c:	5618      	ldrsb	r0, [r3, r0]
}
     c1e:	b002      	add	sp, #8
     c20:	bd10      	pop	{r4, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00001f48 	.word	0x00001f48
     c28:	00001df1 	.word	0x00001df1
     c2c:	00000b8d 	.word	0x00000b8d

00000c30 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c30:	b508      	push	{r3, lr}
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <SERCOM0_Handler+0xc>)
     c34:	2000      	movs	r0, #0
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	4798      	blx	r3
     c3a:	bd08      	pop	{r3, pc}
     c3c:	2000002c 	.word	0x2000002c

00000c40 <SERCOM1_Handler>:
     c40:	b508      	push	{r3, lr}
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <SERCOM1_Handler+0xc>)
     c44:	2001      	movs	r0, #1
     c46:	685b      	ldr	r3, [r3, #4]
     c48:	4798      	blx	r3
     c4a:	bd08      	pop	{r3, pc}
     c4c:	2000002c 	.word	0x2000002c

00000c50 <SERCOM2_Handler>:
     c50:	b508      	push	{r3, lr}
     c52:	4b02      	ldr	r3, [pc, #8]	; (c5c <SERCOM2_Handler+0xc>)
     c54:	2002      	movs	r0, #2
     c56:	689b      	ldr	r3, [r3, #8]
     c58:	4798      	blx	r3
     c5a:	bd08      	pop	{r3, pc}
     c5c:	2000002c 	.word	0x2000002c

00000c60 <SERCOM3_Handler>:
     c60:	b508      	push	{r3, lr}
     c62:	4b02      	ldr	r3, [pc, #8]	; (c6c <SERCOM3_Handler+0xc>)
     c64:	2003      	movs	r0, #3
     c66:	68db      	ldr	r3, [r3, #12]
     c68:	4798      	blx	r3
     c6a:	bd08      	pop	{r3, pc}
     c6c:	2000002c 	.word	0x2000002c

00000c70 <SERCOM4_Handler>:
     c70:	b508      	push	{r3, lr}
     c72:	4b02      	ldr	r3, [pc, #8]	; (c7c <SERCOM4_Handler+0xc>)
     c74:	2004      	movs	r0, #4
     c76:	691b      	ldr	r3, [r3, #16]
     c78:	4798      	blx	r3
     c7a:	bd08      	pop	{r3, pc}
     c7c:	2000002c 	.word	0x2000002c

00000c80 <SERCOM5_Handler>:
     c80:	b508      	push	{r3, lr}
     c82:	4b02      	ldr	r3, [pc, #8]	; (c8c <SERCOM5_Handler+0xc>)
     c84:	2005      	movs	r0, #5
     c86:	695b      	ldr	r3, [r3, #20]
     c88:	4798      	blx	r3
     c8a:	bd08      	pop	{r3, pc}
     c8c:	2000002c 	.word	0x2000002c

00000c90 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c90:	b5f0      	push	{r4, r5, r6, r7, lr}
     c92:	4644      	mov	r4, r8
     c94:	465f      	mov	r7, fp
     c96:	4656      	mov	r6, sl
     c98:	464d      	mov	r5, r9
     c9a:	b4f0      	push	{r4, r5, r6, r7}
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c9c:	6001      	str	r1, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c9e:	680c      	ldr	r4, [r1, #0]
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ca0:	b087      	sub	sp, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     ca2:	231c      	movs	r3, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ca4:	07a4      	lsls	r4, r4, #30
     ca6:	d507      	bpl.n	cb8 <spi_init+0x28>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     ca8:	1c18      	adds	r0, r3, #0
     caa:	b007      	add	sp, #28
     cac:	bc3c      	pop	{r2, r3, r4, r5}
     cae:	4690      	mov	r8, r2
     cb0:	4699      	mov	r9, r3
     cb2:	46a2      	mov	sl, r4
     cb4:	46ab      	mov	fp, r5
     cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     cb8:	2701      	movs	r7, #1
     cba:	680c      	ldr	r4, [r1, #0]
		return STATUS_BUSY;
     cbc:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     cbe:	4227      	tst	r7, r4
     cc0:	d1f2      	bne.n	ca8 <spi_init+0x18>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cc2:	4b6c      	ldr	r3, [pc, #432]	; (e74 <spi_init+0x1e4>)
     cc4:	1c04      	adds	r4, r0, #0
     cc6:	1c08      	adds	r0, r1, #0
     cc8:	1c15      	adds	r5, r2, #0
     cca:	1c0e      	adds	r6, r1, #0
     ccc:	469a      	mov	sl, r3
     cce:	4798      	blx	r3
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     cd0:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cd2:	408f      	lsls	r7, r1
     cd4:	4a68      	ldr	r2, [pc, #416]	; (e78 <spi_init+0x1e8>)
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cd6:	300d      	adds	r0, #13
     cd8:	6a13      	ldr	r3, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cda:	4669      	mov	r1, sp
     cdc:	431f      	orrs	r7, r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     cde:	2320      	movs	r3, #32
     ce0:	6217      	str	r7, [r2, #32]
     ce2:	466a      	mov	r2, sp
     ce4:	4698      	mov	r8, r3
     ce6:	5ceb      	ldrb	r3, [r5, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ce8:	b2c7      	uxtb	r7, r0
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     cea:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cec:	1c38      	adds	r0, r7, #0
     cee:	4b63      	ldr	r3, [pc, #396]	; (e7c <spi_init+0x1ec>)
     cf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cf2:	1c38      	adds	r0, r7, #0
     cf4:	4b62      	ldr	r3, [pc, #392]	; (e80 <spi_init+0x1f0>)
     cf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     cf8:	4643      	mov	r3, r8
     cfa:	2100      	movs	r1, #0
     cfc:	5ce8      	ldrb	r0, [r5, r3]
     cfe:	4b61      	ldr	r3, [pc, #388]	; (e84 <spi_init+0x1f4>)
     d00:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     d02:	782b      	ldrb	r3, [r5, #0]
     d04:	2b01      	cmp	r3, #1
     d06:	d100      	bne.n	d0a <spi_init+0x7a>
     d08:	e098      	b.n	e3c <spi_init+0x1ac>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d0a:	2b00      	cmp	r3, #0
     d0c:	d103      	bne.n	d16 <spi_init+0x86>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     d0e:	6832      	ldr	r2, [r6, #0]
     d10:	3308      	adds	r3, #8
     d12:	4313      	orrs	r3, r2
     d14:	6033      	str	r3, [r6, #0]
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d16:	2300      	movs	r3, #0
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
     d18:	2700      	movs	r7, #0
     d1a:	85a3      	strh	r3, [r4, #44]	; 0x2c
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d1c:	60e3      	str	r3, [r4, #12]
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
     d1e:	8523      	strh	r3, [r4, #40]	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d20:	6123      	str	r3, [r4, #16]
     d22:	6163      	str	r3, [r4, #20]
     d24:	61a3      	str	r3, [r4, #24]
     d26:	61e3      	str	r3, [r4, #28]
	}
	module->tx_buffer_ptr              = NULL;
     d28:	6263      	str	r3, [r4, #36]	; 0x24
	module->rx_buffer_ptr              = NULL;
     d2a:	6223      	str	r3, [r4, #32]
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     d2c:	332e      	adds	r3, #46	; 0x2e
     d2e:	54e7      	strb	r7, [r4, r3]
	module->enabled_callback           = 0x00;
     d30:	3301      	adds	r3, #1
     d32:	54e7      	strb	r7, [r4, r3]
	module->status                     = STATUS_OK;
     d34:	3301      	adds	r3, #1
     d36:	54e7      	strb	r7, [r4, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     d38:	3b2d      	subs	r3, #45	; 0x2d
     d3a:	7223      	strb	r3, [r4, #8]
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     d3c:	6820      	ldr	r0, [r4, #0]
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
	module->enabled_callback           = 0x00;
	module->status                     = STATUS_OK;
	module->dir                        = SPI_DIRECTION_IDLE;
	module->locked                     = false;
     d3e:	7127      	strb	r7, [r4, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     d40:	47d0      	blx	sl
     d42:	1c06      	adds	r6, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     d44:	4b50      	ldr	r3, [pc, #320]	; (e88 <spi_init+0x1f8>)
     d46:	4951      	ldr	r1, [pc, #324]	; (e8c <spi_init+0x1fc>)
     d48:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d4a:	4b51      	ldr	r3, [pc, #324]	; (e90 <spi_init+0x200>)
     d4c:	00b6      	lsls	r6, r6, #2
     d4e:	50f4      	str	r4, [r6, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	ae01      	add	r6, sp, #4
     d54:	4699      	mov	r9, r3
     d56:	2380      	movs	r3, #128	; 0x80
     d58:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d5a:	3b7f      	subs	r3, #127	; 0x7f
     d5c:	70b3      	strb	r3, [r6, #2]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     d5e:	782b      	ldrb	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d60:	7077      	strb	r7, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d62:	70f7      	strb	r7, [r6, #3]
     d64:	2b00      	cmp	r3, #0
     d66:	d056      	beq.n	e16 <spi_init+0x186>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     d68:	2700      	movs	r7, #0
     d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d6c:	6a68      	ldr	r0, [r5, #36]	; 0x24
     d6e:	9302      	str	r3, [sp, #8]
     d70:	6aab      	ldr	r3, [r5, #40]	; 0x28
     d72:	b2f9      	uxtb	r1, r7
     d74:	9303      	str	r3, [sp, #12]
     d76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     d78:	9304      	str	r3, [sp, #16]
     d7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     d7c:	9305      	str	r3, [sp, #20]
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d7e:	4b45      	ldr	r3, [pc, #276]	; (e94 <spi_init+0x204>)
     d80:	469b      	mov	fp, r3

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
     d82:	2800      	cmp	r0, #0
     d84:	d011      	beq.n	daa <spi_init+0x11a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
     d86:	1c43      	adds	r3, r0, #1
     d88:	d004      	beq.n	d94 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d8a:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d8c:	0c00      	lsrs	r0, r0, #16
     d8e:	b2c0      	uxtb	r0, r0
     d90:	1c31      	adds	r1, r6, #0
     d92:	47d8      	blx	fp
     d94:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     d96:	2f04      	cmp	r7, #4
     d98:	d00b      	beq.n	db2 <spi_init+0x122>
     d9a:	2108      	movs	r1, #8
     d9c:	466a      	mov	r2, sp
     d9e:	00bb      	lsls	r3, r7, #2
     da0:	1852      	adds	r2, r2, r1
     da2:	58d0      	ldr	r0, [r2, r3]
     da4:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
     da6:	2800      	cmp	r0, #0
     da8:	d1ed      	bne.n	d86 <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     daa:	4648      	mov	r0, r9
     dac:	4b3a      	ldr	r3, [pc, #232]	; (e98 <spi_init+0x208>)
     dae:	4798      	blx	r3
     db0:	e7e9      	b.n	d86 <spi_init+0xf6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     db2:	782b      	ldrb	r3, [r5, #0]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     db4:	466a      	mov	r2, sp
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     db6:	7163      	strb	r3, [r4, #5]
	module->character_size   = config->character_size;
     db8:	7c2b      	ldrb	r3, [r5, #16]
     dba:	71a3      	strb	r3, [r4, #6]
	module->receiver_enabled = config->receiver_enable;
     dbc:	7cab      	ldrb	r3, [r5, #18]
     dbe:	71e3      	strb	r3, [r4, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     dc0:	2300      	movs	r3, #0
     dc2:	8053      	strh	r3, [r2, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     dc4:	782b      	ldrb	r3, [r5, #0]
     dc6:	2b01      	cmp	r3, #1
     dc8:	d03e      	beq.n	e48 <spi_init+0x1b8>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     dca:	2b00      	cmp	r3, #0
     dcc:	d025      	beq.n	e1a <spi_init+0x18a>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     dce:	2000      	movs	r0, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     dd0:	2200      	movs	r2, #0
     dd2:	6869      	ldr	r1, [r5, #4]
     dd4:	68ab      	ldr	r3, [r5, #8]
     dd6:	430b      	orrs	r3, r1
     dd8:	68e9      	ldr	r1, [r5, #12]
     dda:	430b      	orrs	r3, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ddc:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     dde:	1c02      	adds	r2, r0, #0
     de0:	7c29      	ldrb	r1, [r5, #16]
     de2:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     de4:	7c69      	ldrb	r1, [r5, #17]
     de6:	2900      	cmp	r1, #0
     de8:	d103      	bne.n	df2 <spi_init+0x162>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     dea:	492c      	ldr	r1, [pc, #176]	; (e9c <spi_init+0x20c>)
     dec:	7889      	ldrb	r1, [r1, #2]
     dee:	0789      	lsls	r1, r1, #30
     df0:	d501      	bpl.n	df6 <spi_init+0x166>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     df2:	2180      	movs	r1, #128	; 0x80
     df4:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     df6:	7ca9      	ldrb	r1, [r5, #18]
     df8:	2900      	cmp	r1, #0
     dfa:	d002      	beq.n	e02 <spi_init+0x172>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     dfc:	2180      	movs	r1, #128	; 0x80
     dfe:	0289      	lsls	r1, r1, #10
     e00:	430a      	orrs	r2, r1
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     e02:	4649      	mov	r1, r9
     e04:	6809      	ldr	r1, [r1, #0]
     e06:	430b      	orrs	r3, r1
     e08:	4649      	mov	r1, r9
     e0a:	600b      	str	r3, [r1, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     e0c:	684b      	ldr	r3, [r1, #4]
     e0e:	431a      	orrs	r2, r3
     e10:	604a      	str	r2, [r1, #4]

	return STATUS_OK;
     e12:	2300      	movs	r3, #0
     e14:	e748      	b.n	ca8 <spi_init+0x18>

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e16:	70b7      	strb	r7, [r6, #2]
     e18:	e7a6      	b.n	d68 <spi_init+0xd8>

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     e1a:	464b      	mov	r3, r9
     e1c:	6959      	ldr	r1, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e1e:	7eeb      	ldrb	r3, [r5, #27]
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     e20:	7eac      	ldrb	r4, [r5, #26]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e22:	041b      	lsls	r3, r3, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     e24:	4323      	orrs	r3, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     e26:	430b      	orrs	r3, r1
     e28:	4649      	mov	r1, r9
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     e2a:	696a      	ldr	r2, [r5, #20]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     e2c:	8b28      	ldrh	r0, [r5, #24]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     e2e:	614b      	str	r3, [r1, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     e30:	7f2b      	ldrb	r3, [r5, #28]
     e32:	2b00      	cmp	r3, #0
     e34:	d0cd      	beq.n	dd2 <spi_init+0x142>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     e36:	2340      	movs	r3, #64	; 0x40
     e38:	4318      	orrs	r0, r3
     e3a:	e7ca      	b.n	dd2 <spi_init+0x142>
	sercom_set_gclk_generator(config->generator_source, false);

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     e3c:	6832      	ldr	r2, [r6, #0]
     e3e:	330b      	adds	r3, #11
     e40:	4313      	orrs	r3, r2
     e42:	6033      	str	r3, [r6, #0]
     e44:	782b      	ldrb	r3, [r5, #0]
     e46:	e760      	b.n	d0a <spi_init+0x7a>

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e48:	6820      	ldr	r0, [r4, #0]
     e4a:	47d0      	blx	sl
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e4c:	300d      	adds	r0, #13
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     e4e:	4b14      	ldr	r3, [pc, #80]	; (ea0 <spi_init+0x210>)
     e50:	b2c0      	uxtb	r0, r0
     e52:	4798      	blx	r3

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     e54:	466b      	mov	r3, sp
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     e56:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     e58:	1c9a      	adds	r2, r3, #2
     e5a:	6968      	ldr	r0, [r5, #20]
     e5c:	4b11      	ldr	r3, [pc, #68]	; (ea4 <spi_init+0x214>)
     e5e:	4798      	blx	r3
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     e60:	2317      	movs	r3, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     e62:	2800      	cmp	r0, #0
     e64:	d000      	beq.n	e68 <spi_init+0x1d8>
     e66:	e71f      	b.n	ca8 <spi_init+0x18>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     e68:	466b      	mov	r3, sp
     e6a:	464a      	mov	r2, r9
     e6c:	789b      	ldrb	r3, [r3, #2]
     e6e:	7293      	strb	r3, [r2, #10]
     e70:	782b      	ldrb	r3, [r5, #0]
     e72:	e7aa      	b.n	dca <spi_init+0x13a>
     e74:	00000b8d 	.word	0x00000b8d
     e78:	40000400 	.word	0x40000400
     e7c:	000015a5 	.word	0x000015a5
     e80:	00001519 	.word	0x00001519
     e84:	000009e5 	.word	0x000009e5
     e88:	00000bc1 	.word	0x00000bc1
     e8c:	00000ec1 	.word	0x00000ec1
     e90:	2000007c 	.word	0x2000007c
     e94:	000016a5 	.word	0x000016a5
     e98:	00000a2d 	.word	0x00000a2d
     e9c:	41002000 	.word	0x41002000
     ea0:	000015c1 	.word	0x000015c1
     ea4:	000009bd 	.word	0x000009bd

00000ea8 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ea8:	1c93      	adds	r3, r2, #2
     eaa:	009b      	lsls	r3, r3, #2
     eac:	18c3      	adds	r3, r0, r3
     eae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     eb0:	2301      	movs	r3, #1
     eb2:	4093      	lsls	r3, r2
     eb4:	212e      	movs	r1, #46	; 0x2e
     eb6:	1c1a      	adds	r2, r3, #0
     eb8:	5c43      	ldrb	r3, [r0, r1]
     eba:	431a      	orrs	r2, r3
     ebc:	5442      	strb	r2, [r0, r1]
}
     ebe:	4770      	bx	lr

00000ec0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     ec2:	4b74      	ldr	r3, [pc, #464]	; (1094 <_spi_interrupt_handler+0x1d4>)
     ec4:	0080      	lsls	r0, r0, #2
     ec6:	58c4      	ldr	r4, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     ec8:	222f      	movs	r2, #47	; 0x2f
			module->enabled_callback & module->registered_callback;
     eca:	232e      	movs	r3, #46	; 0x2e
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ecc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     ece:	5ce3      	ldrb	r3, [r4, r3]
     ed0:	5ca7      	ldrb	r7, [r4, r2]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     ed2:	7bb5      	ldrb	r5, [r6, #14]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     ed4:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
	interrupt_status &= spi_hw->INTENSET.reg;
     ed6:	7b73      	ldrb	r3, [r6, #13]
     ed8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     eda:	07eb      	lsls	r3, r5, #31
     edc:	d523      	bpl.n	f26 <_spi_interrupt_handler+0x66>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     ede:	7963      	ldrb	r3, [r4, #5]
     ee0:	2b01      	cmp	r3, #1
     ee2:	d100      	bne.n	ee6 <_spi_interrupt_handler+0x26>
     ee4:	e090      	b.n	1008 <_spi_interrupt_handler+0x148>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ee6:	2b00      	cmp	r3, #0
     ee8:	d11d      	bne.n	f26 <_spi_interrupt_handler+0x66>
			(module->dir != SPI_DIRECTION_READ))
     eea:	7a23      	ldrb	r3, [r4, #8]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     eec:	2b00      	cmp	r3, #0
     eee:	d01a      	beq.n	f26 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ef2:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     ef4:	780b      	ldrb	r3, [r1, #0]
     ef6:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     ef8:	1c4b      	adds	r3, r1, #1
     efa:	6263      	str	r3, [r4, #36]	; 0x24

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     efc:	79a3      	ldrb	r3, [r4, #6]
     efe:	2b01      	cmp	r3, #1
     f00:	d100      	bne.n	f04 <_spi_interrupt_handler+0x44>
     f02:	e0b2      	b.n	106a <_spi_interrupt_handler+0x1aa>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     f04:	b293      	uxth	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     f06:	05db      	lsls	r3, r3, #23
     f08:	0ddb      	lsrs	r3, r3, #23
     f0a:	8303      	strh	r3, [r0, #24]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     f0c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f0e:	3b01      	subs	r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	85a3      	strh	r3, [r4, #44]	; 0x2c
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     f14:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f16:	2b00      	cmp	r3, #0
     f18:	d105      	bne.n	f26 <_spi_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f1a:	3301      	adds	r3, #1
     f1c:	7333      	strb	r3, [r6, #12]

				if (module->dir == SPI_DIRECTION_WRITE &&
     f1e:	7a23      	ldrb	r3, [r4, #8]
     f20:	2b01      	cmp	r3, #1
     f22:	d100      	bne.n	f26 <_spi_interrupt_handler+0x66>
     f24:	e0a7      	b.n	1076 <_spi_interrupt_handler+0x1b6>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     f26:	2304      	movs	r3, #4
     f28:	422b      	tst	r3, r5
     f2a:	d016      	beq.n	f5a <_spi_interrupt_handler+0x9a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f2c:	8a32      	ldrh	r2, [r6, #16]
     f2e:	4213      	tst	r3, r2
     f30:	d02a      	beq.n	f88 <_spi_interrupt_handler+0xc8>
			if (module->dir != SPI_DIRECTION_WRITE) {
     f32:	7a23      	ldrb	r3, [r4, #8]
     f34:	2b01      	cmp	r3, #1
     f36:	d00b      	beq.n	f50 <_spi_interrupt_handler+0x90>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     f38:	2330      	movs	r3, #48	; 0x30
     f3a:	221e      	movs	r2, #30
     f3c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     f3e:	3b2d      	subs	r3, #45	; 0x2d
     f40:	7223      	strb	r3, [r4, #8]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     f42:	3302      	adds	r3, #2
     f44:	7333      	strb	r3, [r6, #12]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     f46:	073b      	lsls	r3, r7, #28
     f48:	d502      	bpl.n	f50 <_spi_interrupt_handler+0x90>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     f4a:	1c20      	adds	r0, r4, #0
     f4c:	69a3      	ldr	r3, [r4, #24]
     f4e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     f50:	8b33      	ldrh	r3, [r6, #24]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f52:	2304      	movs	r3, #4
     f54:	8a32      	ldrh	r2, [r6, #16]
     f56:	4313      	orrs	r3, r2
     f58:	8233      	strh	r3, [r6, #16]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     f5a:	2202      	movs	r2, #2
     f5c:	422a      	tst	r2, r5
     f5e:	d012      	beq.n	f86 <_spi_interrupt_handler+0xc6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     f60:	7963      	ldrb	r3, [r4, #5]
     f62:	2b00      	cmp	r3, #0
     f64:	d10d      	bne.n	f82 <_spi_interrupt_handler+0xc2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     f66:	2107      	movs	r1, #7
     f68:	7331      	strb	r1, [r6, #12]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f6a:	73b2      	strb	r2, [r6, #14]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     f6c:	3201      	adds	r2, #1
     f6e:	7222      	strb	r2, [r4, #8]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
     f70:	2200      	movs	r2, #0
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
			module->remaining_tx_buffer_length = 0;
     f72:	85a3      	strh	r3, [r4, #44]	; 0x2c
			module->remaining_rx_buffer_length = 0;
     f74:	8523      	strh	r3, [r4, #40]	; 0x28
			module->status = STATUS_OK;
     f76:	3330      	adds	r3, #48	; 0x30
     f78:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     f7a:	06fb      	lsls	r3, r7, #27
     f7c:	d500      	bpl.n	f80 <_spi_interrupt_handler+0xc0>
     f7e:	e06f      	b.n	1060 <_spi_interrupt_handler+0x1a0>
     f80:	7963      	ldrb	r3, [r4, #5]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f82:	2b01      	cmp	r3, #1
     f84:	d02e      	beq.n	fe4 <_spi_interrupt_handler+0x124>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uint16_t flush = spi_hw->DATA.reg;
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     f88:	7a23      	ldrb	r3, [r4, #8]
     f8a:	b2db      	uxtb	r3, r3
     f8c:	2b01      	cmp	r3, #1
     f8e:	d04f      	beq.n	1030 <_spi_interrupt_handler+0x170>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     f90:	6823      	ldr	r3, [r4, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     f92:	6a21      	ldr	r1, [r4, #32]
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     f94:	8b1b      	ldrh	r3, [r3, #24]
     f96:	05db      	lsls	r3, r3, #23
     f98:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     f9a:	b2da      	uxtb	r2, r3
     f9c:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     f9e:	6a22      	ldr	r2, [r4, #32]
     fa0:	1c51      	adds	r1, r2, #1
     fa2:	6221      	str	r1, [r4, #32]

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fa4:	79a1      	ldrb	r1, [r4, #6]
     fa6:	2901      	cmp	r1, #1
     fa8:	d104      	bne.n	fb4 <_spi_interrupt_handler+0xf4>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     faa:	0a1b      	lsrs	r3, r3, #8
     fac:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     fae:	6a23      	ldr	r3, [r4, #32]
     fb0:	3301      	adds	r3, #1
     fb2:	6223      	str	r3, [r4, #32]
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     fb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     fb6:	3b01      	subs	r3, #1
     fb8:	b29b      	uxth	r3, r3
     fba:	8523      	strh	r3, [r4, #40]	; 0x28
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     fbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     fbe:	b29b      	uxth	r3, r3
     fc0:	2b00      	cmp	r3, #0
     fc2:	d1ca      	bne.n	f5a <_spi_interrupt_handler+0x9a>
					module->status = STATUS_OK;
     fc4:	2230      	movs	r2, #48	; 0x30
     fc6:	54a3      	strb	r3, [r4, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     fc8:	3304      	adds	r3, #4
     fca:	7333      	strb	r3, [r6, #12]
					if(module->dir == SPI_DIRECTION_BOTH) {
     fcc:	7a22      	ldrb	r2, [r4, #8]
     fce:	2a02      	cmp	r2, #2
     fd0:	d058      	beq.n	1084 <_spi_interrupt_handler+0x1c4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     fd2:	7a23      	ldrb	r3, [r4, #8]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d1c0      	bne.n	f5a <_spi_interrupt_handler+0x9a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     fd8:	07bb      	lsls	r3, r7, #30
     fda:	d5be      	bpl.n	f5a <_spi_interrupt_handler+0x9a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     fdc:	1c20      	adds	r0, r4, #0
     fde:	6923      	ldr	r3, [r4, #16]
     fe0:	4798      	blx	r3
     fe2:	e7ba      	b.n	f5a <_spi_interrupt_handler+0x9a>

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     fe4:	7a22      	ldrb	r2, [r4, #8]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     fe6:	2a01      	cmp	r2, #1
     fe8:	d1cd      	bne.n	f86 <_spi_interrupt_handler+0xc6>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     fea:	79e2      	ldrb	r2, [r4, #7]
     fec:	2a00      	cmp	r2, #0
     fee:	d1ca      	bne.n	f86 <_spi_interrupt_handler+0xc6>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ff0:	2102      	movs	r1, #2
     ff2:	7331      	strb	r1, [r6, #12]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     ff4:	3101      	adds	r1, #1
     ff6:	7221      	strb	r1, [r4, #8]
			module->status = STATUS_OK;
     ff8:	312d      	adds	r1, #45	; 0x2d
     ffa:	5462      	strb	r2, [r4, r1]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     ffc:	423b      	tst	r3, r7
     ffe:	d0c2      	beq.n	f86 <_spi_interrupt_handler+0xc6>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1000:	68e3      	ldr	r3, [r4, #12]
    1002:	1c20      	adds	r0, r4, #0
    1004:	4798      	blx	r3
    1006:	e7be      	b.n	f86 <_spi_interrupt_handler+0xc6>

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
    1008:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    100a:	2a00      	cmp	r2, #0
    100c:	d000      	beq.n	1010 <_spi_interrupt_handler+0x150>
    100e:	e76c      	b.n	eea <_spi_interrupt_handler+0x2a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1010:	4a21      	ldr	r2, [pc, #132]	; (1098 <_spi_interrupt_handler+0x1d8>)
    1012:	8812      	ldrh	r2, [r2, #0]
    1014:	8332      	strh	r2, [r6, #24]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1016:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    1018:	3a01      	subs	r2, #1
    101a:	b292      	uxth	r2, r2
    101c:	8562      	strh	r2, [r4, #42]	; 0x2a
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    101e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    1020:	2a00      	cmp	r2, #0
    1022:	d100      	bne.n	1026 <_spi_interrupt_handler+0x166>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1024:	7333      	strb	r3, [r6, #12]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1026:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    1028:	2b01      	cmp	r3, #1
    102a:	d100      	bne.n	102e <_spi_interrupt_handler+0x16e>
    102c:	e75d      	b.n	eea <_spi_interrupt_handler+0x2a>
    102e:	e75a      	b.n	ee6 <_spi_interrupt_handler+0x26>
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1030:	6822      	ldr	r2, [r4, #0]
    1032:	8b12      	ldrh	r2, [r2, #24]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    1036:	3a01      	subs	r2, #1
    1038:	b292      	uxth	r2, r2
    103a:	8562      	strh	r2, [r4, #42]	; 0x2a
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    103c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    103e:	b292      	uxth	r2, r2
    1040:	2a00      	cmp	r2, #0
    1042:	d000      	beq.n	1046 <_spi_interrupt_handler+0x186>
    1044:	e789      	b.n	f5a <_spi_interrupt_handler+0x9a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1046:	2104      	movs	r1, #4
    1048:	7331      	strb	r1, [r6, #12]
					module->status = STATUS_OK;
    104a:	2130      	movs	r1, #48	; 0x30
    104c:	5462      	strb	r2, [r4, r1]
					module->dir = SPI_DIRECTION_IDLE;
    104e:	3203      	adds	r2, #3
    1050:	7222      	strb	r2, [r4, #8]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1052:	423b      	tst	r3, r7
    1054:	d100      	bne.n	1058 <_spi_interrupt_handler+0x198>
    1056:	e780      	b.n	f5a <_spi_interrupt_handler+0x9a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1058:	1c20      	adds	r0, r4, #0
    105a:	68e3      	ldr	r3, [r4, #12]
    105c:	4798      	blx	r3
    105e:	e77c      	b.n	f5a <_spi_interrupt_handler+0x9a>
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;

			if (callback_mask &
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1060:	69e3      	ldr	r3, [r4, #28]
    1062:	1c20      	adds	r0, r4, #0
    1064:	4798      	blx	r3
    1066:	7963      	ldrb	r3, [r4, #5]
    1068:	e78b      	b.n	f82 <_spi_interrupt_handler+0xc2>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    106a:	784b      	ldrb	r3, [r1, #1]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    106c:	3102      	adds	r1, #2
	uint16_t data_to_send = *(module->tx_buffer_ptr);
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    106e:	021b      	lsls	r3, r3, #8
    1070:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1072:	6261      	str	r1, [r4, #36]	; 0x24
    1074:	e747      	b.n	f06 <_spi_interrupt_handler+0x46>
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    1076:	79e3      	ldrb	r3, [r4, #7]
    1078:	2b00      	cmp	r3, #0
    107a:	d000      	beq.n	107e <_spi_interrupt_handler+0x1be>
    107c:	e753      	b.n	f26 <_spi_interrupt_handler+0x66>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    107e:	3302      	adds	r3, #2
    1080:	7373      	strb	r3, [r6, #13]
    1082:	e750      	b.n	f26 <_spi_interrupt_handler+0x66>
				if (module->remaining_rx_buffer_length == 0) {
					module->status = STATUS_OK;
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
					if(module->dir == SPI_DIRECTION_BOTH) {
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1084:	423b      	tst	r3, r7
    1086:	d100      	bne.n	108a <_spi_interrupt_handler+0x1ca>
    1088:	e767      	b.n	f5a <_spi_interrupt_handler+0x9a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    108a:	1c20      	adds	r0, r4, #0
    108c:	6963      	ldr	r3, [r4, #20]
    108e:	4798      	blx	r3
    1090:	e763      	b.n	f5a <_spi_interrupt_handler+0x9a>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	2000007c 	.word	0x2000007c
    1098:	20000094 	.word	0x20000094

0000109c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    109c:	b510      	push	{r4, lr}
	switch (clock_source) {
    109e:	2807      	cmp	r0, #7
    10a0:	d823      	bhi.n	10ea <system_clock_source_get_hz+0x4e>
    10a2:	4b17      	ldr	r3, [pc, #92]	; (1100 <system_clock_source_get_hz+0x64>)
    10a4:	0080      	lsls	r0, r0, #2
    10a6:	581b      	ldr	r3, [r3, r0]
    10a8:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10aa:	2080      	movs	r0, #128	; 0x80
    10ac:	0200      	lsls	r0, r0, #8
		return 48000000UL;

	default:
		return 0;
	}
}
    10ae:	bd10      	pop	{r4, pc}

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10b0:	4b14      	ldr	r3, [pc, #80]	; (1104 <system_clock_source_get_hz+0x68>)
    10b2:	6918      	ldr	r0, [r3, #16]
    10b4:	e7fb      	b.n	10ae <system_clock_source_get_hz+0x12>
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10b6:	4b14      	ldr	r3, [pc, #80]	; (1108 <system_clock_source_get_hz+0x6c>)
    10b8:	6a18      	ldr	r0, [r3, #32]
    10ba:	4b14      	ldr	r3, [pc, #80]	; (110c <system_clock_source_get_hz+0x70>)
    10bc:	0580      	lsls	r0, r0, #22
    10be:	0f80      	lsrs	r0, r0, #30
    10c0:	40c3      	lsrs	r3, r0
    10c2:	1c18      	adds	r0, r3, #0
    10c4:	e7f3      	b.n	10ae <system_clock_source_get_hz+0x12>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    10c6:	4b0f      	ldr	r3, [pc, #60]	; (1104 <system_clock_source_get_hz+0x68>)
    10c8:	68d8      	ldr	r0, [r3, #12]
    10ca:	e7f0      	b.n	10ae <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10cc:	2002      	movs	r0, #2
    10ce:	4c0d      	ldr	r4, [pc, #52]	; (1104 <system_clock_source_get_hz+0x68>)
    10d0:	6823      	ldr	r3, [r4, #0]
    10d2:	4018      	ands	r0, r3
    10d4:	d0eb      	beq.n	10ae <system_clock_source_get_hz+0x12>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10d6:	2210      	movs	r2, #16
    10d8:	490b      	ldr	r1, [pc, #44]	; (1108 <system_clock_source_get_hz+0x6c>)
    10da:	68cb      	ldr	r3, [r1, #12]
    10dc:	421a      	tst	r2, r3
    10de:	d0fc      	beq.n	10da <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10e0:	6823      	ldr	r3, [r4, #0]
    10e2:	075b      	lsls	r3, r3, #29
    10e4:	d403      	bmi.n	10ee <system_clock_source_get_hz+0x52>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    10e6:	480a      	ldr	r0, [pc, #40]	; (1110 <system_clock_source_get_hz+0x74>)
    10e8:	e7e1      	b.n	10ae <system_clock_source_get_hz+0x12>

	default:
		return 0;
    10ea:	2000      	movs	r0, #0
    10ec:	e7df      	b.n	10ae <system_clock_source_get_hz+0x12>
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <system_clock_source_get_hz+0x78>)
    10f0:	2000      	movs	r0, #0
    10f2:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10f4:	68a3      	ldr	r3, [r4, #8]
    10f6:	041b      	lsls	r3, r3, #16
    10f8:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10fa:	4358      	muls	r0, r3
    10fc:	e7d7      	b.n	10ae <system_clock_source_get_hz+0x12>
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00001f50 	.word	0x00001f50
    1104:	20000044 	.word	0x20000044
    1108:	40000800 	.word	0x40000800
    110c:	007a1200 	.word	0x007a1200
    1110:	02dc6c00 	.word	0x02dc6c00
    1114:	000015c1 	.word	0x000015c1

00001118 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1118:	b5f0      	push	{r4, r5, r6, r7, lr}
    111a:	465f      	mov	r7, fp
    111c:	4656      	mov	r6, sl
    111e:	464d      	mov	r5, r9
    1120:	4644      	mov	r4, r8
    1122:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1124:	4e2e      	ldr	r6, [pc, #184]	; (11e0 <system_clock_source_xosc32k_set_config+0xc8>)
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1126:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1128:	8ab3      	ldrh	r3, [r6, #20]

	temp.bit.STARTUP = config->startup_time;
    112a:	7845      	ldrb	r5, [r0, #1]
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    112c:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    112e:	7803      	ldrb	r3, [r0, #0]

	temp.bit.AAMPEN = config->auto_gain_control;
	temp.bit.EN1K = config->enable_1khz_output;
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
    1130:	7b47      	ldrb	r7, [r0, #13]
{
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;

	temp.bit.STARTUP = config->startup_time;

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1132:	425a      	negs	r2, r3
    1134:	415a      	adcs	r2, r3
    1136:	4691      	mov	r9, r2
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
	temp.bit.EN1K = config->enable_1khz_output;
	temp.bit.EN32K = config->enable_32khz_output;
    1138:	7902      	ldrb	r2, [r0, #4]
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    113a:	7883      	ldrb	r3, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
	temp.bit.EN32K = config->enable_32khz_output;
    113c:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;
    113e:	7b02      	ldrb	r2, [r0, #12]
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1140:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1142:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;
    1144:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1146:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1148:	6882      	ldr	r2, [r0, #8]
    114a:	4826      	ldr	r0, [pc, #152]	; (11e4 <system_clock_source_xosc32k_set_config+0xcc>)
    114c:	6102      	str	r2, [r0, #16]

	SYSCTRL->XOSC32K = temp;
    114e:	464a      	mov	r2, r9
    1150:	0092      	lsls	r2, r2, #2
    1152:	4691      	mov	r9, r2
    1154:	2204      	movs	r2, #4
    1156:	4692      	mov	sl, r2
    1158:	4662      	mov	r2, ip
    115a:	4651      	mov	r1, sl
    115c:	438a      	bics	r2, r1
    115e:	4694      	mov	ip, r2
    1160:	464a      	mov	r2, r9
    1162:	4661      	mov	r1, ip
    1164:	430a      	orrs	r2, r1
    1166:	2001      	movs	r0, #1
    1168:	4694      	mov	ip, r2
    116a:	4642      	mov	r2, r8
    116c:	4002      	ands	r2, r0
    116e:	00d2      	lsls	r2, r2, #3
    1170:	4690      	mov	r8, r2
    1172:	2208      	movs	r2, #8
    1174:	4691      	mov	r9, r2
    1176:	4662      	mov	r2, ip
    1178:	4649      	mov	r1, r9
    117a:	438a      	bics	r2, r1
    117c:	4694      	mov	ip, r2
    117e:	4642      	mov	r2, r8
    1180:	4661      	mov	r1, ip
    1182:	430a      	orrs	r2, r1
    1184:	4694      	mov	ip, r2
    1186:	2210      	movs	r2, #16
    1188:	4690      	mov	r8, r2
    118a:	4662      	mov	r2, ip
    118c:	4641      	mov	r1, r8
    118e:	4003      	ands	r3, r0
    1190:	438a      	bics	r2, r1
    1192:	011b      	lsls	r3, r3, #4
    1194:	4659      	mov	r1, fp
    1196:	4313      	orrs	r3, r2
    1198:	2220      	movs	r2, #32
    119a:	4001      	ands	r1, r0
    119c:	0149      	lsls	r1, r1, #5
    119e:	4393      	bics	r3, r2
    11a0:	430b      	orrs	r3, r1
    11a2:	2140      	movs	r1, #64	; 0x40
    11a4:	9a01      	ldr	r2, [sp, #4]
    11a6:	438b      	bics	r3, r1
    11a8:	4002      	ands	r2, r0
    11aa:	0192      	lsls	r2, r2, #6
    11ac:	4313      	orrs	r3, r2
    11ae:	2280      	movs	r2, #128	; 0x80
    11b0:	4007      	ands	r7, r0
    11b2:	01ff      	lsls	r7, r7, #7
    11b4:	4393      	bics	r3, r2
    11b6:	433b      	orrs	r3, r7
    11b8:	3a79      	subs	r2, #121	; 0x79
    11ba:	4f0b      	ldr	r7, [pc, #44]	; (11e8 <system_clock_source_xosc32k_set_config+0xd0>)
    11bc:	4015      	ands	r5, r2
    11be:	4004      	ands	r4, r0
    11c0:	0320      	lsls	r0, r4, #12
    11c2:	022d      	lsls	r5, r5, #8
    11c4:	403b      	ands	r3, r7
    11c6:	4c09      	ldr	r4, [pc, #36]	; (11ec <system_clock_source_xosc32k_set_config+0xd4>)
    11c8:	432b      	orrs	r3, r5
    11ca:	401c      	ands	r4, r3
    11cc:	4304      	orrs	r4, r0
    11ce:	82b4      	strh	r4, [r6, #20]
}
    11d0:	b003      	add	sp, #12
    11d2:	bc3c      	pop	{r2, r3, r4, r5}
    11d4:	4690      	mov	r8, r2
    11d6:	4699      	mov	r9, r3
    11d8:	46a2      	mov	sl, r4
    11da:	46ab      	mov	fp, r5
    11dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	40000800 	.word	0x40000800
    11e4:	20000044 	.word	0x20000044
    11e8:	fffff8ff 	.word	0xfffff8ff
    11ec:	ffffefff 	.word	0xffffefff

000011f0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    11f0:	b510      	push	{r4, lr}
	switch (clock_source) {
    11f2:	2807      	cmp	r0, #7
    11f4:	d839      	bhi.n	126a <system_clock_source_enable+0x7a>
    11f6:	4b1e      	ldr	r3, [pc, #120]	; (1270 <system_clock_source_enable+0x80>)
    11f8:	0080      	lsls	r0, r0, #2
    11fa:	581b      	ldr	r3, [r3, r0]
    11fc:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    11fe:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1200:	bd10      	pop	{r4, pc}
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1202:	2302      	movs	r3, #2
    1204:	4a1b      	ldr	r2, [pc, #108]	; (1274 <system_clock_source_enable+0x84>)
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1206:	2000      	movs	r0, #0
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1208:	6991      	ldr	r1, [r2, #24]
    120a:	430b      	orrs	r3, r1
    120c:	6193      	str	r3, [r2, #24]
		break;
    120e:	e7f7      	b.n	1200 <system_clock_source_enable+0x10>
	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1210:	2302      	movs	r3, #2
    1212:	4a18      	ldr	r2, [pc, #96]	; (1274 <system_clock_source_enable+0x84>)
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1214:	2000      	movs	r0, #0
	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1216:	8a91      	ldrh	r1, [r2, #20]
    1218:	430b      	orrs	r3, r1
    121a:	8293      	strh	r3, [r2, #20]
		break;
    121c:	e7f0      	b.n	1200 <system_clock_source_enable+0x10>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    121e:	2302      	movs	r3, #2
    1220:	4a14      	ldr	r2, [pc, #80]	; (1274 <system_clock_source_enable+0x84>)
		return STATUS_OK;
    1222:	2000      	movs	r0, #0
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1224:	6a11      	ldr	r1, [r2, #32]
    1226:	430b      	orrs	r3, r1
    1228:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    122a:	e7e9      	b.n	1200 <system_clock_source_enable+0x10>
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    122c:	2302      	movs	r3, #2
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    122e:	2010      	movs	r0, #16
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1230:	4c11      	ldr	r4, [pc, #68]	; (1278 <system_clock_source_enable+0x88>)
    1232:	6822      	ldr	r2, [r4, #0]
    1234:	4313      	orrs	r3, r2
    1236:	6023      	str	r3, [r4, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1238:	6822      	ldr	r2, [r4, #0]
    123a:	4b10      	ldr	r3, [pc, #64]	; (127c <system_clock_source_enable+0x8c>)
    123c:	4013      	ands	r3, r2
    123e:	4a0d      	ldr	r2, [pc, #52]	; (1274 <system_clock_source_enable+0x84>)
    1240:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1242:	68d3      	ldr	r3, [r2, #12]
    1244:	490b      	ldr	r1, [pc, #44]	; (1274 <system_clock_source_enable+0x84>)
    1246:	4218      	tst	r0, r3
    1248:	d0fb      	beq.n	1242 <system_clock_source_enable+0x52>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    124a:	68a3      	ldr	r3, [r4, #8]
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    124c:	2000      	movs	r0, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    124e:	62cb      	str	r3, [r1, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1250:	6863      	ldr	r3, [r4, #4]
    1252:	628b      	str	r3, [r1, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	b29b      	uxth	r3, r3
    1258:	848b      	strh	r3, [r1, #36]	; 0x24
    125a:	e7d1      	b.n	1200 <system_clock_source_enable+0x10>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    125c:	2302      	movs	r3, #2
    125e:	4a05      	ldr	r2, [pc, #20]	; (1274 <system_clock_source_enable+0x84>)
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1260:	2000      	movs	r0, #0
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1262:	8a11      	ldrh	r1, [r2, #16]
    1264:	430b      	orrs	r3, r1
    1266:	8213      	strh	r3, [r2, #16]
		break;
    1268:	e7ca      	b.n	1200 <system_clock_source_enable+0x10>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    126a:	2017      	movs	r0, #23
    126c:	e7c8      	b.n	1200 <system_clock_source_enable+0x10>
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	00001f70 	.word	0x00001f70
    1274:	40000800 	.word	0x40000800
    1278:	20000044 	.word	0x20000044
    127c:	0000ff7f 	.word	0x0000ff7f

00001280 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}
    1282:	4647      	mov	r7, r8
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1284:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1286:	211e      	movs	r1, #30
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1288:	b480      	push	{r7}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    128a:	4b31      	ldr	r3, [pc, #196]	; (1350 <system_clock_init+0xd0>)
    128c:	00d2      	lsls	r2, r2, #3
    128e:	609a      	str	r2, [r3, #8]
    1290:	4a30      	ldr	r2, [pc, #192]	; (1354 <system_clock_init+0xd4>)
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1292:	2400      	movs	r4, #0
    1294:	6853      	ldr	r3, [r2, #4]
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1296:	b088      	sub	sp, #32
    1298:	438b      	bics	r3, r1
    129a:	6053      	str	r3, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    129c:	2302      	movs	r3, #2
    129e:	ad04      	add	r5, sp, #16
    12a0:	4e2d      	ldr	r6, [pc, #180]	; (1358 <system_clock_init+0xd8>)
    12a2:	702b      	strb	r3, [r5, #0]
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    12a4:	b2e0      	uxtb	r0, r4
    12a6:	1c29      	adds	r1, r5, #0
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12a8:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    12aa:	47b0      	blx	r6
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12ac:	2c1c      	cmp	r4, #28
    12ae:	d1f9      	bne.n	12a4 <system_clock_init+0x24>
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	0212      	lsls	r2, r2, #8
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    12b4:	2300      	movs	r3, #0
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    12b6:	60aa      	str	r2, [r5, #8]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    12b8:	2201      	movs	r2, #1
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    12ba:	702b      	strb	r3, [r5, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    12bc:	70ab      	strb	r3, [r5, #2]
	config->frequency           = 32768UL;
	config->enable_1khz_output  = false;
    12be:	70eb      	strb	r3, [r5, #3]
	config->enable_32khz_output = true;
    12c0:	712a      	strb	r2, [r5, #4]
	config->run_in_standby      = false;
    12c2:	732b      	strb	r3, [r5, #12]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    12c4:	3205      	adds	r2, #5
	config->on_demand           = true;
	config->write_once          = false;
    12c6:	73ab      	strb	r3, [r5, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    12c8:	736b      	strb	r3, [r5, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    12ca:	1c28      	adds	r0, r5, #0
    12cc:	4b23      	ldr	r3, [pc, #140]	; (135c <system_clock_init+0xdc>)
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    12ce:	706a      	strb	r2, [r5, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    12d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    12d2:	2005      	movs	r0, #5
    12d4:	4c22      	ldr	r4, [pc, #136]	; (1360 <system_clock_init+0xe0>)
    12d6:	47a0      	blx	r4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    12d8:	2102      	movs	r1, #2
    12da:	481d      	ldr	r0, [pc, #116]	; (1350 <system_clock_init+0xd0>)
    12dc:	68c3      	ldr	r3, [r0, #12]
    12de:	4a1c      	ldr	r2, [pc, #112]	; (1350 <system_clock_init+0xd0>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    12e0:	4219      	tst	r1, r3
    12e2:	d0fb      	beq.n	12dc <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    12e4:	2380      	movs	r3, #128	; 0x80
    12e6:	8a91      	ldrh	r1, [r2, #20]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    12e8:	2006      	movs	r0, #6

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    12ea:	430b      	orrs	r3, r1
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    12ec:	2140      	movs	r1, #64	; 0x40

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    12ee:	8293      	strh	r3, [r2, #20]
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    12f0:	6a13      	ldr	r3, [r2, #32]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    12f2:	2500      	movs	r5, #0
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    12f4:	438b      	bics	r3, r1
    12f6:	3140      	adds	r1, #64	; 0x40
    12f8:	430b      	orrs	r3, r1
    12fa:	491a      	ldr	r1, [pc, #104]	; (1364 <system_clock_init+0xe4>)
    12fc:	400b      	ands	r3, r1
    12fe:	6213      	str	r3, [r2, #32]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1300:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1302:	4b19      	ldr	r3, [pc, #100]	; (1368 <system_clock_init+0xe8>)
    1304:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1306:	2301      	movs	r3, #1
    1308:	4698      	mov	r8, r3
    130a:	ac01      	add	r4, sp, #4

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    130c:	1c21      	adds	r1, r4, #0
    130e:	9302      	str	r3, [sp, #8]
    1310:	4f16      	ldr	r7, [pc, #88]	; (136c <system_clock_init+0xec>)
    1312:	3304      	adds	r3, #4
    1314:	2001      	movs	r0, #1
    1316:	7023      	strb	r3, [r4, #0]
	config->high_when_disabled = false;
    1318:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    131a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    131c:	7265      	strb	r5, [r4, #9]
    131e:	47b8      	blx	r7
    1320:	4e13      	ldr	r6, [pc, #76]	; (1370 <system_clock_init+0xf0>)
    1322:	2001      	movs	r0, #1
    1324:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1326:	4b13      	ldr	r3, [pc, #76]	; (1374 <system_clock_init+0xf4>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1328:	1c21      	adds	r1, r4, #0
    132a:	721d      	strb	r5, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    132c:	725d      	strb	r5, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    132e:	729d      	strb	r5, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1330:	72dd      	strb	r5, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1332:	4643      	mov	r3, r8
    1334:	2000      	movs	r0, #0
    1336:	6063      	str	r3, [r4, #4]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1338:	3305      	adds	r3, #5
    133a:	7023      	strb	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    133c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    133e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1340:	7265      	strb	r5, [r4, #9]
    1342:	47b8      	blx	r7
    1344:	2000      	movs	r0, #0
    1346:	47b0      	blx	r6
#endif
}
    1348:	b008      	add	sp, #32
    134a:	bc04      	pop	{r2}
    134c:	4690      	mov	r8, r2
    134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1350:	40000800 	.word	0x40000800
    1354:	41004000 	.word	0x41004000
    1358:	000015a5 	.word	0x000015a5
    135c:	00001119 	.word	0x00001119
    1360:	000011f1 	.word	0x000011f1
    1364:	fffffcff 	.word	0xfffffcff
    1368:	00001379 	.word	0x00001379
    136c:	0000139d 	.word	0x0000139d
    1370:	0000144d 	.word	0x0000144d
    1374:	40000400 	.word	0x40000400

00001378 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1378:	2308      	movs	r3, #8
    137a:	4a06      	ldr	r2, [pc, #24]	; (1394 <system_gclk_init+0x1c>)
    137c:	6991      	ldr	r1, [r2, #24]
    137e:	430b      	orrs	r3, r1
    1380:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1382:	2301      	movs	r3, #1
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1384:	2101      	movs	r1, #1
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1386:	4a04      	ldr	r2, [pc, #16]	; (1398 <system_gclk_init+0x20>)
    1388:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    138a:	7813      	ldrb	r3, [r2, #0]
    138c:	4219      	tst	r1, r3
    138e:	d1fc      	bne.n	138a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1390:	4770      	bx	lr
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	40000400 	.word	0x40000400
    1398:	40000c00 	.word	0x40000c00

0000139c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    139c:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    139e:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    13a0:	784b      	ldrb	r3, [r1, #1]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13a2:	022d      	lsls	r5, r5, #8
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    13a4:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    13a6:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13a8:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    13aa:	2b00      	cmp	r3, #0
    13ac:	d002      	beq.n	13b4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    13ae:	2380      	movs	r3, #128	; 0x80
    13b0:	02db      	lsls	r3, r3, #11
    13b2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    13b4:	7a4b      	ldrb	r3, [r1, #9]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d002      	beq.n	13c0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    13ba:	2380      	movs	r3, #128	; 0x80
    13bc:	031b      	lsls	r3, r3, #12
    13be:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    13c0:	6848      	ldr	r0, [r1, #4]
    13c2:	2801      	cmp	r0, #1
    13c4:	d90f      	bls.n	13e6 <system_gclk_gen_set_config+0x4a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    13c6:	1e43      	subs	r3, r0, #1
    13c8:	4003      	ands	r3, r0
    13ca:	d131      	bne.n	1430 <system_gclk_gen_set_config+0x94>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    13cc:	2802      	cmp	r0, #2
    13ce:	d005      	beq.n	13dc <system_gclk_gen_set_config+0x40>
    13d0:	2202      	movs	r2, #2
						mask <<= 1) {
				div2_count++;
    13d2:	3301      	adds	r3, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    13d4:	0052      	lsls	r2, r2, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    13d6:	4290      	cmp	r0, r2
    13d8:	d8fb      	bhi.n	13d2 <system_gclk_gen_set_config+0x36>
    13da:	021b      	lsls	r3, r3, #8
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    13dc:	4333      	orrs	r3, r6
    13de:	1c1c      	adds	r4, r3, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13e0:	2380      	movs	r3, #128	; 0x80
    13e2:	035b      	lsls	r3, r3, #13
    13e4:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13e6:	7a0b      	ldrb	r3, [r1, #8]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d002      	beq.n	13f2 <system_gclk_gen_set_config+0x56>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13ec:	2380      	movs	r3, #128	; 0x80
    13ee:	039b      	lsls	r3, r3, #14
    13f0:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13f2:	4a12      	ldr	r2, [pc, #72]	; (143c <system_gclk_gen_set_config+0xa0>)
    13f4:	7853      	ldrb	r3, [r2, #1]
    13f6:	b25b      	sxtb	r3, r3
    13f8:	2b00      	cmp	r3, #0
    13fa:	dbfb      	blt.n	13f4 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13fc:	4b10      	ldr	r3, [pc, #64]	; (1440 <system_gclk_gen_set_config+0xa4>)
    13fe:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1400:	4b10      	ldr	r3, [pc, #64]	; (1444 <system_gclk_gen_set_config+0xa8>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1402:	490e      	ldr	r1, [pc, #56]	; (143c <system_gclk_gen_set_config+0xa0>)
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1404:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1406:	784a      	ldrb	r2, [r1, #1]
    1408:	4b0c      	ldr	r3, [pc, #48]	; (143c <system_gclk_gen_set_config+0xa0>)
    140a:	b252      	sxtb	r2, r2
    140c:	2a00      	cmp	r2, #0
    140e:	dbfa      	blt.n	1406 <system_gclk_gen_set_config+0x6a>
    1410:	1c1a      	adds	r2, r3, #0

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1412:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1414:	7853      	ldrb	r3, [r2, #1]
    1416:	4909      	ldr	r1, [pc, #36]	; (143c <system_gclk_gen_set_config+0xa0>)
    1418:	b25b      	sxtb	r3, r3
    141a:	2b00      	cmp	r3, #0
    141c:	dbfa      	blt.n	1414 <system_gclk_gen_set_config+0x78>
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    141e:	2380      	movs	r3, #128	; 0x80
    1420:	684a      	ldr	r2, [r1, #4]
    1422:	025b      	lsls	r3, r3, #9
    1424:	4013      	ands	r3, r2
    1426:	431d      	orrs	r5, r3
    1428:	604d      	str	r5, [r1, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    142a:	4b07      	ldr	r3, [pc, #28]	; (1448 <system_gclk_gen_set_config+0xac>)
    142c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    142e:	bd70      	pop	{r4, r5, r6, pc}

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1430:	2380      	movs	r3, #128	; 0x80
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1432:	0204      	lsls	r4, r0, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1434:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1436:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1438:	431d      	orrs	r5, r3
    143a:	e7d4      	b.n	13e6 <system_gclk_gen_set_config+0x4a>
    143c:	40000c00 	.word	0x40000c00
    1440:	000008e9 	.word	0x000008e9
    1444:	40000c08 	.word	0x40000c08
    1448:	00000925 	.word	0x00000925

0000144c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    144c:	b510      	push	{r4, lr}
    144e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1450:	4a0b      	ldr	r2, [pc, #44]	; (1480 <system_gclk_gen_enable+0x34>)
    1452:	7853      	ldrb	r3, [r2, #1]
    1454:	b25b      	sxtb	r3, r3
    1456:	2b00      	cmp	r3, #0
    1458:	dbfb      	blt.n	1452 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    145a:	4b0a      	ldr	r3, [pc, #40]	; (1484 <system_gclk_gen_enable+0x38>)
    145c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <system_gclk_gen_enable+0x3c>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1460:	4907      	ldr	r1, [pc, #28]	; (1480 <system_gclk_gen_enable+0x34>)
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1462:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1464:	784b      	ldrb	r3, [r1, #1]
    1466:	4a06      	ldr	r2, [pc, #24]	; (1480 <system_gclk_gen_enable+0x34>)
    1468:	b25b      	sxtb	r3, r3
    146a:	2b00      	cmp	r3, #0
    146c:	dbfa      	blt.n	1464 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    146e:	2180      	movs	r1, #128	; 0x80
    1470:	6853      	ldr	r3, [r2, #4]
    1472:	0249      	lsls	r1, r1, #9
    1474:	430b      	orrs	r3, r1
    1476:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1478:	4b04      	ldr	r3, [pc, #16]	; (148c <system_gclk_gen_enable+0x40>)
    147a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    147c:	bd10      	pop	{r4, pc}
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	40000c00 	.word	0x40000c00
    1484:	000008e9 	.word	0x000008e9
    1488:	40000c04 	.word	0x40000c04
    148c:	00000925 	.word	0x00000925

00001490 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1492:	1c07      	adds	r7, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1494:	4a19      	ldr	r2, [pc, #100]	; (14fc <system_gclk_gen_get_hz+0x6c>)
    1496:	7853      	ldrb	r3, [r2, #1]
    1498:	b25b      	sxtb	r3, r3
    149a:	2b00      	cmp	r3, #0
    149c:	dbfb      	blt.n	1496 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    149e:	4b18      	ldr	r3, [pc, #96]	; (1500 <system_gclk_gen_get_hz+0x70>)
    14a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14a2:	4b18      	ldr	r3, [pc, #96]	; (1504 <system_gclk_gen_get_hz+0x74>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14a4:	4a15      	ldr	r2, [pc, #84]	; (14fc <system_gclk_gen_get_hz+0x6c>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14a6:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14a8:	7853      	ldrb	r3, [r2, #1]
    14aa:	4c14      	ldr	r4, [pc, #80]	; (14fc <system_gclk_gen_get_hz+0x6c>)
    14ac:	b25b      	sxtb	r3, r3
    14ae:	2b00      	cmp	r3, #0
    14b0:	dbfa      	blt.n	14a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14b2:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14b4:	4b14      	ldr	r3, [pc, #80]	; (1508 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14b6:	04c0      	lsls	r0, r0, #19
    14b8:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14ba:	4798      	blx	r3
    14bc:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14be:	4b11      	ldr	r3, [pc, #68]	; (1504 <system_gclk_gen_get_hz+0x74>)
    14c0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    14c2:	6865      	ldr	r5, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14c4:	4b11      	ldr	r3, [pc, #68]	; (150c <system_gclk_gen_get_hz+0x7c>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    14c6:	02ed      	lsls	r5, r5, #11
    14c8:	0fed      	lsrs	r5, r5, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14ca:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14cc:	7863      	ldrb	r3, [r4, #1]
    14ce:	b25b      	sxtb	r3, r3
    14d0:	2b00      	cmp	r3, #0
    14d2:	dbfb      	blt.n	14cc <system_gclk_gen_get_hz+0x3c>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    14d4:	4b09      	ldr	r3, [pc, #36]	; (14fc <system_gclk_gen_get_hz+0x6c>)
    14d6:	6899      	ldr	r1, [r3, #8]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14d8:	4b0d      	ldr	r3, [pc, #52]	; (1510 <system_gclk_gen_get_hz+0x80>)
    14da:	0a09      	lsrs	r1, r1, #8
    14dc:	b28c      	uxth	r4, r1
    14de:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14e0:	2d00      	cmp	r5, #0
    14e2:	d003      	beq.n	14ec <system_gclk_gen_get_hz+0x5c>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14e4:	1c61      	adds	r1, r4, #1
    14e6:	40ce      	lsrs	r6, r1
	}

	return gen_input_hz;
}
    14e8:	1c30      	adds	r0, r6, #0
    14ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14ec:	2c01      	cmp	r4, #1
    14ee:	d9fb      	bls.n	14e8 <system_gclk_gen_get_hz+0x58>
		gen_input_hz /= divider;
    14f0:	1c30      	adds	r0, r6, #0
    14f2:	1c21      	adds	r1, r4, #0
    14f4:	4b07      	ldr	r3, [pc, #28]	; (1514 <system_gclk_gen_get_hz+0x84>)
    14f6:	4798      	blx	r3
    14f8:	1c06      	adds	r6, r0, #0
    14fa:	e7f5      	b.n	14e8 <system_gclk_gen_get_hz+0x58>
    14fc:	40000c00 	.word	0x40000c00
    1500:	000008e9 	.word	0x000008e9
    1504:	40000c04 	.word	0x40000c04
    1508:	0000109d 	.word	0x0000109d
    150c:	40000c08 	.word	0x40000c08
    1510:	00000925 	.word	0x00000925
    1514:	00001c81 	.word	0x00001c81

00001518 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1518:	b510      	push	{r4, lr}
    151a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    151c:	4b06      	ldr	r3, [pc, #24]	; (1538 <system_gclk_chan_enable+0x20>)
    151e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1520:	2180      	movs	r1, #128	; 0x80
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1522:	4b06      	ldr	r3, [pc, #24]	; (153c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1524:	4a06      	ldr	r2, [pc, #24]	; (1540 <system_gclk_chan_enable+0x28>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1526:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1528:	8853      	ldrh	r3, [r2, #2]
    152a:	01c9      	lsls	r1, r1, #7
    152c:	430b      	orrs	r3, r1
    152e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <system_gclk_chan_enable+0x2c>)
    1532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1534:	bd10      	pop	{r4, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	000008e9 	.word	0x000008e9
    153c:	40000c02 	.word	0x40000c02
    1540:	40000c00 	.word	0x40000c00
    1544:	00000925 	.word	0x00000925

00001548 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1548:	b510      	push	{r4, lr}
    154a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    154c:	4b0f      	ldr	r3, [pc, #60]	; (158c <system_gclk_chan_disable+0x44>)
    154e:	4798      	blx	r3
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1550:	2080      	movs	r0, #128	; 0x80
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1552:	4b0f      	ldr	r3, [pc, #60]	; (1590 <system_gclk_chan_disable+0x48>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1554:	4a0f      	ldr	r2, [pc, #60]	; (1594 <system_gclk_chan_disable+0x4c>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1556:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1558:	8854      	ldrh	r4, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    155a:	4b0f      	ldr	r3, [pc, #60]	; (1598 <system_gclk_chan_disable+0x50>)
    155c:	8851      	ldrh	r1, [r2, #2]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    155e:	0524      	lsls	r4, r4, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1560:	400b      	ands	r3, r1
    1562:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1564:	8851      	ldrh	r1, [r2, #2]
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <system_gclk_chan_disable+0x54>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1568:	0f24      	lsrs	r4, r4, #28
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    156a:	400b      	ands	r3, r1
    156c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    156e:	01c0      	lsls	r0, r0, #7
    1570:	8853      	ldrh	r3, [r2, #2]
    1572:	4908      	ldr	r1, [pc, #32]	; (1594 <system_gclk_chan_disable+0x4c>)
    1574:	4203      	tst	r3, r0
    1576:	d1fb      	bne.n	1570 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1578:	8848      	ldrh	r0, [r1, #2]
    157a:	4b07      	ldr	r3, [pc, #28]	; (1598 <system_gclk_chan_disable+0x50>)
    157c:	0222      	lsls	r2, r4, #8
    157e:	4003      	ands	r3, r0
    1580:	4313      	orrs	r3, r2
    1582:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1584:	4b06      	ldr	r3, [pc, #24]	; (15a0 <system_gclk_chan_disable+0x58>)
    1586:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1588:	bd10      	pop	{r4, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	000008e9 	.word	0x000008e9
    1590:	40000c02 	.word	0x40000c02
    1594:	40000c00 	.word	0x40000c00
    1598:	fffff0ff 	.word	0xfffff0ff
    159c:	ffffbfff 	.word	0xffffbfff
    15a0:	00000925 	.word	0x00000925

000015a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    15a4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15a6:	780c      	ldrb	r4, [r1, #0]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    15a8:	4b03      	ldr	r3, [pc, #12]	; (15b8 <system_gclk_chan_set_config+0x14>)

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15aa:	0224      	lsls	r4, r4, #8
    15ac:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    15ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15b0:	4b02      	ldr	r3, [pc, #8]	; (15bc <system_gclk_chan_set_config+0x18>)
    15b2:	b2a4      	uxth	r4, r4
    15b4:	805c      	strh	r4, [r3, #2]
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00001549 	.word	0x00001549
    15bc:	40000c00 	.word	0x40000c00

000015c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    15c0:	b510      	push	{r4, lr}
    15c2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <system_gclk_chan_get_hz+0x20>)
    15c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <system_gclk_chan_get_hz+0x24>)
    15ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <system_gclk_chan_get_hz+0x28>)
    15ce:	885c      	ldrh	r4, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15d0:	4b06      	ldr	r3, [pc, #24]	; (15ec <system_gclk_chan_get_hz+0x2c>)
    15d2:	0524      	lsls	r4, r4, #20
    15d4:	0f24      	lsrs	r4, r4, #28
    15d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    15d8:	1c20      	adds	r0, r4, #0
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <system_gclk_chan_get_hz+0x30>)
    15dc:	4798      	blx	r3
}
    15de:	bd10      	pop	{r4, pc}
    15e0:	000008e9 	.word	0x000008e9
    15e4:	40000c02 	.word	0x40000c02
    15e8:	40000c00 	.word	0x40000c00
    15ec:	00000925 	.word	0x00000925
    15f0:	00001491 	.word	0x00001491

000015f4 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15f4:	78d3      	ldrb	r3, [r2, #3]
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15f6:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15f8:	2b00      	cmp	r3, #0
    15fa:	d131      	bne.n	1660 <_system_pinmux_config+0x6c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15fc:	7814      	ldrb	r4, [r2, #0]
    15fe:	2c80      	cmp	r4, #128	; 0x80
    1600:	d047      	beq.n	1692 <_system_pinmux_config+0x9e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1602:	2380      	movs	r3, #128	; 0x80
    1604:	0624      	lsls	r4, r4, #24
    1606:	025b      	lsls	r3, r3, #9
    1608:	431c      	orrs	r4, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    160a:	7853      	ldrb	r3, [r2, #1]
    160c:	2502      	movs	r5, #2
    160e:	1c1e      	adds	r6, r3, #0
    1610:	43ae      	bics	r6, r5
    1612:	d107      	bne.n	1624 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1614:	7893      	ldrb	r3, [r2, #2]
    1616:	2b00      	cmp	r3, #0
    1618:	d137      	bne.n	168a <_system_pinmux_config+0x96>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    161a:	2380      	movs	r3, #128	; 0x80
    161c:	029b      	lsls	r3, r3, #10
    161e:	431c      	orrs	r4, r3
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1620:	6041      	str	r1, [r0, #4]
    1622:	7853      	ldrb	r3, [r2, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1624:	3b01      	subs	r3, #1
    1626:	2b01      	cmp	r3, #1
    1628:	d935      	bls.n	1696 <_system_pinmux_config+0xa2>
    162a:	25a0      	movs	r5, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    162c:	040b      	lsls	r3, r1, #16
    162e:	05ed      	lsls	r5, r5, #23
    1630:	0c1b      	lsrs	r3, r3, #16
    1632:	432b      	orrs	r3, r5
    1634:	25d0      	movs	r5, #208	; 0xd0

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1636:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1638:	6283      	str	r3, [r0, #40]	; 0x28
    163a:	062d      	lsls	r5, r5, #24
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    163c:	0c0b      	lsrs	r3, r1, #16
    163e:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1640:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1642:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1644:	78d3      	ldrb	r3, [r2, #3]
    1646:	2b00      	cmp	r3, #0
    1648:	d109      	bne.n	165e <_system_pinmux_config+0x6a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    164a:	0363      	lsls	r3, r4, #13
    164c:	d503      	bpl.n	1656 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    164e:	7893      	ldrb	r3, [r2, #2]
    1650:	2b01      	cmp	r3, #1
    1652:	d023      	beq.n	169c <_system_pinmux_config+0xa8>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1654:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1656:	7853      	ldrb	r3, [r2, #1]
    1658:	3b01      	subs	r3, #1
    165a:	2b01      	cmp	r3, #1
    165c:	d913      	bls.n	1686 <_system_pinmux_config+0x92>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    165e:	bd70      	pop	{r4, r5, r6, pc}

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1660:	24a0      	movs	r4, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1662:	040b      	lsls	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1664:	05e4      	lsls	r4, r4, #23
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1666:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1668:	4323      	orrs	r3, r4

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    166a:	24d0      	movs	r4, #208	; 0xd0
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    166c:	6041      	str	r1, [r0, #4]

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    166e:	0624      	lsls	r4, r4, #24
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1670:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1672:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1674:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1676:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1678:	78d3      	ldrb	r3, [r2, #3]
    167a:	2b00      	cmp	r3, #0
    167c:	d1ef      	bne.n	165e <_system_pinmux_config+0x6a>
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    167e:	7853      	ldrb	r3, [r2, #1]
    1680:	3b01      	subs	r3, #1
    1682:	2b01      	cmp	r3, #1
    1684:	d8eb      	bhi.n	165e <_system_pinmux_config+0x6a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1686:	6081      	str	r1, [r0, #8]
    1688:	e7e9      	b.n	165e <_system_pinmux_config+0x6a>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    168a:	23c0      	movs	r3, #192	; 0xc0
    168c:	02db      	lsls	r3, r3, #11
    168e:	431c      	orrs	r4, r3
    1690:	e7c6      	b.n	1620 <_system_pinmux_config+0x2c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1692:	2400      	movs	r4, #0
    1694:	e7b9      	b.n	160a <_system_pinmux_config+0x16>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1696:	4b02      	ldr	r3, [pc, #8]	; (16a0 <_system_pinmux_config+0xac>)
    1698:	401c      	ands	r4, r3
    169a:	e7c6      	b.n	162a <_system_pinmux_config+0x36>
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
				port->OUTSET.reg = pin_mask;
    169c:	6181      	str	r1, [r0, #24]
    169e:	e7da      	b.n	1656 <_system_pinmux_config+0x62>
    16a0:	fffbffff 	.word	0xfffbffff

000016a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    16a4:	b508      	push	{r3, lr}
    16a6:	1c0a      	adds	r2, r1, #0
    16a8:	1c03      	adds	r3, r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16ae:	2900      	cmp	r1, #0
    16b0:	d104      	bne.n	16bc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    16b2:	4906      	ldr	r1, [pc, #24]	; (16cc <system_pinmux_pin_set_config+0x28>)
    16b4:	0958      	lsrs	r0, r3, #5
    16b6:	468c      	mov	ip, r1
    16b8:	01c0      	lsls	r0, r0, #7
    16ba:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16bc:	211f      	movs	r1, #31
    16be:	400b      	ands	r3, r1
    16c0:	391e      	subs	r1, #30
    16c2:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    16c4:	4b02      	ldr	r3, [pc, #8]	; (16d0 <system_pinmux_pin_set_config+0x2c>)
    16c6:	4798      	blx	r3
}
    16c8:	bd08      	pop	{r3, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	41004400 	.word	0x41004400
    16d0:	000015f5 	.word	0x000015f5

000016d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16d4:	4770      	bx	lr
    16d6:	46c0      	nop			; (mov r8, r8)

000016d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16d8:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16da:	4b05      	ldr	r3, [pc, #20]	; (16f0 <system_init+0x18>)
    16dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <system_init+0x1c>)
    16e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <system_init+0x20>)
    16e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <system_init+0x24>)
    16e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    16ea:	4b05      	ldr	r3, [pc, #20]	; (1700 <system_init+0x28>)
    16ec:	4798      	blx	r3
}
    16ee:	bd08      	pop	{r3, pc}
    16f0:	00001281 	.word	0x00001281
    16f4:	00000955 	.word	0x00000955
    16f8:	000016d5 	.word	0x000016d5
    16fc:	000016d5 	.word	0x000016d5
    1700:	000016d5 	.word	0x000016d5

00001704 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1704:	1c93      	adds	r3, r2, #2
    1706:	009b      	lsls	r3, r3, #2
    1708:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    170a:	2a02      	cmp	r2, #2
    170c:	d009      	beq.n	1722 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    170e:	2a03      	cmp	r2, #3
    1710:	d00c      	beq.n	172c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1712:	2301      	movs	r3, #1
    1714:	4093      	lsls	r3, r2
    1716:	1c1a      	adds	r2, r3, #0
    1718:	7e03      	ldrb	r3, [r0, #24]
    171a:	431a      	orrs	r2, r3
    171c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    171e:	2000      	movs	r0, #0
    1720:	4770      	bx	lr
	/* Register callback function */
	module->callback[callback_type] = callback_func;

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1722:	2310      	movs	r3, #16
    1724:	7e02      	ldrb	r2, [r0, #24]
    1726:	4313      	orrs	r3, r2
    1728:	7603      	strb	r3, [r0, #24]
    172a:	e7f8      	b.n	171e <tc_register_callback+0x1a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    172c:	2320      	movs	r3, #32
    172e:	7e02      	ldrb	r2, [r0, #24]
    1730:	4313      	orrs	r3, r2
    1732:	7603      	strb	r3, [r0, #24]
    1734:	e7f3      	b.n	171e <tc_register_callback+0x1a>
    1736:	46c0      	nop			; (mov r8, r8)

00001738 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1738:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    173a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    173c:	4b15      	ldr	r3, [pc, #84]	; (1794 <_tc_interrupt_handler+0x5c>)
    173e:	0080      	lsls	r0, r0, #2
    1740:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1742:	682b      	ldr	r3, [r5, #0]
    1744:	7e2c      	ldrb	r4, [r5, #24]
    1746:	7b9b      	ldrb	r3, [r3, #14]
    1748:	401c      	ands	r4, r3
    174a:	7e6b      	ldrb	r3, [r5, #25]
    174c:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    174e:	4226      	tst	r6, r4
    1750:	d11a      	bne.n	1788 <_tc_interrupt_handler+0x50>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1752:	2602      	movs	r6, #2
    1754:	4226      	tst	r6, r4
    1756:	d111      	bne.n	177c <_tc_interrupt_handler+0x44>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1758:	2610      	movs	r6, #16
    175a:	4226      	tst	r6, r4
    175c:	d108      	bne.n	1770 <_tc_interrupt_handler+0x38>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    175e:	2620      	movs	r6, #32
    1760:	4226      	tst	r6, r4
    1762:	d004      	beq.n	176e <_tc_interrupt_handler+0x36>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1764:	696b      	ldr	r3, [r5, #20]
    1766:	1c28      	adds	r0, r5, #0
    1768:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    176a:	682b      	ldr	r3, [r5, #0]
    176c:	739e      	strb	r6, [r3, #14]
	}
}
    176e:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1770:	692b      	ldr	r3, [r5, #16]
    1772:	1c28      	adds	r0, r5, #0
    1774:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1776:	682b      	ldr	r3, [r5, #0]
    1778:	739e      	strb	r6, [r3, #14]
    177a:	e7f0      	b.n	175e <_tc_interrupt_handler+0x26>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    177c:	68eb      	ldr	r3, [r5, #12]
    177e:	1c28      	adds	r0, r5, #0
    1780:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1782:	682b      	ldr	r3, [r5, #0]
    1784:	739e      	strb	r6, [r3, #14]
    1786:	e7e7      	b.n	1758 <_tc_interrupt_handler+0x20>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1788:	68ab      	ldr	r3, [r5, #8]
    178a:	1c28      	adds	r0, r5, #0
    178c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    178e:	682b      	ldr	r3, [r5, #0]
    1790:	739e      	strb	r6, [r3, #14]
    1792:	e7de      	b.n	1752 <_tc_interrupt_handler+0x1a>
    1794:	20000098 	.word	0x20000098

00001798 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1798:	b508      	push	{r3, lr}
    179a:	2000      	movs	r0, #0
    179c:	4b01      	ldr	r3, [pc, #4]	; (17a4 <TC0_Handler+0xc>)
    179e:	4798      	blx	r3
    17a0:	bd08      	pop	{r3, pc}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	00001739 	.word	0x00001739

000017a8 <TC1_Handler>:
    17a8:	b508      	push	{r3, lr}
    17aa:	2001      	movs	r0, #1
    17ac:	4b01      	ldr	r3, [pc, #4]	; (17b4 <TC1_Handler+0xc>)
    17ae:	4798      	blx	r3
    17b0:	bd08      	pop	{r3, pc}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	00001739 	.word	0x00001739

000017b8 <TC2_Handler>:
    17b8:	b508      	push	{r3, lr}
    17ba:	2002      	movs	r0, #2
    17bc:	4b01      	ldr	r3, [pc, #4]	; (17c4 <TC2_Handler+0xc>)
    17be:	4798      	blx	r3
    17c0:	bd08      	pop	{r3, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	00001739 	.word	0x00001739

000017c8 <TC3_Handler>:
    17c8:	b508      	push	{r3, lr}
    17ca:	2003      	movs	r0, #3
    17cc:	4b01      	ldr	r3, [pc, #4]	; (17d4 <TC3_Handler+0xc>)
    17ce:	4798      	blx	r3
    17d0:	bd08      	pop	{r3, pc}
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	00001739 	.word	0x00001739

000017d8 <TC4_Handler>:
    17d8:	b508      	push	{r3, lr}
    17da:	2004      	movs	r0, #4
    17dc:	4b01      	ldr	r3, [pc, #4]	; (17e4 <TC4_Handler+0xc>)
    17de:	4798      	blx	r3
    17e0:	bd08      	pop	{r3, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	00001739 	.word	0x00001739

000017e8 <TC5_Handler>:
    17e8:	b508      	push	{r3, lr}
    17ea:	2005      	movs	r0, #5
    17ec:	4b01      	ldr	r3, [pc, #4]	; (17f4 <TC5_Handler+0xc>)
    17ee:	4798      	blx	r3
    17f0:	bd08      	pop	{r3, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	00001739 	.word	0x00001739

000017f8 <TC6_Handler>:
    17f8:	b508      	push	{r3, lr}
    17fa:	2006      	movs	r0, #6
    17fc:	4b01      	ldr	r3, [pc, #4]	; (1804 <TC6_Handler+0xc>)
    17fe:	4798      	blx	r3
    1800:	bd08      	pop	{r3, pc}
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	00001739 	.word	0x00001739

00001808 <TC7_Handler>:
    1808:	b508      	push	{r3, lr}
    180a:	2007      	movs	r0, #7
    180c:	4b01      	ldr	r3, [pc, #4]	; (1814 <TC7_Handler+0xc>)
    180e:	4798      	blx	r3
    1810:	bd08      	pop	{r3, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00001739 	.word	0x00001739

00001818 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1818:	b570      	push	{r4, r5, r6, lr}
    181a:	b088      	sub	sp, #32
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    181c:	466a      	mov	r2, sp
    181e:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_tc_get_inst_index+0x30>)
    1820:	4669      	mov	r1, sp
    1822:	cb70      	ldmia	r3!, {r4, r5, r6}
    1824:	c270      	stmia	r2!, {r4, r5, r6}
    1826:	cb70      	ldmia	r3!, {r4, r5, r6}
    1828:	c270      	stmia	r2!, {r4, r5, r6}
    182a:	cb30      	ldmia	r3!, {r4, r5}
    182c:	c230      	stmia	r2!, {r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    182e:	2300      	movs	r3, #0
    1830:	009a      	lsls	r2, r3, #2
		if (hw == tc_modules[i]) {
    1832:	588a      	ldr	r2, [r1, r2]
    1834:	4282      	cmp	r2, r0
    1836:	d005      	beq.n	1844 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1838:	3301      	adds	r3, #1
    183a:	2b08      	cmp	r3, #8
    183c:	d1f8      	bne.n	1830 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    183e:	2000      	movs	r0, #0
}
    1840:	b008      	add	sp, #32
    1842:	bd70      	pop	{r4, r5, r6, pc}
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
			return i;
    1844:	b2d8      	uxtb	r0, r3
    1846:	e7fb      	b.n	1840 <_tc_get_inst_index+0x28>
    1848:	00001f90 	.word	0x00001f90

0000184c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    184c:	b5f0      	push	{r4, r5, r6, r7, lr}
    184e:	4644      	mov	r4, r8
    1850:	464d      	mov	r5, r9
    1852:	465f      	mov	r7, fp
    1854:	4656      	mov	r6, sl
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1856:	4ba1      	ldr	r3, [pc, #644]	; (1adc <tc_init+0x290>)
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1858:	b4f0      	push	{r4, r5, r6, r7}
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    185a:	4698      	mov	r8, r3
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    185c:	b08d      	sub	sp, #52	; 0x34
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    185e:	ad04      	add	r5, sp, #16
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1860:	4691      	mov	r9, r2
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1862:	1c2b      	adds	r3, r5, #0
    1864:	4642      	mov	r2, r8
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1866:	1c06      	adds	r6, r0, #0
    1868:	1c0f      	adds	r7, r1, #0
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    186a:	ca13      	ldmia	r2!, {r0, r1, r4}
    186c:	c313      	stmia	r3!, {r0, r1, r4}
    186e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1870:	c313      	stmia	r3!, {r0, r1, r4}
    1872:	ca03      	ldmia	r2!, {r0, r1}
    1874:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1876:	2300      	movs	r3, #0
    1878:	009a      	lsls	r2, r3, #2
		if (hw == tc_modules[i]) {
    187a:	58aa      	ldr	r2, [r5, r2]
    187c:	4297      	cmp	r7, r2
    187e:	d100      	bne.n	1882 <tc_init+0x36>
    1880:	e0b2      	b.n	19e8 <tc_init+0x19c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1882:	3301      	adds	r3, #1
    1884:	2b08      	cmp	r3, #8
    1886:	d1f7      	bne.n	1878 <tc_init+0x2c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1888:	2300      	movs	r3, #0
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    188a:	2400      	movs	r4, #0
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    188c:	469a      	mov	sl, r3
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    188e:	4641      	mov	r1, r8
    1890:	4b93      	ldr	r3, [pc, #588]	; (1ae0 <tc_init+0x294>)
    1892:	3120      	adds	r1, #32
    1894:	2208      	movs	r2, #8
    1896:	a802      	add	r0, sp, #8
    1898:	469b      	mov	fp, r3
    189a:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    189c:	4641      	mov	r1, r8
    189e:	2210      	movs	r2, #16
    18a0:	3128      	adds	r1, #40	; 0x28
    18a2:	1c28      	adds	r0, r5, #0
    18a4:	47d8      	blx	fp
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    18a6:	2300      	movs	r3, #0
	}
	module_inst->register_callback_mask     = 0x00;
	module_inst->enable_callback_mask       = 0x00;

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    18a8:	4a8e      	ldr	r2, [pc, #568]	; (1ae4 <tc_init+0x298>)
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    18aa:	60b3      	str	r3, [r6, #8]
    18ac:	60f3      	str	r3, [r6, #12]
    18ae:	6133      	str	r3, [r6, #16]
    18b0:	6173      	str	r3, [r6, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    18b2:	7633      	strb	r3, [r6, #24]
	module_inst->enable_callback_mask       = 0x00;
    18b4:	7673      	strb	r3, [r6, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    18b6:	00a3      	lsls	r3, r4, #2
    18b8:	509e      	str	r6, [r3, r2]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    18ba:	464b      	mov	r3, r9
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    18bc:	6037      	str	r7, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    18be:	789b      	ldrb	r3, [r3, #2]
    18c0:	2b08      	cmp	r3, #8
    18c2:	d00c      	beq.n	18de <tc_init+0x92>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    18c4:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    18c6:	883b      	ldrh	r3, [r7, #0]
    18c8:	2201      	movs	r2, #1
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    18ca:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    18cc:	07db      	lsls	r3, r3, #31
    18ce:	d50b      	bpl.n	18e8 <tc_init+0x9c>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    18d0:	b00d      	add	sp, #52	; 0x34
    18d2:	bc3c      	pop	{r2, r3, r4, r5}
    18d4:	4690      	mov	r8, r2
    18d6:	4699      	mov	r9, r3
    18d8:	46a2      	mov	sl, r4
    18da:	46ab      	mov	fp, r5
    18dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    18de:	4652      	mov	r2, sl
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18e0:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    18e2:	07d2      	lsls	r2, r2, #31
    18e4:	d4f4      	bmi.n	18d0 <tc_init+0x84>
    18e6:	e7ed      	b.n	18c4 <tc_init+0x78>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    18e8:	7bfb      	ldrb	r3, [r7, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    18ea:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    18ec:	06db      	lsls	r3, r3, #27
    18ee:	d4ef      	bmi.n	18d0 <tc_init+0x84>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    18f0:	2102      	movs	r1, #2
    18f2:	883b      	ldrh	r3, [r7, #0]
    18f4:	400b      	ands	r3, r1
    18f6:	d1eb      	bne.n	18d0 <tc_init+0x84>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    18f8:	4649      	mov	r1, r9
    18fa:	7c09      	ldrb	r1, [r1, #16]
    18fc:	2900      	cmp	r1, #0
    18fe:	d000      	beq.n	1902 <tc_init+0xb6>
    1900:	e0d9      	b.n	1ab6 <tc_init+0x26a>
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1902:	464b      	mov	r3, r9
    1904:	7f1b      	ldrb	r3, [r3, #28]
    1906:	2b00      	cmp	r3, #0
    1908:	d000      	beq.n	190c <tc_init+0xc0>
    190a:	e0c5      	b.n	1a98 <tc_init+0x24c>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    190c:	4a76      	ldr	r2, [pc, #472]	; (1ae8 <tc_init+0x29c>)
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    190e:	0061      	lsls	r1, r4, #1
    1910:	6a13      	ldr	r3, [r2, #32]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1912:	5a69      	ldrh	r1, [r5, r1]
    1914:	430b      	orrs	r3, r1
    1916:	6213      	str	r3, [r2, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1918:	464b      	mov	r3, r9
    191a:	789b      	ldrb	r3, [r3, #2]
    191c:	2b08      	cmp	r3, #8
    191e:	d100      	bne.n	1922 <tc_init+0xd6>
    1920:	e0d5      	b.n	1ace <tc_init+0x282>
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1922:	464b      	mov	r3, r9
    1924:	466a      	mov	r2, sp
    1926:	781b      	ldrb	r3, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1928:	4669      	mov	r1, sp
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    192a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    192c:	2208      	movs	r2, #8
    192e:	466b      	mov	r3, sp
    1930:	189b      	adds	r3, r3, r2
    1932:	5d1c      	ldrb	r4, [r3, r4]
    1934:	4b6d      	ldr	r3, [pc, #436]	; (1aec <tc_init+0x2a0>)
    1936:	1c20      	adds	r0, r4, #0
    1938:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    193a:	1c20      	adds	r0, r4, #0
    193c:	4b6c      	ldr	r3, [pc, #432]	; (1af0 <tc_init+0x2a4>)
    193e:	4798      	blx	r3
    1940:	464b      	mov	r3, r9

	/* Set ctrla register */
	ctrla_tmp =
    1942:	464a      	mov	r2, r9
    1944:	8898      	ldrh	r0, [r3, #4]
    1946:	891b      	ldrh	r3, [r3, #8]
    1948:	4303      	orrs	r3, r0
    194a:	7990      	ldrb	r0, [r2, #6]
    194c:	7892      	ldrb	r2, [r2, #2]
    194e:	4310      	orrs	r0, r2
    1950:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1952:	464b      	mov	r3, r9
    1954:	785b      	ldrb	r3, [r3, #1]
    1956:	2b00      	cmp	r3, #0
    1958:	d002      	beq.n	1960 <tc_init+0x114>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    195a:	2380      	movs	r3, #128	; 0x80
    195c:	011b      	lsls	r3, r3, #4
    195e:	4318      	orrs	r0, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1960:	227f      	movs	r2, #127	; 0x7f
    1962:	6831      	ldr	r1, [r6, #0]
    1964:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1966:	4393      	bics	r3, r2
    1968:	d1fc      	bne.n	1964 <tc_init+0x118>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;

	/* Set ctrlb register */
	if (config->oneshot) {
    196a:	464b      	mov	r3, r9

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    196c:	8038      	strh	r0, [r7, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    196e:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1970:	1e43      	subs	r3, r0, #1
    1972:	4198      	sbcs	r0, r3
	}

	if (config->count_direction) {
    1974:	464b      	mov	r3, r9
    1976:	7b9b      	ldrb	r3, [r3, #14]
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;

	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1978:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    197a:	2b00      	cmp	r3, #0
    197c:	d001      	beq.n	1982 <tc_init+0x136>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    197e:	2301      	movs	r3, #1
    1980:	4318      	orrs	r0, r3
    1982:	227f      	movs	r2, #127	; 0x7f
    1984:	6831      	ldr	r1, [r6, #0]
    1986:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1988:	4393      	bics	r3, r2
    198a:	d1fc      	bne.n	1986 <tc_init+0x13a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    198c:	33ff      	adds	r3, #255	; 0xff
    198e:	713b      	strb	r3, [r7, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1990:	2800      	cmp	r0, #0
    1992:	d005      	beq.n	19a0 <tc_init+0x154>
    1994:	227f      	movs	r2, #127	; 0x7f
    1996:	6831      	ldr	r1, [r6, #0]
    1998:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    199a:	4393      	bics	r3, r2
    199c:	d1fc      	bne.n	1998 <tc_init+0x14c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    199e:	7178      	strb	r0, [r7, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    19a0:	464b      	mov	r3, r9
    19a2:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    19a4:	7adb      	ldrb	r3, [r3, #11]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d001      	beq.n	19ae <tc_init+0x162>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    19aa:	2310      	movs	r3, #16
    19ac:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    19ae:	464b      	mov	r3, r9
    19b0:	7b1b      	ldrb	r3, [r3, #12]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d001      	beq.n	19ba <tc_init+0x16e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    19b6:	2320      	movs	r3, #32
    19b8:	4318      	orrs	r0, r3
    19ba:	227f      	movs	r2, #127	; 0x7f
    19bc:	6831      	ldr	r1, [r6, #0]
    19be:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    19c0:	4393      	bics	r3, r2
    19c2:	d1fc      	bne.n	19be <tc_init+0x172>
    19c4:	217f      	movs	r1, #127	; 0x7f
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    19c6:	71b8      	strb	r0, [r7, #6]
    19c8:	6832      	ldr	r2, [r6, #0]
    19ca:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    19cc:	438b      	bics	r3, r1
    19ce:	d1fc      	bne.n	19ca <tc_init+0x17e>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    19d0:	7933      	ldrb	r3, [r6, #4]
    19d2:	217f      	movs	r1, #127	; 0x7f
    19d4:	2b04      	cmp	r3, #4
    19d6:	d00b      	beq.n	19f0 <tc_init+0x1a4>
    19d8:	217f      	movs	r1, #127	; 0x7f
    19da:	2b08      	cmp	r3, #8
    19dc:	d044      	beq.n	1a68 <tc_init+0x21c>
    19de:	217f      	movs	r1, #127	; 0x7f
    19e0:	2b00      	cmp	r3, #0
    19e2:	d029      	beq.n	1a38 <tc_init+0x1ec>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    19e4:	2017      	movs	r0, #23
    19e6:	e773      	b.n	18d0 <tc_init+0x84>
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
			return i;
    19e8:	b2da      	uxtb	r2, r3
    19ea:	4692      	mov	sl, r2
    19ec:	1c1c      	adds	r4, r3, #0
    19ee:	e74e      	b.n	188e <tc_init+0x42>
    19f0:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    19f2:	438b      	bics	r3, r1
    19f4:	d1fc      	bne.n	19f0 <tc_init+0x1a4>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    19f6:	464a      	mov	r2, r9
    19f8:	3328      	adds	r3, #40	; 0x28
    19fa:	5cd3      	ldrb	r3, [r2, r3]
    19fc:	227f      	movs	r2, #127	; 0x7f
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    19fe:	743b      	strb	r3, [r7, #16]
    1a00:	6831      	ldr	r1, [r6, #0]
    1a02:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1a04:	4393      	bics	r3, r2
    1a06:	d1fc      	bne.n	1a02 <tc_init+0x1b6>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1a08:	464a      	mov	r2, r9
    1a0a:	3329      	adds	r3, #41	; 0x29
    1a0c:	5cd3      	ldrb	r3, [r2, r3]
    1a0e:	227f      	movs	r2, #127	; 0x7f

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1a10:	753b      	strb	r3, [r7, #20]
    1a12:	6831      	ldr	r1, [r6, #0]
    1a14:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1a16:	4393      	bics	r3, r2
    1a18:	d1fc      	bne.n	1a14 <tc_init+0x1c8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1a1a:	464a      	mov	r2, r9
    1a1c:	332a      	adds	r3, #42	; 0x2a
    1a1e:	5cd3      	ldrb	r3, [r2, r3]
    1a20:	227f      	movs	r2, #127	; 0x7f

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1a22:	763b      	strb	r3, [r7, #24]
    1a24:	6831      	ldr	r1, [r6, #0]
    1a26:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1a28:	4393      	bics	r3, r2
    1a2a:	d1fc      	bne.n	1a26 <tc_init+0x1da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1a2c:	464a      	mov	r2, r9
    1a2e:	332b      	adds	r3, #43	; 0x2b
    1a30:	5cd3      	ldrb	r3, [r2, r3]

			return STATUS_OK;
    1a32:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1a34:	767b      	strb	r3, [r7, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1a36:	e74b      	b.n	18d0 <tc_init+0x84>
    1a38:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1a3a:	438b      	bics	r3, r1
    1a3c:	d1fc      	bne.n	1a38 <tc_init+0x1ec>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1a3e:	464b      	mov	r3, r9
    1a40:	227f      	movs	r2, #127	; 0x7f
    1a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a44:	823b      	strh	r3, [r7, #16]
    1a46:	6831      	ldr	r1, [r6, #0]
    1a48:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1a4a:	4393      	bics	r3, r2
    1a4c:	d1fc      	bne.n	1a48 <tc_init+0x1fc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1a4e:	464b      	mov	r3, r9
    1a50:	227f      	movs	r2, #127	; 0x7f
    1a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1a54:	833b      	strh	r3, [r7, #24]
    1a56:	6831      	ldr	r1, [r6, #0]
    1a58:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1a5a:	4393      	bics	r3, r2
    1a5c:	d1fc      	bne.n	1a58 <tc_init+0x20c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1a5e:	464b      	mov	r3, r9
    1a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			return STATUS_OK;
    1a62:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1a64:	837b      	strh	r3, [r7, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1a66:	e733      	b.n	18d0 <tc_init+0x84>
    1a68:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1a6a:	438b      	bics	r3, r1
    1a6c:	d1fc      	bne.n	1a68 <tc_init+0x21c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1a6e:	464b      	mov	r3, r9
    1a70:	227f      	movs	r2, #127	; 0x7f
    1a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a74:	613b      	str	r3, [r7, #16]
    1a76:	6831      	ldr	r1, [r6, #0]
    1a78:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1a7a:	4393      	bics	r3, r2
    1a7c:	d1fc      	bne.n	1a78 <tc_init+0x22c>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1a7e:	464b      	mov	r3, r9
    1a80:	227f      	movs	r2, #127	; 0x7f
    1a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a84:	61bb      	str	r3, [r7, #24]
    1a86:	6831      	ldr	r1, [r6, #0]
    1a88:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1a8a:	4393      	bics	r3, r2
    1a8c:	d1fc      	bne.n	1a88 <tc_init+0x23c>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1a8e:	464b      	mov	r3, r9
    1a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			return STATUS_OK;
    1a92:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1a94:	61fb      	str	r3, [r7, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1a96:	e71b      	b.n	18d0 <tc_init+0x84>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a98:	2301      	movs	r3, #1
	config->powersave    = false;
    1a9a:	2200      	movs	r2, #0
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a9c:	a901      	add	r1, sp, #4
    1a9e:	708b      	strb	r3, [r1, #2]

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1aa0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1aa2:	464b      	mov	r3, r9
	config->powersave    = false;
    1aa4:	70ca      	strb	r2, [r1, #3]
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1aa6:	464a      	mov	r2, r9
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1aa8:	6a1b      	ldr	r3, [r3, #32]
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1aaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1aac:	b2d8      	uxtb	r0, r3
    1aae:	4b11      	ldr	r3, [pc, #68]	; (1af4 <tc_init+0x2a8>)
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1ab0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1ab2:	4798      	blx	r3
    1ab4:	e72a      	b.n	190c <tc_init+0xc0>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ab6:	a901      	add	r1, sp, #4
	config->powersave    = false;
    1ab8:	70cb      	strb	r3, [r1, #3]
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1aba:	464b      	mov	r3, r9
    1abc:	7e1b      	ldrb	r3, [r3, #24]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1abe:	708a      	strb	r2, [r1, #2]
    1ac0:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1ac2:	464b      	mov	r3, r9
    1ac4:	7d18      	ldrb	r0, [r3, #20]
    1ac6:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <tc_init+0x2a8>)

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ac8:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1aca:	4798      	blx	r3
    1acc:	e719      	b.n	1902 <tc_init+0xb6>
	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1ace:	1c61      	adds	r1, r4, #1
    1ad0:	0049      	lsls	r1, r1, #1
    1ad2:	6a13      	ldr	r3, [r2, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1ad4:	5a69      	ldrh	r1, [r5, r1]
    1ad6:	430b      	orrs	r3, r1
    1ad8:	6213      	str	r3, [r2, #32]
    1ada:	e722      	b.n	1922 <tc_init+0xd6>
    1adc:	00001f90 	.word	0x00001f90
    1ae0:	00001df1 	.word	0x00001df1
    1ae4:	20000098 	.word	0x20000098
    1ae8:	40000400 	.word	0x40000400
    1aec:	000015a5 	.word	0x000015a5
    1af0:	00001519 	.word	0x00001519
    1af4:	000016a5 	.word	0x000016a5

00001af8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1af8:	e7fe      	b.n	1af8 <Dummy_Handler>
    1afa:	46c0      	nop			; (mov r8, r8)

00001afc <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1afc:	4818      	ldr	r0, [pc, #96]	; (1b60 <Reset_Handler+0x64>)
    1afe:	4919      	ldr	r1, [pc, #100]	; (1b64 <Reset_Handler+0x68>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1b00:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1b02:	4288      	cmp	r0, r1
    1b04:	d00d      	beq.n	1b22 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
    1b06:	4b18      	ldr	r3, [pc, #96]	; (1b68 <Reset_Handler+0x6c>)
    1b08:	4299      	cmp	r1, r3
    1b0a:	d20a      	bcs.n	1b22 <Reset_Handler+0x26>
    1b0c:	43ca      	mvns	r2, r1
    1b0e:	18d3      	adds	r3, r2, r3
    1b10:	2200      	movs	r2, #0
    1b12:	089b      	lsrs	r3, r3, #2
    1b14:	3301      	adds	r3, #1
    1b16:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
    1b18:	5884      	ldr	r4, [r0, r2]
    1b1a:	508c      	str	r4, [r1, r2]
    1b1c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1b1e:	429a      	cmp	r2, r3
    1b20:	d1fa      	bne.n	1b18 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b22:	4912      	ldr	r1, [pc, #72]	; (1b6c <Reset_Handler+0x70>)
    1b24:	4b12      	ldr	r3, [pc, #72]	; (1b70 <Reset_Handler+0x74>)
    1b26:	4299      	cmp	r1, r3
    1b28:	d20b      	bcs.n	1b42 <Reset_Handler+0x46>
    1b2a:	43ca      	mvns	r2, r1
                *pDest++ = 0;
    1b2c:	2000      	movs	r0, #0
    1b2e:	18d3      	adds	r3, r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b30:	2200      	movs	r2, #0
    1b32:	089b      	lsrs	r3, r3, #2
    1b34:	3301      	adds	r3, #1
    1b36:	009b      	lsls	r3, r3, #2
                *pDest++ = 0;
    1b38:	188c      	adds	r4, r1, r2
    1b3a:	3204      	adds	r2, #4
    1b3c:	6020      	str	r0, [r4, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b3e:	429a      	cmp	r2, r3
    1b40:	d1fa      	bne.n	1b38 <Reset_Handler+0x3c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b42:	21ff      	movs	r1, #255	; 0xff
    1b44:	4b0b      	ldr	r3, [pc, #44]	; (1b74 <Reset_Handler+0x78>)
    1b46:	4a0c      	ldr	r2, [pc, #48]	; (1b78 <Reset_Handler+0x7c>)
    1b48:	438b      	bics	r3, r1
    1b4a:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1b4c:	2380      	movs	r3, #128	; 0x80
    1b4e:	4a0b      	ldr	r2, [pc, #44]	; (1b7c <Reset_Handler+0x80>)
    1b50:	6851      	ldr	r1, [r2, #4]
    1b52:	430b      	orrs	r3, r1
    1b54:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1b56:	4b0a      	ldr	r3, [pc, #40]	; (1b80 <Reset_Handler+0x84>)
    1b58:	4798      	blx	r3

        /* Branch to main function */
        main();
    1b5a:	4b0a      	ldr	r3, [pc, #40]	; (1b84 <Reset_Handler+0x88>)
    1b5c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1b5e:	e7fe      	b.n	1b5e <Reset_Handler+0x62>
    1b60:	00001fe8 	.word	0x00001fe8
    1b64:	20000000 	.word	0x20000000
    1b68:	20000004 	.word	0x20000004
    1b6c:	20000004 	.word	0x20000004
    1b70:	20000208 	.word	0x20000208
    1b74:	00000000 	.word	0x00000000
    1b78:	e000ed00 	.word	0xe000ed00
    1b7c:	41004000 	.word	0x41004000
    1b80:	00001da5 	.word	0x00001da5
    1b84:	00001b89 	.word	0x00001b89

00001b88 <main>:
//  debug vars
 	uint32_t sysHz;


int main(void)
{
    1b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8a:	465f      	mov	r7, fp
    1b8c:	4656      	mov	r6, sl
    1b8e:	464d      	mov	r5, r9
    1b90:	4644      	mov	r4, r8
	uint8_t result = 0;
	 
	system_init();
    1b92:	4b2a      	ldr	r3, [pc, #168]	; (1c3c <main+0xb4>)
//  debug vars
 	uint32_t sysHz;


int main(void)
{
    1b94:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t result = 0;
	 
	system_init();
    1b96:	4798      	blx	r3

// setup timer
	configure_tc();
    1b98:	4b29      	ldr	r3, [pc, #164]	; (1c40 <main+0xb8>)
    1b9a:	4798      	blx	r3
	configure_tc_callbacks();
    1b9c:	4b29      	ldr	r3, [pc, #164]	; (1c44 <main+0xbc>)
    1b9e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1ba0:	2201      	movs	r2, #1
    1ba2:	4b29      	ldr	r3, [pc, #164]	; (1c48 <main+0xc0>)
    1ba4:	701a      	strb	r2, [r3, #0]
    1ba6:	f3bf 8f5f 	dmb	sy
    1baa:	b662      	cpsie	i
	system_interrupt_enable_global();

// setup spi
	configure_spi_slave();
    1bac:	4b27      	ldr	r3, [pc, #156]	; (1c4c <main+0xc4>)
    1bae:	4798      	blx	r3
	configure_spi_slave_callbacks();
    1bb0:	4b27      	ldr	r3, [pc, #156]	; (1c50 <main+0xc8>)
    1bb2:	4798      	blx	r3

// setup adc  (analog to digital converter
	configure_adc();
    1bb4:	4b27      	ldr	r3, [pc, #156]	; (1c54 <main+0xcc>)
    1bb6:	4798      	blx	r3
	configure_adc_callbacks();
    1bb8:	4b27      	ldr	r3, [pc, #156]	; (1c58 <main+0xd0>)
    1bba:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    1bbc:	4b27      	ldr	r3, [pc, #156]	; (1c5c <main+0xd4>)
    1bbe:	2000      	movs	r0, #0
    1bc0:	4798      	blx	r3
    1bc2:	4b27      	ldr	r3, [pc, #156]	; (1c60 <main+0xd8>)
	while (true) {

		adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 0);	  // 1st set of 10 channels
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
		while (adc_read_done == false) {	} 
		adc_read_done=false;
    1bc4:	2600      	movs	r6, #0
    1bc6:	7a1b      	ldrb	r3, [r3, #8]
    1bc8:	4d26      	ldr	r5, [pc, #152]	; (1c64 <main+0xdc>)
    1bca:	40d8      	lsrs	r0, r3
		}

  */


	sysHz = system_cpu_clock_get_hz();
    1bcc:	4b26      	ldr	r3, [pc, #152]	; (1c68 <main+0xe0>)
    1bce:	4c27      	ldr	r4, [pc, #156]	; (1c6c <main+0xe4>)
    1bd0:	6018      	str	r0, [r3, #0]
    1bd2:	4b27      	ldr	r3, [pc, #156]	; (1c70 <main+0xe8>)
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
    1bd4:	4f27      	ldr	r7, [pc, #156]	; (1c74 <main+0xec>)
    1bd6:	4699      	mov	r9, r3
    1bd8:	4b27      	ldr	r3, [pc, #156]	; (1c78 <main+0xf0>)
    1bda:	4698      	mov	r8, r3
    1bdc:	2314      	movs	r3, #20
    1bde:	444b      	add	r3, r9
    1be0:	469b      	mov	fp, r3
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1be2:	2390      	movs	r3, #144	; 0x90
    1be4:	031b      	lsls	r3, r3, #12
    1be6:	469a      	mov	sl, r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1be8:	682a      	ldr	r2, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bea:	7e53      	ldrb	r3, [r2, #25]
    1bec:	b25b      	sxtb	r3, r3
    1bee:	2b00      	cmp	r3, #0
    1bf0:	dbfb      	blt.n	1bea <main+0x62>

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1bf2:	4651      	mov	r1, sl
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
    1bf4:	6913      	ldr	r3, [r2, #16]

	//! [inf_loop]
	while (true) {

		adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 0);	  // 1st set of 10 channels
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    1bf6:	1c28      	adds	r0, r5, #0
    1bf8:	403b      	ands	r3, r7
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1bfa:	430b      	orrs	r3, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
    1bfc:	6113      	str	r3, [r2, #16]
    1bfe:	4649      	mov	r1, r9
    1c00:	220a      	movs	r2, #10
    1c02:	47c0      	blx	r8
		while (adc_read_done == false) {	} 
    1c04:	7823      	ldrb	r3, [r4, #0]
    1c06:	2b00      	cmp	r3, #0
    1c08:	d0fc      	beq.n	1c04 <main+0x7c>
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1c0a:	682a      	ldr	r2, [r5, #0]
		adc_read_done=false;
    1c0c:	7026      	strb	r6, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c0e:	7e53      	ldrb	r3, [r2, #25]
    1c10:	b25b      	sxtb	r3, r3
    1c12:	2b00      	cmp	r3, #0
    1c14:	dbfb      	blt.n	1c0e <main+0x86>

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1c16:	21a9      	movs	r1, #169	; 0xa9
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
    1c18:	6913      	ldr	r3, [r2, #16]
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1c1a:	0409      	lsls	r1, r1, #16
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
    1c1c:	403b      	ands	r3, r7
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1c1e:	430b      	orrs	r3, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
    1c20:	6113      	str	r3, [r2, #16]
		
		adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 10);		// 2nd set of 10 channels
		adc_read_buffer_job(&adc_instance, adc_result_buffer+ADC_SAMPLES, ADC_SAMPLES);
    1c22:	1c28      	adds	r0, r5, #0
    1c24:	4659      	mov	r1, fp
    1c26:	220a      	movs	r2, #10
    1c28:	47c0      	blx	r8
		while (adc_read_done == false) {	}
    1c2a:	7823      	ldrb	r3, [r4, #0]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d0fc      	beq.n	1c2a <main+0xa2>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1c30:	2280      	movs	r2, #128	; 0x80
    1c32:	4b12      	ldr	r3, [pc, #72]	; (1c7c <main+0xf4>)
    1c34:	0252      	lsls	r2, r2, #9
		adc_read_done=false;
    1c36:	7026      	strb	r6, [r4, #0]
    1c38:	61da      	str	r2, [r3, #28]
    1c3a:	e7d5      	b.n	1be8 <main+0x60>
    1c3c:	000016d9 	.word	0x000016d9
    1c40:	00000821 	.word	0x00000821
    1c44:	00000899 	.word	0x00000899
    1c48:	20000000 	.word	0x20000000
    1c4c:	00000139 	.word	0x00000139
    1c50:	00000111 	.word	0x00000111
    1c54:	00000781 	.word	0x00000781
    1c58:	000007ed 	.word	0x000007ed
    1c5c:	00001491 	.word	0x00001491
    1c60:	40000400 	.word	0x40000400
    1c64:	200001e8 	.word	0x200001e8
    1c68:	200000ec 	.word	0x200000ec
    1c6c:	20000058 	.word	0x20000058
    1c70:	20000120 	.word	0x20000120
    1c74:	ff00ffff 	.word	0xff00ffff
    1c78:	00000725 	.word	0x00000725
    1c7c:	41004480 	.word	0x41004480

00001c80 <__aeabi_uidiv>:
    1c80:	2200      	movs	r2, #0
    1c82:	0843      	lsrs	r3, r0, #1
    1c84:	428b      	cmp	r3, r1
    1c86:	d374      	bcc.n	1d72 <__aeabi_uidiv+0xf2>
    1c88:	0903      	lsrs	r3, r0, #4
    1c8a:	428b      	cmp	r3, r1
    1c8c:	d35f      	bcc.n	1d4e <__aeabi_uidiv+0xce>
    1c8e:	0a03      	lsrs	r3, r0, #8
    1c90:	428b      	cmp	r3, r1
    1c92:	d344      	bcc.n	1d1e <__aeabi_uidiv+0x9e>
    1c94:	0b03      	lsrs	r3, r0, #12
    1c96:	428b      	cmp	r3, r1
    1c98:	d328      	bcc.n	1cec <__aeabi_uidiv+0x6c>
    1c9a:	0c03      	lsrs	r3, r0, #16
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d30d      	bcc.n	1cbc <__aeabi_uidiv+0x3c>
    1ca0:	22ff      	movs	r2, #255	; 0xff
    1ca2:	0209      	lsls	r1, r1, #8
    1ca4:	ba12      	rev	r2, r2
    1ca6:	0c03      	lsrs	r3, r0, #16
    1ca8:	428b      	cmp	r3, r1
    1caa:	d302      	bcc.n	1cb2 <__aeabi_uidiv+0x32>
    1cac:	1212      	asrs	r2, r2, #8
    1cae:	0209      	lsls	r1, r1, #8
    1cb0:	d065      	beq.n	1d7e <__aeabi_uidiv+0xfe>
    1cb2:	0b03      	lsrs	r3, r0, #12
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d319      	bcc.n	1cec <__aeabi_uidiv+0x6c>
    1cb8:	e000      	b.n	1cbc <__aeabi_uidiv+0x3c>
    1cba:	0a09      	lsrs	r1, r1, #8
    1cbc:	0bc3      	lsrs	r3, r0, #15
    1cbe:	428b      	cmp	r3, r1
    1cc0:	d301      	bcc.n	1cc6 <__aeabi_uidiv+0x46>
    1cc2:	03cb      	lsls	r3, r1, #15
    1cc4:	1ac0      	subs	r0, r0, r3
    1cc6:	4152      	adcs	r2, r2
    1cc8:	0b83      	lsrs	r3, r0, #14
    1cca:	428b      	cmp	r3, r1
    1ccc:	d301      	bcc.n	1cd2 <__aeabi_uidiv+0x52>
    1cce:	038b      	lsls	r3, r1, #14
    1cd0:	1ac0      	subs	r0, r0, r3
    1cd2:	4152      	adcs	r2, r2
    1cd4:	0b43      	lsrs	r3, r0, #13
    1cd6:	428b      	cmp	r3, r1
    1cd8:	d301      	bcc.n	1cde <__aeabi_uidiv+0x5e>
    1cda:	034b      	lsls	r3, r1, #13
    1cdc:	1ac0      	subs	r0, r0, r3
    1cde:	4152      	adcs	r2, r2
    1ce0:	0b03      	lsrs	r3, r0, #12
    1ce2:	428b      	cmp	r3, r1
    1ce4:	d301      	bcc.n	1cea <__aeabi_uidiv+0x6a>
    1ce6:	030b      	lsls	r3, r1, #12
    1ce8:	1ac0      	subs	r0, r0, r3
    1cea:	4152      	adcs	r2, r2
    1cec:	0ac3      	lsrs	r3, r0, #11
    1cee:	428b      	cmp	r3, r1
    1cf0:	d301      	bcc.n	1cf6 <__aeabi_uidiv+0x76>
    1cf2:	02cb      	lsls	r3, r1, #11
    1cf4:	1ac0      	subs	r0, r0, r3
    1cf6:	4152      	adcs	r2, r2
    1cf8:	0a83      	lsrs	r3, r0, #10
    1cfa:	428b      	cmp	r3, r1
    1cfc:	d301      	bcc.n	1d02 <__aeabi_uidiv+0x82>
    1cfe:	028b      	lsls	r3, r1, #10
    1d00:	1ac0      	subs	r0, r0, r3
    1d02:	4152      	adcs	r2, r2
    1d04:	0a43      	lsrs	r3, r0, #9
    1d06:	428b      	cmp	r3, r1
    1d08:	d301      	bcc.n	1d0e <__aeabi_uidiv+0x8e>
    1d0a:	024b      	lsls	r3, r1, #9
    1d0c:	1ac0      	subs	r0, r0, r3
    1d0e:	4152      	adcs	r2, r2
    1d10:	0a03      	lsrs	r3, r0, #8
    1d12:	428b      	cmp	r3, r1
    1d14:	d301      	bcc.n	1d1a <__aeabi_uidiv+0x9a>
    1d16:	020b      	lsls	r3, r1, #8
    1d18:	1ac0      	subs	r0, r0, r3
    1d1a:	4152      	adcs	r2, r2
    1d1c:	d2cd      	bcs.n	1cba <__aeabi_uidiv+0x3a>
    1d1e:	09c3      	lsrs	r3, r0, #7
    1d20:	428b      	cmp	r3, r1
    1d22:	d301      	bcc.n	1d28 <__aeabi_uidiv+0xa8>
    1d24:	01cb      	lsls	r3, r1, #7
    1d26:	1ac0      	subs	r0, r0, r3
    1d28:	4152      	adcs	r2, r2
    1d2a:	0983      	lsrs	r3, r0, #6
    1d2c:	428b      	cmp	r3, r1
    1d2e:	d301      	bcc.n	1d34 <__aeabi_uidiv+0xb4>
    1d30:	018b      	lsls	r3, r1, #6
    1d32:	1ac0      	subs	r0, r0, r3
    1d34:	4152      	adcs	r2, r2
    1d36:	0943      	lsrs	r3, r0, #5
    1d38:	428b      	cmp	r3, r1
    1d3a:	d301      	bcc.n	1d40 <__aeabi_uidiv+0xc0>
    1d3c:	014b      	lsls	r3, r1, #5
    1d3e:	1ac0      	subs	r0, r0, r3
    1d40:	4152      	adcs	r2, r2
    1d42:	0903      	lsrs	r3, r0, #4
    1d44:	428b      	cmp	r3, r1
    1d46:	d301      	bcc.n	1d4c <__aeabi_uidiv+0xcc>
    1d48:	010b      	lsls	r3, r1, #4
    1d4a:	1ac0      	subs	r0, r0, r3
    1d4c:	4152      	adcs	r2, r2
    1d4e:	08c3      	lsrs	r3, r0, #3
    1d50:	428b      	cmp	r3, r1
    1d52:	d301      	bcc.n	1d58 <__aeabi_uidiv+0xd8>
    1d54:	00cb      	lsls	r3, r1, #3
    1d56:	1ac0      	subs	r0, r0, r3
    1d58:	4152      	adcs	r2, r2
    1d5a:	0883      	lsrs	r3, r0, #2
    1d5c:	428b      	cmp	r3, r1
    1d5e:	d301      	bcc.n	1d64 <__aeabi_uidiv+0xe4>
    1d60:	008b      	lsls	r3, r1, #2
    1d62:	1ac0      	subs	r0, r0, r3
    1d64:	4152      	adcs	r2, r2
    1d66:	0843      	lsrs	r3, r0, #1
    1d68:	428b      	cmp	r3, r1
    1d6a:	d301      	bcc.n	1d70 <__aeabi_uidiv+0xf0>
    1d6c:	004b      	lsls	r3, r1, #1
    1d6e:	1ac0      	subs	r0, r0, r3
    1d70:	4152      	adcs	r2, r2
    1d72:	1a41      	subs	r1, r0, r1
    1d74:	d200      	bcs.n	1d78 <__aeabi_uidiv+0xf8>
    1d76:	4601      	mov	r1, r0
    1d78:	4152      	adcs	r2, r2
    1d7a:	4610      	mov	r0, r2
    1d7c:	4770      	bx	lr
    1d7e:	e7ff      	b.n	1d80 <__aeabi_uidiv+0x100>
    1d80:	b501      	push	{r0, lr}
    1d82:	2000      	movs	r0, #0
    1d84:	f000 f80c 	bl	1da0 <__aeabi_idiv0>
    1d88:	bd02      	pop	{r1, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)

00001d8c <__aeabi_uidivmod>:
    1d8c:	2900      	cmp	r1, #0
    1d8e:	d0f7      	beq.n	1d80 <__aeabi_uidiv+0x100>
    1d90:	b503      	push	{r0, r1, lr}
    1d92:	f7ff ff75 	bl	1c80 <__aeabi_uidiv>
    1d96:	bc0e      	pop	{r1, r2, r3}
    1d98:	4342      	muls	r2, r0
    1d9a:	1a89      	subs	r1, r1, r2
    1d9c:	4718      	bx	r3
    1d9e:	46c0      	nop			; (mov r8, r8)

00001da0 <__aeabi_idiv0>:
    1da0:	4770      	bx	lr
    1da2:	46c0      	nop			; (mov r8, r8)

00001da4 <__libc_init_array>:
    1da4:	4b0e      	ldr	r3, [pc, #56]	; (1de0 <__libc_init_array+0x3c>)
    1da6:	b570      	push	{r4, r5, r6, lr}
    1da8:	2500      	movs	r5, #0
    1daa:	1c1e      	adds	r6, r3, #0
    1dac:	4c0d      	ldr	r4, [pc, #52]	; (1de4 <__libc_init_array+0x40>)
    1dae:	1ae4      	subs	r4, r4, r3
    1db0:	10a4      	asrs	r4, r4, #2
    1db2:	42a5      	cmp	r5, r4
    1db4:	d004      	beq.n	1dc0 <__libc_init_array+0x1c>
    1db6:	00ab      	lsls	r3, r5, #2
    1db8:	58f3      	ldr	r3, [r6, r3]
    1dba:	4798      	blx	r3
    1dbc:	3501      	adds	r5, #1
    1dbe:	e7f8      	b.n	1db2 <__libc_init_array+0xe>
    1dc0:	f000 f902 	bl	1fc8 <_init>
    1dc4:	4b08      	ldr	r3, [pc, #32]	; (1de8 <__libc_init_array+0x44>)
    1dc6:	2500      	movs	r5, #0
    1dc8:	1c1e      	adds	r6, r3, #0
    1dca:	4c08      	ldr	r4, [pc, #32]	; (1dec <__libc_init_array+0x48>)
    1dcc:	1ae4      	subs	r4, r4, r3
    1dce:	10a4      	asrs	r4, r4, #2
    1dd0:	42a5      	cmp	r5, r4
    1dd2:	d004      	beq.n	1dde <__libc_init_array+0x3a>
    1dd4:	00ab      	lsls	r3, r5, #2
    1dd6:	58f3      	ldr	r3, [r6, r3]
    1dd8:	4798      	blx	r3
    1dda:	3501      	adds	r5, #1
    1ddc:	e7f8      	b.n	1dd0 <__libc_init_array+0x2c>
    1dde:	bd70      	pop	{r4, r5, r6, pc}
    1de0:	00001fd4 	.word	0x00001fd4
    1de4:	00001fd4 	.word	0x00001fd4
    1de8:	00001fd4 	.word	0x00001fd4
    1dec:	00001fd8 	.word	0x00001fd8

00001df0 <memcpy>:
    1df0:	2300      	movs	r3, #0
    1df2:	b510      	push	{r4, lr}
    1df4:	4293      	cmp	r3, r2
    1df6:	d003      	beq.n	1e00 <memcpy+0x10>
    1df8:	5ccc      	ldrb	r4, [r1, r3]
    1dfa:	54c4      	strb	r4, [r0, r3]
    1dfc:	3301      	adds	r3, #1
    1dfe:	e7f9      	b.n	1df4 <memcpy+0x4>
    1e00:	bd10      	pop	{r4, pc}
    1e02:	0000      	movs	r0, r0
    1e04:	000004e6 	.word	0x000004e6
    1e08:	00000374 	.word	0x00000374
    1e0c:	00000374 	.word	0x00000374
    1e10:	00000374 	.word	0x00000374
    1e14:	00000374 	.word	0x00000374
    1e18:	00000374 	.word	0x00000374
    1e1c:	00000374 	.word	0x00000374
    1e20:	00000374 	.word	0x00000374
    1e24:	00000374 	.word	0x00000374
    1e28:	00000374 	.word	0x00000374
    1e2c:	00000374 	.word	0x00000374
    1e30:	00000374 	.word	0x00000374
    1e34:	00000374 	.word	0x00000374
    1e38:	00000374 	.word	0x00000374
    1e3c:	00000374 	.word	0x00000374
    1e40:	00000374 	.word	0x00000374
    1e44:	000004d8 	.word	0x000004d8
    1e48:	00000374 	.word	0x00000374
    1e4c:	00000374 	.word	0x00000374
    1e50:	00000374 	.word	0x00000374
    1e54:	00000374 	.word	0x00000374
    1e58:	00000374 	.word	0x00000374
    1e5c:	00000374 	.word	0x00000374
    1e60:	00000374 	.word	0x00000374
    1e64:	00000374 	.word	0x00000374
    1e68:	00000374 	.word	0x00000374
    1e6c:	00000374 	.word	0x00000374
    1e70:	00000374 	.word	0x00000374
    1e74:	00000374 	.word	0x00000374
    1e78:	00000374 	.word	0x00000374
    1e7c:	00000374 	.word	0x00000374
    1e80:	00000374 	.word	0x00000374
    1e84:	000004ea 	.word	0x000004ea
    1e88:	00000374 	.word	0x00000374
    1e8c:	00000374 	.word	0x00000374
    1e90:	00000374 	.word	0x00000374
    1e94:	00000374 	.word	0x00000374
    1e98:	00000374 	.word	0x00000374
    1e9c:	00000374 	.word	0x00000374
    1ea0:	00000374 	.word	0x00000374
    1ea4:	00000374 	.word	0x00000374
    1ea8:	00000374 	.word	0x00000374
    1eac:	00000374 	.word	0x00000374
    1eb0:	00000374 	.word	0x00000374
    1eb4:	00000374 	.word	0x00000374
    1eb8:	00000374 	.word	0x00000374
    1ebc:	00000374 	.word	0x00000374
    1ec0:	00000374 	.word	0x00000374
    1ec4:	000004d4 	.word	0x000004d4
    1ec8:	0000037e 	.word	0x0000037e
    1ecc:	000004ac 	.word	0x000004ac
    1ed0:	000004c6 	.word	0x000004c6
    1ed4:	000004b4 	.word	0x000004b4
    1ed8:	00000002 	.word	0x00000002
    1edc:	00000003 	.word	0x00000003
    1ee0:	00000028 	.word	0x00000028
    1ee4:	00000029 	.word	0x00000029
    1ee8:	00000004 	.word	0x00000004
    1eec:	00000005 	.word	0x00000005
    1ef0:	00000006 	.word	0x00000006
    1ef4:	00000007 	.word	0x00000007
    1ef8:	00000020 	.word	0x00000020
    1efc:	00000021 	.word	0x00000021
    1f00:	00000022 	.word	0x00000022
    1f04:	00000023 	.word	0x00000023
    1f08:	00000024 	.word	0x00000024
    1f0c:	00000025 	.word	0x00000025
    1f10:	00000026 	.word	0x00000026
    1f14:	00000027 	.word	0x00000027
    1f18:	00000008 	.word	0x00000008
    1f1c:	00000009 	.word	0x00000009
    1f20:	0000000a 	.word	0x0000000a
    1f24:	0000000b 	.word	0x0000000b

00001f28 <tc_interrupt_vectors.10617>:
    1f28:	100f0e0d 14131211 42000800 42000c00     ...........B...B
    1f38:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    1f48:	0a090807 00000c0b 000010c6 000010ea     ................
    1f58:	000010ea 000010aa 000010aa 000010b0     ................
    1f68:	000010b6 000010cc 0000125c 0000126a     ........\...j...
    1f78:	0000126a 000011fe 00001202 00001210     j...............
    1f88:	0000121e 0000122c 42002000 42002400     ....,.... .B.$.B
    1f98:	42002800 42002c00 42003000 42003400     .(.B.,.B.0.B.4.B
    1fa8:	42003800 42003c00 14141313 16161515     .8.B.<.B........
    1fb8:	02000100 08000400 20001000 80004000     ........... .@..

00001fc8 <_init>:
    1fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fce:	bc08      	pop	{r3}
    1fd0:	469e      	mov	lr, r3
    1fd2:	4770      	bx	lr

00001fd4 <__init_array_start>:
    1fd4:	000000cd 	.word	0x000000cd

00001fd8 <_fini>:
    1fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fde:	bc08      	pop	{r3}
    1fe0:	469e      	mov	lr, r3
    1fe2:	4770      	bx	lr

00001fe4 <__fini_array_start>:
    1fe4:	000000a5 	.word	0x000000a5
