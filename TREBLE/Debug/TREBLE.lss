
TREBLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048c4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000048c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000450  2000000c  000048d0  0001000c  2**2
                  ALLOC
  3 .stack        00002004  2000045c  00004d20  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024d40  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000343c  00000000  00000000  00034dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002fd6  00000000  00000000  0003820b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000908  00000000  00000000  0003b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007b8  00000000  00000000  0003bae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014853  00000000  00000000  0003c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e9b5  00000000  00000000  00050af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006188d  00000000  00000000  0005f4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001da4  00000000  00000000  000c0d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002460 	.word	0x20002460
       4:	00003c0d 	.word	0x00003c0d
       8:	00003ca1 	.word	0x00003ca1
       c:	00003ca1 	.word	0x00003ca1
	...
      2c:	00003ca1 	.word	0x00003ca1
	...
      38:	00003ca1 	.word	0x00003ca1
      3c:	00003ca1 	.word	0x00003ca1
      40:	00003ca1 	.word	0x00003ca1
      44:	00003ca1 	.word	0x00003ca1
      48:	00003ca1 	.word	0x00003ca1
      4c:	00003ca1 	.word	0x00003ca1
      50:	00003ca1 	.word	0x00003ca1
      54:	00003ca1 	.word	0x00003ca1
      58:	00003ca1 	.word	0x00003ca1
      5c:	00000529 	.word	0x00000529
      60:	0000053d 	.word	0x0000053d
      64:	00000551 	.word	0x00000551
      68:	00000565 	.word	0x00000565
      6c:	00000579 	.word	0x00000579
      70:	0000058d 	.word	0x0000058d
      74:	00003545 	.word	0x00003545
      78:	00003559 	.word	0x00003559
      7c:	0000356d 	.word	0x0000356d
      80:	00003581 	.word	0x00003581
      84:	00003595 	.word	0x00003595
      88:	000035a9 	.word	0x000035a9
      8c:	000035bd 	.word	0x000035bd
      90:	000035d1 	.word	0x000035d1
      94:	00001751 	.word	0x00001751
      98:	00003ca1 	.word	0x00003ca1
      9c:	00003ca1 	.word	0x00003ca1
      a0:	00003ca1 	.word	0x00003ca1

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	000048c4 	.word	0x000048c4

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	000048c4 	.word	0x000048c4
      f8:	20000010 	.word	0x20000010
      fc:	000048c4 	.word	0x000048c4
     100:	00000000 	.word	0x00000000

00000104 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
     10a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     10c:	687b      	ldr	r3, [r7, #4]
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     112:	687b      	ldr	r3, [r7, #4]
     114:	2201      	movs	r2, #1
     116:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
     118:	687b      	ldr	r3, [r7, #4]
     11a:	2204      	movs	r2, #4
     11c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     11e:	687b      	ldr	r3, [r7, #4]
     120:	220c      	movs	r2, #12
     122:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     124:	687b      	ldr	r3, [r7, #4]
     126:	2200      	movs	r2, #0
     128:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	2200      	movs	r2, #0
     12e:	715a      	strb	r2, [r3, #5]
}
     130:	46bd      	mov	sp, r7
     132:	b002      	add	sp, #8
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)

00000138 <configure_wdt>:

void configure_wdt(void);

//! [setup]
void configure_wdt(void)
{
     138:	b580      	push	{r7, lr}
     13a:	b082      	sub	sp, #8
     13c:	af00      	add	r7, sp, #0
	 * with the default module settings. */
	//! [setup_1]
	struct wdt_conf config_wdt;
	//! [setup_1]
	//! [setup_2]
	wdt_get_config_defaults(&config_wdt);
     13e:	1c3b      	adds	r3, r7, #0
     140:	1c18      	adds	r0, r3, #0
     142:	4b09      	ldr	r3, [pc, #36]	; (168 <configure_wdt+0x30>)
     144:	4798      	blx	r3
	//! [setup_2]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on      = false;
     146:	1c3b      	adds	r3, r7, #0
     148:	2200      	movs	r2, #0
     14a:	701a      	strb	r2, [r3, #0]
#if !((SAML21) || (SAMC21) || (SAML22))
	config_wdt.clock_source   = GCLK_GENERATOR_4;
     14c:	1c3b      	adds	r3, r7, #0
     14e:	2204      	movs	r2, #4
     150:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_2048CLK;
     152:	1c3b      	adds	r3, r7, #0
     154:	2209      	movs	r2, #9
     156:	70da      	strb	r2, [r3, #3]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
     158:	1c3b      	adds	r3, r7, #0
     15a:	1c18      	adds	r0, r3, #0
     15c:	4b03      	ldr	r3, [pc, #12]	; (16c <configure_wdt+0x34>)
     15e:	4798      	blx	r3
	//! [setup_4]
}
     160:	46bd      	mov	sp, r7
     162:	b002      	add	sp, #8
     164:	bd80      	pop	{r7, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	00000105 	.word	0x00000105
     16c:	00000725 	.word	0x00000725

00000170 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     170:	b580      	push	{r7, lr}
     172:	b082      	sub	sp, #8
     174:	af00      	add	r7, sp, #0
     176:	1c02      	adds	r2, r0, #0
     178:	1dfb      	adds	r3, r7, #7
     17a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <system_interrupt_enable+0x28>)
     17e:	1dfa      	adds	r2, r7, #7
     180:	7812      	ldrb	r2, [r2, #0]
     182:	1c11      	adds	r1, r2, #0
     184:	221f      	movs	r2, #31
     186:	400a      	ands	r2, r1
     188:	2101      	movs	r1, #1
     18a:	4091      	lsls	r1, r2
     18c:	1c0a      	adds	r2, r1, #0
     18e:	601a      	str	r2, [r3, #0]
}
     190:	46bd      	mov	sp, r7
     192:	b002      	add	sp, #8
     194:	bd80      	pop	{r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	e000e100 	.word	0xe000e100

0000019c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     19c:	b580      	push	{r7, lr}
     19e:	b084      	sub	sp, #16
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
     1aa:	68fb      	ldr	r3, [r7, #12]
     1ac:	8a1b      	ldrh	r3, [r3, #16]
     1ae:	b29b      	uxth	r3, r3
     1b0:	1c1a      	adds	r2, r3, #0
     1b2:	2380      	movs	r3, #128	; 0x80
     1b4:	021b      	lsls	r3, r3, #8
     1b6:	4013      	ands	r3, r2
     1b8:	1e5a      	subs	r2, r3, #1
     1ba:	4193      	sbcs	r3, r2
     1bc:	b2db      	uxtb	r3, r3
#  endif
}
     1be:	1c18      	adds	r0, r3, #0
     1c0:	46bd      	mov	sp, r7
     1c2:	b004      	add	sp, #16
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)

000001c8 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b082      	sub	sp, #8
     1cc:	af00      	add	r7, sp, #0
     1ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     1d0:	687b      	ldr	r3, [r7, #4]
     1d2:	2201      	movs	r2, #1
     1d4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	2200      	movs	r2, #0
     1da:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	2200      	movs	r2, #0
     1e0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	22c0      	movs	r2, #192	; 0xc0
     1e6:	0392      	lsls	r2, r2, #14
     1e8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	2200      	movs	r2, #0
     1ee:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	2200      	movs	r2, #0
     1f4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	2201      	movs	r2, #1
     1fa:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	2220      	movs	r2, #32
     200:	2100      	movs	r1, #0
     202:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     204:	687b      	ldr	r3, [r7, #4]
     206:	3314      	adds	r3, #20
     208:	1c18      	adds	r0, r3, #0
     20a:	2100      	movs	r1, #0
     20c:	220c      	movs	r2, #12
     20e:	4b0a      	ldr	r3, [pc, #40]	; (238 <spi_get_config_defaults+0x70>)
     210:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     212:	687b      	ldr	r3, [r7, #4]
     214:	4a09      	ldr	r2, [pc, #36]	; (23c <spi_get_config_defaults+0x74>)
     216:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	2200      	movs	r2, #0
     21c:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
     21e:	687b      	ldr	r3, [r7, #4]
     220:	2200      	movs	r2, #0
     222:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
     224:	687b      	ldr	r3, [r7, #4]
     226:	2200      	movs	r2, #0
     228:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	2200      	movs	r2, #0
     22e:	631a      	str	r2, [r3, #48]	; 0x30

};
     230:	46bd      	mov	sp, r7
     232:	b002      	add	sp, #8
     234:	bd80      	pop	{r7, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	000046b7 	.word	0x000046b7
     23c:	000186a0 	.word	0x000186a0

00000240 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     240:	b580      	push	{r7, lr}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     248:	687b      	ldr	r3, [r7, #4]
     24a:	681b      	ldr	r3, [r3, #0]
     24c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     24e:	687b      	ldr	r3, [r7, #4]
     250:	681b      	ldr	r3, [r3, #0]
     252:	1c18      	adds	r0, r3, #0
     254:	4b0a      	ldr	r3, [pc, #40]	; (280 <spi_enable+0x40>)
     256:	4798      	blx	r3
     258:	1c03      	adds	r3, r0, #0
     25a:	1c18      	adds	r0, r3, #0
     25c:	4b09      	ldr	r3, [pc, #36]	; (284 <spi_enable+0x44>)
     25e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     260:	46c0      	nop			; (mov r8, r8)
     262:	687b      	ldr	r3, [r7, #4]
     264:	1c18      	adds	r0, r3, #0
     266:	4b08      	ldr	r3, [pc, #32]	; (288 <spi_enable+0x48>)
     268:	4798      	blx	r3
     26a:	1e03      	subs	r3, r0, #0
     26c:	d1f9      	bne.n	262 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     26e:	68fb      	ldr	r3, [r7, #12]
     270:	681b      	ldr	r3, [r3, #0]
     272:	2202      	movs	r2, #2
     274:	431a      	orrs	r2, r3
     276:	68fb      	ldr	r3, [r7, #12]
     278:	601a      	str	r2, [r3, #0]
}
     27a:	46bd      	mov	sp, r7
     27c:	b004      	add	sp, #16
     27e:	bd80      	pop	{r7, pc}
     280:	000004d5 	.word	0x000004d5
     284:	00000171 	.word	0x00000171
     288:	0000019d 	.word	0x0000019d

0000028c <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
     28c:	b580      	push	{r7, lr}
     28e:	b082      	sub	sp, #8
     290:	af00      	add	r7, sp, #0
     292:	6078      	str	r0, [r7, #4]
     294:	1c0a      	adds	r2, r1, #0
     296:	1cfb      	adds	r3, r7, #3
     298:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	222f      	movs	r2, #47	; 0x2f
     29e:	5c9b      	ldrb	r3, [r3, r2]
     2a0:	b2d9      	uxtb	r1, r3
     2a2:	1cfb      	adds	r3, r7, #3
     2a4:	781b      	ldrb	r3, [r3, #0]
     2a6:	2201      	movs	r2, #1
     2a8:	409a      	lsls	r2, r3
     2aa:	1c13      	adds	r3, r2, #0
     2ac:	b2db      	uxtb	r3, r3
     2ae:	1c0a      	adds	r2, r1, #0
     2b0:	4313      	orrs	r3, r2
     2b2:	b2db      	uxtb	r3, r3
     2b4:	b2d9      	uxtb	r1, r3
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	222f      	movs	r2, #47	; 0x2f
     2ba:	5499      	strb	r1, [r3, r2]
}
     2bc:	46bd      	mov	sp, r7
     2be:	b002      	add	sp, #8
     2c0:	bd80      	pop	{r7, pc}
     2c2:	46c0      	nop			; (mov r8, r8)

000002c4 <configure_spi_slave>:
uint8_t get_keyQ(void);


//! [configure_spi]
void configure_spi_slave(void)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b08e      	sub	sp, #56	; 0x38
     2c8:	af00      	add	r7, sp, #0
//! [config]
	struct spi_config config_spi_slave;
//! [config]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_slave);
     2ca:	1d3b      	adds	r3, r7, #4
     2cc:	1c18      	adds	r0, r3, #0
     2ce:	4b14      	ldr	r3, [pc, #80]	; (320 <configure_spi_slave+0x5c>)
     2d0:	4798      	blx	r3
//! [conf_defaults]
//! [conf_spi_slave_instance]
	config_spi_slave.mode = SPI_MODE_SLAVE;
     2d2:	1d3b      	adds	r3, r7, #4
     2d4:	2200      	movs	r2, #0
     2d6:	701a      	strb	r2, [r3, #0]
//! [conf_spi_slave_instance]
//! [conf_preload]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     2d8:	1d3b      	adds	r3, r7, #4
     2da:	2201      	movs	r2, #1
     2dc:	771a      	strb	r2, [r3, #28]
//! [conf_preload]
//! [conf_format]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     2de:	1d3b      	adds	r3, r7, #4
     2e0:	2200      	movs	r2, #0
     2e2:	615a      	str	r2, [r3, #20]
	config_spi_slave.pinmux_pad1 = EXT1_SPI_SERCOM_PINMUX_PAD1;
	config_spi_slave.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
	config_spi_slave.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
	spi_init(&spi_slave_instance, EXT1_SPI_MODULE, &config_spi_slave);
	//! [init]	*/
	config_spi_slave.mux_setting = TREBLE_SPI_SERCOM_MUX_SETTING;
     2e4:	1d3b      	adds	r3, r7, #4
     2e6:	2280      	movs	r2, #128	; 0x80
     2e8:	0252      	lsls	r2, r2, #9
     2ea:	60da      	str	r2, [r3, #12]
	//! [mux_setting]
	/* Configure pad 0 for data in */
	//! [di]
	config_spi_slave.pinmux_pad0 = TREBLE_SPI_SERCOM_PINMUX_PAD0;
     2ec:	1d3b      	adds	r3, r7, #4
     2ee:	4a0d      	ldr	r2, [pc, #52]	; (324 <configure_spi_slave+0x60>)
     2f0:	625a      	str	r2, [r3, #36]	; 0x24
	//! [di]
	/* Configure pad 1 as unused */
	//! [ss]
	config_spi_slave.pinmux_pad1 = TREBLE_SPI_SERCOM_PINMUX_PAD1;
     2f2:	1d3b      	adds	r3, r7, #4
     2f4:	4a0c      	ldr	r2, [pc, #48]	; (328 <configure_spi_slave+0x64>)
     2f6:	629a      	str	r2, [r3, #40]	; 0x28
	//! [ss]
	/* Configure pad 2 for data out */
	//! [do]
	config_spi_slave.pinmux_pad2 = TREBLE_SPI_SERCOM_PINMUX_PAD2;
     2f8:	1d3b      	adds	r3, r7, #4
     2fa:	4a0c      	ldr	r2, [pc, #48]	; (32c <configure_spi_slave+0x68>)
     2fc:	62da      	str	r2, [r3, #44]	; 0x2c
	//! [do]
	/* Configure pad 3 for SCK */
	//! [sck]
	config_spi_slave.pinmux_pad3 = TREBLE_SPI_SERCOM_PINMUX_PAD3;
     2fe:	1d3b      	adds	r3, r7, #4
     300:	4a0b      	ldr	r2, [pc, #44]	; (330 <configure_spi_slave+0x6c>)
     302:	631a      	str	r2, [r3, #48]	; 0x30
	//! [sck]
	//! [init]
	spi_init(&spi_slave_instance, TREBLE_SPI_MODULE, &config_spi_slave);
     304:	4a0b      	ldr	r2, [pc, #44]	; (334 <configure_spi_slave+0x70>)
     306:	490c      	ldr	r1, [pc, #48]	; (338 <configure_spi_slave+0x74>)
     308:	1d3b      	adds	r3, r7, #4
     30a:	1c10      	adds	r0, r2, #0
     30c:	1c1a      	adds	r2, r3, #0
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <configure_spi_slave+0x78>)
     310:	4798      	blx	r3
	//! [init]

//! [enable]
	spi_enable(&spi_slave_instance);
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <configure_spi_slave+0x70>)
     314:	1c18      	adds	r0, r3, #0
     316:	4b0a      	ldr	r3, [pc, #40]	; (340 <configure_spi_slave+0x7c>)
     318:	4798      	blx	r3
//! [enable]

}
     31a:	46bd      	mov	sp, r7
     31c:	b00e      	add	sp, #56	; 0x38
     31e:	bd80      	pop	{r7, pc}
     320:	000001c9 	.word	0x000001c9
     324:	002c0002 	.word	0x002c0002
     328:	002d0002 	.word	0x002d0002
     32c:	002e0002 	.word	0x002e0002
     330:	002f0002 	.word	0x002f0002
     334:	20000220 	.word	0x20000220
     338:	42001800 	.word	0x42001800
     33c:	0000253d 	.word	0x0000253d
     340:	00000241 	.word	0x00000241

00000344 <spi_transceive_one>:
void spi_transceive_one(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     344:	b580      	push	{r7, lr}
     346:	b086      	sub	sp, #24
     348:	af00      	add	r7, sp, #0
     34a:	60f8      	str	r0, [r7, #12]
     34c:	60b9      	str	r1, [r7, #8]
     34e:	607a      	str	r2, [r7, #4]
     350:	1c1a      	adds	r2, r3, #0
     352:	1cbb      	adds	r3, r7, #2
     354:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
*/

	// Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     356:	68fb      	ldr	r3, [r7, #12]
     358:	1cba      	adds	r2, r7, #2
     35a:	8812      	ldrh	r2, [r2, #0]
     35c:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = length;
     35e:	68fb      	ldr	r3, [r7, #12]
     360:	1cba      	adds	r2, r7, #2
     362:	8812      	ldrh	r2, [r2, #0]
     364:	851a      	strh	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr = rx_data;
     366:	68fb      	ldr	r3, [r7, #12]
     368:	687a      	ldr	r2, [r7, #4]
     36a:	621a      	str	r2, [r3, #32]
	module->tx_buffer_ptr = tx_data;
     36c:	68fb      	ldr	r3, [r7, #12]
     36e:	68ba      	ldr	r2, [r7, #8]
     370:	625a      	str	r2, [r3, #36]	; 0x24
	module->status = STATUS_BUSY;
     372:	68fb      	ldr	r3, [r7, #12]
     374:	2230      	movs	r2, #48	; 0x30
     376:	2105      	movs	r1, #5
     378:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
     37a:	68fb      	ldr	r3, [r7, #12]
     37c:	2202      	movs	r2, #2
     37e:	721a      	strb	r2, [r3, #8]

	// Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
     380:	68fb      	ldr	r3, [r7, #12]
     382:	681b      	ldr	r3, [r3, #0]
     384:	617b      	str	r3, [r7, #20]
//		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY | SPI_INTERRUPT_FLAG_RX_COMPLETE | SPI_INTERRUPT_FLAG_TX_COMPLETE);
	hw->INTENSET.reg = (0 | SPI_INTERRUPT_FLAG_TX_COMPLETE);
     386:	697b      	ldr	r3, [r7, #20]
     388:	2202      	movs	r2, #2
     38a:	735a      	strb	r2, [r3, #13]

}
     38c:	46bd      	mov	sp, r7
     38e:	b006      	add	sp, #24
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)

00000394 <spi_read_byte>:
}
*/


uint8_t spi_read_byte(void)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
	uint8_t received_data = (spi_slave_instance.hw->USART.DATA.reg & SERCOM_SPI_DATA_MASK);
     39a:	4b06      	ldr	r3, [pc, #24]	; (3b4 <spi_read_byte+0x20>)
     39c:	681b      	ldr	r3, [r3, #0]
     39e:	8b1b      	ldrh	r3, [r3, #24]
     3a0:	b29a      	uxth	r2, r3
     3a2:	1dfb      	adds	r3, r7, #7
     3a4:	701a      	strb	r2, [r3, #0]

	return received_data;
     3a6:	1dfb      	adds	r3, r7, #7
     3a8:	781b      	ldrb	r3, [r3, #0]
}
     3aa:	1c18      	adds	r0, r3, #0
     3ac:	46bd      	mov	sp, r7
     3ae:	b002      	add	sp, #8
     3b0:	bd80      	pop	{r7, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	20000220 	.word	0x20000220

000003b8 <spi_slave_callbacks>:

extern 	uint8_t velocityCmdRx;
extern struct keyQ_def keyQ;

void spi_slave_callbacks (void)
{	
     3b8:	b598      	push	{r3, r4, r7, lr}
     3ba:	af00      	add	r7, sp, #0
//	port_pin_set_output_level(TP41_PIN,0);
//	port_pin_toggle_output_level(TP41_PIN);	

	velocityCmdRx = 	*buffer_rx;
     3bc:	4b11      	ldr	r3, [pc, #68]	; (404 <spi_slave_callbacks+0x4c>)
     3be:	781a      	ldrb	r2, [r3, #0]
     3c0:	4b11      	ldr	r3, [pc, #68]	; (408 <spi_slave_callbacks+0x50>)
     3c2:	701a      	strb	r2, [r3, #0]
	transfer_complete_spi_slave= true;
     3c4:	4b11      	ldr	r3, [pc, #68]	; (40c <spi_slave_callbacks+0x54>)
     3c6:	2201      	movs	r2, #1
     3c8:	701a      	strb	r2, [r3, #0]

	if (( keyQ.buff_in - keyQ.buff_out) != 0)			// key in Q
     3ca:	4b11      	ldr	r3, [pc, #68]	; (410 <spi_slave_callbacks+0x58>)
     3cc:	2240      	movs	r2, #64	; 0x40
     3ce:	5c9a      	ldrb	r2, [r3, r2]
     3d0:	4b0f      	ldr	r3, [pc, #60]	; (410 <spi_slave_callbacks+0x58>)
     3d2:	2141      	movs	r1, #65	; 0x41
     3d4:	5c5b      	ldrb	r3, [r3, r1]
     3d6:	429a      	cmp	r2, r3
     3d8:	d006      	beq.n	3e8 <spi_slave_callbacks+0x30>
	{
		tx_note[0] = get_keyQ();
     3da:	4b0e      	ldr	r3, [pc, #56]	; (414 <spi_slave_callbacks+0x5c>)
     3dc:	4798      	blx	r3
     3de:	1c03      	adds	r3, r0, #0
     3e0:	1c1a      	adds	r2, r3, #0
     3e2:	4b0d      	ldr	r3, [pc, #52]	; (418 <spi_slave_callbacks+0x60>)
     3e4:	701a      	strb	r2, [r3, #0]
     3e6:	e002      	b.n	3ee <spi_slave_callbacks+0x36>
	}
	else											// empty
	{
		tx_note[0] = 0x80;
     3e8:	4b0b      	ldr	r3, [pc, #44]	; (418 <spi_slave_callbacks+0x60>)
     3ea:	2280      	movs	r2, #128	; 0x80
     3ec:	701a      	strb	r2, [r3, #0]
	}
	spi_transceive_one(&spi_slave_instance, tx_note,buffer_rx,1);
     3ee:	490b      	ldr	r1, [pc, #44]	; (41c <spi_slave_callbacks+0x64>)
     3f0:	4a09      	ldr	r2, [pc, #36]	; (418 <spi_slave_callbacks+0x60>)
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <spi_slave_callbacks+0x4c>)
     3f4:	1c08      	adds	r0, r1, #0
     3f6:	1c11      	adds	r1, r2, #0
     3f8:	1c1a      	adds	r2, r3, #0
     3fa:	2301      	movs	r3, #1
     3fc:	4c08      	ldr	r4, [pc, #32]	; (420 <spi_slave_callbacks+0x68>)
     3fe:	47a0      	blx	r4
}
     400:	46bd      	mov	sp, r7
     402:	bd98      	pop	{r3, r4, r7, pc}
     404:	20000278 	.word	0x20000278
     408:	20000009 	.word	0x20000009
     40c:	20000064 	.word	0x20000064
     410:	2000008c 	.word	0x2000008c
     414:	00000bbd 	.word	0x00000bbd
     418:	20000438 	.word	0x20000438
     41c:	20000220 	.word	0x20000220
     420:	00000345 	.word	0x00000345

00000424 <configure_spi_slave_callbacks>:

void configure_spi_slave_callbacks(void)
{
     424:	b580      	push	{r7, lr}
     426:	af00      	add	r7, sp, #0
	spi_register_callback(&spi_slave_instance, spi_slave_callbacks,SPI_CALLBACK_BUFFER_TRANSMITTED);
     428:	4a06      	ldr	r2, [pc, #24]	; (444 <configure_spi_slave_callbacks+0x20>)
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <configure_spi_slave_callbacks+0x24>)
     42c:	1c10      	adds	r0, r2, #0
     42e:	1c19      	adds	r1, r3, #0
     430:	2200      	movs	r2, #0
     432:	4b06      	ldr	r3, [pc, #24]	; (44c <configure_spi_slave_callbacks+0x28>)
     434:	4798      	blx	r3
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSMITTED);
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <configure_spi_slave_callbacks+0x20>)
     438:	1c18      	adds	r0, r3, #0
     43a:	2100      	movs	r1, #0
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <configure_spi_slave_callbacks+0x2c>)
     43e:	4798      	blx	r3

}
     440:	46bd      	mov	sp, r7
     442:	bd80      	pop	{r7, pc}
     444:	20000220 	.word	0x20000220
     448:	000003b9 	.word	0x000003b9
     44c:	000005a1 	.word	0x000005a1
     450:	0000028d 	.word	0x0000028d

00000454 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	1c02      	adds	r2, r0, #0
     45c:	1dfb      	adds	r3, r7, #7
     45e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     460:	46bd      	mov	sp, r7
     462:	b002      	add	sp, #8
     464:	bd80      	pop	{r7, pc}
     466:	46c0      	nop			; (mov r8, r8)

00000468 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     468:	b580      	push	{r7, lr}
     46a:	b084      	sub	sp, #16
     46c:	af00      	add	r7, sp, #0
     46e:	1c02      	adds	r2, r0, #0
     470:	6039      	str	r1, [r7, #0]
     472:	1dfb      	adds	r3, r7, #7
     474:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     476:	4b13      	ldr	r3, [pc, #76]	; (4c4 <_sercom_set_handler+0x5c>)
     478:	781b      	ldrb	r3, [r3, #0]
     47a:	2201      	movs	r2, #1
     47c:	4053      	eors	r3, r2
     47e:	b2db      	uxtb	r3, r3
     480:	2b00      	cmp	r3, #0
     482:	d015      	beq.n	4b0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     484:	2300      	movs	r3, #0
     486:	60fb      	str	r3, [r7, #12]
     488:	e00c      	b.n	4a4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     48a:	4b0f      	ldr	r3, [pc, #60]	; (4c8 <_sercom_set_handler+0x60>)
     48c:	68fa      	ldr	r2, [r7, #12]
     48e:	0092      	lsls	r2, r2, #2
     490:	490e      	ldr	r1, [pc, #56]	; (4cc <_sercom_set_handler+0x64>)
     492:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     494:	4b0e      	ldr	r3, [pc, #56]	; (4d0 <_sercom_set_handler+0x68>)
     496:	68fa      	ldr	r2, [r7, #12]
     498:	0092      	lsls	r2, r2, #2
     49a:	2100      	movs	r1, #0
     49c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     49e:	68fb      	ldr	r3, [r7, #12]
     4a0:	3301      	adds	r3, #1
     4a2:	60fb      	str	r3, [r7, #12]
     4a4:	68fb      	ldr	r3, [r7, #12]
     4a6:	2b05      	cmp	r3, #5
     4a8:	d9ef      	bls.n	48a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     4aa:	4b06      	ldr	r3, [pc, #24]	; (4c4 <_sercom_set_handler+0x5c>)
     4ac:	2201      	movs	r2, #1
     4ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     4b0:	1dfb      	adds	r3, r7, #7
     4b2:	781a      	ldrb	r2, [r3, #0]
     4b4:	4b04      	ldr	r3, [pc, #16]	; (4c8 <_sercom_set_handler+0x60>)
     4b6:	0092      	lsls	r2, r2, #2
     4b8:	6839      	ldr	r1, [r7, #0]
     4ba:	50d1      	str	r1, [r2, r3]
}
     4bc:	46bd      	mov	sp, r7
     4be:	b004      	add	sp, #16
     4c0:	bd80      	pop	{r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	20000028 	.word	0x20000028
     4c8:	2000002c 	.word	0x2000002c
     4cc:	00000455 	.word	0x00000455
     4d0:	20000068 	.word	0x20000068

000004d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     4d4:	b590      	push	{r4, r7, lr}
     4d6:	b085      	sub	sp, #20
     4d8:	af00      	add	r7, sp, #0
     4da:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     4dc:	2308      	movs	r3, #8
     4de:	18fa      	adds	r2, r7, r3
     4e0:	4b0e      	ldr	r3, [pc, #56]	; (51c <_sercom_get_interrupt_vector+0x48>)
     4e2:	1c11      	adds	r1, r2, #0
     4e4:	1c1a      	adds	r2, r3, #0
     4e6:	2306      	movs	r3, #6
     4e8:	1c08      	adds	r0, r1, #0
     4ea:	1c11      	adds	r1, r2, #0
     4ec:	1c1a      	adds	r2, r3, #0
     4ee:	4b0c      	ldr	r3, [pc, #48]	; (520 <_sercom_get_interrupt_vector+0x4c>)
     4f0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     4f2:	230f      	movs	r3, #15
     4f4:	18fc      	adds	r4, r7, r3
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	1c18      	adds	r0, r3, #0
     4fa:	4b0a      	ldr	r3, [pc, #40]	; (524 <_sercom_get_interrupt_vector+0x50>)
     4fc:	4798      	blx	r3
     4fe:	1c03      	adds	r3, r0, #0
     500:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     502:	230f      	movs	r3, #15
     504:	18fb      	adds	r3, r7, r3
     506:	781b      	ldrb	r3, [r3, #0]
     508:	2208      	movs	r2, #8
     50a:	18ba      	adds	r2, r7, r2
     50c:	5cd3      	ldrb	r3, [r2, r3]
     50e:	b2db      	uxtb	r3, r3
     510:	b25b      	sxtb	r3, r3
}
     512:	1c18      	adds	r0, r3, #0
     514:	46bd      	mov	sp, r7
     516:	b005      	add	sp, #20
     518:	bd90      	pop	{r4, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	000046c8 	.word	0x000046c8
     520:	000046a5 	.word	0x000046a5
     524:	00002215 	.word	0x00002215

00000528 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     528:	b580      	push	{r7, lr}
     52a:	af00      	add	r7, sp, #0
     52c:	4b02      	ldr	r3, [pc, #8]	; (538 <SERCOM0_Handler+0x10>)
     52e:	681b      	ldr	r3, [r3, #0]
     530:	2000      	movs	r0, #0
     532:	4798      	blx	r3
     534:	46bd      	mov	sp, r7
     536:	bd80      	pop	{r7, pc}
     538:	2000002c 	.word	0x2000002c

0000053c <SERCOM1_Handler>:
     53c:	b580      	push	{r7, lr}
     53e:	af00      	add	r7, sp, #0
     540:	4b02      	ldr	r3, [pc, #8]	; (54c <SERCOM1_Handler+0x10>)
     542:	685b      	ldr	r3, [r3, #4]
     544:	2001      	movs	r0, #1
     546:	4798      	blx	r3
     548:	46bd      	mov	sp, r7
     54a:	bd80      	pop	{r7, pc}
     54c:	2000002c 	.word	0x2000002c

00000550 <SERCOM2_Handler>:
     550:	b580      	push	{r7, lr}
     552:	af00      	add	r7, sp, #0
     554:	4b02      	ldr	r3, [pc, #8]	; (560 <SERCOM2_Handler+0x10>)
     556:	689b      	ldr	r3, [r3, #8]
     558:	2002      	movs	r0, #2
     55a:	4798      	blx	r3
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}
     560:	2000002c 	.word	0x2000002c

00000564 <SERCOM3_Handler>:
     564:	b580      	push	{r7, lr}
     566:	af00      	add	r7, sp, #0
     568:	4b02      	ldr	r3, [pc, #8]	; (574 <SERCOM3_Handler+0x10>)
     56a:	68db      	ldr	r3, [r3, #12]
     56c:	2003      	movs	r0, #3
     56e:	4798      	blx	r3
     570:	46bd      	mov	sp, r7
     572:	bd80      	pop	{r7, pc}
     574:	2000002c 	.word	0x2000002c

00000578 <SERCOM4_Handler>:
     578:	b580      	push	{r7, lr}
     57a:	af00      	add	r7, sp, #0
     57c:	4b02      	ldr	r3, [pc, #8]	; (588 <SERCOM4_Handler+0x10>)
     57e:	691b      	ldr	r3, [r3, #16]
     580:	2004      	movs	r0, #4
     582:	4798      	blx	r3
     584:	46bd      	mov	sp, r7
     586:	bd80      	pop	{r7, pc}
     588:	2000002c 	.word	0x2000002c

0000058c <SERCOM5_Handler>:
     58c:	b580      	push	{r7, lr}
     58e:	af00      	add	r7, sp, #0
     590:	4b02      	ldr	r3, [pc, #8]	; (59c <SERCOM5_Handler+0x10>)
     592:	695b      	ldr	r3, [r3, #20]
     594:	2005      	movs	r0, #5
     596:	4798      	blx	r3
     598:	46bd      	mov	sp, r7
     59a:	bd80      	pop	{r7, pc}
     59c:	2000002c 	.word	0x2000002c

000005a0 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
     5a0:	b580      	push	{r7, lr}
     5a2:	b084      	sub	sp, #16
     5a4:	af00      	add	r7, sp, #0
     5a6:	60f8      	str	r0, [r7, #12]
     5a8:	60b9      	str	r1, [r7, #8]
     5aa:	1dfb      	adds	r3, r7, #7
     5ac:	701a      	strb	r2, [r3, #0]
	// Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	// Register callback function */
	module->callback[callback_type] = callback_func;
     5ae:	1dfb      	adds	r3, r7, #7
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	68fa      	ldr	r2, [r7, #12]
     5b4:	3302      	adds	r3, #2
     5b6:	009b      	lsls	r3, r3, #2
     5b8:	18d3      	adds	r3, r2, r3
     5ba:	68ba      	ldr	r2, [r7, #8]
     5bc:	605a      	str	r2, [r3, #4]

	// Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     5be:	68fb      	ldr	r3, [r7, #12]
     5c0:	222e      	movs	r2, #46	; 0x2e
     5c2:	5c9b      	ldrb	r3, [r3, r2]
     5c4:	b2d9      	uxtb	r1, r3
     5c6:	1dfb      	adds	r3, r7, #7
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2201      	movs	r2, #1
     5cc:	409a      	lsls	r2, r3
     5ce:	1c13      	adds	r3, r2, #0
     5d0:	b2db      	uxtb	r3, r3
     5d2:	1c0a      	adds	r2, r1, #0
     5d4:	4313      	orrs	r3, r2
     5d6:	b2db      	uxtb	r3, r3
     5d8:	b2d9      	uxtb	r1, r3
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	222e      	movs	r2, #46	; 0x2e
     5de:	5499      	strb	r1, [r3, r2]
}
     5e0:	46bd      	mov	sp, r7
     5e2:	b004      	add	sp, #16
     5e4:	bd80      	pop	{r7, pc}
     5e6:	46c0      	nop			; (mov r8, r8)

000005e8 <_spi_interrupt_handler>:

uint32_t intCnt;

void _spi_interrupt_handler(
		uint8_t instance)
{
     5e8:	b590      	push	{r4, r7, lr}
     5ea:	b087      	sub	sp, #28
     5ec:	af00      	add	r7, sp, #0
     5ee:	1c02      	adds	r2, r0, #0
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	701a      	strb	r2, [r3, #0]
	uint8_t recData;	
	struct spi_module *module = (struct spi_module *)_sercom_instances[instance];
     5f4:	1dfb      	adds	r3, r7, #7
     5f6:	781a      	ldrb	r2, [r3, #0]
     5f8:	4b1b      	ldr	r3, [pc, #108]	; (668 <_spi_interrupt_handler+0x80>)
     5fa:	0092      	lsls	r2, r2, #2
     5fc:	58d3      	ldr	r3, [r2, r3]
     5fe:	617b      	str	r3, [r7, #20]
	
	SercomSpi *const spi_hw = &(module->hw->SPI);		// Pointer to the hardware module instance 
     600:	697b      	ldr	r3, [r7, #20]
     602:	681b      	ldr	r3, [r3, #0]
     604:	613b      	str	r3, [r7, #16]
	uint8_t data_to_send = *(module->tx_buffer_ptr);  	// Write value will be at least 8-bits long 
     606:	697b      	ldr	r3, [r7, #20]
     608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     60a:	230f      	movs	r3, #15
     60c:	18fb      	adds	r3, r7, r3
     60e:	7812      	ldrb	r2, [r2, #0]
     610:	701a      	strb	r2, [r3, #0]
	
	intCnt++;			
     612:	4b16      	ldr	r3, [pc, #88]	; (66c <_spi_interrupt_handler+0x84>)
     614:	681b      	ldr	r3, [r3, #0]
     616:	1c5a      	adds	r2, r3, #1
     618:	4b14      	ldr	r3, [pc, #80]	; (66c <_spi_interrupt_handler+0x84>)
     61a:	601a      	str	r2, [r3, #0]
		
	spi_hw->DATA.reg = data_to_send; // write char for next tx
     61c:	230f      	movs	r3, #15
     61e:	18fb      	adds	r3, r7, r3
     620:	781b      	ldrb	r3, [r3, #0]
     622:	b29a      	uxth	r2, r3
     624:	693b      	ldr	r3, [r7, #16]
     626:	831a      	strh	r2, [r3, #24]
	recData = 	spi_read_byte();	
     628:	230e      	movs	r3, #14
     62a:	18fc      	adds	r4, r7, r3
     62c:	4b10      	ldr	r3, [pc, #64]	; (670 <_spi_interrupt_handler+0x88>)
     62e:	4798      	blx	r3
     630:	1c03      	adds	r3, r0, #0
     632:	7023      	strb	r3, [r4, #0]
	*(module->rx_buffer_ptr) = recData;	 //spi_read_byte();								// read char from this rx
     634:	697b      	ldr	r3, [r7, #20]
     636:	6a1b      	ldr	r3, [r3, #32]
     638:	220e      	movs	r2, #14
     63a:	18ba      	adds	r2, r7, r2
     63c:	7812      	ldrb	r2, [r2, #0]
     63e:	701a      	strb	r2, [r3, #0]
	spi_hw->INTFLAG.reg = 7; // clear int flags
     640:	693b      	ldr	r3, [r7, #16]
     642:	2207      	movs	r2, #7
     644:	739a      	strb	r2, [r3, #14]
	spi_hw->INTENCLR.reg  = 2;	// enable new ints
     646:	693b      	ldr	r3, [r7, #16]
     648:	2202      	movs	r2, #2
     64a:	731a      	strb	r2, [r3, #12]
	module->status = STATUS_OK;
     64c:	697b      	ldr	r3, [r7, #20]
     64e:	2230      	movs	r2, #48	; 0x30
     650:	2100      	movs	r1, #0
     652:	5499      	strb	r1, [r3, r2]

	(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);	
     654:	697b      	ldr	r3, [r7, #20]
     656:	68db      	ldr	r3, [r3, #12]
     658:	697a      	ldr	r2, [r7, #20]
     65a:	1c10      	adds	r0, r2, #0
     65c:	4798      	blx	r3
	
	return;
     65e:	46c0      	nop			; (mov r8, r8)
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     660:	46bd      	mov	sp, r7
     662:	b007      	add	sp, #28
     664:	bd90      	pop	{r4, r7, pc}
     666:	46c0      	nop			; (mov r8, r8)
     668:	20000068 	.word	0x20000068
     66c:	20000080 	.word	0x20000080
     670:	00000395 	.word	0x00000395

00000674 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     674:	b580      	push	{r7, lr}
     676:	b082      	sub	sp, #8
     678:	af00      	add	r7, sp, #0
     67a:	1c02      	adds	r2, r0, #0
     67c:	6039      	str	r1, [r7, #0]
     67e:	1dfb      	adds	r3, r7, #7
     680:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     682:	1dfb      	adds	r3, r7, #7
     684:	781b      	ldrb	r3, [r3, #0]
     686:	2b01      	cmp	r3, #1
     688:	d00a      	beq.n	6a0 <system_apb_clock_set_mask+0x2c>
     68a:	2b02      	cmp	r3, #2
     68c:	d00f      	beq.n	6ae <system_apb_clock_set_mask+0x3a>
     68e:	2b00      	cmp	r3, #0
     690:	d114      	bne.n	6bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     692:	4b0e      	ldr	r3, [pc, #56]	; (6cc <system_apb_clock_set_mask+0x58>)
     694:	4a0d      	ldr	r2, [pc, #52]	; (6cc <system_apb_clock_set_mask+0x58>)
     696:	6991      	ldr	r1, [r2, #24]
     698:	683a      	ldr	r2, [r7, #0]
     69a:	430a      	orrs	r2, r1
     69c:	619a      	str	r2, [r3, #24]
			break;
     69e:	e00f      	b.n	6c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     6a0:	4b0a      	ldr	r3, [pc, #40]	; (6cc <system_apb_clock_set_mask+0x58>)
     6a2:	4a0a      	ldr	r2, [pc, #40]	; (6cc <system_apb_clock_set_mask+0x58>)
     6a4:	69d1      	ldr	r1, [r2, #28]
     6a6:	683a      	ldr	r2, [r7, #0]
     6a8:	430a      	orrs	r2, r1
     6aa:	61da      	str	r2, [r3, #28]
			break;
     6ac:	e008      	b.n	6c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6ae:	4b07      	ldr	r3, [pc, #28]	; (6cc <system_apb_clock_set_mask+0x58>)
     6b0:	4a06      	ldr	r2, [pc, #24]	; (6cc <system_apb_clock_set_mask+0x58>)
     6b2:	6a11      	ldr	r1, [r2, #32]
     6b4:	683a      	ldr	r2, [r7, #0]
     6b6:	430a      	orrs	r2, r1
     6b8:	621a      	str	r2, [r3, #32]
			break;
     6ba:	e001      	b.n	6c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     6bc:	2317      	movs	r3, #23
     6be:	e000      	b.n	6c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     6c0:	2300      	movs	r3, #0
}
     6c2:	1c18      	adds	r0, r3, #0
     6c4:	46bd      	mov	sp, r7
     6c6:	b002      	add	sp, #8
     6c8:	bd80      	pop	{r7, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	40000400 	.word	0x40000400

000006d0 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <wdt_is_syncing+0x28>)
     6d8:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	79db      	ldrb	r3, [r3, #7]
     6de:	b2db      	uxtb	r3, r3
     6e0:	b2db      	uxtb	r3, r3
     6e2:	b25b      	sxtb	r3, r3
     6e4:	2b00      	cmp	r3, #0
     6e6:	da01      	bge.n	6ec <wdt_is_syncing+0x1c>
#endif
		return true;
     6e8:	2301      	movs	r3, #1
     6ea:	e000      	b.n	6ee <wdt_is_syncing+0x1e>
	}

	return false;
     6ec:	2300      	movs	r3, #0
}
     6ee:	1c18      	adds	r0, r3, #0
     6f0:	46bd      	mov	sp, r7
     6f2:	b002      	add	sp, #8
     6f4:	bd80      	pop	{r7, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	40001000 	.word	0x40001000

000006fc <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     702:	4b07      	ldr	r3, [pc, #28]	; (720 <wdt_is_locked+0x24>)
     704:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     706:	687b      	ldr	r3, [r7, #4]
     708:	781b      	ldrb	r3, [r3, #0]
     70a:	b2db      	uxtb	r3, r3
     70c:	1c1a      	adds	r2, r3, #0
     70e:	2380      	movs	r3, #128	; 0x80
     710:	4013      	ands	r3, r2
     712:	1e5a      	subs	r2, r3, #1
     714:	4193      	sbcs	r3, r2
     716:	b2db      	uxtb	r3, r3
#endif
}
     718:	1c18      	adds	r0, r3, #0
     71a:	46bd      	mov	sp, r7
     71c:	b002      	add	sp, #8
     71e:	bd80      	pop	{r7, pc}
     720:	40001000 	.word	0x40001000

00000724 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     724:	b580      	push	{r7, lr}
     726:	b086      	sub	sp, #24
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
     72c:	4b54      	ldr	r3, [pc, #336]	; (880 <wdt_set_config+0x15c>)
     72e:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
     730:	2000      	movs	r0, #0
     732:	2110      	movs	r1, #16
     734:	4b53      	ldr	r3, [pc, #332]	; (884 <wdt_set_config+0x160>)
     736:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     738:	4b53      	ldr	r3, [pc, #332]	; (888 <wdt_set_config+0x164>)
     73a:	4798      	blx	r3
     73c:	1e03      	subs	r3, r0, #0
     73e:	d001      	beq.n	744 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
     740:	2310      	movs	r3, #16
     742:	e098      	b.n	876 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     744:	687b      	ldr	r3, [r7, #4]
     746:	78db      	ldrb	r3, [r3, #3]
     748:	2b00      	cmp	r3, #0
     74a:	d101      	bne.n	750 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
     74c:	2317      	movs	r3, #23
     74e:	e092      	b.n	876 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     750:	687b      	ldr	r3, [r7, #4]
     752:	78da      	ldrb	r2, [r3, #3]
     754:	687b      	ldr	r3, [r7, #4]
     756:	791b      	ldrb	r3, [r3, #4]
     758:	429a      	cmp	r2, r3
     75a:	d305      	bcc.n	768 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	78da      	ldrb	r2, [r3, #3]
     760:	687b      	ldr	r3, [r7, #4]
     762:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     764:	429a      	cmp	r2, r3
     766:	d201      	bcs.n	76c <wdt_set_config+0x48>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
     768:	2317      	movs	r3, #23
     76a:	e084      	b.n	876 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     76c:	693b      	ldr	r3, [r7, #16]
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	b2db      	uxtb	r3, r3
     772:	2202      	movs	r2, #2
     774:	4393      	bics	r3, r2
     776:	b2da      	uxtb	r2, r3
     778:	693b      	ldr	r3, [r7, #16]
     77a:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
     77c:	46c0      	nop			; (mov r8, r8)
     77e:	4b43      	ldr	r3, [pc, #268]	; (88c <wdt_set_config+0x168>)
     780:	4798      	blx	r3
     782:	1e03      	subs	r3, r0, #0
     784:	d1fb      	bne.n	77e <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     786:	687b      	ldr	r3, [r7, #4]
     788:	785b      	ldrb	r3, [r3, #1]
     78a:	2201      	movs	r2, #1
     78c:	4053      	eors	r3, r2
     78e:	b2db      	uxtb	r3, r3
     790:	2b00      	cmp	r3, #0
     792:	d001      	beq.n	798 <wdt_set_config+0x74>
		return STATUS_OK;
     794:	2300      	movs	r3, #0
     796:	e06e      	b.n	876 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     798:	687b      	ldr	r3, [r7, #4]
     79a:	789a      	ldrb	r2, [r3, #2]
     79c:	230c      	movs	r3, #12
     79e:	18fb      	adds	r3, r7, r3
     7a0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     7a2:	230c      	movs	r3, #12
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	2001      	movs	r0, #1
     7a8:	1c19      	adds	r1, r3, #0
     7aa:	4b39      	ldr	r3, [pc, #228]	; (890 <wdt_set_config+0x16c>)
     7ac:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     7ae:	2001      	movs	r0, #1
     7b0:	4b38      	ldr	r3, [pc, #224]	; (894 <wdt_set_config+0x170>)
     7b2:	4798      	blx	r3
	if (config->always_on) {
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	781b      	ldrb	r3, [r3, #0]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d002      	beq.n	7c2 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
     7bc:	2001      	movs	r0, #1
     7be:	4b36      	ldr	r3, [pc, #216]	; (898 <wdt_set_config+0x174>)
     7c0:	4798      	blx	r3
	}

	uint32_t new_config = 0;
     7c2:	2300      	movs	r3, #0
     7c4:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	78db      	ldrb	r3, [r3, #3]
     7ca:	3b01      	subs	r3, #1
     7cc:	1c1a      	adds	r2, r3, #0
     7ce:	697b      	ldr	r3, [r7, #20]
     7d0:	4313      	orrs	r3, r2
     7d2:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	791b      	ldrb	r3, [r3, #4]
     7d8:	2b00      	cmp	r3, #0
     7da:	d010      	beq.n	7fe <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     7dc:	693b      	ldr	r3, [r7, #16]
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	b2db      	uxtb	r3, r3
     7e2:	2204      	movs	r2, #4
     7e4:	4313      	orrs	r3, r2
     7e6:	b2da      	uxtb	r2, r3
     7e8:	693b      	ldr	r3, [r7, #16]
     7ea:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	791b      	ldrb	r3, [r3, #4]
     7f0:	3b01      	subs	r3, #1
     7f2:	011b      	lsls	r3, r3, #4
     7f4:	1c1a      	adds	r2, r3, #0
     7f6:	697b      	ldr	r3, [r7, #20]
     7f8:	4313      	orrs	r3, r2
     7fa:	617b      	str	r3, [r7, #20]
     7fc:	e007      	b.n	80e <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     7fe:	693b      	ldr	r3, [r7, #16]
     800:	781b      	ldrb	r3, [r3, #0]
     802:	b2db      	uxtb	r3, r3
     804:	2204      	movs	r2, #4
     806:	4393      	bics	r3, r2
     808:	b2da      	uxtb	r2, r3
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     80e:	46c0      	nop			; (mov r8, r8)
     810:	4b1e      	ldr	r3, [pc, #120]	; (88c <wdt_set_config+0x168>)
     812:	4798      	blx	r3
     814:	1e03      	subs	r3, r0, #0
     816:	d1fb      	bne.n	810 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     818:	697b      	ldr	r3, [r7, #20]
     81a:	b2da      	uxtb	r2, r3
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     820:	687b      	ldr	r3, [r7, #4]
     822:	795b      	ldrb	r3, [r3, #5]
     824:	2b00      	cmp	r3, #0
     826:	d00a      	beq.n	83e <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
     828:	46c0      	nop			; (mov r8, r8)
     82a:	4b18      	ldr	r3, [pc, #96]	; (88c <wdt_set_config+0x168>)
     82c:	4798      	blx	r3
     82e:	1e03      	subs	r3, r0, #0
     830:	d1fb      	bne.n	82a <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     832:	687b      	ldr	r3, [r7, #4]
     834:	795b      	ldrb	r3, [r3, #5]
     836:	3b01      	subs	r3, #1
     838:	b2da      	uxtb	r2, r3
     83a:	693b      	ldr	r3, [r7, #16]
     83c:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     83e:	687b      	ldr	r3, [r7, #4]
     840:	781b      	ldrb	r3, [r3, #0]
     842:	2b00      	cmp	r3, #0
     844:	d009      	beq.n	85a <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     846:	693b      	ldr	r3, [r7, #16]
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	b2db      	uxtb	r3, r3
     84c:	2280      	movs	r2, #128	; 0x80
     84e:	4252      	negs	r2, r2
     850:	4313      	orrs	r3, r2
     852:	b2da      	uxtb	r2, r3
     854:	693b      	ldr	r3, [r7, #16]
     856:	701a      	strb	r2, [r3, #0]
     858:	e007      	b.n	86a <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     85a:	693b      	ldr	r3, [r7, #16]
     85c:	781b      	ldrb	r3, [r3, #0]
     85e:	b2db      	uxtb	r3, r3
     860:	2202      	movs	r2, #2
     862:	4313      	orrs	r3, r2
     864:	b2da      	uxtb	r2, r3
     866:	693b      	ldr	r3, [r7, #16]
     868:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	4b07      	ldr	r3, [pc, #28]	; (88c <wdt_set_config+0x168>)
     86e:	4798      	blx	r3
     870:	1e03      	subs	r3, r0, #0
     872:	d1fb      	bne.n	86c <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     874:	2300      	movs	r3, #0
}
     876:	1c18      	adds	r0, r3, #0
     878:	46bd      	mov	sp, r7
     87a:	b006      	add	sp, #24
     87c:	bd80      	pop	{r7, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	40001000 	.word	0x40001000
     884:	00000675 	.word	0x00000675
     888:	000006fd 	.word	0x000006fd
     88c:	000006d1 	.word	0x000006d1
     890:	00003151 	.word	0x00003151
     894:	00003195 	.word	0x00003195
     898:	00003275 	.word	0x00003275

0000089c <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
     89c:	b580      	push	{r7, lr}
     89e:	b082      	sub	sp, #8
     8a0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     8a2:	4b06      	ldr	r3, [pc, #24]	; (8bc <wdt_reset_count+0x20>)
     8a4:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	22a5      	movs	r2, #165	; 0xa5
     8aa:	721a      	strb	r2, [r3, #8]

	while (wdt_is_syncing()) {
     8ac:	46c0      	nop			; (mov r8, r8)
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <wdt_reset_count+0x24>)
     8b0:	4798      	blx	r3
     8b2:	1e03      	subs	r3, r0, #0
     8b4:	d1fb      	bne.n	8ae <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     8b6:	46bd      	mov	sp, r7
     8b8:	b002      	add	sp, #8
     8ba:	bd80      	pop	{r7, pc}
     8bc:	40001000 	.word	0x40001000
     8c0:	000006d1 	.word	0x000006d1

000008c4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	b084      	sub	sp, #16
     8c8:	af00      	add	r7, sp, #0
     8ca:	1c02      	adds	r2, r0, #0
     8cc:	1dfb      	adds	r3, r7, #7
     8ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     8d0:	230f      	movs	r3, #15
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	1dfa      	adds	r2, r7, #7
     8d6:	7812      	ldrb	r2, [r2, #0]
     8d8:	09d2      	lsrs	r2, r2, #7
     8da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     8dc:	230e      	movs	r3, #14
     8de:	18fb      	adds	r3, r7, r3
     8e0:	1dfa      	adds	r2, r7, #7
     8e2:	7812      	ldrb	r2, [r2, #0]
     8e4:	0952      	lsrs	r2, r2, #5
     8e6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     8e8:	4b0d      	ldr	r3, [pc, #52]	; (920 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     8ea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     8ec:	230f      	movs	r3, #15
     8ee:	18fb      	adds	r3, r7, r3
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	2b00      	cmp	r3, #0
     8f4:	d10f      	bne.n	916 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     8f6:	230f      	movs	r3, #15
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	781b      	ldrb	r3, [r3, #0]
     8fc:	009b      	lsls	r3, r3, #2
     8fe:	2210      	movs	r2, #16
     900:	4694      	mov	ip, r2
     902:	44bc      	add	ip, r7
     904:	4463      	add	r3, ip
     906:	3b08      	subs	r3, #8
     908:	681a      	ldr	r2, [r3, #0]
     90a:	230e      	movs	r3, #14
     90c:	18fb      	adds	r3, r7, r3
     90e:	781b      	ldrb	r3, [r3, #0]
     910:	01db      	lsls	r3, r3, #7
     912:	18d3      	adds	r3, r2, r3
     914:	e000      	b.n	918 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     916:	2300      	movs	r3, #0
	}
}
     918:	1c18      	adds	r0, r3, #0
     91a:	46bd      	mov	sp, r7
     91c:	b004      	add	sp, #16
     91e:	bd80      	pop	{r7, pc}
     920:	41004400 	.word	0x41004400

00000924 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     924:	b580      	push	{r7, lr}
     926:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     928:	4b01      	ldr	r3, [pc, #4]	; (930 <system_interrupt_enter_critical_section+0xc>)
     92a:	4798      	blx	r3
}
     92c:	46bd      	mov	sp, r7
     92e:	bd80      	pop	{r7, pc}
     930:	00001e2d 	.word	0x00001e2d

00000934 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     934:	b580      	push	{r7, lr}
     936:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     938:	4b01      	ldr	r3, [pc, #4]	; (940 <system_interrupt_leave_critical_section+0xc>)
     93a:	4798      	blx	r3
}
     93c:	46bd      	mov	sp, r7
     93e:	bd80      	pop	{r7, pc}
     940:	00001e7d 	.word	0x00001e7d

00000944 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     944:	b580      	push	{r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	1c02      	adds	r2, r0, #0
     94c:	1dfb      	adds	r3, r7, #7
     94e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     950:	1dfb      	adds	r3, r7, #7
     952:	781b      	ldrb	r3, [r3, #0]
     954:	1c18      	adds	r0, r3, #0
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <port_get_group_from_gpio_pin+0x20>)
     958:	4798      	blx	r3
     95a:	1c03      	adds	r3, r0, #0
}
     95c:	1c18      	adds	r0, r3, #0
     95e:	46bd      	mov	sp, r7
     960:	b002      	add	sp, #8
     962:	bd80      	pop	{r7, pc}
     964:	000008c5 	.word	0x000008c5

00000968 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     968:	b580      	push	{r7, lr}
     96a:	b084      	sub	sp, #16
     96c:	af00      	add	r7, sp, #0
     96e:	1c02      	adds	r2, r0, #0
     970:	1dfb      	adds	r3, r7, #7
     972:	701a      	strb	r2, [r3, #0]
     974:	1dbb      	adds	r3, r7, #6
     976:	1c0a      	adds	r2, r1, #0
     978:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     97a:	1dfb      	adds	r3, r7, #7
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	1c18      	adds	r0, r3, #0
     980:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <port_pin_set_output_level+0x4c>)
     982:	4798      	blx	r3
     984:	1c03      	adds	r3, r0, #0
     986:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     988:	1dfb      	adds	r3, r7, #7
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	221f      	movs	r2, #31
     98e:	4013      	ands	r3, r2
     990:	2201      	movs	r2, #1
     992:	409a      	lsls	r2, r3
     994:	1c13      	adds	r3, r2, #0
     996:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     998:	1dbb      	adds	r3, r7, #6
     99a:	781b      	ldrb	r3, [r3, #0]
     99c:	2b00      	cmp	r3, #0
     99e:	d003      	beq.n	9a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     9a0:	68fb      	ldr	r3, [r7, #12]
     9a2:	68ba      	ldr	r2, [r7, #8]
     9a4:	619a      	str	r2, [r3, #24]
     9a6:	e002      	b.n	9ae <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9a8:	68fb      	ldr	r3, [r7, #12]
     9aa:	68ba      	ldr	r2, [r7, #8]
     9ac:	615a      	str	r2, [r3, #20]
	}
}
     9ae:	46bd      	mov	sp, r7
     9b0:	b004      	add	sp, #16
     9b2:	bd80      	pop	{r7, pc}
     9b4:	00000945 	.word	0x00000945

000009b8 <key_closer>:
extern uint8_t noteOffset;

uint8_t dummyKey;

void key_closer(uint8_t startKey, uint8_t stopKey) // operating in switch closure mode
{		uint8_t key[2],i;
     9b8:	b580      	push	{r7, lr}
     9ba:	b084      	sub	sp, #16
     9bc:	af00      	add	r7, sp, #0
     9be:	1c02      	adds	r2, r0, #0
     9c0:	1dfb      	adds	r3, r7, #7
     9c2:	701a      	strb	r2, [r3, #0]
     9c4:	1dbb      	adds	r3, r7, #6
     9c6:	1c0a      	adds	r2, r1, #0
     9c8:	701a      	strb	r2, [r3, #0]
	{	key[0]
		put_keyQ(key);
		
	}*/
 
	if ( keyQ.length < (KEY_QUE_SIZE-1))
     9ca:	4b76      	ldr	r3, [pc, #472]	; (ba4 <key_closer+0x1ec>)
     9cc:	2242      	movs	r2, #66	; 0x42
     9ce:	5c9b      	ldrb	r3, [r3, r2]
     9d0:	2b3e      	cmp	r3, #62	; 0x3e
     9d2:	d900      	bls.n	9d6 <key_closer+0x1e>
     9d4:	e0e2      	b.n	b9c <key_closer+0x1e4>
		for (i=startKey; i<stopKey; i++)
     9d6:	230f      	movs	r3, #15
     9d8:	18fb      	adds	r3, r7, r3
     9da:	1dfa      	adds	r2, r7, #7
     9dc:	7812      	ldrb	r2, [r2, #0]
     9de:	701a      	strb	r2, [r3, #0]
     9e0:	e0d4      	b.n	b8c <key_closer+0x1d4>
		{
			// continuously update max and mins
			if (adc_result_buffer[i]>trebKeys[i].maxAtoDval) 
     9e2:	230f      	movs	r3, #15
     9e4:	18fb      	adds	r3, r7, r3
     9e6:	781a      	ldrb	r2, [r3, #0]
     9e8:	4b6f      	ldr	r3, [pc, #444]	; (ba8 <key_closer+0x1f0>)
     9ea:	0052      	lsls	r2, r2, #1
     9ec:	5ad1      	ldrh	r1, [r2, r3]
     9ee:	230f      	movs	r3, #15
     9f0:	18fb      	adds	r3, r7, r3
     9f2:	781a      	ldrb	r2, [r3, #0]
     9f4:	486d      	ldr	r0, [pc, #436]	; (bac <key_closer+0x1f4>)
     9f6:	1c13      	adds	r3, r2, #0
     9f8:	009b      	lsls	r3, r3, #2
     9fa:	189b      	adds	r3, r3, r2
     9fc:	009b      	lsls	r3, r3, #2
     9fe:	18c3      	adds	r3, r0, r3
     a00:	789b      	ldrb	r3, [r3, #2]
     a02:	b29b      	uxth	r3, r3
     a04:	4299      	cmp	r1, r3
     a06:	d912      	bls.n	a2e <key_closer+0x76>
				trebKeys[i].maxAtoDval = adc_result_buffer[i];
     a08:	230f      	movs	r3, #15
     a0a:	18fb      	adds	r3, r7, r3
     a0c:	781a      	ldrb	r2, [r3, #0]
     a0e:	230f      	movs	r3, #15
     a10:	18fb      	adds	r3, r7, r3
     a12:	7819      	ldrb	r1, [r3, #0]
     a14:	4b64      	ldr	r3, [pc, #400]	; (ba8 <key_closer+0x1f0>)
     a16:	0049      	lsls	r1, r1, #1
     a18:	5acb      	ldrh	r3, [r1, r3]
     a1a:	b2d8      	uxtb	r0, r3
     a1c:	4963      	ldr	r1, [pc, #396]	; (bac <key_closer+0x1f4>)
     a1e:	1c13      	adds	r3, r2, #0
     a20:	009b      	lsls	r3, r3, #2
     a22:	189b      	adds	r3, r3, r2
     a24:	009b      	lsls	r3, r3, #2
     a26:	18cb      	adds	r3, r1, r3
     a28:	1c02      	adds	r2, r0, #0
     a2a:	709a      	strb	r2, [r3, #2]
     a2c:	e024      	b.n	a78 <key_closer+0xc0>
			else if (adc_result_buffer[i]<trebKeys[i].minAtoDval) 
     a2e:	230f      	movs	r3, #15
     a30:	18fb      	adds	r3, r7, r3
     a32:	781a      	ldrb	r2, [r3, #0]
     a34:	4b5c      	ldr	r3, [pc, #368]	; (ba8 <key_closer+0x1f0>)
     a36:	0052      	lsls	r2, r2, #1
     a38:	5ad1      	ldrh	r1, [r2, r3]
     a3a:	230f      	movs	r3, #15
     a3c:	18fb      	adds	r3, r7, r3
     a3e:	781a      	ldrb	r2, [r3, #0]
     a40:	485a      	ldr	r0, [pc, #360]	; (bac <key_closer+0x1f4>)
     a42:	1c13      	adds	r3, r2, #0
     a44:	009b      	lsls	r3, r3, #2
     a46:	189b      	adds	r3, r3, r2
     a48:	009b      	lsls	r3, r3, #2
     a4a:	18c3      	adds	r3, r0, r3
     a4c:	78db      	ldrb	r3, [r3, #3]
     a4e:	b29b      	uxth	r3, r3
     a50:	4299      	cmp	r1, r3
     a52:	d211      	bcs.n	a78 <key_closer+0xc0>
				trebKeys[i].minAtoDval = adc_result_buffer[i];
     a54:	230f      	movs	r3, #15
     a56:	18fb      	adds	r3, r7, r3
     a58:	781a      	ldrb	r2, [r3, #0]
     a5a:	230f      	movs	r3, #15
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	7819      	ldrb	r1, [r3, #0]
     a60:	4b51      	ldr	r3, [pc, #324]	; (ba8 <key_closer+0x1f0>)
     a62:	0049      	lsls	r1, r1, #1
     a64:	5acb      	ldrh	r3, [r1, r3]
     a66:	b2d8      	uxtb	r0, r3
     a68:	4950      	ldr	r1, [pc, #320]	; (bac <key_closer+0x1f4>)
     a6a:	1c13      	adds	r3, r2, #0
     a6c:	009b      	lsls	r3, r3, #2
     a6e:	189b      	adds	r3, r3, r2
     a70:	009b      	lsls	r3, r3, #2
     a72:	18cb      	adds	r3, r1, r3
     a74:	1c02      	adds	r2, r0, #0
     a76:	70da      	strb	r2, [r3, #3]

			if (!trebKeys[i].on)
     a78:	230f      	movs	r3, #15
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	781a      	ldrb	r2, [r3, #0]
     a7e:	494b      	ldr	r1, [pc, #300]	; (bac <key_closer+0x1f4>)
     a80:	1c13      	adds	r3, r2, #0
     a82:	009b      	lsls	r3, r3, #2
     a84:	189b      	adds	r3, r3, r2
     a86:	009b      	lsls	r3, r3, #2
     a88:	5c5b      	ldrb	r3, [r3, r1]
     a8a:	2201      	movs	r2, #1
     a8c:	4053      	eors	r3, r2
     a8e:	b2db      	uxtb	r3, r3
     a90:	2b00      	cmp	r3, #0
     a92:	d038      	beq.n	b06 <key_closer+0x14e>
			{	// trebKey is off, ck if should be on
				if(adc_result_buffer[i] < trebKeys[i].maxAtoDval - NOTE_ON_OFFSET)
     a94:	230f      	movs	r3, #15
     a96:	18fb      	adds	r3, r7, r3
     a98:	781a      	ldrb	r2, [r3, #0]
     a9a:	4b43      	ldr	r3, [pc, #268]	; (ba8 <key_closer+0x1f0>)
     a9c:	0052      	lsls	r2, r2, #1
     a9e:	5ad3      	ldrh	r3, [r2, r3]
     aa0:	1c18      	adds	r0, r3, #0
     aa2:	230f      	movs	r3, #15
     aa4:	18fb      	adds	r3, r7, r3
     aa6:	781a      	ldrb	r2, [r3, #0]
     aa8:	4940      	ldr	r1, [pc, #256]	; (bac <key_closer+0x1f4>)
     aaa:	1c13      	adds	r3, r2, #0
     aac:	009b      	lsls	r3, r3, #2
     aae:	189b      	adds	r3, r3, r2
     ab0:	009b      	lsls	r3, r3, #2
     ab2:	18cb      	adds	r3, r1, r3
     ab4:	789b      	ldrb	r3, [r3, #2]
     ab6:	3b32      	subs	r3, #50	; 0x32
     ab8:	4298      	cmp	r0, r3
     aba:	da60      	bge.n	b7e <key_closer+0x1c6>
				{
					// turn it on
					trebKeys[i].on = true;
     abc:	230f      	movs	r3, #15
     abe:	18fb      	adds	r3, r7, r3
     ac0:	781a      	ldrb	r2, [r3, #0]
     ac2:	493a      	ldr	r1, [pc, #232]	; (bac <key_closer+0x1f4>)
     ac4:	1c13      	adds	r3, r2, #0
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	189b      	adds	r3, r3, r2
     aca:	009b      	lsls	r3, r3, #2
     acc:	2201      	movs	r2, #1
     ace:	545a      	strb	r2, [r3, r1]
					key[0] = (i + noteOffset)|0x80;
     ad0:	4b37      	ldr	r3, [pc, #220]	; (bb0 <key_closer+0x1f8>)
     ad2:	781a      	ldrb	r2, [r3, #0]
     ad4:	230f      	movs	r3, #15
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	781b      	ldrb	r3, [r3, #0]
     ada:	18d3      	adds	r3, r2, r3
     adc:	b2db      	uxtb	r3, r3
     ade:	b2db      	uxtb	r3, r3
     ae0:	1c1a      	adds	r2, r3, #0
     ae2:	2380      	movs	r3, #128	; 0x80
     ae4:	425b      	negs	r3, r3
     ae6:	4313      	orrs	r3, r2
     ae8:	b2db      	uxtb	r3, r3
     aea:	b2da      	uxtb	r2, r3
     aec:	230c      	movs	r3, #12
     aee:	18fb      	adds	r3, r7, r3
     af0:	701a      	strb	r2, [r3, #0]
					key[1] = 0x7f;		// max velocity
     af2:	230c      	movs	r3, #12
     af4:	18fb      	adds	r3, r7, r3
     af6:	227f      	movs	r2, #127	; 0x7f
     af8:	705a      	strb	r2, [r3, #1]
	//				key[1] = adc_result_buffer[i];		// TEST ONLY
					put_keyQ(key);				
     afa:	230c      	movs	r3, #12
     afc:	18fb      	adds	r3, r7, r3
     afe:	1c18      	adds	r0, r3, #0
     b00:	4b2c      	ldr	r3, [pc, #176]	; (bb4 <key_closer+0x1fc>)
     b02:	4798      	blx	r3
     b04:	e03b      	b.n	b7e <key_closer+0x1c6>
				}
			}
			else						
			{	// if its on, ck if should be off
				if(adc_result_buffer[i] > trebKeys[i].maxAtoDval - NOTE_OFF_THRESHOLD)
     b06:	230f      	movs	r3, #15
     b08:	18fb      	adds	r3, r7, r3
     b0a:	781a      	ldrb	r2, [r3, #0]
     b0c:	4b26      	ldr	r3, [pc, #152]	; (ba8 <key_closer+0x1f0>)
     b0e:	0052      	lsls	r2, r2, #1
     b10:	5ad3      	ldrh	r3, [r2, r3]
     b12:	1c18      	adds	r0, r3, #0
     b14:	230f      	movs	r3, #15
     b16:	18fb      	adds	r3, r7, r3
     b18:	781a      	ldrb	r2, [r3, #0]
     b1a:	4924      	ldr	r1, [pc, #144]	; (bac <key_closer+0x1f4>)
     b1c:	1c13      	adds	r3, r2, #0
     b1e:	009b      	lsls	r3, r3, #2
     b20:	189b      	adds	r3, r3, r2
     b22:	009b      	lsls	r3, r3, #2
     b24:	18cb      	adds	r3, r1, r3
     b26:	789b      	ldrb	r3, [r3, #2]
     b28:	3b0a      	subs	r3, #10
     b2a:	4298      	cmp	r0, r3
     b2c:	dd27      	ble.n	b7e <key_closer+0x1c6>
				{
					// turn it off
					trebKeys[i].on = false;
     b2e:	230f      	movs	r3, #15
     b30:	18fb      	adds	r3, r7, r3
     b32:	781a      	ldrb	r2, [r3, #0]
     b34:	491d      	ldr	r1, [pc, #116]	; (bac <key_closer+0x1f4>)
     b36:	1c13      	adds	r3, r2, #0
     b38:	009b      	lsls	r3, r3, #2
     b3a:	189b      	adds	r3, r3, r2
     b3c:	009b      	lsls	r3, r3, #2
     b3e:	2200      	movs	r2, #0
     b40:	545a      	strb	r2, [r3, r1]
					key[0] = (i + noteOffset)|0x80;
     b42:	4b1b      	ldr	r3, [pc, #108]	; (bb0 <key_closer+0x1f8>)
     b44:	781a      	ldrb	r2, [r3, #0]
     b46:	230f      	movs	r3, #15
     b48:	18fb      	adds	r3, r7, r3
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	18d3      	adds	r3, r2, r3
     b4e:	b2db      	uxtb	r3, r3
     b50:	b2db      	uxtb	r3, r3
     b52:	1c1a      	adds	r2, r3, #0
     b54:	2380      	movs	r3, #128	; 0x80
     b56:	425b      	negs	r3, r3
     b58:	4313      	orrs	r3, r2
     b5a:	b2db      	uxtb	r3, r3
     b5c:	b2da      	uxtb	r2, r3
     b5e:	230c      	movs	r3, #12
     b60:	18fb      	adds	r3, r7, r3
     b62:	701a      	strb	r2, [r3, #0]
					key[1] = 01;		// 0ff
     b64:	230c      	movs	r3, #12
     b66:	18fb      	adds	r3, r7, r3
     b68:	2201      	movs	r2, #1
     b6a:	705a      	strb	r2, [r3, #1]
					put_keyQ(key);
     b6c:	230c      	movs	r3, #12
     b6e:	18fb      	adds	r3, r7, r3
     b70:	1c18      	adds	r0, r3, #0
     b72:	4b10      	ldr	r3, [pc, #64]	; (bb4 <key_closer+0x1fc>)
     b74:	4798      	blx	r3

					port_pin_set_output_level(TP41_PIN,1);
     b76:	2014      	movs	r0, #20
     b78:	2101      	movs	r1, #1
     b7a:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <key_closer+0x200>)
     b7c:	4798      	blx	r3
		put_keyQ(key);
		
	}*/
 
	if ( keyQ.length < (KEY_QUE_SIZE-1))
		for (i=startKey; i<stopKey; i++)
     b7e:	230f      	movs	r3, #15
     b80:	18fb      	adds	r3, r7, r3
     b82:	781a      	ldrb	r2, [r3, #0]
     b84:	230f      	movs	r3, #15
     b86:	18fb      	adds	r3, r7, r3
     b88:	3201      	adds	r2, #1
     b8a:	701a      	strb	r2, [r3, #0]
     b8c:	230f      	movs	r3, #15
     b8e:	18fa      	adds	r2, r7, r3
     b90:	1dbb      	adds	r3, r7, #6
     b92:	7812      	ldrb	r2, [r2, #0]
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	429a      	cmp	r2, r3
     b98:	d200      	bcs.n	b9c <key_closer+0x1e4>
     b9a:	e722      	b.n	9e2 <key_closer+0x2a>
					port_pin_set_output_level(TP41_PIN,1);
				
				}			
			}
		}
}
     b9c:	46bd      	mov	sp, r7
     b9e:	b004      	add	sp, #16
     ba0:	bd80      	pop	{r7, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	2000008c 	.word	0x2000008c
     ba8:	2000027c 	.word	0x2000027c
     bac:	200002a8 	.word	0x200002a8
     bb0:	2000027a 	.word	0x2000027a
     bb4:	00000c05 	.word	0x00000c05
     bb8:	00000969 	.word	0x00000969

00000bbc <get_keyQ>:



uint8_t get_keyQ(void)
{	uint8_t	val;
     bbc:	b580      	push	{r7, lr}
     bbe:	b082      	sub	sp, #8
     bc0:	af00      	add	r7, sp, #0
	val = keyQ.key[keyQ.buff_out];
     bc2:	4b0f      	ldr	r3, [pc, #60]	; (c00 <get_keyQ+0x44>)
     bc4:	2241      	movs	r2, #65	; 0x41
     bc6:	5c9b      	ldrb	r3, [r3, r2]
     bc8:	1c19      	adds	r1, r3, #0
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	4a0c      	ldr	r2, [pc, #48]	; (c00 <get_keyQ+0x44>)
     bce:	5c52      	ldrb	r2, [r2, r1]
     bd0:	701a      	strb	r2, [r3, #0]
	keyQ.buff_out++;
     bd2:	4b0b      	ldr	r3, [pc, #44]	; (c00 <get_keyQ+0x44>)
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	5c9b      	ldrb	r3, [r3, r2]
     bd8:	3301      	adds	r3, #1
     bda:	b2d9      	uxtb	r1, r3
     bdc:	4b08      	ldr	r3, [pc, #32]	; (c00 <get_keyQ+0x44>)
     bde:	2241      	movs	r2, #65	; 0x41
     be0:	5499      	strb	r1, [r3, r2]
	keyQ.buff_out = keyQ.buff_out & (KEY_QUE_SIZE-1);
     be2:	4b07      	ldr	r3, [pc, #28]	; (c00 <get_keyQ+0x44>)
     be4:	2241      	movs	r2, #65	; 0x41
     be6:	5c9b      	ldrb	r3, [r3, r2]
     be8:	223f      	movs	r2, #63	; 0x3f
     bea:	4013      	ands	r3, r2
     bec:	b2d9      	uxtb	r1, r3
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <get_keyQ+0x44>)
     bf0:	2241      	movs	r2, #65	; 0x41
     bf2:	5499      	strb	r1, [r3, r2]
	return(val);
     bf4:	1dfb      	adds	r3, r7, #7
     bf6:	781b      	ldrb	r3, [r3, #0]
}
     bf8:	1c18      	adds	r0, r3, #0
     bfa:	46bd      	mov	sp, r7
     bfc:	b002      	add	sp, #8
     bfe:	bd80      	pop	{r7, pc}
     c00:	2000008c 	.word	0x2000008c

00000c04 <put_keyQ>:

enum status_code put_keyQ (uint8_t *ptr)
{
     c04:	b580      	push	{r7, lr}
     c06:	b082      	sub	sp, #8
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
	
	port_pin_set_output_level(TP41_PIN,0);
     c0c:	2014      	movs	r0, #20
     c0e:	2100      	movs	r1, #0
     c10:	4b2f      	ldr	r3, [pc, #188]	; (cd0 <put_keyQ+0xcc>)
     c12:	4798      	blx	r3
	
	system_interrupt_enter_critical_section();  // critical because the keyQ can be changed in a interrupt callback
     c14:	4b2f      	ldr	r3, [pc, #188]	; (cd4 <put_keyQ+0xd0>)
     c16:	4798      	blx	r3
	if (((KEY_QUE_SIZE-1) & (keyQ.buff_in + 1)) != keyQ.buff_out){
     c18:	4b2f      	ldr	r3, [pc, #188]	; (cd8 <put_keyQ+0xd4>)
     c1a:	2240      	movs	r2, #64	; 0x40
     c1c:	5c9b      	ldrb	r3, [r3, r2]
     c1e:	3301      	adds	r3, #1
     c20:	223f      	movs	r2, #63	; 0x3f
     c22:	4013      	ands	r3, r2
     c24:	4a2c      	ldr	r2, [pc, #176]	; (cd8 <put_keyQ+0xd4>)
     c26:	2141      	movs	r1, #65	; 0x41
     c28:	5c52      	ldrb	r2, [r2, r1]
     c2a:	4293      	cmp	r3, r2
     c2c:	d049      	beq.n	cc2 <put_keyQ+0xbe>
		keyQ.key[keyQ.buff_in] = *ptr;
     c2e:	4b2a      	ldr	r3, [pc, #168]	; (cd8 <put_keyQ+0xd4>)
     c30:	2240      	movs	r2, #64	; 0x40
     c32:	5c9b      	ldrb	r3, [r3, r2]
     c34:	1c1a      	adds	r2, r3, #0
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	7819      	ldrb	r1, [r3, #0]
     c3a:	4b27      	ldr	r3, [pc, #156]	; (cd8 <put_keyQ+0xd4>)
     c3c:	5499      	strb	r1, [r3, r2]
		keyQ.buff_in++;
     c3e:	4b26      	ldr	r3, [pc, #152]	; (cd8 <put_keyQ+0xd4>)
     c40:	2240      	movs	r2, #64	; 0x40
     c42:	5c9b      	ldrb	r3, [r3, r2]
     c44:	3301      	adds	r3, #1
     c46:	b2d9      	uxtb	r1, r3
     c48:	4b23      	ldr	r3, [pc, #140]	; (cd8 <put_keyQ+0xd4>)
     c4a:	2240      	movs	r2, #64	; 0x40
     c4c:	5499      	strb	r1, [r3, r2]
		keyQ.buff_in = keyQ.buff_in & (KEY_QUE_SIZE-1);
     c4e:	4b22      	ldr	r3, [pc, #136]	; (cd8 <put_keyQ+0xd4>)
     c50:	2240      	movs	r2, #64	; 0x40
     c52:	5c9b      	ldrb	r3, [r3, r2]
     c54:	223f      	movs	r2, #63	; 0x3f
     c56:	4013      	ands	r3, r2
     c58:	b2d9      	uxtb	r1, r3
     c5a:	4b1f      	ldr	r3, [pc, #124]	; (cd8 <put_keyQ+0xd4>)
     c5c:	2240      	movs	r2, #64	; 0x40
     c5e:	5499      	strb	r1, [r3, r2]
		keyQ.key[keyQ.buff_in] = *(ptr+1);
     c60:	4b1d      	ldr	r3, [pc, #116]	; (cd8 <put_keyQ+0xd4>)
     c62:	2240      	movs	r2, #64	; 0x40
     c64:	5c9b      	ldrb	r3, [r3, r2]
     c66:	1c1a      	adds	r2, r3, #0
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	7859      	ldrb	r1, [r3, #1]
     c6c:	4b1a      	ldr	r3, [pc, #104]	; (cd8 <put_keyQ+0xd4>)
     c6e:	5499      	strb	r1, [r3, r2]
		keyQ.buff_in++;
     c70:	4b19      	ldr	r3, [pc, #100]	; (cd8 <put_keyQ+0xd4>)
     c72:	2240      	movs	r2, #64	; 0x40
     c74:	5c9b      	ldrb	r3, [r3, r2]
     c76:	3301      	adds	r3, #1
     c78:	b2d9      	uxtb	r1, r3
     c7a:	4b17      	ldr	r3, [pc, #92]	; (cd8 <put_keyQ+0xd4>)
     c7c:	2240      	movs	r2, #64	; 0x40
     c7e:	5499      	strb	r1, [r3, r2]
		keyQ.buff_in = keyQ.buff_in & (KEY_QUE_SIZE-1);			// wrap at KEY_QUE_SIZE
     c80:	4b15      	ldr	r3, [pc, #84]	; (cd8 <put_keyQ+0xd4>)
     c82:	2240      	movs	r2, #64	; 0x40
     c84:	5c9b      	ldrb	r3, [r3, r2]
     c86:	223f      	movs	r2, #63	; 0x3f
     c88:	4013      	ands	r3, r2
     c8a:	b2d9      	uxtb	r1, r3
     c8c:	4b12      	ldr	r3, [pc, #72]	; (cd8 <put_keyQ+0xd4>)
     c8e:	2240      	movs	r2, #64	; 0x40
     c90:	5499      	strb	r1, [r3, r2]
		keyQ.length = keyQ.buff_in - keyQ.buff_out;			// can be negative
     c92:	4b11      	ldr	r3, [pc, #68]	; (cd8 <put_keyQ+0xd4>)
     c94:	2240      	movs	r2, #64	; 0x40
     c96:	5c9a      	ldrb	r2, [r3, r2]
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <put_keyQ+0xd4>)
     c9a:	2141      	movs	r1, #65	; 0x41
     c9c:	5c5b      	ldrb	r3, [r3, r1]
     c9e:	1ad3      	subs	r3, r2, r3
     ca0:	b2d9      	uxtb	r1, r3
     ca2:	4b0d      	ldr	r3, [pc, #52]	; (cd8 <put_keyQ+0xd4>)
     ca4:	2242      	movs	r2, #66	; 0x42
     ca6:	5499      	strb	r1, [r3, r2]
		keyQ.length = keyQ.length & (KEY_QUE_SIZE-1);		// make sure positive
     ca8:	4b0b      	ldr	r3, [pc, #44]	; (cd8 <put_keyQ+0xd4>)
     caa:	2242      	movs	r2, #66	; 0x42
     cac:	5c9b      	ldrb	r3, [r3, r2]
     cae:	223f      	movs	r2, #63	; 0x3f
     cb0:	4013      	ands	r3, r2
     cb2:	b2d9      	uxtb	r1, r3
     cb4:	4b08      	ldr	r3, [pc, #32]	; (cd8 <put_keyQ+0xd4>)
     cb6:	2242      	movs	r2, #66	; 0x42
     cb8:	5499      	strb	r1, [r3, r2]
		system_interrupt_leave_critical_section();
     cba:	4b08      	ldr	r3, [pc, #32]	; (cdc <put_keyQ+0xd8>)
     cbc:	4798      	blx	r3
	else
	{
		system_interrupt_leave_critical_section();
		return STATUS_ERR_DENIED;
	}
	return STATUS_OK;
     cbe:	2300      	movs	r3, #0
     cc0:	e002      	b.n	cc8 <put_keyQ+0xc4>
		keyQ.length = keyQ.length & (KEY_QUE_SIZE-1);		// make sure positive
		system_interrupt_leave_critical_section();
	}
	else
	{
		system_interrupt_leave_critical_section();
     cc2:	4b06      	ldr	r3, [pc, #24]	; (cdc <put_keyQ+0xd8>)
     cc4:	4798      	blx	r3
		return STATUS_ERR_DENIED;
     cc6:	231c      	movs	r3, #28
	}
	return STATUS_OK;
}
     cc8:	1c18      	adds	r0, r3, #0
     cca:	46bd      	mov	sp, r7
     ccc:	b002      	add	sp, #8
     cce:	bd80      	pop	{r7, pc}
     cd0:	00000969 	.word	0x00000969
     cd4:	00000925 	.word	0x00000925
     cd8:	2000008c 	.word	0x2000008c
     cdc:	00000935 	.word	0x00000935

00000ce0 <key_velocity>:



void key_velocity (uint8_t startKey, uint8_t stopKey) // operating in key velocity mode
{
     ce0:	b580      	push	{r7, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	1c02      	adds	r2, r0, #0
     ce8:	1dfb      	adds	r3, r7, #7
     cea:	701a      	strb	r2, [r3, #0]
     cec:	1dbb      	adds	r3, r7, #6
     cee:	1c0a      	adds	r2, r1, #0
     cf0:	701a      	strb	r2, [r3, #0]
	
}
     cf2:	46bd      	mov	sp, r7
     cf4:	b002      	add	sp, #8
     cf6:	bd80      	pop	{r7, pc}

00000cf8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	2200      	movs	r2, #0
     d04:	701a      	strb	r2, [r3, #0]
}
     d06:	46bd      	mov	sp, r7
     d08:	b002      	add	sp, #8
     d0a:	bd80      	pop	{r7, pc}

00000d0c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	b082      	sub	sp, #8
     d10:	af00      	add	r7, sp, #0
     d12:	1c02      	adds	r2, r0, #0
     d14:	6039      	str	r1, [r7, #0]
     d16:	1dfb      	adds	r3, r7, #7
     d18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d1a:	1dfb      	adds	r3, r7, #7
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	2b01      	cmp	r3, #1
     d20:	d00a      	beq.n	d38 <system_apb_clock_set_mask+0x2c>
     d22:	2b02      	cmp	r3, #2
     d24:	d00f      	beq.n	d46 <system_apb_clock_set_mask+0x3a>
     d26:	2b00      	cmp	r3, #0
     d28:	d114      	bne.n	d54 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d2a:	4b0e      	ldr	r3, [pc, #56]	; (d64 <system_apb_clock_set_mask+0x58>)
     d2c:	4a0d      	ldr	r2, [pc, #52]	; (d64 <system_apb_clock_set_mask+0x58>)
     d2e:	6991      	ldr	r1, [r2, #24]
     d30:	683a      	ldr	r2, [r7, #0]
     d32:	430a      	orrs	r2, r1
     d34:	619a      	str	r2, [r3, #24]
			break;
     d36:	e00f      	b.n	d58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d38:	4b0a      	ldr	r3, [pc, #40]	; (d64 <system_apb_clock_set_mask+0x58>)
     d3a:	4a0a      	ldr	r2, [pc, #40]	; (d64 <system_apb_clock_set_mask+0x58>)
     d3c:	69d1      	ldr	r1, [r2, #28]
     d3e:	683a      	ldr	r2, [r7, #0]
     d40:	430a      	orrs	r2, r1
     d42:	61da      	str	r2, [r3, #28]
			break;
     d44:	e008      	b.n	d58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <system_apb_clock_set_mask+0x58>)
     d48:	4a06      	ldr	r2, [pc, #24]	; (d64 <system_apb_clock_set_mask+0x58>)
     d4a:	6a11      	ldr	r1, [r2, #32]
     d4c:	683a      	ldr	r2, [r7, #0]
     d4e:	430a      	orrs	r2, r1
     d50:	621a      	str	r2, [r3, #32]
			break;
     d52:	e001      	b.n	d58 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     d54:	2317      	movs	r3, #23
     d56:	e000      	b.n	d5a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     d58:	2300      	movs	r3, #0
}
     d5a:	1c18      	adds	r0, r3, #0
     d5c:	46bd      	mov	sp, r7
     d5e:	b002      	add	sp, #8
     d60:	bd80      	pop	{r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	40000400 	.word	0x40000400

00000d68 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     d68:	b580      	push	{r7, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	af00      	add	r7, sp, #0
     d6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	2200      	movs	r2, #0
     d7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	2201      	movs	r2, #1
     d80:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	2200      	movs	r2, #0
     d86:	70da      	strb	r2, [r3, #3]
}
     d88:	46bd      	mov	sp, r7
     d8a:	b002      	add	sp, #8
     d8c:	bd80      	pop	{r7, pc}
     d8e:	46c0      	nop			; (mov r8, r8)

00000d90 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     d90:	b580      	push	{r7, lr}
     d92:	b082      	sub	sp, #8
     d94:	af00      	add	r7, sp, #0
     d96:	1c02      	adds	r2, r0, #0
     d98:	1dfb      	adds	r3, r7, #7
     d9a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     d9c:	1dfb      	adds	r3, r7, #7
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	2b00      	cmp	r3, #0
     da2:	d002      	beq.n	daa <system_voltage_reference_enable+0x1a>
     da4:	2b01      	cmp	r3, #1
     da6:	d007      	beq.n	db8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     da8:	e00d      	b.n	dc6 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     daa:	4b08      	ldr	r3, [pc, #32]	; (dcc <system_voltage_reference_enable+0x3c>)
     dac:	4a07      	ldr	r2, [pc, #28]	; (dcc <system_voltage_reference_enable+0x3c>)
     dae:	6c12      	ldr	r2, [r2, #64]	; 0x40
     db0:	2102      	movs	r1, #2
     db2:	430a      	orrs	r2, r1
     db4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     db6:	e006      	b.n	dc6 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     db8:	4b04      	ldr	r3, [pc, #16]	; (dcc <system_voltage_reference_enable+0x3c>)
     dba:	4a04      	ldr	r2, [pc, #16]	; (dcc <system_voltage_reference_enable+0x3c>)
     dbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
     dbe:	2104      	movs	r1, #4
     dc0:	430a      	orrs	r2, r1
     dc2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     dc4:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     dc6:	46bd      	mov	sp, r7
     dc8:	b002      	add	sp, #8
     dca:	bd80      	pop	{r7, pc}
     dcc:	40000800 	.word	0x40000800

00000dd0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b084      	sub	sp, #16
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	7e5b      	ldrb	r3, [r3, #25]
     de2:	b2db      	uxtb	r3, r3
     de4:	b2db      	uxtb	r3, r3
     de6:	b25b      	sxtb	r3, r3
     de8:	2b00      	cmp	r3, #0
     dea:	da01      	bge.n	df0 <adc_is_syncing+0x20>
		return true;
     dec:	2301      	movs	r3, #1
     dee:	e000      	b.n	df2 <adc_is_syncing+0x22>
	}

	return false;
     df0:	2300      	movs	r3, #0
}
     df2:	1c18      	adds	r0, r3, #0
     df4:	46bd      	mov	sp, r7
     df6:	b004      	add	sp, #16
     df8:	bd80      	pop	{r7, pc}
     dfa:	46c0      	nop			; (mov r8, r8)

00000dfc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     dfc:	b580      	push	{r7, lr}
     dfe:	b082      	sub	sp, #8
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2200      	movs	r2, #0
     e08:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2200      	movs	r2, #0
     e0e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	2200      	movs	r2, #0
     e14:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2200      	movs	r2, #0
     e1a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	2200      	movs	r2, #0
     e20:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	2200      	movs	r2, #0
     e26:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2200      	movs	r2, #0
     e2c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2200      	movs	r2, #0
     e32:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2200      	movs	r2, #0
     e38:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	22c0      	movs	r2, #192	; 0xc0
     e3e:	0152      	lsls	r2, r2, #5
     e40:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	2200      	movs	r2, #0
     e46:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	2200      	movs	r2, #0
     e4c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2200      	movs	r2, #0
     e52:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	2200      	movs	r2, #0
     e58:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	2200      	movs	r2, #0
     e5e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	222a      	movs	r2, #42	; 0x2a
     e64:	2100      	movs	r1, #0
     e66:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	2200      	movs	r2, #0
     e6c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	2200      	movs	r2, #0
     e72:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	2224      	movs	r2, #36	; 0x24
     e78:	2100      	movs	r1, #0
     e7a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	2200      	movs	r2, #0
     e80:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	2200      	movs	r2, #0
     e86:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	2200      	movs	r2, #0
     e8c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	222b      	movs	r2, #43	; 0x2b
     e92:	2100      	movs	r1, #0
     e94:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	222c      	movs	r2, #44	; 0x2c
     e9a:	2100      	movs	r1, #0
     e9c:	5499      	strb	r1, [r3, r2]
}
     e9e:	46bd      	mov	sp, r7
     ea0:	b002      	add	sp, #8
     ea2:	bd80      	pop	{r7, pc}

00000ea4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b098      	sub	sp, #96	; 0x60
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     eac:	230c      	movs	r3, #12
     eae:	18fa      	adds	r2, r7, r3
     eb0:	4b15      	ldr	r3, [pc, #84]	; (f08 <_adc_configure_ain_pin+0x64>)
     eb2:	1c11      	adds	r1, r2, #0
     eb4:	1c1a      	adds	r2, r3, #0
     eb6:	2350      	movs	r3, #80	; 0x50
     eb8:	1c08      	adds	r0, r1, #0
     eba:	1c11      	adds	r1, r2, #0
     ebc:	1c1a      	adds	r2, r3, #0
     ebe:	4b13      	ldr	r3, [pc, #76]	; (f0c <_adc_configure_ain_pin+0x68>)
     ec0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     ec2:	4b13      	ldr	r3, [pc, #76]	; (f10 <_adc_configure_ain_pin+0x6c>)
     ec4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	2b13      	cmp	r3, #19
     eca:	d81a      	bhi.n	f02 <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     ecc:	230c      	movs	r3, #12
     ece:	18fb      	adds	r3, r7, r3
     ed0:	687a      	ldr	r2, [r7, #4]
     ed2:	0092      	lsls	r2, r2, #2
     ed4:	58d3      	ldr	r3, [r2, r3]
     ed6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     ed8:	2308      	movs	r3, #8
     eda:	18fb      	adds	r3, r7, r3
     edc:	1c18      	adds	r0, r3, #0
     ede:	4b0d      	ldr	r3, [pc, #52]	; (f14 <_adc_configure_ain_pin+0x70>)
     ee0:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ee2:	2308      	movs	r3, #8
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	2200      	movs	r2, #0
     ee8:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     eea:	2308      	movs	r3, #8
     eec:	18fb      	adds	r3, r7, r3
     eee:	2201      	movs	r2, #1
     ef0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     ef4:	b2da      	uxtb	r2, r3
     ef6:	2308      	movs	r3, #8
     ef8:	18fb      	adds	r3, r7, r3
     efa:	1c10      	adds	r0, r2, #0
     efc:	1c19      	adds	r1, r3, #0
     efe:	4b06      	ldr	r3, [pc, #24]	; (f18 <_adc_configure_ain_pin+0x74>)
     f00:	4798      	blx	r3
	}
}
     f02:	46bd      	mov	sp, r7
     f04:	b018      	add	sp, #96	; 0x60
     f06:	bd80      	pop	{r7, pc}
     f08:	000046d0 	.word	0x000046d0
     f0c:	000046a5 	.word	0x000046a5
     f10:	0000ffff 	.word	0x0000ffff
     f14:	00000d69 	.word	0x00000d69
     f18:	00003485 	.word	0x00003485

00000f1c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1e:	b089      	sub	sp, #36	; 0x24
     f20:	af00      	add	r7, sp, #0
     f22:	6078      	str	r0, [r7, #4]
     f24:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     f26:	231f      	movs	r3, #31
     f28:	18fb      	adds	r3, r7, r3
     f2a:	2200      	movs	r2, #0
     f2c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     f2e:	2310      	movs	r3, #16
     f30:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f32:	2317      	movs	r3, #23
     f34:	18fb      	adds	r3, r7, r3
     f36:	2200      	movs	r2, #0
     f38:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
     f3a:	4bcc      	ldr	r3, [pc, #816]	; (126c <_adc_set_config+0x350>)
     f3c:	681a      	ldr	r2, [r3, #0]
     f3e:	23f0      	movs	r3, #240	; 0xf0
     f40:	021b      	lsls	r3, r3, #8
     f42:	4013      	ands	r3, r2
     f44:	0b1a      	lsrs	r2, r3, #12
     f46:	2313      	movs	r3, #19
     f48:	18fb      	adds	r3, r7, r3
     f4a:	701a      	strb	r2, [r3, #0]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     f4c:	687b      	ldr	r3, [r7, #4]
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	60fb      	str	r3, [r7, #12]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     f52:	2308      	movs	r3, #8
     f54:	18fb      	adds	r3, r7, r3
     f56:	1c18      	adds	r0, r3, #0
     f58:	4bc5      	ldr	r3, [pc, #788]	; (1270 <_adc_set_config+0x354>)
     f5a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	781a      	ldrb	r2, [r3, #0]
     f60:	2308      	movs	r3, #8
     f62:	18fb      	adds	r3, r7, r3
     f64:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     f66:	2308      	movs	r3, #8
     f68:	18fb      	adds	r3, r7, r3
     f6a:	2017      	movs	r0, #23
     f6c:	1c19      	adds	r1, r3, #0
     f6e:	4bc1      	ldr	r3, [pc, #772]	; (1274 <_adc_set_config+0x358>)
     f70:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     f72:	2017      	movs	r0, #23
     f74:	4bc0      	ldr	r3, [pc, #768]	; (1278 <_adc_set_config+0x35c>)
     f76:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	222c      	movs	r2, #44	; 0x2c
     f7c:	5c9b      	ldrb	r3, [r3, r2]
     f7e:	2b00      	cmp	r3, #0
     f80:	d040      	beq.n	1004 <_adc_set_config+0xe8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     f82:	2316      	movs	r3, #22
     f84:	18fb      	adds	r3, r7, r3
     f86:	683a      	ldr	r2, [r7, #0]
     f88:	212b      	movs	r1, #43	; 0x2b
     f8a:	5c52      	ldrb	r2, [r2, r1]
     f8c:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     f8e:	683b      	ldr	r3, [r7, #0]
     f90:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     f92:	2315      	movs	r3, #21
     f94:	18fb      	adds	r3, r7, r3
     f96:	2216      	movs	r2, #22
     f98:	18ba      	adds	r2, r7, r2
     f9a:	7812      	ldrb	r2, [r2, #0]
     f9c:	188a      	adds	r2, r1, r2
     f9e:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     fa0:	683b      	ldr	r3, [r7, #0]
     fa2:	222c      	movs	r2, #44	; 0x2c
     fa4:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     fa6:	230b      	movs	r3, #11
     fa8:	18fb      	adds	r3, r7, r3
     faa:	2215      	movs	r2, #21
     fac:	18ba      	adds	r2, r7, r2
     fae:	7812      	ldrb	r2, [r2, #0]
     fb0:	188a      	adds	r2, r1, r2
     fb2:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     fb4:	e018      	b.n	fe8 <_adc_set_config+0xcc>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     fb6:	2316      	movs	r3, #22
     fb8:	18fb      	adds	r3, r7, r3
     fba:	781b      	ldrb	r3, [r3, #0]
     fbc:	220f      	movs	r2, #15
     fbe:	4013      	ands	r3, r2
     fc0:	683a      	ldr	r2, [r7, #0]
     fc2:	7b12      	ldrb	r2, [r2, #12]
     fc4:	189b      	adds	r3, r3, r2
     fc6:	1c18      	adds	r0, r3, #0
     fc8:	4bac      	ldr	r3, [pc, #688]	; (127c <_adc_set_config+0x360>)
     fca:	4798      	blx	r3
			start_pin++;
     fcc:	2315      	movs	r3, #21
     fce:	18fb      	adds	r3, r7, r3
     fd0:	781a      	ldrb	r2, [r3, #0]
     fd2:	2315      	movs	r3, #21
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	3201      	adds	r2, #1
     fd8:	701a      	strb	r2, [r3, #0]
			offset++;
     fda:	2316      	movs	r3, #22
     fdc:	18fb      	adds	r3, r7, r3
     fde:	781a      	ldrb	r2, [r3, #0]
     fe0:	2316      	movs	r3, #22
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	3201      	adds	r2, #1
     fe6:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     fe8:	2315      	movs	r3, #21
     fea:	18fa      	adds	r2, r7, r3
     fec:	230b      	movs	r3, #11
     fee:	18fb      	adds	r3, r7, r3
     ff0:	7812      	ldrb	r2, [r2, #0]
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	429a      	cmp	r2, r3
     ff6:	d3de      	bcc.n	fb6 <_adc_set_config+0x9a>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	89db      	ldrh	r3, [r3, #14]
     ffc:	1c18      	adds	r0, r3, #0
     ffe:	4b9f      	ldr	r3, [pc, #636]	; (127c <_adc_set_config+0x360>)
    1000:	4798      	blx	r3
    1002:	e009      	b.n	1018 <_adc_set_config+0xfc>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    1004:	683b      	ldr	r3, [r7, #0]
    1006:	7b1b      	ldrb	r3, [r3, #12]
    1008:	1c18      	adds	r0, r3, #0
    100a:	4b9c      	ldr	r3, [pc, #624]	; (127c <_adc_set_config+0x360>)
    100c:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	89db      	ldrh	r3, [r3, #14]
    1012:	1c18      	adds	r0, r3, #0
    1014:	4b99      	ldr	r3, [pc, #612]	; (127c <_adc_set_config+0x360>)
    1016:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1018:	683b      	ldr	r3, [r7, #0]
    101a:	7d5b      	ldrb	r3, [r3, #21]
    101c:	009b      	lsls	r3, r3, #2
    101e:	b2da      	uxtb	r2, r3
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1024:	683b      	ldr	r3, [r7, #0]
    1026:	7d9b      	ldrb	r3, [r3, #22]
    1028:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    102a:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    102c:	683b      	ldr	r3, [r7, #0]
    102e:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    1030:	b2db      	uxtb	r3, r3
    1032:	4313      	orrs	r3, r2
    1034:	b2db      	uxtb	r3, r3
    1036:	b2da      	uxtb	r2, r3
    1038:	68fb      	ldr	r3, [r7, #12]
    103a:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    103c:	683b      	ldr	r3, [r7, #0]
    103e:	791b      	ldrb	r3, [r3, #4]
    1040:	2b34      	cmp	r3, #52	; 0x34
    1042:	d85a      	bhi.n	10fa <_adc_set_config+0x1de>
    1044:	009a      	lsls	r2, r3, #2
    1046:	4b8e      	ldr	r3, [pc, #568]	; (1280 <_adc_set_config+0x364>)
    1048:	18d3      	adds	r3, r2, r3
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    104e:	231f      	movs	r3, #31
    1050:	18fb      	adds	r3, r7, r3
    1052:	683a      	ldr	r2, [r7, #0]
    1054:	7c52      	ldrb	r2, [r2, #17]
    1056:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    1058:	2317      	movs	r3, #23
    105a:	18fb      	adds	r3, r7, r3
    105c:	683a      	ldr	r2, [r7, #0]
    105e:	7c12      	ldrb	r2, [r2, #16]
    1060:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1062:	2310      	movs	r3, #16
    1064:	61bb      	str	r3, [r7, #24]
		break;
    1066:	e04a      	b.n	10fe <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    1068:	231f      	movs	r3, #31
    106a:	18fb      	adds	r3, r7, r3
    106c:	2201      	movs	r2, #1
    106e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1070:	2317      	movs	r3, #23
    1072:	18fb      	adds	r3, r7, r3
    1074:	2202      	movs	r2, #2
    1076:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1078:	2310      	movs	r3, #16
    107a:	61bb      	str	r3, [r7, #24]
		break;
    107c:	e03f      	b.n	10fe <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    107e:	231f      	movs	r3, #31
    1080:	18fb      	adds	r3, r7, r3
    1082:	2202      	movs	r2, #2
    1084:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1086:	2317      	movs	r3, #23
    1088:	18fb      	adds	r3, r7, r3
    108a:	2204      	movs	r2, #4
    108c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    108e:	2310      	movs	r3, #16
    1090:	61bb      	str	r3, [r7, #24]
		break;
    1092:	e034      	b.n	10fe <_adc_set_config+0x1e2>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
    1094:	2313      	movs	r3, #19
    1096:	18fb      	adds	r3, r7, r3
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	2b02      	cmp	r3, #2
    109c:	d804      	bhi.n	10a8 <_adc_set_config+0x18c>
			adjres = ADC_DIVIDE_RESULT_8;
    109e:	231f      	movs	r3, #31
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	2203      	movs	r2, #3
    10a4:	701a      	strb	r2, [r3, #0]
    10a6:	e003      	b.n	10b0 <_adc_set_config+0x194>
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
    10a8:	231f      	movs	r3, #31
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	2201      	movs	r2, #1
    10ae:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    10b0:	2317      	movs	r3, #23
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	2206      	movs	r2, #6
    10b6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    10b8:	2310      	movs	r3, #16
    10ba:	61bb      	str	r3, [r7, #24]
		break;
    10bc:	e01f      	b.n	10fe <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
    10be:	2313      	movs	r3, #19
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2b02      	cmp	r3, #2
    10c6:	d804      	bhi.n	10d2 <_adc_set_config+0x1b6>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
    10c8:	231f      	movs	r3, #31
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	2204      	movs	r2, #4
    10ce:	701a      	strb	r2, [r3, #0]
    10d0:	e003      	b.n	10da <_adc_set_config+0x1be>
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
    10d2:	231f      	movs	r3, #31
    10d4:	18fb      	adds	r3, r7, r3
    10d6:	2200      	movs	r2, #0
    10d8:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    10da:	2317      	movs	r3, #23
    10dc:	18fb      	adds	r3, r7, r3
    10de:	2208      	movs	r2, #8
    10e0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    10e2:	2310      	movs	r3, #16
    10e4:	61bb      	str	r3, [r7, #24]
		break;
    10e6:	e00a      	b.n	10fe <_adc_set_config+0x1e2>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    10e8:	2330      	movs	r3, #48	; 0x30
    10ea:	61bb      	str	r3, [r7, #24]
		break;
    10ec:	e007      	b.n	10fe <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    10ee:	2320      	movs	r3, #32
    10f0:	61bb      	str	r3, [r7, #24]
		break;
    10f2:	e004      	b.n	10fe <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    10f4:	2300      	movs	r3, #0
    10f6:	61bb      	str	r3, [r7, #24]
		break;
    10f8:	e001      	b.n	10fe <_adc_set_config+0x1e2>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    10fa:	2317      	movs	r3, #23
    10fc:	e1a3      	b.n	1446 <_adc_set_config+0x52a>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    10fe:	231f      	movs	r3, #31
    1100:	18fb      	adds	r3, r7, r3
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	011b      	lsls	r3, r3, #4
    1106:	b2db      	uxtb	r3, r3
    1108:	2270      	movs	r2, #112	; 0x70
    110a:	4013      	ands	r3, r2
    110c:	b2da      	uxtb	r2, r3
    110e:	2317      	movs	r3, #23
    1110:	18fb      	adds	r3, r7, r3
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	4313      	orrs	r3, r2
    1116:	b2da      	uxtb	r2, r3
    1118:	68fb      	ldr	r3, [r7, #12]
    111a:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    111c:	683b      	ldr	r3, [r7, #0]
    111e:	7ddb      	ldrb	r3, [r3, #23]
    1120:	2b3f      	cmp	r3, #63	; 0x3f
    1122:	d901      	bls.n	1128 <_adc_set_config+0x20c>
		return STATUS_ERR_INVALID_ARG;
    1124:	2317      	movs	r3, #23
    1126:	e18e      	b.n	1446 <_adc_set_config+0x52a>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    1128:	683b      	ldr	r3, [r7, #0]
    112a:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    112c:	68fb      	ldr	r3, [r7, #12]
    112e:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    1130:	46c0      	nop			; (mov r8, r8)
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	1c18      	adds	r0, r3, #0
    1136:	4b53      	ldr	r3, [pc, #332]	; (1284 <_adc_set_config+0x368>)
    1138:	4798      	blx	r3
    113a:	1e03      	subs	r3, r0, #0
    113c:	d1f9      	bne.n	1132 <_adc_set_config+0x216>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    113e:	683b      	ldr	r3, [r7, #0]
    1140:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    1142:	69bb      	ldr	r3, [r7, #24]
    1144:	b29b      	uxth	r3, r3
    1146:	4313      	orrs	r3, r2
    1148:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    114a:	683b      	ldr	r3, [r7, #0]
    114c:	2124      	movs	r1, #36	; 0x24
    114e:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    1150:	b29b      	uxth	r3, r3
    1152:	00db      	lsls	r3, r3, #3
    1154:	b29b      	uxth	r3, r3
    1156:	4313      	orrs	r3, r2
    1158:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    115a:	683b      	ldr	r3, [r7, #0]
    115c:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    115e:	b29b      	uxth	r3, r3
    1160:	009b      	lsls	r3, r3, #2
    1162:	b29b      	uxth	r3, r3
    1164:	4313      	orrs	r3, r2
    1166:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1168:	683b      	ldr	r3, [r7, #0]
    116a:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    116c:	b29b      	uxth	r3, r3
    116e:	18db      	adds	r3, r3, r3
    1170:	b29b      	uxth	r3, r3
    1172:	4313      	orrs	r3, r2
    1174:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1176:	683b      	ldr	r3, [r7, #0]
    1178:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    117a:	b29b      	uxth	r3, r3
    117c:	4313      	orrs	r3, r2
    117e:	b29a      	uxth	r2, r3
    1180:	68fb      	ldr	r3, [r7, #12]
    1182:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1184:	683b      	ldr	r3, [r7, #0]
    1186:	7e1b      	ldrb	r3, [r3, #24]
    1188:	2b00      	cmp	r3, #0
    118a:	d100      	bne.n	118e <_adc_set_config+0x272>
    118c:	e0ba      	b.n	1304 <_adc_set_config+0x3e8>
		switch (resolution) {
    118e:	69bb      	ldr	r3, [r7, #24]
    1190:	2b10      	cmp	r3, #16
    1192:	d100      	bne.n	1196 <_adc_set_config+0x27a>
    1194:	e08f      	b.n	12b6 <_adc_set_config+0x39a>
    1196:	d802      	bhi.n	119e <_adc_set_config+0x282>
    1198:	2b00      	cmp	r3, #0
    119a:	d04d      	beq.n	1238 <_adc_set_config+0x31c>
    119c:	e0b2      	b.n	1304 <_adc_set_config+0x3e8>
    119e:	2b20      	cmp	r3, #32
    11a0:	d023      	beq.n	11ea <_adc_set_config+0x2ce>
    11a2:	2b30      	cmp	r3, #48	; 0x30
    11a4:	d000      	beq.n	11a8 <_adc_set_config+0x28c>
    11a6:	e0ad      	b.n	1304 <_adc_set_config+0x3e8>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    11a8:	683b      	ldr	r3, [r7, #0]
    11aa:	7cdb      	ldrb	r3, [r3, #19]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d011      	beq.n	11d4 <_adc_set_config+0x2b8>
					(config->window.window_lower_value > 127 ||
    11b0:	683b      	ldr	r3, [r7, #0]
    11b2:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    11b4:	2b7f      	cmp	r3, #127	; 0x7f
    11b6:	dc0b      	bgt.n	11d0 <_adc_set_config+0x2b4>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    11b8:	683b      	ldr	r3, [r7, #0]
    11ba:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    11bc:	3380      	adds	r3, #128	; 0x80
    11be:	db07      	blt.n	11d0 <_adc_set_config+0x2b4>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    11c0:	683b      	ldr	r3, [r7, #0]
    11c2:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    11c4:	2b7f      	cmp	r3, #127	; 0x7f
    11c6:	dc03      	bgt.n	11d0 <_adc_set_config+0x2b4>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    11cc:	3380      	adds	r3, #128	; 0x80
    11ce:	da01      	bge.n	11d4 <_adc_set_config+0x2b8>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    11d0:	2317      	movs	r3, #23
    11d2:	e138      	b.n	1446 <_adc_set_config+0x52a>
			} else if (config->window.window_lower_value > 255 ||
    11d4:	683b      	ldr	r3, [r7, #0]
    11d6:	69db      	ldr	r3, [r3, #28]
    11d8:	2bff      	cmp	r3, #255	; 0xff
    11da:	dc03      	bgt.n	11e4 <_adc_set_config+0x2c8>
					config->window.window_upper_value > 255){
    11dc:	683b      	ldr	r3, [r7, #0]
    11de:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    11e0:	2bff      	cmp	r3, #255	; 0xff
    11e2:	dd01      	ble.n	11e8 <_adc_set_config+0x2cc>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    11e4:	2317      	movs	r3, #23
    11e6:	e12e      	b.n	1446 <_adc_set_config+0x52a>
			}
			break;
    11e8:	e08c      	b.n	1304 <_adc_set_config+0x3e8>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    11ea:	683b      	ldr	r3, [r7, #0]
    11ec:	7cdb      	ldrb	r3, [r3, #19]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d015      	beq.n	121e <_adc_set_config+0x302>
					(config->window.window_lower_value > 511 ||
    11f2:	683b      	ldr	r3, [r7, #0]
    11f4:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    11f6:	4a24      	ldr	r2, [pc, #144]	; (1288 <_adc_set_config+0x36c>)
    11f8:	4293      	cmp	r3, r2
    11fa:	dc0e      	bgt.n	121a <_adc_set_config+0x2fe>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    11fc:	683b      	ldr	r3, [r7, #0]
    11fe:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    1200:	4a22      	ldr	r2, [pc, #136]	; (128c <_adc_set_config+0x370>)
    1202:	4293      	cmp	r3, r2
    1204:	db09      	blt.n	121a <_adc_set_config+0x2fe>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    120a:	4a1f      	ldr	r2, [pc, #124]	; (1288 <_adc_set_config+0x36c>)
    120c:	4293      	cmp	r3, r2
    120e:	dc04      	bgt.n	121a <_adc_set_config+0x2fe>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
    1210:	683b      	ldr	r3, [r7, #0]
    1212:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    1214:	4a1d      	ldr	r2, [pc, #116]	; (128c <_adc_set_config+0x370>)
    1216:	4293      	cmp	r3, r2
    1218:	da01      	bge.n	121e <_adc_set_config+0x302>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    121a:	2317      	movs	r3, #23
    121c:	e113      	b.n	1446 <_adc_set_config+0x52a>
			} else if (config->window.window_lower_value > 1023 ||
    121e:	683b      	ldr	r3, [r7, #0]
    1220:	69db      	ldr	r3, [r3, #28]
    1222:	4a1b      	ldr	r2, [pc, #108]	; (1290 <_adc_set_config+0x374>)
    1224:	4293      	cmp	r3, r2
    1226:	dc04      	bgt.n	1232 <_adc_set_config+0x316>
					config->window.window_upper_value > 1023){
    1228:	683b      	ldr	r3, [r7, #0]
    122a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    122c:	4a18      	ldr	r2, [pc, #96]	; (1290 <_adc_set_config+0x374>)
    122e:	4293      	cmp	r3, r2
    1230:	dd01      	ble.n	1236 <_adc_set_config+0x31a>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1232:	2317      	movs	r3, #23
    1234:	e107      	b.n	1446 <_adc_set_config+0x52a>
			}
			break;
    1236:	e065      	b.n	1304 <_adc_set_config+0x3e8>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1238:	683b      	ldr	r3, [r7, #0]
    123a:	7cdb      	ldrb	r3, [r3, #19]
    123c:	2b00      	cmp	r3, #0
    123e:	d02d      	beq.n	129c <_adc_set_config+0x380>
					(config->window.window_lower_value > 2047 ||
    1240:	683b      	ldr	r3, [r7, #0]
    1242:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1244:	4a13      	ldr	r2, [pc, #76]	; (1294 <_adc_set_config+0x378>)
    1246:	4293      	cmp	r3, r2
    1248:	dc0e      	bgt.n	1268 <_adc_set_config+0x34c>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    124a:	683b      	ldr	r3, [r7, #0]
    124c:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    124e:	4a12      	ldr	r2, [pc, #72]	; (1298 <_adc_set_config+0x37c>)
    1250:	4293      	cmp	r3, r2
    1252:	db09      	blt.n	1268 <_adc_set_config+0x34c>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    1254:	683b      	ldr	r3, [r7, #0]
    1256:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    1258:	4a0e      	ldr	r2, [pc, #56]	; (1294 <_adc_set_config+0x378>)
    125a:	4293      	cmp	r3, r2
    125c:	dc04      	bgt.n	1268 <_adc_set_config+0x34c>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    1262:	4a0d      	ldr	r2, [pc, #52]	; (1298 <_adc_set_config+0x37c>)
    1264:	4293      	cmp	r3, r2
    1266:	da19      	bge.n	129c <_adc_set_config+0x380>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1268:	2317      	movs	r3, #23
    126a:	e0ec      	b.n	1446 <_adc_set_config+0x52a>
    126c:	41002018 	.word	0x41002018
    1270:	00000cf9 	.word	0x00000cf9
    1274:	00003151 	.word	0x00003151
    1278:	00003195 	.word	0x00003195
    127c:	00000ea5 	.word	0x00000ea5
    1280:	00004720 	.word	0x00004720
    1284:	00000dd1 	.word	0x00000dd1
    1288:	000001ff 	.word	0x000001ff
    128c:	fffffe00 	.word	0xfffffe00
    1290:	000003ff 	.word	0x000003ff
    1294:	000007ff 	.word	0x000007ff
    1298:	fffff800 	.word	0xfffff800
			} else if (config->window.window_lower_value > 4095 ||
    129c:	683b      	ldr	r3, [r7, #0]
    129e:	69db      	ldr	r3, [r3, #28]
    12a0:	4a6b      	ldr	r2, [pc, #428]	; (1450 <_adc_set_config+0x534>)
    12a2:	4293      	cmp	r3, r2
    12a4:	dc04      	bgt.n	12b0 <_adc_set_config+0x394>
					config->window.window_upper_value > 4095){
    12a6:	683b      	ldr	r3, [r7, #0]
    12a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    12aa:	4a69      	ldr	r2, [pc, #420]	; (1450 <_adc_set_config+0x534>)
    12ac:	4293      	cmp	r3, r2
    12ae:	dd01      	ble.n	12b4 <_adc_set_config+0x398>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    12b0:	2317      	movs	r3, #23
    12b2:	e0c8      	b.n	1446 <_adc_set_config+0x52a>
			}
			break;
    12b4:	e026      	b.n	1304 <_adc_set_config+0x3e8>
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    12b6:	683b      	ldr	r3, [r7, #0]
    12b8:	7cdb      	ldrb	r3, [r3, #19]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d015      	beq.n	12ea <_adc_set_config+0x3ce>
					(config->window.window_lower_value > 32767 ||
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    12c2:	4a64      	ldr	r2, [pc, #400]	; (1454 <_adc_set_config+0x538>)
    12c4:	4293      	cmp	r3, r2
    12c6:	dc0e      	bgt.n	12e6 <_adc_set_config+0x3ca>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    12cc:	4a62      	ldr	r2, [pc, #392]	; (1458 <_adc_set_config+0x53c>)
    12ce:	4293      	cmp	r3, r2
    12d0:	db09      	blt.n	12e6 <_adc_set_config+0x3ca>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    12d2:	683b      	ldr	r3, [r7, #0]
    12d4:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    12d6:	4a5f      	ldr	r2, [pc, #380]	; (1454 <_adc_set_config+0x538>)
    12d8:	4293      	cmp	r3, r2
    12da:	dc04      	bgt.n	12e6 <_adc_set_config+0x3ca>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    12dc:	683b      	ldr	r3, [r7, #0]
    12de:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    12e0:	4a5d      	ldr	r2, [pc, #372]	; (1458 <_adc_set_config+0x53c>)
    12e2:	4293      	cmp	r3, r2
    12e4:	da01      	bge.n	12ea <_adc_set_config+0x3ce>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    12e6:	2317      	movs	r3, #23
    12e8:	e0ad      	b.n	1446 <_adc_set_config+0x52a>
			} else if (config->window.window_lower_value > 65535 ||
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	69db      	ldr	r3, [r3, #28]
    12ee:	4a5b      	ldr	r2, [pc, #364]	; (145c <_adc_set_config+0x540>)
    12f0:	4293      	cmp	r3, r2
    12f2:	dc04      	bgt.n	12fe <_adc_set_config+0x3e2>
					config->window.window_upper_value > 65535){
    12f4:	683b      	ldr	r3, [r7, #0]
    12f6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    12f8:	4a58      	ldr	r2, [pc, #352]	; (145c <_adc_set_config+0x540>)
    12fa:	4293      	cmp	r3, r2
    12fc:	dd01      	ble.n	1302 <_adc_set_config+0x3e6>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    12fe:	2317      	movs	r3, #23
    1300:	e0a1      	b.n	1446 <_adc_set_config+0x52a>
			}
			break;
    1302:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    1304:	46c0      	nop			; (mov r8, r8)
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	1c18      	adds	r0, r3, #0
    130a:	4b55      	ldr	r3, [pc, #340]	; (1460 <_adc_set_config+0x544>)
    130c:	4798      	blx	r3
    130e:	1e03      	subs	r3, r0, #0
    1310:	d1f9      	bne.n	1306 <_adc_set_config+0x3ea>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    1312:	683b      	ldr	r3, [r7, #0]
    1314:	7e1a      	ldrb	r2, [r3, #24]
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	1c18      	adds	r0, r3, #0
    1320:	4b4f      	ldr	r3, [pc, #316]	; (1460 <_adc_set_config+0x544>)
    1322:	4798      	blx	r3
    1324:	1e03      	subs	r3, r0, #0
    1326:	d1f9      	bne.n	131c <_adc_set_config+0x400>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    1328:	683b      	ldr	r3, [r7, #0]
    132a:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    132c:	b29a      	uxth	r2, r3
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	1c18      	adds	r0, r3, #0
    1338:	4b49      	ldr	r3, [pc, #292]	; (1460 <_adc_set_config+0x544>)
    133a:	4798      	blx	r3
    133c:	1e03      	subs	r3, r0, #0
    133e:	d1f9      	bne.n	1334 <_adc_set_config+0x418>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1340:	683b      	ldr	r3, [r7, #0]
    1342:	6a1b      	ldr	r3, [r3, #32]
    1344:	b29a      	uxth	r2, r3
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    134a:	2314      	movs	r3, #20
    134c:	18fb      	adds	r3, r7, r3
    134e:	683a      	ldr	r2, [r7, #0]
    1350:	212c      	movs	r1, #44	; 0x2c
    1352:	5c52      	ldrb	r2, [r2, r1]
    1354:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    1356:	2314      	movs	r3, #20
    1358:	18fb      	adds	r3, r7, r3
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	2b00      	cmp	r3, #0
    135e:	d006      	beq.n	136e <_adc_set_config+0x452>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    1360:	2314      	movs	r3, #20
    1362:	18fb      	adds	r3, r7, r3
    1364:	781a      	ldrb	r2, [r3, #0]
    1366:	2314      	movs	r3, #20
    1368:	18fb      	adds	r3, r7, r3
    136a:	3a01      	subs	r2, #1
    136c:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    136e:	2314      	movs	r3, #20
    1370:	18fb      	adds	r3, r7, r3
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	2b0f      	cmp	r3, #15
    1376:	d804      	bhi.n	1382 <_adc_set_config+0x466>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	222b      	movs	r2, #43	; 0x2b
    137c:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    137e:	2b0f      	cmp	r3, #15
    1380:	d901      	bls.n	1386 <_adc_set_config+0x46a>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    1382:	2317      	movs	r3, #23
    1384:	e05f      	b.n	1446 <_adc_set_config+0x52a>
	}

	while (adc_is_syncing(module_inst)) {
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	1c18      	adds	r0, r3, #0
    138c:	4b34      	ldr	r3, [pc, #208]	; (1460 <_adc_set_config+0x544>)
    138e:	4798      	blx	r3
    1390:	1e03      	subs	r3, r0, #0
    1392:	d1f9      	bne.n	1388 <_adc_set_config+0x46c>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    1394:	683b      	ldr	r3, [r7, #0]
    1396:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    1398:	683a      	ldr	r2, [r7, #0]
    139a:	212b      	movs	r1, #43	; 0x2b
    139c:	5c52      	ldrb	r2, [r2, r1]
    139e:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    13a0:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    13a2:	2214      	movs	r2, #20
    13a4:	18ba      	adds	r2, r7, r2
    13a6:	7812      	ldrb	r2, [r2, #0]
    13a8:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    13aa:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    13ac:	683a      	ldr	r2, [r7, #0]
    13ae:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    13b0:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
    13b2:	683a      	ldr	r2, [r7, #0]
    13b4:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    13b6:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    13bc:	683b      	ldr	r3, [r7, #0]
    13be:	222a      	movs	r2, #42	; 0x2a
    13c0:	5c9a      	ldrb	r2, [r3, r2]
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	220f      	movs	r2, #15
    13ca:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    13cc:	683b      	ldr	r3, [r7, #0]
    13ce:	2224      	movs	r2, #36	; 0x24
    13d0:	5c9b      	ldrb	r3, [r3, r2]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d01d      	beq.n	1412 <_adc_set_config+0x4f6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    13d6:	683b      	ldr	r3, [r7, #0]
    13d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    13da:	4a1d      	ldr	r2, [pc, #116]	; (1450 <_adc_set_config+0x534>)
    13dc:	4293      	cmp	r3, r2
    13de:	d901      	bls.n	13e4 <_adc_set_config+0x4c8>
			return STATUS_ERR_INVALID_ARG;
    13e0:	2317      	movs	r3, #23
    13e2:	e030      	b.n	1446 <_adc_set_config+0x52a>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    13e4:	683b      	ldr	r3, [r7, #0]
    13e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    13ec:	683b      	ldr	r3, [r7, #0]
    13ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    13f0:	b21b      	sxth	r3, r3
    13f2:	4a1c      	ldr	r2, [pc, #112]	; (1464 <_adc_set_config+0x548>)
    13f4:	4293      	cmp	r3, r2
    13f6:	dc05      	bgt.n	1404 <_adc_set_config+0x4e8>
				config->correction.offset_correction < -2048) {
    13f8:	683b      	ldr	r3, [r7, #0]
    13fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    13fc:	b21b      	sxth	r3, r3
    13fe:	4a1a      	ldr	r2, [pc, #104]	; (1468 <_adc_set_config+0x54c>)
    1400:	4293      	cmp	r3, r2
    1402:	da01      	bge.n	1408 <_adc_set_config+0x4ec>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1404:	2317      	movs	r3, #23
    1406:	e01e      	b.n	1446 <_adc_set_config+0x52a>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    140c:	b29a      	uxth	r2, r3
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    1412:	4b16      	ldr	r3, [pc, #88]	; (146c <_adc_set_config+0x550>)
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1418:	b29b      	uxth	r3, r3
    141a:	021b      	lsls	r3, r3, #8
    141c:	b29a      	uxth	r2, r3
    141e:	23e0      	movs	r3, #224	; 0xe0
    1420:	00db      	lsls	r3, r3, #3
    1422:	4013      	ands	r3, r2
    1424:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    1426:	4b12      	ldr	r3, [pc, #72]	; (1470 <_adc_set_config+0x554>)
    1428:	685c      	ldr	r4, [r3, #4]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	0161      	lsls	r1, r4, #5
    142e:	0edd      	lsrs	r5, r3, #27
    1430:	430d      	orrs	r5, r1
    1432:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1434:	b2ab      	uxth	r3, r5
    1436:	21ff      	movs	r1, #255	; 0xff
    1438:	400b      	ands	r3, r1
    143a:	b29b      	uxth	r3, r3
    143c:	4313      	orrs	r3, r2
    143e:	b29a      	uxth	r2, r3
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1444:	2300      	movs	r3, #0
}
    1446:	1c18      	adds	r0, r3, #0
    1448:	46bd      	mov	sp, r7
    144a:	b009      	add	sp, #36	; 0x24
    144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	00000fff 	.word	0x00000fff
    1454:	00007fff 	.word	0x00007fff
    1458:	ffff8000 	.word	0xffff8000
    145c:	0000ffff 	.word	0x0000ffff
    1460:	00000dd1 	.word	0x00000dd1
    1464:	000007ff 	.word	0x000007ff
    1468:	fffff800 	.word	0xfffff800
    146c:	00806024 	.word	0x00806024
    1470:	00806020 	.word	0x00806020

00001474 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1474:	b580      	push	{r7, lr}
    1476:	b086      	sub	sp, #24
    1478:	af00      	add	r7, sp, #0
    147a:	60f8      	str	r0, [r7, #12]
    147c:	60b9      	str	r1, [r7, #8]
    147e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1480:	68fb      	ldr	r3, [r7, #12]
    1482:	68ba      	ldr	r2, [r7, #8]
    1484:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    1486:	2380      	movs	r3, #128	; 0x80
    1488:	025b      	lsls	r3, r3, #9
    148a:	2002      	movs	r0, #2
    148c:	1c19      	adds	r1, r3, #0
    148e:	4b32      	ldr	r3, [pc, #200]	; (1558 <adc_init+0xe4>)
    1490:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	781b      	ldrb	r3, [r3, #0]
    1496:	b2db      	uxtb	r3, r3
    1498:	1c1a      	adds	r2, r3, #0
    149a:	2301      	movs	r3, #1
    149c:	4013      	ands	r3, r2
    149e:	d001      	beq.n	14a4 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    14a0:	2305      	movs	r3, #5
    14a2:	e055      	b.n	1550 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    14a4:	68bb      	ldr	r3, [r7, #8]
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	b2db      	uxtb	r3, r3
    14aa:	1c1a      	adds	r2, r3, #0
    14ac:	2302      	movs	r3, #2
    14ae:	4013      	ands	r3, r2
    14b0:	d001      	beq.n	14b6 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    14b2:	231c      	movs	r3, #28
    14b4:	e04c      	b.n	1550 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	785a      	ldrb	r2, [r3, #1]
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	791b      	ldrb	r3, [r3, #4]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d102      	bne.n	14cc <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    14c6:	2001      	movs	r0, #1
    14c8:	4b24      	ldr	r3, [pc, #144]	; (155c <adc_init+0xe8>)
    14ca:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    14cc:	2317      	movs	r3, #23
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	2200      	movs	r2, #0
    14d2:	701a      	strb	r2, [r3, #0]
    14d4:	e00e      	b.n	14f4 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    14d6:	2317      	movs	r3, #23
    14d8:	18fb      	adds	r3, r7, r3
    14da:	781a      	ldrb	r2, [r3, #0]
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	3202      	adds	r2, #2
    14e0:	0092      	lsls	r2, r2, #2
    14e2:	2100      	movs	r1, #0
    14e4:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    14e6:	2317      	movs	r3, #23
    14e8:	18fb      	adds	r3, r7, r3
    14ea:	781a      	ldrb	r2, [r3, #0]
    14ec:	2317      	movs	r3, #23
    14ee:	18fb      	adds	r3, r7, r3
    14f0:	3201      	adds	r2, #1
    14f2:	701a      	strb	r2, [r3, #0]
    14f4:	2317      	movs	r3, #23
    14f6:	18fb      	adds	r3, r7, r3
    14f8:	781b      	ldrb	r3, [r3, #0]
    14fa:	2b02      	cmp	r3, #2
    14fc:	d9eb      	bls.n	14d6 <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	2200      	movs	r2, #0
    1502:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	2200      	movs	r2, #0
    1508:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	2200      	movs	r2, #0
    150e:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	2200      	movs	r2, #0
    1514:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    1516:	4b12      	ldr	r3, [pc, #72]	; (1560 <adc_init+0xec>)
    1518:	68fa      	ldr	r2, [r7, #12]
    151a:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	222a      	movs	r2, #42	; 0x2a
    1520:	5c9b      	ldrb	r3, [r3, r2]
    1522:	2b00      	cmp	r3, #0
    1524:	d10a      	bne.n	153c <adc_init+0xc8>
			!config->freerunning) {
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	7d1b      	ldrb	r3, [r3, #20]
    152a:	2201      	movs	r2, #1
    152c:	4053      	eors	r3, r2
    152e:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1530:	2b00      	cmp	r3, #0
    1532:	d003      	beq.n	153c <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	2201      	movs	r2, #1
    1538:	775a      	strb	r2, [r3, #29]
    153a:	e002      	b.n	1542 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	2200      	movs	r2, #0
    1540:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    1542:	68fa      	ldr	r2, [r7, #12]
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	1c10      	adds	r0, r2, #0
    1548:	1c19      	adds	r1, r3, #0
    154a:	4b06      	ldr	r3, [pc, #24]	; (1564 <adc_init+0xf0>)
    154c:	4798      	blx	r3
    154e:	1c03      	adds	r3, r0, #0
}
    1550:	1c18      	adds	r0, r3, #0
    1552:	46bd      	mov	sp, r7
    1554:	b006      	add	sp, #24
    1556:	bd80      	pop	{r7, pc}
    1558:	00000d0d 	.word	0x00000d0d
    155c:	00000d91 	.word	0x00000d91
    1560:	200000d0 	.word	0x200000d0
    1564:	00000f1d 	.word	0x00000f1d

00001568 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1568:	b580      	push	{r7, lr}
    156a:	b084      	sub	sp, #16
    156c:	af00      	add	r7, sp, #0
    156e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	7e5b      	ldrb	r3, [r3, #25]
    157a:	b2db      	uxtb	r3, r3
    157c:	b2db      	uxtb	r3, r3
    157e:	b25b      	sxtb	r3, r3
    1580:	2b00      	cmp	r3, #0
    1582:	da01      	bge.n	1588 <adc_is_syncing+0x20>
		return true;
    1584:	2301      	movs	r3, #1
    1586:	e000      	b.n	158a <adc_is_syncing+0x22>
	}

	return false;
    1588:	2300      	movs	r3, #0
}
    158a:	1c18      	adds	r0, r3, #0
    158c:	46bd      	mov	sp, r7
    158e:	b004      	add	sp, #16
    1590:	bd80      	pop	{r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)

00001594 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1594:	b580      	push	{r7, lr}
    1596:	b084      	sub	sp, #16
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	687b      	ldr	r3, [r7, #4]
    15a6:	1c18      	adds	r0, r3, #0
    15a8:	4b0a      	ldr	r3, [pc, #40]	; (15d4 <adc_start_conversion+0x40>)
    15aa:	4798      	blx	r3
    15ac:	1e03      	subs	r3, r0, #0
    15ae:	d1f9      	bne.n	15a4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	7b1b      	ldrb	r3, [r3, #12]
    15b4:	b2db      	uxtb	r3, r3
    15b6:	2202      	movs	r2, #2
    15b8:	4313      	orrs	r3, r2
    15ba:	b2da      	uxtb	r2, r3
    15bc:	68fb      	ldr	r3, [r7, #12]
    15be:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    15c0:	46c0      	nop			; (mov r8, r8)
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	1c18      	adds	r0, r3, #0
    15c6:	4b03      	ldr	r3, [pc, #12]	; (15d4 <adc_start_conversion+0x40>)
    15c8:	4798      	blx	r3
    15ca:	1e03      	subs	r3, r0, #0
    15cc:	d1f9      	bne.n	15c2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    15ce:	46bd      	mov	sp, r7
    15d0:	b004      	add	sp, #16
    15d2:	bd80      	pop	{r7, pc}
    15d4:	00001569 	.word	0x00001569

000015d8 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
    15e0:	1c0a      	adds	r2, r1, #0
    15e2:	1cfb      	adds	r3, r7, #3
    15e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	1cfa      	adds	r2, r7, #3
    15f0:	7812      	ldrb	r2, [r2, #0]
    15f2:	75da      	strb	r2, [r3, #23]
}
    15f4:	46bd      	mov	sp, r7
    15f6:	b004      	add	sp, #16
    15f8:	bd80      	pop	{r7, pc}
    15fa:	46c0      	nop			; (mov r8, r8)

000015fc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    15fc:	b580      	push	{r7, lr}
    15fe:	b084      	sub	sp, #16
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
    1604:	1c0a      	adds	r2, r1, #0
    1606:	1cfb      	adds	r3, r7, #3
    1608:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1610:	68fb      	ldr	r3, [r7, #12]
    1612:	1cfa      	adds	r2, r7, #3
    1614:	7812      	ldrb	r2, [r2, #0]
    1616:	759a      	strb	r2, [r3, #22]
}
    1618:	46bd      	mov	sp, r7
    161a:	b004      	add	sp, #16
    161c:	bd80      	pop	{r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)

00001620 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    1620:	b580      	push	{r7, lr}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	1c02      	adds	r2, r0, #0
    1628:	1dfb      	adds	r3, r7, #7
    162a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    162c:	1dfb      	adds	r3, r7, #7
    162e:	781a      	ldrb	r2, [r3, #0]
    1630:	4b43      	ldr	r3, [pc, #268]	; (1740 <_adc_interrupt_handler+0x120>)
    1632:	0092      	lsls	r2, r2, #2
    1634:	58d3      	ldr	r3, [r2, r3]
    1636:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    1638:	68fb      	ldr	r3, [r7, #12]
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	7e1b      	ldrb	r3, [r3, #24]
    163e:	b2db      	uxtb	r3, r3
    1640:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    1642:	68bb      	ldr	r3, [r7, #8]
    1644:	2201      	movs	r2, #1
    1646:	4013      	ands	r3, r2
    1648:	d045      	beq.n	16d6 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	7edb      	ldrb	r3, [r3, #27]
    164e:	1c1a      	adds	r2, r3, #0
    1650:	2301      	movs	r3, #1
    1652:	4013      	ands	r3, r2
    1654:	d03f      	beq.n	16d6 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	7e9b      	ldrb	r3, [r3, #26]
    165a:	1c1a      	adds	r2, r3, #0
    165c:	2301      	movs	r3, #1
    165e:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1660:	d039      	beq.n	16d6 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1662:	68fb      	ldr	r3, [r7, #12]
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	2201      	movs	r2, #1
    1668:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	68fb      	ldr	r3, [r7, #12]
    166e:	1c18      	adds	r0, r3, #0
    1670:	4b34      	ldr	r3, [pc, #208]	; (1744 <_adc_interrupt_handler+0x124>)
    1672:	4798      	blx	r3
    1674:	1e03      	subs	r3, r0, #0
    1676:	d1f9      	bne.n	166c <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	695b      	ldr	r3, [r3, #20]
    167c:	1c99      	adds	r1, r3, #2
    167e:	68fa      	ldr	r2, [r7, #12]
    1680:	6151      	str	r1, [r2, #20]
    1682:	68fa      	ldr	r2, [r7, #12]
    1684:	6812      	ldr	r2, [r2, #0]
    1686:	8b52      	ldrh	r2, [r2, #26]
    1688:	b292      	uxth	r2, r2
    168a:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	8b1b      	ldrh	r3, [r3, #24]
    1690:	b29b      	uxth	r3, r3
    1692:	3b01      	subs	r3, #1
    1694:	b29b      	uxth	r3, r3
    1696:	68fa      	ldr	r2, [r7, #12]
    1698:	1c19      	adds	r1, r3, #0
    169a:	8311      	strh	r1, [r2, #24]
    169c:	2b00      	cmp	r3, #0
    169e:	d008      	beq.n	16b2 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	7f5b      	ldrb	r3, [r3, #29]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d016      	beq.n	16d6 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    16a8:	68fb      	ldr	r3, [r7, #12]
    16aa:	1c18      	adds	r0, r3, #0
    16ac:	4b26      	ldr	r3, [pc, #152]	; (1748 <_adc_interrupt_handler+0x128>)
    16ae:	4798      	blx	r3
    16b0:	e011      	b.n	16d6 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	7f1b      	ldrb	r3, [r3, #28]
    16b6:	b2db      	uxtb	r3, r3
    16b8:	2b05      	cmp	r3, #5
    16ba:	d10c      	bne.n	16d6 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	2200      	movs	r2, #0
    16c0:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    16c2:	68fb      	ldr	r3, [r7, #12]
    16c4:	1c18      	adds	r0, r3, #0
    16c6:	2101      	movs	r1, #1
    16c8:	4b20      	ldr	r3, [pc, #128]	; (174c <_adc_interrupt_handler+0x12c>)
    16ca:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    16cc:	68fb      	ldr	r3, [r7, #12]
    16ce:	689b      	ldr	r3, [r3, #8]
    16d0:	68fa      	ldr	r2, [r7, #12]
    16d2:	1c10      	adds	r0, r2, #0
    16d4:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    16d6:	68bb      	ldr	r3, [r7, #8]
    16d8:	2204      	movs	r2, #4
    16da:	4013      	ands	r3, r2
    16dc:	d014      	beq.n	1708 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	2204      	movs	r2, #4
    16e4:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	7edb      	ldrb	r3, [r3, #27]
    16ea:	1c1a      	adds	r2, r3, #0
    16ec:	2302      	movs	r3, #2
    16ee:	4013      	ands	r3, r2
    16f0:	d00a      	beq.n	1708 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    16f2:	68fb      	ldr	r3, [r7, #12]
    16f4:	7e9b      	ldrb	r3, [r3, #26]
    16f6:	1c1a      	adds	r2, r3, #0
    16f8:	2302      	movs	r3, #2
    16fa:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    16fc:	d004      	beq.n	1708 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    16fe:	68fb      	ldr	r3, [r7, #12]
    1700:	68db      	ldr	r3, [r3, #12]
    1702:	68fa      	ldr	r2, [r7, #12]
    1704:	1c10      	adds	r0, r2, #0
    1706:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    1708:	68bb      	ldr	r3, [r7, #8]
    170a:	2202      	movs	r2, #2
    170c:	4013      	ands	r3, r2
    170e:	d014      	beq.n	173a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	681b      	ldr	r3, [r3, #0]
    1714:	2202      	movs	r2, #2
    1716:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1718:	68fb      	ldr	r3, [r7, #12]
    171a:	7edb      	ldrb	r3, [r3, #27]
    171c:	1c1a      	adds	r2, r3, #0
    171e:	2304      	movs	r3, #4
    1720:	4013      	ands	r3, r2
    1722:	d00a      	beq.n	173a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	7e9b      	ldrb	r3, [r3, #26]
    1728:	1c1a      	adds	r2, r3, #0
    172a:	2304      	movs	r3, #4
    172c:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    172e:	d004      	beq.n	173a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	691b      	ldr	r3, [r3, #16]
    1734:	68fa      	ldr	r2, [r7, #12]
    1736:	1c10      	adds	r0, r2, #0
    1738:	4798      	blx	r3
		}
	}
}
    173a:	46bd      	mov	sp, r7
    173c:	b004      	add	sp, #16
    173e:	bd80      	pop	{r7, pc}
    1740:	200000d0 	.word	0x200000d0
    1744:	00001569 	.word	0x00001569
    1748:	00001595 	.word	0x00001595
    174c:	000015fd 	.word	0x000015fd

00001750 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1750:	b580      	push	{r7, lr}
    1752:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    1754:	2000      	movs	r0, #0
    1756:	4b02      	ldr	r3, [pc, #8]	; (1760 <ADC_Handler+0x10>)
    1758:	4798      	blx	r3
}
    175a:	46bd      	mov	sp, r7
    175c:	bd80      	pop	{r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001621 	.word	0x00001621

00001764 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    1764:	b580      	push	{r7, lr}
    1766:	b084      	sub	sp, #16
    1768:	af00      	add	r7, sp, #0
    176a:	60f8      	str	r0, [r7, #12]
    176c:	60b9      	str	r1, [r7, #8]
    176e:	1dfb      	adds	r3, r7, #7
    1770:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1772:	1dfb      	adds	r3, r7, #7
    1774:	781a      	ldrb	r2, [r3, #0]
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	3202      	adds	r2, #2
    177a:	0092      	lsls	r2, r2, #2
    177c:	68b9      	ldr	r1, [r7, #8]
    177e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	7e9b      	ldrb	r3, [r3, #26]
    1784:	b2d9      	uxtb	r1, r3
    1786:	1dfb      	adds	r3, r7, #7
    1788:	781b      	ldrb	r3, [r3, #0]
    178a:	2201      	movs	r2, #1
    178c:	409a      	lsls	r2, r3
    178e:	1c13      	adds	r3, r2, #0
    1790:	b2db      	uxtb	r3, r3
    1792:	1c0a      	adds	r2, r1, #0
    1794:	4313      	orrs	r3, r2
    1796:	b2db      	uxtb	r3, r3
    1798:	b2da      	uxtb	r2, r3
    179a:	68fb      	ldr	r3, [r7, #12]
    179c:	769a      	strb	r2, [r3, #26]
}
    179e:	46bd      	mov	sp, r7
    17a0:	b004      	add	sp, #16
    17a2:	bd80      	pop	{r7, pc}

000017a4 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	b084      	sub	sp, #16
    17a8:	af00      	add	r7, sp, #0
    17aa:	60f8      	str	r0, [r7, #12]
    17ac:	60b9      	str	r1, [r7, #8]
    17ae:	1dbb      	adds	r3, r7, #6
    17b0:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	8b1b      	ldrh	r3, [r3, #24]
    17b6:	b29b      	uxth	r3, r3
    17b8:	2b00      	cmp	r3, #0
    17ba:	d104      	bne.n	17c6 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	7f1b      	ldrb	r3, [r3, #28]
    17c0:	b2db      	uxtb	r3, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    17c2:	2b05      	cmp	r3, #5
    17c4:	d101      	bne.n	17ca <adc_read_buffer_job+0x26>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    17c6:	2305      	movs	r3, #5
    17c8:	e017      	b.n	17fa <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    17ca:	68fb      	ldr	r3, [r7, #12]
    17cc:	2205      	movs	r2, #5
    17ce:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	1dba      	adds	r2, r7, #6
    17d4:	8812      	ldrh	r2, [r2, #0]
    17d6:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	68ba      	ldr	r2, [r7, #8]
    17dc:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    17de:	68fb      	ldr	r3, [r7, #12]
    17e0:	1c18      	adds	r0, r3, #0
    17e2:	2101      	movs	r1, #1
    17e4:	4b07      	ldr	r3, [pc, #28]	; (1804 <adc_read_buffer_job+0x60>)
    17e6:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	7f5b      	ldrb	r3, [r3, #29]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d003      	beq.n	17f8 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	1c18      	adds	r0, r3, #0
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <adc_read_buffer_job+0x64>)
    17f6:	4798      	blx	r3
	}

	return STATUS_OK;
    17f8:	2300      	movs	r3, #0
}
    17fa:	1c18      	adds	r0, r3, #0
    17fc:	46bd      	mov	sp, r7
    17fe:	b004      	add	sp, #16
    1800:	bd80      	pop	{r7, pc}
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	000015d9 	.word	0x000015d9
    1808:	00001595 	.word	0x00001595

0000180c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    180c:	b580      	push	{r7, lr}
    180e:	b082      	sub	sp, #8
    1810:	af00      	add	r7, sp, #0
    1812:	1c02      	adds	r2, r0, #0
    1814:	1dfb      	adds	r3, r7, #7
    1816:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1818:	4b06      	ldr	r3, [pc, #24]	; (1834 <system_interrupt_enable+0x28>)
    181a:	1dfa      	adds	r2, r7, #7
    181c:	7812      	ldrb	r2, [r2, #0]
    181e:	1c11      	adds	r1, r2, #0
    1820:	221f      	movs	r2, #31
    1822:	400a      	ands	r2, r1
    1824:	2101      	movs	r1, #1
    1826:	4091      	lsls	r1, r2
    1828:	1c0a      	adds	r2, r1, #0
    182a:	601a      	str	r2, [r3, #0]
}
    182c:	46bd      	mov	sp, r7
    182e:	b002      	add	sp, #8
    1830:	bd80      	pop	{r7, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	e000e100 	.word	0xe000e100

00001838 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1838:	b580      	push	{r7, lr}
    183a:	b084      	sub	sp, #16
    183c:	af00      	add	r7, sp, #0
    183e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	681b      	ldr	r3, [r3, #0]
    1844:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	7e5b      	ldrb	r3, [r3, #25]
    184a:	b2db      	uxtb	r3, r3
    184c:	b2db      	uxtb	r3, r3
    184e:	b25b      	sxtb	r3, r3
    1850:	2b00      	cmp	r3, #0
    1852:	da01      	bge.n	1858 <adc_is_syncing+0x20>
		return true;
    1854:	2301      	movs	r3, #1
    1856:	e000      	b.n	185a <adc_is_syncing+0x22>
	}

	return false;
    1858:	2300      	movs	r3, #0
}
    185a:	1c18      	adds	r0, r3, #0
    185c:	46bd      	mov	sp, r7
    185e:	b004      	add	sp, #16
    1860:	bd80      	pop	{r7, pc}
    1862:	46c0      	nop			; (mov r8, r8)

00001864 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    1864:	b580      	push	{r7, lr}
    1866:	b084      	sub	sp, #16
    1868:	af00      	add	r7, sp, #0
    186a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	681b      	ldr	r3, [r3, #0]
    1870:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	1c18      	adds	r0, r3, #0
    1878:	4b0d      	ldr	r3, [pc, #52]	; (18b0 <adc_enable+0x4c>)
    187a:	4798      	blx	r3
    187c:	1e03      	subs	r3, r0, #0
    187e:	d1f9      	bne.n	1874 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    1880:	2015      	movs	r0, #21
    1882:	4b0c      	ldr	r3, [pc, #48]	; (18b4 <adc_enable+0x50>)
    1884:	4798      	blx	r3
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1886:	68fb      	ldr	r3, [r7, #12]
    1888:	781b      	ldrb	r3, [r3, #0]
    188a:	b2db      	uxtb	r3, r3
    188c:	2202      	movs	r2, #2
    188e:	4313      	orrs	r3, r2
    1890:	b2da      	uxtb	r2, r3
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	1c18      	adds	r0, r3, #0
    189c:	4b04      	ldr	r3, [pc, #16]	; (18b0 <adc_enable+0x4c>)
    189e:	4798      	blx	r3
    18a0:	1e03      	subs	r3, r0, #0
    18a2:	d1f9      	bne.n	1898 <adc_enable+0x34>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    18a4:	2300      	movs	r3, #0
}
    18a6:	1c18      	adds	r0, r3, #0
    18a8:	46bd      	mov	sp, r7
    18aa:	b004      	add	sp, #16
    18ac:	bd80      	pop	{r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00001839 	.word	0x00001839
    18b4:	0000180d 	.word	0x0000180d

000018b8 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	b084      	sub	sp, #16
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	1c0a      	adds	r2, r1, #0
    18c2:	1cfb      	adds	r3, r7, #3
    18c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    18cc:	68fb      	ldr	r3, [r7, #12]
    18ce:	1cfa      	adds	r2, r7, #3
    18d0:	7812      	ldrb	r2, [r2, #0]
    18d2:	75da      	strb	r2, [r3, #23]
}
    18d4:	46bd      	mov	sp, r7
    18d6:	b004      	add	sp, #16
    18d8:	bd80      	pop	{r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)

000018dc <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    18dc:	b580      	push	{r7, lr}
    18de:	b082      	sub	sp, #8
    18e0:	af00      	add	r7, sp, #0
    18e2:	6078      	str	r0, [r7, #4]
    18e4:	1c0a      	adds	r2, r1, #0
    18e6:	1cfb      	adds	r3, r7, #3
    18e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	7edb      	ldrb	r3, [r3, #27]
    18ee:	b2d9      	uxtb	r1, r3
    18f0:	1cfb      	adds	r3, r7, #3
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	2201      	movs	r2, #1
    18f6:	409a      	lsls	r2, r3
    18f8:	1c13      	adds	r3, r2, #0
    18fa:	b2db      	uxtb	r3, r3
    18fc:	1c0a      	adds	r2, r1, #0
    18fe:	4313      	orrs	r3, r2
    1900:	b2db      	uxtb	r3, r3
    1902:	b2da      	uxtb	r2, r3
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    1908:	1cfb      	adds	r3, r7, #3
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	2b01      	cmp	r3, #1
    190e:	d104      	bne.n	191a <adc_enable_callback+0x3e>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	1c18      	adds	r0, r3, #0
    1914:	2104      	movs	r1, #4
    1916:	4b07      	ldr	r3, [pc, #28]	; (1934 <adc_enable_callback+0x58>)
    1918:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    191a:	1cfb      	adds	r3, r7, #3
    191c:	781b      	ldrb	r3, [r3, #0]
    191e:	2b02      	cmp	r3, #2
    1920:	d104      	bne.n	192c <adc_enable_callback+0x50>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	1c18      	adds	r0, r3, #0
    1926:	2102      	movs	r1, #2
    1928:	4b02      	ldr	r3, [pc, #8]	; (1934 <adc_enable_callback+0x58>)
    192a:	4798      	blx	r3
	}
}
    192c:	46bd      	mov	sp, r7
    192e:	b002      	add	sp, #8
    1930:	bd80      	pop	{r7, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	000018b9 	.word	0x000018b9

00001938 <adc_complete_callback>:
//extern struct adc_config config_adc;
extern volatile bool adc_read_done;

void adc_complete_callback(
struct adc_module *const module)
{
    1938:	b580      	push	{r7, lr}
    193a:	b082      	sub	sp, #8
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
	adc_read_done = true;
    1940:	4b02      	ldr	r3, [pc, #8]	; (194c <adc_complete_callback+0x14>)
    1942:	2201      	movs	r2, #1
    1944:	701a      	strb	r2, [r3, #0]
}
    1946:	46bd      	mov	sp, r7
    1948:	b002      	add	sp, #8
    194a:	bd80      	pop	{r7, pc}
    194c:	20000065 	.word	0x20000065

00001950 <configure_adc>:

struct adc_config config_adc;

void configure_adc(void)
{
    1950:	b580      	push	{r7, lr}
    1952:	af00      	add	r7, sp, #0
	adc_get_config_defaults(&config_adc);
    1954:	4b0e      	ldr	r3, [pc, #56]	; (1990 <configure_adc+0x40>)
    1956:	1c18      	adds	r0, r3, #0
    1958:	4b0e      	ldr	r3, [pc, #56]	; (1994 <configure_adc+0x44>)
    195a:	4798      	blx	r3
	//! [setup_config_defaults]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    195c:	4b0c      	ldr	r3, [pc, #48]	; (1990 <configure_adc+0x40>)
    195e:	2280      	movs	r2, #128	; 0x80
    1960:	0052      	lsls	r2, r2, #1
    1962:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    1964:	4b0a      	ldr	r3, [pc, #40]	; (1990 <configure_adc+0x40>)
    1966:	2202      	movs	r2, #2
    1968:	705a      	strb	r2, [r3, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN10;		  // start at AD0
    196a:	4b09      	ldr	r3, [pc, #36]	; (1990 <configure_adc+0x40>)
    196c:	220a      	movs	r2, #10
    196e:	731a      	strb	r2, [r3, #12]
	config_adc.resolution      = ADC_RESOLUTION_8BIT;
    1970:	4b07      	ldr	r3, [pc, #28]	; (1990 <configure_adc+0x40>)
    1972:	2230      	movs	r2, #48	; 0x30
    1974:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    1976:	4a08      	ldr	r2, [pc, #32]	; (1998 <configure_adc+0x48>)
    1978:	4908      	ldr	r1, [pc, #32]	; (199c <configure_adc+0x4c>)
    197a:	4b05      	ldr	r3, [pc, #20]	; (1990 <configure_adc+0x40>)
    197c:	1c10      	adds	r0, r2, #0
    197e:	1c1a      	adds	r2, r3, #0
    1980:	4b07      	ldr	r3, [pc, #28]	; (19a0 <configure_adc+0x50>)
    1982:	4798      	blx	r3
	adc_enable(&adc_instance);
    1984:	4b04      	ldr	r3, [pc, #16]	; (1998 <configure_adc+0x48>)
    1986:	1c18      	adds	r0, r3, #0
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <configure_adc+0x54>)
    198a:	4798      	blx	r3
}
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}
    1990:	200000d4 	.word	0x200000d4
    1994:	00000dfd 	.word	0x00000dfd
    1998:	2000043c 	.word	0x2000043c
    199c:	42004000 	.word	0x42004000
    19a0:	00001475 	.word	0x00001475
    19a4:	00001865 	.word	0x00001865

000019a8 <configure_adc_callbacks>:

void configure_adc_callbacks(void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
	//! [setup_register_callback]
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    19ac:	4a06      	ldr	r2, [pc, #24]	; (19c8 <configure_adc_callbacks+0x20>)
    19ae:	4b07      	ldr	r3, [pc, #28]	; (19cc <configure_adc_callbacks+0x24>)
    19b0:	1c10      	adds	r0, r2, #0
    19b2:	1c19      	adds	r1, r3, #0
    19b4:	2200      	movs	r2, #0
    19b6:	4b06      	ldr	r3, [pc, #24]	; (19d0 <configure_adc_callbacks+0x28>)
    19b8:	4798      	blx	r3
	//! [setup_register_callback]
	//! [setup_enable_callback]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
    19ba:	4b03      	ldr	r3, [pc, #12]	; (19c8 <configure_adc_callbacks+0x20>)
    19bc:	1c18      	adds	r0, r3, #0
    19be:	2100      	movs	r1, #0
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <configure_adc_callbacks+0x2c>)
    19c2:	4798      	blx	r3
	//! [setup_enable_callback]
}
    19c4:	46bd      	mov	sp, r7
    19c6:	bd80      	pop	{r7, pc}
    19c8:	2000043c 	.word	0x2000043c
    19cc:	00001939 	.word	0x00001939
    19d0:	00001765 	.word	0x00001765
    19d4:	000018dd 	.word	0x000018dd

000019d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	1c02      	adds	r2, r0, #0
    19e0:	1dfb      	adds	r3, r7, #7
    19e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    19e4:	230f      	movs	r3, #15
    19e6:	18fb      	adds	r3, r7, r3
    19e8:	1dfa      	adds	r2, r7, #7
    19ea:	7812      	ldrb	r2, [r2, #0]
    19ec:	09d2      	lsrs	r2, r2, #7
    19ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    19f0:	230e      	movs	r3, #14
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	1dfa      	adds	r2, r7, #7
    19f6:	7812      	ldrb	r2, [r2, #0]
    19f8:	0952      	lsrs	r2, r2, #5
    19fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    19fc:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    19fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1a00:	230f      	movs	r3, #15
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d10f      	bne.n	1a2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1a0a:	230f      	movs	r3, #15
    1a0c:	18fb      	adds	r3, r7, r3
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	009b      	lsls	r3, r3, #2
    1a12:	2210      	movs	r2, #16
    1a14:	4694      	mov	ip, r2
    1a16:	44bc      	add	ip, r7
    1a18:	4463      	add	r3, ip
    1a1a:	3b08      	subs	r3, #8
    1a1c:	681a      	ldr	r2, [r3, #0]
    1a1e:	230e      	movs	r3, #14
    1a20:	18fb      	adds	r3, r7, r3
    1a22:	781b      	ldrb	r3, [r3, #0]
    1a24:	01db      	lsls	r3, r3, #7
    1a26:	18d3      	adds	r3, r2, r3
    1a28:	e000      	b.n	1a2c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1a2a:	2300      	movs	r3, #0
	}
}
    1a2c:	1c18      	adds	r0, r3, #0
    1a2e:	46bd      	mov	sp, r7
    1a30:	b004      	add	sp, #16
    1a32:	bd80      	pop	{r7, pc}
    1a34:	41004400 	.word	0x41004400

00001a38 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	b082      	sub	sp, #8
    1a3c:	af00      	add	r7, sp, #0
    1a3e:	1c02      	adds	r2, r0, #0
    1a40:	1dfb      	adds	r3, r7, #7
    1a42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <system_interrupt_enable+0x28>)
    1a46:	1dfa      	adds	r2, r7, #7
    1a48:	7812      	ldrb	r2, [r2, #0]
    1a4a:	1c11      	adds	r1, r2, #0
    1a4c:	221f      	movs	r2, #31
    1a4e:	400a      	ands	r2, r1
    1a50:	2101      	movs	r1, #1
    1a52:	4091      	lsls	r1, r2
    1a54:	1c0a      	adds	r2, r1, #0
    1a56:	601a      	str	r2, [r3, #0]
}
    1a58:	46bd      	mov	sp, r7
    1a5a:	b002      	add	sp, #8
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	e000e100 	.word	0xe000e100

00001a64 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	af00      	add	r7, sp, #0
    1a6a:	1c02      	adds	r2, r0, #0
    1a6c:	1dfb      	adds	r3, r7, #7
    1a6e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	1c18      	adds	r0, r3, #0
    1a76:	4b03      	ldr	r3, [pc, #12]	; (1a84 <port_get_group_from_gpio_pin+0x20>)
    1a78:	4798      	blx	r3
    1a7a:	1c03      	adds	r3, r0, #0
}
    1a7c:	1c18      	adds	r0, r3, #0
    1a7e:	46bd      	mov	sp, r7
    1a80:	b002      	add	sp, #8
    1a82:	bd80      	pop	{r7, pc}
    1a84:	000019d9 	.word	0x000019d9

00001a88 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	b084      	sub	sp, #16
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	1c02      	adds	r2, r0, #0
    1a90:	1dfb      	adds	r3, r7, #7
    1a92:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	1c18      	adds	r0, r3, #0
    1a9a:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <port_pin_toggle_output_level+0x38>)
    1a9c:	4798      	blx	r3
    1a9e:	1c03      	adds	r3, r0, #0
    1aa0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1aa2:	1dfb      	adds	r3, r7, #7
    1aa4:	781b      	ldrb	r3, [r3, #0]
    1aa6:	221f      	movs	r2, #31
    1aa8:	4013      	ands	r3, r2
    1aaa:	2201      	movs	r2, #1
    1aac:	409a      	lsls	r2, r3
    1aae:	1c13      	adds	r3, r2, #0
    1ab0:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	68ba      	ldr	r2, [r7, #8]
    1ab6:	61da      	str	r2, [r3, #28]
}
    1ab8:	46bd      	mov	sp, r7
    1aba:	b004      	add	sp, #16
    1abc:	bd80      	pop	{r7, pc}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	00001a65 	.word	0x00001a65

00001ac4 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	b084      	sub	sp, #16
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ad2:	68fb      	ldr	r3, [r7, #12]
    1ad4:	7bdb      	ldrb	r3, [r3, #15]
    1ad6:	b2db      	uxtb	r3, r3
    1ad8:	1c1a      	adds	r2, r3, #0
    1ada:	2380      	movs	r3, #128	; 0x80
    1adc:	4013      	ands	r3, r2
    1ade:	1e5a      	subs	r2, r3, #1
    1ae0:	4193      	sbcs	r3, r2
    1ae2:	b2db      	uxtb	r3, r3
#endif
}
    1ae4:	1c18      	adds	r0, r3, #0
    1ae6:	46bd      	mov	sp, r7
    1ae8:	b004      	add	sp, #16
    1aea:	bd80      	pop	{r7, pc}

00001aec <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b082      	sub	sp, #8
    1af0:	af00      	add	r7, sp, #0
    1af2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	2200      	movs	r2, #0
    1af8:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	2200      	movs	r2, #0
    1afe:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	2200      	movs	r2, #0
    1b04:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2200      	movs	r2, #0
    1b0a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	2200      	movs	r2, #0
    1b10:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	2200      	movs	r2, #0
    1b16:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	2200      	movs	r2, #0
    1b1c:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	2200      	movs	r2, #0
    1b22:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1b24:	687b      	ldr	r3, [r7, #4]
    1b26:	2200      	movs	r2, #0
    1b28:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	2200      	movs	r2, #0
    1b2e:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2200      	movs	r2, #0
    1b34:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	2200      	movs	r2, #0
    1b3a:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	2200      	movs	r2, #0
    1b40:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2200      	movs	r2, #0
    1b46:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	2200      	movs	r2, #0
    1b4c:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	2200      	movs	r2, #0
    1b52:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	2200      	movs	r2, #0
    1b58:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	2200      	movs	r2, #0
    1b5e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	2200      	movs	r2, #0
    1b64:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	2200      	movs	r2, #0
    1b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    1b6c:	46bd      	mov	sp, r7
    1b6e:	b002      	add	sp, #8
    1b70:	bd80      	pop	{r7, pc}
    1b72:	46c0      	nop			; (mov r8, r8)

00001b74 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b084      	sub	sp, #16
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	1c18      	adds	r0, r3, #0
    1b88:	4b07      	ldr	r3, [pc, #28]	; (1ba8 <tc_enable+0x34>)
    1b8a:	4798      	blx	r3
    1b8c:	1e03      	subs	r3, r0, #0
    1b8e:	d1f9      	bne.n	1b84 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1b90:	68fb      	ldr	r3, [r7, #12]
    1b92:	881b      	ldrh	r3, [r3, #0]
    1b94:	b29b      	uxth	r3, r3
    1b96:	2202      	movs	r2, #2
    1b98:	4313      	orrs	r3, r2
    1b9a:	b29a      	uxth	r2, r3
    1b9c:	68fb      	ldr	r3, [r7, #12]
    1b9e:	801a      	strh	r2, [r3, #0]
}
    1ba0:	46bd      	mov	sp, r7
    1ba2:	b004      	add	sp, #16
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	00001ac5 	.word	0x00001ac5

00001bac <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1bb4:	4a04      	ldr	r2, [pc, #16]	; (1bc8 <_tc_interrupt_get_interrupt_vector+0x1c>)
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	18d3      	adds	r3, r2, r3
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	b2db      	uxtb	r3, r3
    1bbe:	b25b      	sxtb	r3, r3
}
    1bc0:	1c18      	adds	r0, r3, #0
    1bc2:	46bd      	mov	sp, r7
    1bc4:	b002      	add	sp, #8
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	20000000 	.word	0x20000000

00001bcc <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b082      	sub	sp, #8
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
    1bd4:	1c0a      	adds	r2, r1, #0
    1bd6:	1cfb      	adds	r3, r7, #3
    1bd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1bda:	687b      	ldr	r3, [r7, #4]
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	1c18      	adds	r0, r3, #0
    1be0:	4b22      	ldr	r3, [pc, #136]	; (1c6c <tc_enable_callback+0xa0>)
    1be2:	4798      	blx	r3
    1be4:	1c03      	adds	r3, r0, #0
    1be6:	1c18      	adds	r0, r3, #0
    1be8:	4b21      	ldr	r3, [pc, #132]	; (1c70 <tc_enable_callback+0xa4>)
    1bea:	4798      	blx	r3
    1bec:	1c03      	adds	r3, r0, #0
    1bee:	1c18      	adds	r0, r3, #0
    1bf0:	4b20      	ldr	r3, [pc, #128]	; (1c74 <tc_enable_callback+0xa8>)
    1bf2:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1bf4:	1cfb      	adds	r3, r7, #3
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	2b02      	cmp	r3, #2
    1bfa:	d10b      	bne.n	1c14 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	7e5b      	ldrb	r3, [r3, #25]
    1c00:	2210      	movs	r2, #16
    1c02:	4313      	orrs	r3, r2
    1c04:	b2da      	uxtb	r2, r3
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	681b      	ldr	r3, [r3, #0]
    1c0e:	2210      	movs	r2, #16
    1c10:	735a      	strb	r2, [r3, #13]
    1c12:	e027      	b.n	1c64 <tc_enable_callback+0x98>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c14:	1cfb      	adds	r3, r7, #3
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	2b03      	cmp	r3, #3
    1c1a:	d10b      	bne.n	1c34 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	7e5b      	ldrb	r3, [r3, #25]
    1c20:	2220      	movs	r2, #32
    1c22:	4313      	orrs	r3, r2
    1c24:	b2da      	uxtb	r2, r3
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	2220      	movs	r2, #32
    1c30:	735a      	strb	r2, [r3, #13]
    1c32:	e017      	b.n	1c64 <tc_enable_callback+0x98>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	7e5b      	ldrb	r3, [r3, #25]
    1c38:	b2d9      	uxtb	r1, r3
    1c3a:	1cfb      	adds	r3, r7, #3
    1c3c:	781b      	ldrb	r3, [r3, #0]
    1c3e:	2201      	movs	r2, #1
    1c40:	409a      	lsls	r2, r3
    1c42:	1c13      	adds	r3, r2, #0
    1c44:	b2db      	uxtb	r3, r3
    1c46:	1c0a      	adds	r2, r1, #0
    1c48:	4313      	orrs	r3, r2
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	b2da      	uxtb	r2, r3
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	1cfa      	adds	r2, r7, #3
    1c58:	7812      	ldrb	r2, [r2, #0]
    1c5a:	2101      	movs	r1, #1
    1c5c:	4091      	lsls	r1, r2
    1c5e:	1c0a      	adds	r2, r1, #0
    1c60:	b2d2      	uxtb	r2, r2
    1c62:	735a      	strb	r2, [r3, #13]
	}
}
    1c64:	46bd      	mov	sp, r7
    1c66:	b002      	add	sp, #8
    1c68:	bd80      	pop	{r7, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	0000375d 	.word	0x0000375d
    1c70:	00001bad 	.word	0x00001bad
    1c74:	00001a39 	.word	0x00001a39

00001c78 <configure_vel_counters>:

struct tc_module tc7_instance, tc_vel_instance[MAX_TC_AVAIL+1]; //, *tc7ptr, *tc0ptr, *tc1ptr;
					  

void configure_vel_counters(void)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b08e      	sub	sp, #56	; 0x38
    1c7c:	af00      	add	r7, sp, #0
//	uint8_t i, test;
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
    1c7e:	1d3b      	adds	r3, r7, #4
    1c80:	1c18      	adds	r0, r3, #0
    1c82:	4b30      	ldr	r3, [pc, #192]	; (1d44 <configure_vel_counters+0xcc>)
    1c84:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_16BIT;
    1c86:	1d3b      	adds	r3, r7, #4
    1c88:	2200      	movs	r2, #0
    1c8a:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
    1c8c:	1d3b      	adds	r3, r7, #4
    1c8e:	2201      	movs	r2, #1
    1c90:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    1c92:	1d3b      	adds	r3, r7, #4
    1c94:	2200      	movs	r2, #0
    1c96:	809a      	strh	r2, [r3, #4]
//	config_tc.counter_16_bit.period = 0;							   // running at 32500 cnts / sec -- 31 us per cnt
	config_tc.counter_16_bit.compare_capture_channel[0] = 50;
    1c98:	1d3b      	adds	r3, r7, #4
    1c9a:	2232      	movs	r2, #50	; 0x32
    1c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 54;
    1c9e:	1d3b      	adds	r3, r7, #4
    1ca0:	2236      	movs	r2, #54	; 0x36
    1ca2:	859a      	strh	r2, [r3, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	tc_init(tc_vel_instance, TC0, &config_tc);
    1ca4:	4a28      	ldr	r2, [pc, #160]	; (1d48 <configure_vel_counters+0xd0>)
    1ca6:	4929      	ldr	r1, [pc, #164]	; (1d4c <configure_vel_counters+0xd4>)
    1ca8:	1d3b      	adds	r3, r7, #4
    1caa:	1c10      	adds	r0, r2, #0
    1cac:	1c1a      	adds	r2, r3, #0
    1cae:	4b28      	ldr	r3, [pc, #160]	; (1d50 <configure_vel_counters+0xd8>)
    1cb0:	4798      	blx	r3
	tc_init(tc_vel_instance+1, TC1, &config_tc);
    1cb2:	4a28      	ldr	r2, [pc, #160]	; (1d54 <configure_vel_counters+0xdc>)
    1cb4:	4928      	ldr	r1, [pc, #160]	; (1d58 <configure_vel_counters+0xe0>)
    1cb6:	1d3b      	adds	r3, r7, #4
    1cb8:	1c10      	adds	r0, r2, #0
    1cba:	1c1a      	adds	r2, r3, #0
    1cbc:	4b24      	ldr	r3, [pc, #144]	; (1d50 <configure_vel_counters+0xd8>)
    1cbe:	4798      	blx	r3
	tc_init(tc_vel_instance+2, TC2, &config_tc);
    1cc0:	4a26      	ldr	r2, [pc, #152]	; (1d5c <configure_vel_counters+0xe4>)
    1cc2:	4927      	ldr	r1, [pc, #156]	; (1d60 <configure_vel_counters+0xe8>)
    1cc4:	1d3b      	adds	r3, r7, #4
    1cc6:	1c10      	adds	r0, r2, #0
    1cc8:	1c1a      	adds	r2, r3, #0
    1cca:	4b21      	ldr	r3, [pc, #132]	; (1d50 <configure_vel_counters+0xd8>)
    1ccc:	4798      	blx	r3
	tc_init(tc_vel_instance+3, TC3, &config_tc);
    1cce:	4a25      	ldr	r2, [pc, #148]	; (1d64 <configure_vel_counters+0xec>)
    1cd0:	4925      	ldr	r1, [pc, #148]	; (1d68 <configure_vel_counters+0xf0>)
    1cd2:	1d3b      	adds	r3, r7, #4
    1cd4:	1c10      	adds	r0, r2, #0
    1cd6:	1c1a      	adds	r2, r3, #0
    1cd8:	4b1d      	ldr	r3, [pc, #116]	; (1d50 <configure_vel_counters+0xd8>)
    1cda:	4798      	blx	r3
	tc_init(tc_vel_instance+4, TC4, &config_tc);
    1cdc:	4a23      	ldr	r2, [pc, #140]	; (1d6c <configure_vel_counters+0xf4>)
    1cde:	4924      	ldr	r1, [pc, #144]	; (1d70 <configure_vel_counters+0xf8>)
    1ce0:	1d3b      	adds	r3, r7, #4
    1ce2:	1c10      	adds	r0, r2, #0
    1ce4:	1c1a      	adds	r2, r3, #0
    1ce6:	4b1a      	ldr	r3, [pc, #104]	; (1d50 <configure_vel_counters+0xd8>)
    1ce8:	4798      	blx	r3
	tc_init(tc_vel_instance+5, TC5, &config_tc);
    1cea:	4a22      	ldr	r2, [pc, #136]	; (1d74 <configure_vel_counters+0xfc>)
    1cec:	4922      	ldr	r1, [pc, #136]	; (1d78 <configure_vel_counters+0x100>)
    1cee:	1d3b      	adds	r3, r7, #4
    1cf0:	1c10      	adds	r0, r2, #0
    1cf2:	1c1a      	adds	r2, r3, #0
    1cf4:	4b16      	ldr	r3, [pc, #88]	; (1d50 <configure_vel_counters+0xd8>)
    1cf6:	4798      	blx	r3
	tc_init(tc_vel_instance+6, TC6, &config_tc);
    1cf8:	4a20      	ldr	r2, [pc, #128]	; (1d7c <configure_vel_counters+0x104>)
    1cfa:	4921      	ldr	r1, [pc, #132]	; (1d80 <configure_vel_counters+0x108>)
    1cfc:	1d3b      	adds	r3, r7, #4
    1cfe:	1c10      	adds	r0, r2, #0
    1d00:	1c1a      	adds	r2, r3, #0
    1d02:	4b13      	ldr	r3, [pc, #76]	; (1d50 <configure_vel_counters+0xd8>)
    1d04:	4798      	blx	r3
tc1ptr = tc_vel_instance+1;

tc1ptr = tc0ptr - tc7ptr;	  */


	tc_enable(tc_vel_instance);
    1d06:	4b10      	ldr	r3, [pc, #64]	; (1d48 <configure_vel_counters+0xd0>)
    1d08:	1c18      	adds	r0, r3, #0
    1d0a:	4b1e      	ldr	r3, [pc, #120]	; (1d84 <configure_vel_counters+0x10c>)
    1d0c:	4798      	blx	r3
	tc_enable(tc_vel_instance+1);
    1d0e:	4b11      	ldr	r3, [pc, #68]	; (1d54 <configure_vel_counters+0xdc>)
    1d10:	1c18      	adds	r0, r3, #0
    1d12:	4b1c      	ldr	r3, [pc, #112]	; (1d84 <configure_vel_counters+0x10c>)
    1d14:	4798      	blx	r3
	tc_enable(tc_vel_instance+2);
    1d16:	4b11      	ldr	r3, [pc, #68]	; (1d5c <configure_vel_counters+0xe4>)
    1d18:	1c18      	adds	r0, r3, #0
    1d1a:	4b1a      	ldr	r3, [pc, #104]	; (1d84 <configure_vel_counters+0x10c>)
    1d1c:	4798      	blx	r3
	tc_enable(tc_vel_instance+3);
    1d1e:	4b11      	ldr	r3, [pc, #68]	; (1d64 <configure_vel_counters+0xec>)
    1d20:	1c18      	adds	r0, r3, #0
    1d22:	4b18      	ldr	r3, [pc, #96]	; (1d84 <configure_vel_counters+0x10c>)
    1d24:	4798      	blx	r3
	tc_enable(tc_vel_instance+4);
    1d26:	4b11      	ldr	r3, [pc, #68]	; (1d6c <configure_vel_counters+0xf4>)
    1d28:	1c18      	adds	r0, r3, #0
    1d2a:	4b16      	ldr	r3, [pc, #88]	; (1d84 <configure_vel_counters+0x10c>)
    1d2c:	4798      	blx	r3
	tc_enable(tc_vel_instance+5);
    1d2e:	4b11      	ldr	r3, [pc, #68]	; (1d74 <configure_vel_counters+0xfc>)
    1d30:	1c18      	adds	r0, r3, #0
    1d32:	4b14      	ldr	r3, [pc, #80]	; (1d84 <configure_vel_counters+0x10c>)
    1d34:	4798      	blx	r3
	tc_enable(tc_vel_instance+6);
    1d36:	4b11      	ldr	r3, [pc, #68]	; (1d7c <configure_vel_counters+0x104>)
    1d38:	1c18      	adds	r0, r3, #0
    1d3a:	4b12      	ldr	r3, [pc, #72]	; (1d84 <configure_vel_counters+0x10c>)
    1d3c:	4798      	blx	r3
	if (MAX_TC_AVAIL == 8) tc_enable(tc_vel_instance+7);
	
	
}
    1d3e:	46bd      	mov	sp, r7
    1d40:	b00e      	add	sp, #56	; 0x38
    1d42:	bd80      	pop	{r7, pc}
    1d44:	00001aed 	.word	0x00001aed
    1d48:	20000120 	.word	0x20000120
    1d4c:	42002000 	.word	0x42002000
    1d50:	000037ad 	.word	0x000037ad
    1d54:	2000013c 	.word	0x2000013c
    1d58:	42002400 	.word	0x42002400
    1d5c:	20000158 	.word	0x20000158
    1d60:	42002800 	.word	0x42002800
    1d64:	20000174 	.word	0x20000174
    1d68:	42002c00 	.word	0x42002c00
    1d6c:	20000190 	.word	0x20000190
    1d70:	42003000 	.word	0x42003000
    1d74:	200001ac 	.word	0x200001ac
    1d78:	42003400 	.word	0x42003400
    1d7c:	200001c8 	.word	0x200001c8
    1d80:	42003800 	.word	0x42003800
    1d84:	00001b75 	.word	0x00001b75

00001d88 <configure_tc7_callbacks>:

#if MAX_TC_AVAIL !=8			

		void configure_tc7_callbacks(void)
		{
    1d88:	b580      	push	{r7, lr}
    1d8a:	af00      	add	r7, sp, #0
			//! [setup_register_callback]
			tc_register_callback(&tc7_instance, tc7_callback,TC_CALLBACK_OVERFLOW);
    1d8c:	4a06      	ldr	r2, [pc, #24]	; (1da8 <configure_tc7_callbacks+0x20>)
    1d8e:	4b07      	ldr	r3, [pc, #28]	; (1dac <configure_tc7_callbacks+0x24>)
    1d90:	1c10      	adds	r0, r2, #0
    1d92:	1c19      	adds	r1, r3, #0
    1d94:	2200      	movs	r2, #0
    1d96:	4b06      	ldr	r3, [pc, #24]	; (1db0 <configure_tc7_callbacks+0x28>)
    1d98:	4798      	blx	r3

			//! [setup_enable_callback]
			tc_enable_callback(&tc7_instance, TC_CALLBACK_OVERFLOW);
    1d9a:	4b03      	ldr	r3, [pc, #12]	; (1da8 <configure_tc7_callbacks+0x20>)
    1d9c:	1c18      	adds	r0, r3, #0
    1d9e:	2100      	movs	r1, #0
    1da0:	4b04      	ldr	r3, [pc, #16]	; (1db4 <configure_tc7_callbacks+0x2c>)
    1da2:	4798      	blx	r3
		}
    1da4:	46bd      	mov	sp, r7
    1da6:	bd80      	pop	{r7, pc}
    1da8:	20000104 	.word	0x20000104
    1dac:	00001db9 	.word	0x00001db9
    1db0:	000034d1 	.word	0x000034d1
    1db4:	00001bcd 	.word	0x00001bcd

00001db8 <tc7_callback>:
		uint32_t cnt=0, sum=0, avg=0;
		extern uint32_t vel_val[8];
			
		void tc7_callback(
				struct tc_module *const module_inst)
		{
    1db8:	b580      	push	{r7, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
			port_pin_toggle_output_level(TP43_PIN);					// running output for debugging
    1dc0:	2016      	movs	r0, #22
    1dc2:	4b02      	ldr	r3, [pc, #8]	; (1dcc <tc7_callback+0x14>)
    1dc4:	4798      	blx	r3
			{			cnt=0;
				vel_val[0] = 0;
				tc_start_counter (tc_vel_instance);
			}*/
	
		}								 
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b002      	add	sp, #8
    1dca:	bd80      	pop	{r7, pc}
    1dcc:	00001a89 	.word	0x00001a89

00001dd0 <configure_tc7>:
		//! [callback_funcs]
									
		//! [setup]
		void configure_tc7(void)
		{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b08e      	sub	sp, #56	; 0x38
    1dd4:	af00      	add	r7, sp, #0
			//! [setup_config]
			struct tc_config config_tc;
			//! [setup_config]
			//! [setup_config_defaults]
			tc_get_config_defaults(&config_tc);
    1dd6:	1d3b      	adds	r3, r7, #4
    1dd8:	1c18      	adds	r0, r3, #0
    1dda:	4b0f      	ldr	r3, [pc, #60]	; (1e18 <configure_tc7+0x48>)
    1ddc:	4798      	blx	r3
			//! [setup_config_defaults]

			//! [setup_change_config]
				config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    1dde:	1d3b      	adds	r3, r7, #4
    1de0:	2204      	movs	r2, #4
    1de2:	709a      	strb	r2, [r3, #2]
				config_tc.clock_source = GCLK_GENERATOR_1;						// running at 8Mhz
    1de4:	1d3b      	adds	r3, r7, #4
    1de6:	2201      	movs	r2, #1
    1de8:	701a      	strb	r2, [r3, #0]
				config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64;
    1dea:	1d3b      	adds	r3, r7, #4
    1dec:	22a0      	movs	r2, #160	; 0xa0
    1dee:	00d2      	lsls	r2, r2, #3
    1df0:	809a      	strh	r2, [r3, #4]
				config_tc.counter_8_bit.period = 124;						// measured 1khz with scope
    1df2:	1d3b      	adds	r3, r7, #4
    1df4:	2229      	movs	r2, #41	; 0x29
    1df6:	217c      	movs	r1, #124	; 0x7c
    1df8:	5499      	strb	r1, [r3, r2]
			//! [setup_change_config]

			//! [setup_set_config]
			tc_init(&tc7_instance, TC7, &config_tc);
    1dfa:	4a08      	ldr	r2, [pc, #32]	; (1e1c <configure_tc7+0x4c>)
    1dfc:	4908      	ldr	r1, [pc, #32]	; (1e20 <configure_tc7+0x50>)
    1dfe:	1d3b      	adds	r3, r7, #4
    1e00:	1c10      	adds	r0, r2, #0
    1e02:	1c1a      	adds	r2, r3, #0
    1e04:	4b07      	ldr	r3, [pc, #28]	; (1e24 <configure_tc7+0x54>)
    1e06:	4798      	blx	r3
			//! [setup_set_config]

			//! [setup_enable]
			tc_enable(&tc7_instance);
    1e08:	4b04      	ldr	r3, [pc, #16]	; (1e1c <configure_tc7+0x4c>)
    1e0a:	1c18      	adds	r0, r3, #0
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <configure_tc7+0x58>)
    1e0e:	4798      	blx	r3
			//! [setup_enable]
		}
    1e10:	46bd      	mov	sp, r7
    1e12:	b00e      	add	sp, #56	; 0x38
    1e14:	bd80      	pop	{r7, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	00001aed 	.word	0x00001aed
    1e1c:	20000104 	.word	0x20000104
    1e20:	42003c00 	.word	0x42003c00
    1e24:	000037ad 	.word	0x000037ad
    1e28:	00001b75 	.word	0x00001b75

00001e2c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1e32:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <cpu_irq_enter_critical+0x44>)
    1e34:	681b      	ldr	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d112      	bne.n	1e60 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e3a:	f3ef 8310 	mrs	r3, PRIMASK
    1e3e:	607b      	str	r3, [r7, #4]
  return(result);
    1e40:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1e42:	2b00      	cmp	r3, #0
    1e44:	d109      	bne.n	1e5a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1e46:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e48:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1e4c:	4b09      	ldr	r3, [pc, #36]	; (1e74 <cpu_irq_enter_critical+0x48>)
    1e4e:	2200      	movs	r2, #0
    1e50:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1e52:	4b09      	ldr	r3, [pc, #36]	; (1e78 <cpu_irq_enter_critical+0x4c>)
    1e54:	2201      	movs	r2, #1
    1e56:	701a      	strb	r2, [r3, #0]
    1e58:	e002      	b.n	1e60 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1e5a:	4b07      	ldr	r3, [pc, #28]	; (1e78 <cpu_irq_enter_critical+0x4c>)
    1e5c:	2200      	movs	r2, #0
    1e5e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <cpu_irq_enter_critical+0x44>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	1c5a      	adds	r2, r3, #1
    1e66:	4b02      	ldr	r3, [pc, #8]	; (1e70 <cpu_irq_enter_critical+0x44>)
    1e68:	601a      	str	r2, [r3, #0]
}
    1e6a:	46bd      	mov	sp, r7
    1e6c:	b002      	add	sp, #8
    1e6e:	bd80      	pop	{r7, pc}
    1e70:	20000044 	.word	0x20000044
    1e74:	20000008 	.word	0x20000008
    1e78:	20000048 	.word	0x20000048

00001e7c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1e80:	4b0a      	ldr	r3, [pc, #40]	; (1eac <cpu_irq_leave_critical+0x30>)
    1e82:	681b      	ldr	r3, [r3, #0]
    1e84:	1e5a      	subs	r2, r3, #1
    1e86:	4b09      	ldr	r3, [pc, #36]	; (1eac <cpu_irq_leave_critical+0x30>)
    1e88:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <cpu_irq_leave_critical+0x30>)
    1e8c:	681b      	ldr	r3, [r3, #0]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d10a      	bne.n	1ea8 <cpu_irq_leave_critical+0x2c>
    1e92:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <cpu_irq_leave_critical+0x34>)
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	b2db      	uxtb	r3, r3
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d005      	beq.n	1ea8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <cpu_irq_leave_critical+0x38>)
    1e9e:	2201      	movs	r2, #1
    1ea0:	701a      	strb	r2, [r3, #0]
    1ea2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1ea6:	b662      	cpsie	i
	}
}
    1ea8:	46bd      	mov	sp, r7
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	20000044 	.word	0x20000044
    1eb0:	20000048 	.word	0x20000048
    1eb4:	20000008 	.word	0x20000008

00001eb8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b082      	sub	sp, #8
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	2280      	movs	r2, #128	; 0x80
    1ec4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	2200      	movs	r2, #0
    1eca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	2201      	movs	r2, #1
    1ed0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	2200      	movs	r2, #0
    1ed6:	70da      	strb	r2, [r3, #3]
}
    1ed8:	46bd      	mov	sp, r7
    1eda:	b002      	add	sp, #8
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)

00001ee0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b084      	sub	sp, #16
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	1c02      	adds	r2, r0, #0
    1ee8:	6039      	str	r1, [r7, #0]
    1eea:	1dfb      	adds	r3, r7, #7
    1eec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1eee:	230c      	movs	r3, #12
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	1c18      	adds	r0, r3, #0
    1ef4:	4b0f      	ldr	r3, [pc, #60]	; (1f34 <port_pin_set_config+0x54>)
    1ef6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1ef8:	230c      	movs	r3, #12
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	2280      	movs	r2, #128	; 0x80
    1efe:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1f00:	683b      	ldr	r3, [r7, #0]
    1f02:	781a      	ldrb	r2, [r3, #0]
    1f04:	230c      	movs	r3, #12
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1f0a:	683b      	ldr	r3, [r7, #0]
    1f0c:	785a      	ldrb	r2, [r3, #1]
    1f0e:	230c      	movs	r3, #12
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1f14:	683b      	ldr	r3, [r7, #0]
    1f16:	789a      	ldrb	r2, [r3, #2]
    1f18:	230c      	movs	r3, #12
    1f1a:	18fb      	adds	r3, r7, r3
    1f1c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f1e:	1dfb      	adds	r3, r7, #7
    1f20:	781a      	ldrb	r2, [r3, #0]
    1f22:	230c      	movs	r3, #12
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	1c10      	adds	r0, r2, #0
    1f28:	1c19      	adds	r1, r3, #0
    1f2a:	4b03      	ldr	r3, [pc, #12]	; (1f38 <port_pin_set_config+0x58>)
    1f2c:	4798      	blx	r3
}
    1f2e:	46bd      	mov	sp, r7
    1f30:	b004      	add	sp, #16
    1f32:	bd80      	pop	{r7, pc}
    1f34:	00001eb9 	.word	0x00001eb9
    1f38:	00003485 	.word	0x00003485

00001f3c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	b082      	sub	sp, #8
    1f40:	af00      	add	r7, sp, #0
    1f42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	2200      	movs	r2, #0
    1f48:	701a      	strb	r2, [r3, #0]
}
    1f4a:	46bd      	mov	sp, r7
    1f4c:	b002      	add	sp, #8
    1f4e:	bd80      	pop	{r7, pc}

00001f50 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b086      	sub	sp, #24
    1f54:	af00      	add	r7, sp, #0
    1f56:	60f8      	str	r0, [r7, #12]
    1f58:	60b9      	str	r1, [r7, #8]
    1f5a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1f5c:	2316      	movs	r3, #22
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	2200      	movs	r2, #0
    1f62:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1f64:	68bb      	ldr	r3, [r7, #8]
    1f66:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1f68:	68bb      	ldr	r3, [r7, #8]
    1f6a:	085a      	lsrs	r2, r3, #1
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	429a      	cmp	r2, r3
    1f70:	d201      	bcs.n	1f76 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f72:	2340      	movs	r3, #64	; 0x40
    1f74:	e026      	b.n	1fc4 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	085b      	lsrs	r3, r3, #1
    1f7a:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1f7c:	e00a      	b.n	1f94 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1f7e:	693a      	ldr	r2, [r7, #16]
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	1ad3      	subs	r3, r2, r3
    1f84:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1f86:	2316      	movs	r3, #22
    1f88:	18fb      	adds	r3, r7, r3
    1f8a:	881a      	ldrh	r2, [r3, #0]
    1f8c:	2316      	movs	r3, #22
    1f8e:	18fb      	adds	r3, r7, r3
    1f90:	3201      	adds	r2, #1
    1f92:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1f94:	693a      	ldr	r2, [r7, #16]
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	429a      	cmp	r2, r3
    1f9a:	d2f0      	bcs.n	1f7e <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1f9c:	2316      	movs	r3, #22
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	2216      	movs	r2, #22
    1fa2:	18ba      	adds	r2, r7, r2
    1fa4:	8812      	ldrh	r2, [r2, #0]
    1fa6:	3a01      	subs	r2, #1
    1fa8:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1faa:	2316      	movs	r3, #22
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	881b      	ldrh	r3, [r3, #0]
    1fb0:	2bff      	cmp	r3, #255	; 0xff
    1fb2:	d901      	bls.n	1fb8 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fb4:	2340      	movs	r3, #64	; 0x40
    1fb6:	e005      	b.n	1fc4 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2216      	movs	r2, #22
    1fbc:	18ba      	adds	r2, r7, r2
    1fbe:	8812      	ldrh	r2, [r2, #0]
    1fc0:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1fc2:	2300      	movs	r3, #0
	}
}
    1fc4:	1c18      	adds	r0, r3, #0
    1fc6:	46bd      	mov	sp, r7
    1fc8:	b006      	add	sp, #24
    1fca:	bd80      	pop	{r7, pc}

00001fcc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	1c02      	adds	r2, r0, #0
    1fd4:	1dfb      	adds	r3, r7, #7
    1fd6:	701a      	strb	r2, [r3, #0]
    1fd8:	1dbb      	adds	r3, r7, #6
    1fda:	1c0a      	adds	r2, r1, #0
    1fdc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1fde:	4b1a      	ldr	r3, [pc, #104]	; (2048 <STACK_SIZE+0x48>)
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	2201      	movs	r2, #1
    1fe4:	4053      	eors	r3, r2
    1fe6:	b2db      	uxtb	r3, r3
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d103      	bne.n	1ff4 <sercom_set_gclk_generator+0x28>
    1fec:	1dbb      	adds	r3, r7, #6
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d01b      	beq.n	202c <STACK_SIZE+0x2c>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1ff4:	230c      	movs	r3, #12
    1ff6:	18fb      	adds	r3, r7, r3
    1ff8:	1c18      	adds	r0, r3, #0
    1ffa:	4b14      	ldr	r3, [pc, #80]	; (204c <STACK_SIZE+0x4c>)
    1ffc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1ffe:	230c      	movs	r3, #12
    2000:	18fb      	adds	r3, r7, r3
    2002:	1dfa      	adds	r2, r7, #7
    2004:	7812      	ldrb	r2, [r2, #0]
    2006:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2008:	230c      	movs	r3, #12
    200a:	18fb      	adds	r3, r7, r3
    200c:	200c      	movs	r0, #12
    200e:	1c19      	adds	r1, r3, #0
    2010:	4b0f      	ldr	r3, [pc, #60]	; (2050 <STACK_SIZE+0x50>)
    2012:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2014:	200c      	movs	r0, #12
    2016:	4b0f      	ldr	r3, [pc, #60]	; (2054 <STACK_SIZE+0x54>)
    2018:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    201a:	4b0b      	ldr	r3, [pc, #44]	; (2048 <STACK_SIZE+0x48>)
    201c:	1dfa      	adds	r2, r7, #7
    201e:	7812      	ldrb	r2, [r2, #0]
    2020:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2022:	4b09      	ldr	r3, [pc, #36]	; (2048 <STACK_SIZE+0x48>)
    2024:	2201      	movs	r2, #1
    2026:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2028:	2300      	movs	r3, #0
    202a:	e008      	b.n	203e <STACK_SIZE+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
    202c:	4b06      	ldr	r3, [pc, #24]	; (2048 <STACK_SIZE+0x48>)
    202e:	785b      	ldrb	r3, [r3, #1]
    2030:	1dfa      	adds	r2, r7, #7
    2032:	7812      	ldrb	r2, [r2, #0]
    2034:	429a      	cmp	r2, r3
    2036:	d101      	bne.n	203c <STACK_SIZE+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
    2038:	2300      	movs	r3, #0
    203a:	e000      	b.n	203e <STACK_SIZE+0x3e>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    203c:	231d      	movs	r3, #29
}
    203e:	1c18      	adds	r0, r3, #0
    2040:	46bd      	mov	sp, r7
    2042:	b004      	add	sp, #16
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	2000004c 	.word	0x2000004c
    204c:	00001f3d 	.word	0x00001f3d
    2050:	00003151 	.word	0x00003151
    2054:	00003195 	.word	0x00003195

00002058 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2058:	b580      	push	{r7, lr}
    205a:	b082      	sub	sp, #8
    205c:	af00      	add	r7, sp, #0
    205e:	6078      	str	r0, [r7, #4]
    2060:	1c0a      	adds	r2, r1, #0
    2062:	1cfb      	adds	r3, r7, #3
    2064:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	4a4d      	ldr	r2, [pc, #308]	; (21a0 <_sercom_get_default_pad+0x148>)
    206a:	4293      	cmp	r3, r2
    206c:	d03f      	beq.n	20ee <_sercom_get_default_pad+0x96>
    206e:	4a4c      	ldr	r2, [pc, #304]	; (21a0 <_sercom_get_default_pad+0x148>)
    2070:	4293      	cmp	r3, r2
    2072:	d806      	bhi.n	2082 <_sercom_get_default_pad+0x2a>
    2074:	4a4b      	ldr	r2, [pc, #300]	; (21a4 <_sercom_get_default_pad+0x14c>)
    2076:	4293      	cmp	r3, r2
    2078:	d00f      	beq.n	209a <_sercom_get_default_pad+0x42>
    207a:	4a4b      	ldr	r2, [pc, #300]	; (21a8 <_sercom_get_default_pad+0x150>)
    207c:	4293      	cmp	r3, r2
    207e:	d021      	beq.n	20c4 <_sercom_get_default_pad+0x6c>
    2080:	e089      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2082:	4a4a      	ldr	r2, [pc, #296]	; (21ac <_sercom_get_default_pad+0x154>)
    2084:	4293      	cmp	r3, r2
    2086:	d100      	bne.n	208a <_sercom_get_default_pad+0x32>
    2088:	e05b      	b.n	2142 <_sercom_get_default_pad+0xea>
    208a:	4a49      	ldr	r2, [pc, #292]	; (21b0 <_sercom_get_default_pad+0x158>)
    208c:	4293      	cmp	r3, r2
    208e:	d100      	bne.n	2092 <_sercom_get_default_pad+0x3a>
    2090:	e06c      	b.n	216c <_sercom_get_default_pad+0x114>
    2092:	4a48      	ldr	r2, [pc, #288]	; (21b4 <_sercom_get_default_pad+0x15c>)
    2094:	4293      	cmp	r3, r2
    2096:	d03f      	beq.n	2118 <_sercom_get_default_pad+0xc0>
    2098:	e07d      	b.n	2196 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    209a:	1cfb      	adds	r3, r7, #3
    209c:	781b      	ldrb	r3, [r3, #0]
    209e:	2b01      	cmp	r3, #1
    20a0:	d00a      	beq.n	20b8 <_sercom_get_default_pad+0x60>
    20a2:	dc02      	bgt.n	20aa <_sercom_get_default_pad+0x52>
    20a4:	2b00      	cmp	r3, #0
    20a6:	d005      	beq.n	20b4 <_sercom_get_default_pad+0x5c>
    20a8:	e075      	b.n	2196 <_sercom_get_default_pad+0x13e>
    20aa:	2b02      	cmp	r3, #2
    20ac:	d006      	beq.n	20bc <_sercom_get_default_pad+0x64>
    20ae:	2b03      	cmp	r3, #3
    20b0:	d006      	beq.n	20c0 <_sercom_get_default_pad+0x68>
    20b2:	e070      	b.n	2196 <_sercom_get_default_pad+0x13e>
    20b4:	4b40      	ldr	r3, [pc, #256]	; (21b8 <_sercom_get_default_pad+0x160>)
    20b6:	e06f      	b.n	2198 <_sercom_get_default_pad+0x140>
    20b8:	4b40      	ldr	r3, [pc, #256]	; (21bc <_sercom_get_default_pad+0x164>)
    20ba:	e06d      	b.n	2198 <_sercom_get_default_pad+0x140>
    20bc:	4b40      	ldr	r3, [pc, #256]	; (21c0 <_sercom_get_default_pad+0x168>)
    20be:	e06b      	b.n	2198 <_sercom_get_default_pad+0x140>
    20c0:	4b40      	ldr	r3, [pc, #256]	; (21c4 <_sercom_get_default_pad+0x16c>)
    20c2:	e069      	b.n	2198 <_sercom_get_default_pad+0x140>
    20c4:	1cfb      	adds	r3, r7, #3
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	2b01      	cmp	r3, #1
    20ca:	d00a      	beq.n	20e2 <_sercom_get_default_pad+0x8a>
    20cc:	dc02      	bgt.n	20d4 <_sercom_get_default_pad+0x7c>
    20ce:	2b00      	cmp	r3, #0
    20d0:	d005      	beq.n	20de <_sercom_get_default_pad+0x86>
    20d2:	e060      	b.n	2196 <_sercom_get_default_pad+0x13e>
    20d4:	2b02      	cmp	r3, #2
    20d6:	d006      	beq.n	20e6 <_sercom_get_default_pad+0x8e>
    20d8:	2b03      	cmp	r3, #3
    20da:	d006      	beq.n	20ea <_sercom_get_default_pad+0x92>
    20dc:	e05b      	b.n	2196 <_sercom_get_default_pad+0x13e>
    20de:	2303      	movs	r3, #3
    20e0:	e05a      	b.n	2198 <_sercom_get_default_pad+0x140>
    20e2:	4b39      	ldr	r3, [pc, #228]	; (21c8 <_sercom_get_default_pad+0x170>)
    20e4:	e058      	b.n	2198 <_sercom_get_default_pad+0x140>
    20e6:	4b39      	ldr	r3, [pc, #228]	; (21cc <_sercom_get_default_pad+0x174>)
    20e8:	e056      	b.n	2198 <_sercom_get_default_pad+0x140>
    20ea:	4b39      	ldr	r3, [pc, #228]	; (21d0 <_sercom_get_default_pad+0x178>)
    20ec:	e054      	b.n	2198 <_sercom_get_default_pad+0x140>
    20ee:	1cfb      	adds	r3, r7, #3
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	2b01      	cmp	r3, #1
    20f4:	d00a      	beq.n	210c <_sercom_get_default_pad+0xb4>
    20f6:	dc02      	bgt.n	20fe <_sercom_get_default_pad+0xa6>
    20f8:	2b00      	cmp	r3, #0
    20fa:	d005      	beq.n	2108 <_sercom_get_default_pad+0xb0>
    20fc:	e04b      	b.n	2196 <_sercom_get_default_pad+0x13e>
    20fe:	2b02      	cmp	r3, #2
    2100:	d006      	beq.n	2110 <_sercom_get_default_pad+0xb8>
    2102:	2b03      	cmp	r3, #3
    2104:	d006      	beq.n	2114 <_sercom_get_default_pad+0xbc>
    2106:	e046      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2108:	4b32      	ldr	r3, [pc, #200]	; (21d4 <_sercom_get_default_pad+0x17c>)
    210a:	e045      	b.n	2198 <_sercom_get_default_pad+0x140>
    210c:	4b32      	ldr	r3, [pc, #200]	; (21d8 <_sercom_get_default_pad+0x180>)
    210e:	e043      	b.n	2198 <_sercom_get_default_pad+0x140>
    2110:	4b32      	ldr	r3, [pc, #200]	; (21dc <_sercom_get_default_pad+0x184>)
    2112:	e041      	b.n	2198 <_sercom_get_default_pad+0x140>
    2114:	4b32      	ldr	r3, [pc, #200]	; (21e0 <_sercom_get_default_pad+0x188>)
    2116:	e03f      	b.n	2198 <_sercom_get_default_pad+0x140>
    2118:	1cfb      	adds	r3, r7, #3
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b01      	cmp	r3, #1
    211e:	d00a      	beq.n	2136 <_sercom_get_default_pad+0xde>
    2120:	dc02      	bgt.n	2128 <_sercom_get_default_pad+0xd0>
    2122:	2b00      	cmp	r3, #0
    2124:	d005      	beq.n	2132 <_sercom_get_default_pad+0xda>
    2126:	e036      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2128:	2b02      	cmp	r3, #2
    212a:	d006      	beq.n	213a <_sercom_get_default_pad+0xe2>
    212c:	2b03      	cmp	r3, #3
    212e:	d006      	beq.n	213e <_sercom_get_default_pad+0xe6>
    2130:	e031      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2132:	4b2c      	ldr	r3, [pc, #176]	; (21e4 <_sercom_get_default_pad+0x18c>)
    2134:	e030      	b.n	2198 <_sercom_get_default_pad+0x140>
    2136:	4b2c      	ldr	r3, [pc, #176]	; (21e8 <_sercom_get_default_pad+0x190>)
    2138:	e02e      	b.n	2198 <_sercom_get_default_pad+0x140>
    213a:	4b2c      	ldr	r3, [pc, #176]	; (21ec <_sercom_get_default_pad+0x194>)
    213c:	e02c      	b.n	2198 <_sercom_get_default_pad+0x140>
    213e:	4b2c      	ldr	r3, [pc, #176]	; (21f0 <_sercom_get_default_pad+0x198>)
    2140:	e02a      	b.n	2198 <_sercom_get_default_pad+0x140>
    2142:	1cfb      	adds	r3, r7, #3
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	2b01      	cmp	r3, #1
    2148:	d00a      	beq.n	2160 <_sercom_get_default_pad+0x108>
    214a:	dc02      	bgt.n	2152 <_sercom_get_default_pad+0xfa>
    214c:	2b00      	cmp	r3, #0
    214e:	d005      	beq.n	215c <_sercom_get_default_pad+0x104>
    2150:	e021      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2152:	2b02      	cmp	r3, #2
    2154:	d006      	beq.n	2164 <_sercom_get_default_pad+0x10c>
    2156:	2b03      	cmp	r3, #3
    2158:	d006      	beq.n	2168 <_sercom_get_default_pad+0x110>
    215a:	e01c      	b.n	2196 <_sercom_get_default_pad+0x13e>
    215c:	4b25      	ldr	r3, [pc, #148]	; (21f4 <_sercom_get_default_pad+0x19c>)
    215e:	e01b      	b.n	2198 <_sercom_get_default_pad+0x140>
    2160:	4b25      	ldr	r3, [pc, #148]	; (21f8 <_sercom_get_default_pad+0x1a0>)
    2162:	e019      	b.n	2198 <_sercom_get_default_pad+0x140>
    2164:	4b25      	ldr	r3, [pc, #148]	; (21fc <_sercom_get_default_pad+0x1a4>)
    2166:	e017      	b.n	2198 <_sercom_get_default_pad+0x140>
    2168:	4b25      	ldr	r3, [pc, #148]	; (2200 <_sercom_get_default_pad+0x1a8>)
    216a:	e015      	b.n	2198 <_sercom_get_default_pad+0x140>
    216c:	1cfb      	adds	r3, r7, #3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	2b01      	cmp	r3, #1
    2172:	d00a      	beq.n	218a <_sercom_get_default_pad+0x132>
    2174:	dc02      	bgt.n	217c <_sercom_get_default_pad+0x124>
    2176:	2b00      	cmp	r3, #0
    2178:	d005      	beq.n	2186 <_sercom_get_default_pad+0x12e>
    217a:	e00c      	b.n	2196 <_sercom_get_default_pad+0x13e>
    217c:	2b02      	cmp	r3, #2
    217e:	d006      	beq.n	218e <_sercom_get_default_pad+0x136>
    2180:	2b03      	cmp	r3, #3
    2182:	d006      	beq.n	2192 <_sercom_get_default_pad+0x13a>
    2184:	e007      	b.n	2196 <_sercom_get_default_pad+0x13e>
    2186:	4b1f      	ldr	r3, [pc, #124]	; (2204 <_sercom_get_default_pad+0x1ac>)
    2188:	e006      	b.n	2198 <_sercom_get_default_pad+0x140>
    218a:	4b1f      	ldr	r3, [pc, #124]	; (2208 <_sercom_get_default_pad+0x1b0>)
    218c:	e004      	b.n	2198 <_sercom_get_default_pad+0x140>
    218e:	4b1f      	ldr	r3, [pc, #124]	; (220c <_sercom_get_default_pad+0x1b4>)
    2190:	e002      	b.n	2198 <_sercom_get_default_pad+0x140>
    2192:	4b1f      	ldr	r3, [pc, #124]	; (2210 <_sercom_get_default_pad+0x1b8>)
    2194:	e000      	b.n	2198 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2196:	2300      	movs	r3, #0
}
    2198:	1c18      	adds	r0, r3, #0
    219a:	46bd      	mov	sp, r7
    219c:	b002      	add	sp, #8
    219e:	bd80      	pop	{r7, pc}
    21a0:	42001000 	.word	0x42001000
    21a4:	42000800 	.word	0x42000800
    21a8:	42000c00 	.word	0x42000c00
    21ac:	42001800 	.word	0x42001800
    21b0:	42001c00 	.word	0x42001c00
    21b4:	42001400 	.word	0x42001400
    21b8:	00040003 	.word	0x00040003
    21bc:	00050003 	.word	0x00050003
    21c0:	00060003 	.word	0x00060003
    21c4:	00070003 	.word	0x00070003
    21c8:	00010003 	.word	0x00010003
    21cc:	001e0003 	.word	0x001e0003
    21d0:	001f0003 	.word	0x001f0003
    21d4:	00080003 	.word	0x00080003
    21d8:	00090003 	.word	0x00090003
    21dc:	000a0003 	.word	0x000a0003
    21e0:	000b0003 	.word	0x000b0003
    21e4:	00100003 	.word	0x00100003
    21e8:	00110003 	.word	0x00110003
    21ec:	00120003 	.word	0x00120003
    21f0:	00130003 	.word	0x00130003
    21f4:	000c0003 	.word	0x000c0003
    21f8:	000d0003 	.word	0x000d0003
    21fc:	000e0003 	.word	0x000e0003
    2200:	000f0003 	.word	0x000f0003
    2204:	00160003 	.word	0x00160003
    2208:	00170003 	.word	0x00170003
    220c:	00180003 	.word	0x00180003
    2210:	00190003 	.word	0x00190003

00002214 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2214:	b590      	push	{r4, r7, lr}
    2216:	b08b      	sub	sp, #44	; 0x2c
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    221c:	230c      	movs	r3, #12
    221e:	18fb      	adds	r3, r7, r3
    2220:	4a0e      	ldr	r2, [pc, #56]	; (225c <_sercom_get_sercom_inst_index+0x48>)
    2222:	ca13      	ldmia	r2!, {r0, r1, r4}
    2224:	c313      	stmia	r3!, {r0, r1, r4}
    2226:	ca13      	ldmia	r2!, {r0, r1, r4}
    2228:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    222a:	2300      	movs	r3, #0
    222c:	627b      	str	r3, [r7, #36]	; 0x24
    222e:	e00d      	b.n	224c <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	220c      	movs	r2, #12
    2234:	18ba      	adds	r2, r7, r2
    2236:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2238:	0089      	lsls	r1, r1, #2
    223a:	588a      	ldr	r2, [r1, r2]
    223c:	4293      	cmp	r3, r2
    223e:	d102      	bne.n	2246 <_sercom_get_sercom_inst_index+0x32>
			return i;
    2240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2242:	b2db      	uxtb	r3, r3
    2244:	e006      	b.n	2254 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2248:	3301      	adds	r3, #1
    224a:	627b      	str	r3, [r7, #36]	; 0x24
    224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    224e:	2b05      	cmp	r3, #5
    2250:	d9ee      	bls.n	2230 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2252:	2300      	movs	r3, #0
}
    2254:	1c18      	adds	r0, r3, #0
    2256:	46bd      	mov	sp, r7
    2258:	b00b      	add	sp, #44	; 0x2c
    225a:	bd90      	pop	{r4, r7, pc}
    225c:	000047f4 	.word	0x000047f4

00002260 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2260:	b580      	push	{r7, lr}
    2262:	b082      	sub	sp, #8
    2264:	af00      	add	r7, sp, #0
    2266:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	2280      	movs	r2, #128	; 0x80
    226c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	2200      	movs	r2, #0
    2272:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	2201      	movs	r2, #1
    2278:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	2200      	movs	r2, #0
    227e:	70da      	strb	r2, [r3, #3]
}
    2280:	46bd      	mov	sp, r7
    2282:	b002      	add	sp, #8
    2284:	bd80      	pop	{r7, pc}
    2286:	46c0      	nop			; (mov r8, r8)

00002288 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2288:	b580      	push	{r7, lr}
    228a:	b082      	sub	sp, #8
    228c:	af00      	add	r7, sp, #0
    228e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2200      	movs	r2, #0
    2294:	701a      	strb	r2, [r3, #0]
}
    2296:	46bd      	mov	sp, r7
    2298:	b002      	add	sp, #8
    229a:	bd80      	pop	{r7, pc}

0000229c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    229c:	b580      	push	{r7, lr}
    229e:	b082      	sub	sp, #8
    22a0:	af00      	add	r7, sp, #0
    22a2:	1c02      	adds	r2, r0, #0
    22a4:	6039      	str	r1, [r7, #0]
    22a6:	1dfb      	adds	r3, r7, #7
    22a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    22aa:	1dfb      	adds	r3, r7, #7
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	2b01      	cmp	r3, #1
    22b0:	d00a      	beq.n	22c8 <system_apb_clock_set_mask+0x2c>
    22b2:	2b02      	cmp	r3, #2
    22b4:	d00f      	beq.n	22d6 <system_apb_clock_set_mask+0x3a>
    22b6:	2b00      	cmp	r3, #0
    22b8:	d114      	bne.n	22e4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    22ba:	4b0e      	ldr	r3, [pc, #56]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22bc:	4a0d      	ldr	r2, [pc, #52]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22be:	6991      	ldr	r1, [r2, #24]
    22c0:	683a      	ldr	r2, [r7, #0]
    22c2:	430a      	orrs	r2, r1
    22c4:	619a      	str	r2, [r3, #24]
			break;
    22c6:	e00f      	b.n	22e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    22c8:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22ca:	4a0a      	ldr	r2, [pc, #40]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22cc:	69d1      	ldr	r1, [r2, #28]
    22ce:	683a      	ldr	r2, [r7, #0]
    22d0:	430a      	orrs	r2, r1
    22d2:	61da      	str	r2, [r3, #28]
			break;
    22d4:	e008      	b.n	22e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    22d6:	4b07      	ldr	r3, [pc, #28]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22d8:	4a06      	ldr	r2, [pc, #24]	; (22f4 <system_apb_clock_set_mask+0x58>)
    22da:	6a11      	ldr	r1, [r2, #32]
    22dc:	683a      	ldr	r2, [r7, #0]
    22de:	430a      	orrs	r2, r1
    22e0:	621a      	str	r2, [r3, #32]
			break;
    22e2:	e001      	b.n	22e8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    22e4:	2317      	movs	r3, #23
    22e6:	e000      	b.n	22ea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    22e8:	2300      	movs	r3, #0
}
    22ea:	1c18      	adds	r0, r3, #0
    22ec:	46bd      	mov	sp, r7
    22ee:	b002      	add	sp, #8
    22f0:	bd80      	pop	{r7, pc}
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	40000400 	.word	0x40000400

000022f8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    22fc:	4b05      	ldr	r3, [pc, #20]	; (2314 <system_is_debugger_present+0x1c>)
    22fe:	789b      	ldrb	r3, [r3, #2]
    2300:	b2db      	uxtb	r3, r3
    2302:	1c1a      	adds	r2, r3, #0
    2304:	2302      	movs	r3, #2
    2306:	4013      	ands	r3, r2
    2308:	1e5a      	subs	r2, r3, #1
    230a:	4193      	sbcs	r3, r2
    230c:	b2db      	uxtb	r3, r3
}
    230e:	1c18      	adds	r0, r3, #0
    2310:	46bd      	mov	sp, r7
    2312:	bd80      	pop	{r7, pc}
    2314:	41002000 	.word	0x41002000

00002318 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    2318:	b590      	push	{r4, r7, lr}
    231a:	b093      	sub	sp, #76	; 0x4c
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
    2320:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    232e:	231c      	movs	r3, #28
    2330:	18fb      	adds	r3, r7, r3
    2332:	1c18      	adds	r0, r3, #0
    2334:	4b7a      	ldr	r3, [pc, #488]	; (2520 <_spi_set_config+0x208>)
    2336:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2338:	231c      	movs	r3, #28
    233a:	18fb      	adds	r3, r7, r3
    233c:	2200      	movs	r2, #0
    233e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    2340:	683b      	ldr	r3, [r7, #0]
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	2b00      	cmp	r3, #0
    2346:	d103      	bne.n	2350 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2348:	231c      	movs	r3, #28
    234a:	18fb      	adds	r3, r7, r3
    234c:	2200      	movs	r2, #0
    234e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2350:	683b      	ldr	r3, [r7, #0]
    2352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2354:	230c      	movs	r3, #12
    2356:	18fb      	adds	r3, r7, r3
    2358:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    235a:	683b      	ldr	r3, [r7, #0]
    235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    235e:	230c      	movs	r3, #12
    2360:	18fb      	adds	r3, r7, r3
    2362:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2364:	683b      	ldr	r3, [r7, #0]
    2366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2368:	230c      	movs	r3, #12
    236a:	18fb      	adds	r3, r7, r3
    236c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    236e:	683b      	ldr	r3, [r7, #0]
    2370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    2372:	230c      	movs	r3, #12
    2374:	18fb      	adds	r3, r7, r3
    2376:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2378:	2347      	movs	r3, #71	; 0x47
    237a:	18fb      	adds	r3, r7, r3
    237c:	2200      	movs	r2, #0
    237e:	701a      	strb	r2, [r3, #0]
    2380:	e02c      	b.n	23dc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2382:	2347      	movs	r3, #71	; 0x47
    2384:	18fb      	adds	r3, r7, r3
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	230c      	movs	r3, #12
    238a:	18fb      	adds	r3, r7, r3
    238c:	0092      	lsls	r2, r2, #2
    238e:	58d3      	ldr	r3, [r2, r3]
    2390:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2394:	2b00      	cmp	r3, #0
    2396:	d109      	bne.n	23ac <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    239a:	2347      	movs	r3, #71	; 0x47
    239c:	18fb      	adds	r3, r7, r3
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	1c10      	adds	r0, r2, #0
    23a2:	1c19      	adds	r1, r3, #0
    23a4:	4b5f      	ldr	r3, [pc, #380]	; (2524 <_spi_set_config+0x20c>)
    23a6:	4798      	blx	r3
    23a8:	1c03      	adds	r3, r0, #0
    23aa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    23ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    23ae:	3301      	adds	r3, #1
    23b0:	d00d      	beq.n	23ce <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    23b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    23b4:	b2da      	uxtb	r2, r3
    23b6:	231c      	movs	r3, #28
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    23bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    23be:	0c1b      	lsrs	r3, r3, #16
    23c0:	b2da      	uxtb	r2, r3
    23c2:	231c      	movs	r3, #28
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	1c10      	adds	r0, r2, #0
    23c8:	1c19      	adds	r1, r3, #0
    23ca:	4b57      	ldr	r3, [pc, #348]	; (2528 <_spi_set_config+0x210>)
    23cc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    23ce:	2347      	movs	r3, #71	; 0x47
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	781a      	ldrb	r2, [r3, #0]
    23d4:	2347      	movs	r3, #71	; 0x47
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	3201      	adds	r2, #1
    23da:	701a      	strb	r2, [r3, #0]
    23dc:	2347      	movs	r3, #71	; 0x47
    23de:	18fb      	adds	r3, r7, r3
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	2b03      	cmp	r3, #3
    23e4:	d9cd      	bls.n	2382 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    23e6:	683b      	ldr	r3, [r7, #0]
    23e8:	781a      	ldrb	r2, [r3, #0]
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    23ee:	683b      	ldr	r3, [r7, #0]
    23f0:	7c1a      	ldrb	r2, [r3, #16]
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    23f6:	683b      	ldr	r3, [r7, #0]
    23f8:	7c9a      	ldrb	r2, [r3, #18]
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    23fe:	230a      	movs	r3, #10
    2400:	18fb      	adds	r3, r7, r3
    2402:	2200      	movs	r2, #0
    2404:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    2406:	2300      	movs	r3, #0
    2408:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    240a:	2300      	movs	r3, #0
    240c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    240e:	683b      	ldr	r3, [r7, #0]
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	2b01      	cmp	r3, #1
    2414:	d12b      	bne.n	246e <_spi_set_config+0x156>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	1c18      	adds	r0, r3, #0
    241c:	4b43      	ldr	r3, [pc, #268]	; (252c <_spi_set_config+0x214>)
    241e:	4798      	blx	r3
    2420:	1c03      	adds	r3, r0, #0
    2422:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2426:	330d      	adds	r3, #13
    2428:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    242c:	b2db      	uxtb	r3, r3
    242e:	1c18      	adds	r0, r3, #0
    2430:	4b3f      	ldr	r3, [pc, #252]	; (2530 <_spi_set_config+0x218>)
    2432:	4798      	blx	r3
    2434:	1c03      	adds	r3, r0, #0
    2436:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2438:	683b      	ldr	r3, [r7, #0]
    243a:	6959      	ldr	r1, [r3, #20]
    243c:	2323      	movs	r3, #35	; 0x23
    243e:	18fc      	adds	r4, r7, r3
    2440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2442:	230a      	movs	r3, #10
    2444:	18fb      	adds	r3, r7, r3
    2446:	1c08      	adds	r0, r1, #0
    2448:	1c11      	adds	r1, r2, #0
    244a:	1c1a      	adds	r2, r3, #0
    244c:	4b39      	ldr	r3, [pc, #228]	; (2534 <_spi_set_config+0x21c>)
    244e:	4798      	blx	r3
    2450:	1c03      	adds	r3, r0, #0
    2452:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2454:	2323      	movs	r3, #35	; 0x23
    2456:	18fb      	adds	r3, r7, r3
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	2b00      	cmp	r3, #0
    245c:	d001      	beq.n	2462 <_spi_set_config+0x14a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    245e:	2317      	movs	r3, #23
    2460:	e05a      	b.n	2518 <_spi_set_config+0x200>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2462:	230a      	movs	r3, #10
    2464:	18fb      	adds	r3, r7, r3
    2466:	881b      	ldrh	r3, [r3, #0]
    2468:	b2da      	uxtb	r2, r3
    246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    246c:	729a      	strb	r2, [r3, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    246e:	683b      	ldr	r3, [r7, #0]
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d119      	bne.n	24aa <_spi_set_config+0x192>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    2476:	683b      	ldr	r3, [r7, #0]
    2478:	695b      	ldr	r3, [r3, #20]
    247a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    247c:	683b      	ldr	r3, [r7, #0]
    247e:	8b1b      	ldrh	r3, [r3, #24]
    2480:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2484:	695b      	ldr	r3, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2486:	683a      	ldr	r2, [r7, #0]
    2488:	7e92      	ldrb	r2, [r2, #26]
    248a:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    248c:	683a      	ldr	r2, [r7, #0]
    248e:	7ed2      	ldrb	r2, [r2, #27]
    2490:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2492:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2494:	431a      	orrs	r2, r3
    2496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2498:	615a      	str	r2, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	7f1b      	ldrb	r3, [r3, #28]
    249e:	2b00      	cmp	r3, #0
    24a0:	d003      	beq.n	24aa <_spi_set_config+0x192>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    24a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    24a4:	2240      	movs	r2, #64	; 0x40
    24a6:	4313      	orrs	r3, r2
    24a8:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    24aa:	683b      	ldr	r3, [r7, #0]
    24ac:	685b      	ldr	r3, [r3, #4]
    24ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24b0:	4313      	orrs	r3, r2
    24b2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    24b4:	683b      	ldr	r3, [r7, #0]
    24b6:	689b      	ldr	r3, [r3, #8]
    24b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24ba:	4313      	orrs	r3, r2
    24bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    24be:	683b      	ldr	r3, [r7, #0]
    24c0:	68db      	ldr	r3, [r3, #12]
    24c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24c4:	4313      	orrs	r3, r2
    24c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    24c8:	683b      	ldr	r3, [r7, #0]
    24ca:	7c1b      	ldrb	r3, [r3, #16]
    24cc:	1c1a      	adds	r2, r3, #0
    24ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    24d0:	4313      	orrs	r3, r2
    24d2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    24d4:	683b      	ldr	r3, [r7, #0]
    24d6:	7c5b      	ldrb	r3, [r3, #17]
    24d8:	2b00      	cmp	r3, #0
    24da:	d103      	bne.n	24e4 <_spi_set_config+0x1cc>
    24dc:	4b16      	ldr	r3, [pc, #88]	; (2538 <_spi_set_config+0x220>)
    24de:	4798      	blx	r3
    24e0:	1e03      	subs	r3, r0, #0
    24e2:	d003      	beq.n	24ec <_spi_set_config+0x1d4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    24e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    24e6:	2280      	movs	r2, #128	; 0x80
    24e8:	4313      	orrs	r3, r2
    24ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    24ec:	683b      	ldr	r3, [r7, #0]
    24ee:	7c9b      	ldrb	r3, [r3, #18]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d004      	beq.n	24fe <_spi_set_config+0x1e6>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    24f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    24f6:	2280      	movs	r2, #128	; 0x80
    24f8:	0292      	lsls	r2, r2, #10
    24fa:	4313      	orrs	r3, r2
    24fc:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    24fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2500:	681a      	ldr	r2, [r3, #0]
    2502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2504:	431a      	orrs	r2, r3
    2506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2508:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    250c:	685a      	ldr	r2, [r3, #4]
    250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2510:	431a      	orrs	r2, r3
    2512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2514:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2516:	2300      	movs	r3, #0
}
    2518:	1c18      	adds	r0, r3, #0
    251a:	46bd      	mov	sp, r7
    251c:	b013      	add	sp, #76	; 0x4c
    251e:	bd90      	pop	{r4, r7, pc}
    2520:	00002261 	.word	0x00002261
    2524:	00002059 	.word	0x00002059
    2528:	00003485 	.word	0x00003485
    252c:	00002215 	.word	0x00002215
    2530:	000032bd 	.word	0x000032bd
    2534:	00001f51 	.word	0x00001f51
    2538:	000022f9 	.word	0x000022f9

0000253c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    253c:	b590      	push	{r4, r7, lr}
    253e:	b08b      	sub	sp, #44	; 0x2c
    2540:	af00      	add	r7, sp, #0
    2542:	60f8      	str	r0, [r7, #12]
    2544:	60b9      	str	r1, [r7, #8]
    2546:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	68ba      	ldr	r2, [r7, #8]
    254c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    254e:	68fb      	ldr	r3, [r7, #12]
    2550:	681b      	ldr	r3, [r3, #0]
    2552:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2554:	6a3b      	ldr	r3, [r7, #32]
    2556:	681b      	ldr	r3, [r3, #0]
    2558:	2202      	movs	r2, #2
    255a:	4013      	ands	r3, r2
    255c:	d001      	beq.n	2562 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    255e:	231c      	movs	r3, #28
    2560:	e0a5      	b.n	26ae <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2562:	6a3b      	ldr	r3, [r7, #32]
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	2201      	movs	r2, #1
    2568:	4013      	ands	r3, r2
    256a:	d001      	beq.n	2570 <spi_init+0x34>
		return STATUS_BUSY;
    256c:	2305      	movs	r3, #5
    256e:	e09e      	b.n	26ae <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2570:	68fb      	ldr	r3, [r7, #12]
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	1c18      	adds	r0, r3, #0
    2576:	4b50      	ldr	r3, [pc, #320]	; (26b8 <spi_init+0x17c>)
    2578:	4798      	blx	r3
    257a:	1c03      	adds	r3, r0, #0
    257c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    257e:	69fb      	ldr	r3, [r7, #28]
    2580:	3302      	adds	r3, #2
    2582:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2584:	69fb      	ldr	r3, [r7, #28]
    2586:	330d      	adds	r3, #13
    2588:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    258a:	69bb      	ldr	r3, [r7, #24]
    258c:	2201      	movs	r2, #1
    258e:	409a      	lsls	r2, r3
    2590:	1c13      	adds	r3, r2, #0
    2592:	2002      	movs	r0, #2
    2594:	1c19      	adds	r1, r3, #0
    2596:	4b49      	ldr	r3, [pc, #292]	; (26bc <spi_init+0x180>)
    2598:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    259a:	2310      	movs	r3, #16
    259c:	18fb      	adds	r3, r7, r3
    259e:	1c18      	adds	r0, r3, #0
    25a0:	4b47      	ldr	r3, [pc, #284]	; (26c0 <spi_init+0x184>)
    25a2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	2220      	movs	r2, #32
    25a8:	5c9a      	ldrb	r2, [r3, r2]
    25aa:	2310      	movs	r3, #16
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    25b0:	697b      	ldr	r3, [r7, #20]
    25b2:	b2da      	uxtb	r2, r3
    25b4:	2310      	movs	r3, #16
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	1c10      	adds	r0, r2, #0
    25ba:	1c19      	adds	r1, r3, #0
    25bc:	4b41      	ldr	r3, [pc, #260]	; (26c4 <spi_init+0x188>)
    25be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    25c0:	697b      	ldr	r3, [r7, #20]
    25c2:	b2db      	uxtb	r3, r3
    25c4:	1c18      	adds	r0, r3, #0
    25c6:	4b40      	ldr	r3, [pc, #256]	; (26c8 <spi_init+0x18c>)
    25c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	2220      	movs	r2, #32
    25ce:	5c9b      	ldrb	r3, [r3, r2]
    25d0:	1c18      	adds	r0, r3, #0
    25d2:	2100      	movs	r1, #0
    25d4:	4b3d      	ldr	r3, [pc, #244]	; (26cc <spi_init+0x190>)
    25d6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	2b01      	cmp	r3, #1
    25de:	d105      	bne.n	25ec <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    25e0:	6a3b      	ldr	r3, [r7, #32]
    25e2:	681b      	ldr	r3, [r3, #0]
    25e4:	220c      	movs	r2, #12
    25e6:	431a      	orrs	r2, r3
    25e8:	6a3b      	ldr	r3, [r7, #32]
    25ea:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	781b      	ldrb	r3, [r3, #0]
    25f0:	2b00      	cmp	r3, #0
    25f2:	d105      	bne.n	2600 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    25f4:	6a3b      	ldr	r3, [r7, #32]
    25f6:	681b      	ldr	r3, [r3, #0]
    25f8:	2208      	movs	r2, #8
    25fa:	431a      	orrs	r2, r3
    25fc:	6a3b      	ldr	r3, [r7, #32]
    25fe:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2600:	2327      	movs	r3, #39	; 0x27
    2602:	18fb      	adds	r3, r7, r3
    2604:	2200      	movs	r2, #0
    2606:	701a      	strb	r2, [r3, #0]
    2608:	e00f      	b.n	262a <spi_init+0xee>
		module->callback[i]        = NULL;
    260a:	2327      	movs	r3, #39	; 0x27
    260c:	18fb      	adds	r3, r7, r3
    260e:	781b      	ldrb	r3, [r3, #0]
    2610:	68fa      	ldr	r2, [r7, #12]
    2612:	3302      	adds	r3, #2
    2614:	009b      	lsls	r3, r3, #2
    2616:	18d3      	adds	r3, r2, r3
    2618:	2200      	movs	r2, #0
    261a:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    261c:	2327      	movs	r3, #39	; 0x27
    261e:	18fb      	adds	r3, r7, r3
    2620:	781a      	ldrb	r2, [r3, #0]
    2622:	2327      	movs	r3, #39	; 0x27
    2624:	18fb      	adds	r3, r7, r3
    2626:	3201      	adds	r2, #1
    2628:	701a      	strb	r2, [r3, #0]
    262a:	2327      	movs	r3, #39	; 0x27
    262c:	18fb      	adds	r3, r7, r3
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	2b04      	cmp	r3, #4
    2632:	d9ea      	bls.n	260a <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    2634:	68fb      	ldr	r3, [r7, #12]
    2636:	2200      	movs	r2, #0
    2638:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_buffer_ptr              = NULL;
    263a:	68fb      	ldr	r3, [r7, #12]
    263c:	2200      	movs	r2, #0
    263e:	621a      	str	r2, [r3, #32]
	module->remaining_tx_buffer_length = 0x0000;
    2640:	68fb      	ldr	r3, [r7, #12]
    2642:	2200      	movs	r2, #0
    2644:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    2646:	68fb      	ldr	r3, [r7, #12]
    2648:	2200      	movs	r2, #0
    264a:	851a      	strh	r2, [r3, #40]	; 0x28
	module->registered_callback        = 0x00;
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	222e      	movs	r2, #46	; 0x2e
    2650:	2100      	movs	r1, #0
    2652:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	222f      	movs	r2, #47	; 0x2f
    2658:	2100      	movs	r1, #0
    265a:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    265c:	68fb      	ldr	r3, [r7, #12]
    265e:	2230      	movs	r2, #48	; 0x30
    2660:	2100      	movs	r1, #0
    2662:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    2664:	68fb      	ldr	r3, [r7, #12]
    2666:	2203      	movs	r2, #3
    2668:	721a      	strb	r2, [r3, #8]
	module->locked                     = false;
    266a:	68fb      	ldr	r3, [r7, #12]
    266c:	2200      	movs	r2, #0
    266e:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2670:	68fb      	ldr	r3, [r7, #12]
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	2213      	movs	r2, #19
    2676:	18bc      	adds	r4, r7, r2
    2678:	1c18      	adds	r0, r3, #0
    267a:	4b0f      	ldr	r3, [pc, #60]	; (26b8 <spi_init+0x17c>)
    267c:	4798      	blx	r3
    267e:	1c03      	adds	r3, r0, #0
    2680:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2682:	2313      	movs	r3, #19
    2684:	18fb      	adds	r3, r7, r3
    2686:	781a      	ldrb	r2, [r3, #0]
    2688:	4b11      	ldr	r3, [pc, #68]	; (26d0 <spi_init+0x194>)
    268a:	1c10      	adds	r0, r2, #0
    268c:	1c19      	adds	r1, r3, #0
    268e:	4b11      	ldr	r3, [pc, #68]	; (26d4 <spi_init+0x198>)
    2690:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2692:	2313      	movs	r3, #19
    2694:	18fb      	adds	r3, r7, r3
    2696:	781a      	ldrb	r2, [r3, #0]
    2698:	4b0f      	ldr	r3, [pc, #60]	; (26d8 <spi_init+0x19c>)
    269a:	0092      	lsls	r2, r2, #2
    269c:	68f9      	ldr	r1, [r7, #12]
    269e:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    26a0:	68fa      	ldr	r2, [r7, #12]
    26a2:	687b      	ldr	r3, [r7, #4]
    26a4:	1c10      	adds	r0, r2, #0
    26a6:	1c19      	adds	r1, r3, #0
    26a8:	4b0c      	ldr	r3, [pc, #48]	; (26dc <spi_init+0x1a0>)
    26aa:	4798      	blx	r3
    26ac:	1c03      	adds	r3, r0, #0
}
    26ae:	1c18      	adds	r0, r3, #0
    26b0:	46bd      	mov	sp, r7
    26b2:	b00b      	add	sp, #44	; 0x2c
    26b4:	bd90      	pop	{r4, r7, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	00002215 	.word	0x00002215
    26bc:	0000229d 	.word	0x0000229d
    26c0:	00002289 	.word	0x00002289
    26c4:	00003151 	.word	0x00003151
    26c8:	00003195 	.word	0x00003195
    26cc:	00001fcd 	.word	0x00001fcd
    26d0:	000005e9 	.word	0x000005e9
    26d4:	00000469 	.word	0x00000469
    26d8:	20000068 	.word	0x20000068
    26dc:	00002319 	.word	0x00002319

000026e0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b082      	sub	sp, #8
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	2201      	movs	r2, #1
    26ec:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	2200      	movs	r2, #0
    26f2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	2206      	movs	r2, #6
    26f8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2200      	movs	r2, #0
    26fe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2200      	movs	r2, #0
    2704:	725a      	strb	r2, [r3, #9]
}
    2706:	46bd      	mov	sp, r7
    2708:	b002      	add	sp, #8
    270a:	bd80      	pop	{r7, pc}

0000270c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    270c:	b580      	push	{r7, lr}
    270e:	b082      	sub	sp, #8
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	2203      	movs	r2, #3
    2718:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	2200      	movs	r2, #0
    271e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	2201      	movs	r2, #1
    2724:	709a      	strb	r2, [r3, #2]
}
    2726:	46bd      	mov	sp, r7
    2728:	b002      	add	sp, #8
    272a:	bd80      	pop	{r7, pc}

0000272c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    272c:	b580      	push	{r7, lr}
    272e:	b082      	sub	sp, #8
    2730:	af00      	add	r7, sp, #0
    2732:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	2200      	movs	r2, #0
    2738:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	2200      	movs	r2, #0
    273e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	2200      	movs	r2, #0
    2744:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	2200      	movs	r2, #0
    274a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	2200      	movs	r2, #0
    2750:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	2201      	movs	r2, #1
    2756:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	2207      	movs	r2, #7
    275c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	223f      	movs	r2, #63	; 0x3f
    2762:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	2201      	movs	r2, #1
    2768:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	2201      	movs	r2, #1
    276e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	2206      	movs	r2, #6
    2774:	821a      	strh	r2, [r3, #16]
}
    2776:	46bd      	mov	sp, r7
    2778:	b002      	add	sp, #8
    277a:	bd80      	pop	{r7, pc}

0000277c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    277c:	b580      	push	{r7, lr}
    277e:	b082      	sub	sp, #8
    2780:	af00      	add	r7, sp, #0
    2782:	1c02      	adds	r2, r0, #0
    2784:	1dfb      	adds	r3, r7, #7
    2786:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2788:	4a03      	ldr	r2, [pc, #12]	; (2798 <system_cpu_clock_set_divider+0x1c>)
    278a:	1dfb      	adds	r3, r7, #7
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	7213      	strb	r3, [r2, #8]
}
    2790:	46bd      	mov	sp, r7
    2792:	b002      	add	sp, #8
    2794:	bd80      	pop	{r7, pc}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	40000400 	.word	0x40000400

0000279c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	1c02      	adds	r2, r0, #0
    27a4:	1dfb      	adds	r3, r7, #7
    27a6:	701a      	strb	r2, [r3, #0]
    27a8:	1dbb      	adds	r3, r7, #6
    27aa:	1c0a      	adds	r2, r1, #0
    27ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    27ae:	1dfb      	adds	r3, r7, #7
    27b0:	781b      	ldrb	r3, [r3, #0]
    27b2:	2b01      	cmp	r3, #1
    27b4:	d008      	beq.n	27c8 <system_apb_clock_set_divider+0x2c>
    27b6:	2b02      	cmp	r3, #2
    27b8:	d00b      	beq.n	27d2 <system_apb_clock_set_divider+0x36>
    27ba:	2b00      	cmp	r3, #0
    27bc:	d10e      	bne.n	27dc <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    27be:	4a0b      	ldr	r2, [pc, #44]	; (27ec <system_apb_clock_set_divider+0x50>)
    27c0:	1dbb      	adds	r3, r7, #6
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	7253      	strb	r3, [r2, #9]
			break;
    27c6:	e00b      	b.n	27e0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    27c8:	4a08      	ldr	r2, [pc, #32]	; (27ec <system_apb_clock_set_divider+0x50>)
    27ca:	1dbb      	adds	r3, r7, #6
    27cc:	781b      	ldrb	r3, [r3, #0]
    27ce:	7293      	strb	r3, [r2, #10]
			break;
    27d0:	e006      	b.n	27e0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    27d2:	4a06      	ldr	r2, [pc, #24]	; (27ec <system_apb_clock_set_divider+0x50>)
    27d4:	1dbb      	adds	r3, r7, #6
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	72d3      	strb	r3, [r2, #11]
			break;
    27da:	e001      	b.n	27e0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    27dc:	2317      	movs	r3, #23
    27de:	e000      	b.n	27e2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    27e0:	2300      	movs	r3, #0
}
    27e2:	1c18      	adds	r0, r3, #0
    27e4:	46bd      	mov	sp, r7
    27e6:	b002      	add	sp, #8
    27e8:	bd80      	pop	{r7, pc}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	40000400 	.word	0x40000400

000027f0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b082      	sub	sp, #8
    27f4:	af00      	add	r7, sp, #0
    27f6:	1c02      	adds	r2, r0, #0
    27f8:	1dfb      	adds	r3, r7, #7
    27fa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    27fc:	4b08      	ldr	r3, [pc, #32]	; (2820 <system_flash_set_waitstates+0x30>)
    27fe:	1dfa      	adds	r2, r7, #7
    2800:	7812      	ldrb	r2, [r2, #0]
    2802:	210f      	movs	r1, #15
    2804:	400a      	ands	r2, r1
    2806:	b2d2      	uxtb	r2, r2
    2808:	210f      	movs	r1, #15
    280a:	400a      	ands	r2, r1
    280c:	0052      	lsls	r2, r2, #1
    280e:	6859      	ldr	r1, [r3, #4]
    2810:	201e      	movs	r0, #30
    2812:	4381      	bics	r1, r0
    2814:	430a      	orrs	r2, r1
    2816:	605a      	str	r2, [r3, #4]
}
    2818:	46bd      	mov	sp, r7
    281a:	b002      	add	sp, #8
    281c:	bd80      	pop	{r7, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	41004000 	.word	0x41004000

00002824 <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
    2824:	b580      	push	{r7, lr}
    2826:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
    2828:	4b02      	ldr	r3, [pc, #8]	; (2834 <system_get_device_id+0x10>)
    282a:	699b      	ldr	r3, [r3, #24]
}
    282c:	1c18      	adds	r0, r3, #0
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	41002000 	.word	0x41002000

00002838 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2838:	b580      	push	{r7, lr}
    283a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    283c:	46c0      	nop			; (mov r8, r8)
    283e:	4b03      	ldr	r3, [pc, #12]	; (284c <_system_dfll_wait_for_sync+0x14>)
    2840:	68db      	ldr	r3, [r3, #12]
    2842:	2210      	movs	r2, #16
    2844:	4013      	ands	r3, r2
    2846:	d0fa      	beq.n	283e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2848:	46bd      	mov	sp, r7
    284a:	bd80      	pop	{r7, pc}
    284c:	40000800 	.word	0x40000800

00002850 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2850:	b580      	push	{r7, lr}
    2852:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2854:	4a0c      	ldr	r2, [pc, #48]	; (2888 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2856:	4b0d      	ldr	r3, [pc, #52]	; (288c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	b29b      	uxth	r3, r3
    285c:	2180      	movs	r1, #128	; 0x80
    285e:	438b      	bics	r3, r1
    2860:	b29b      	uxth	r3, r3
    2862:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2864:	4b0a      	ldr	r3, [pc, #40]	; (2890 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2866:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2868:	4a07      	ldr	r2, [pc, #28]	; (2888 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    286a:	4b08      	ldr	r3, [pc, #32]	; (288c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    286c:	689b      	ldr	r3, [r3, #8]
    286e:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2870:	4a05      	ldr	r2, [pc, #20]	; (2888 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2872:	4b06      	ldr	r3, [pc, #24]	; (288c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2874:	685b      	ldr	r3, [r3, #4]
    2876:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2878:	4a03      	ldr	r2, [pc, #12]	; (2888 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    287a:	4b04      	ldr	r3, [pc, #16]	; (288c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	b29b      	uxth	r3, r3
    2880:	8493      	strh	r3, [r2, #36]	; 0x24
}
    2882:	46bd      	mov	sp, r7
    2884:	bd80      	pop	{r7, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	40000800 	.word	0x40000800
    288c:	20000050 	.word	0x20000050
    2890:	00002839 	.word	0x00002839

00002894 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2894:	b580      	push	{r7, lr}
    2896:	b082      	sub	sp, #8
    2898:	af00      	add	r7, sp, #0
    289a:	1c02      	adds	r2, r0, #0
    289c:	1dfb      	adds	r3, r7, #7
    289e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    28a0:	1dfb      	adds	r3, r7, #7
    28a2:	781b      	ldrb	r3, [r3, #0]
    28a4:	2b07      	cmp	r3, #7
    28a6:	d835      	bhi.n	2914 <system_clock_source_get_hz+0x80>
    28a8:	009a      	lsls	r2, r3, #2
    28aa:	4b1d      	ldr	r3, [pc, #116]	; (2920 <system_clock_source_get_hz+0x8c>)
    28ac:	18d3      	adds	r3, r2, r3
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    28b2:	4b1c      	ldr	r3, [pc, #112]	; (2924 <system_clock_source_get_hz+0x90>)
    28b4:	68db      	ldr	r3, [r3, #12]
    28b6:	e02e      	b.n	2916 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    28b8:	4b1b      	ldr	r3, [pc, #108]	; (2928 <system_clock_source_get_hz+0x94>)
    28ba:	6a1b      	ldr	r3, [r3, #32]
    28bc:	0a1b      	lsrs	r3, r3, #8
    28be:	1c1a      	adds	r2, r3, #0
    28c0:	2303      	movs	r3, #3
    28c2:	4013      	ands	r3, r2
    28c4:	b2db      	uxtb	r3, r3
    28c6:	1c1a      	adds	r2, r3, #0
    28c8:	4b18      	ldr	r3, [pc, #96]	; (292c <system_clock_source_get_hz+0x98>)
    28ca:	40d3      	lsrs	r3, r2
    28cc:	e023      	b.n	2916 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    28ce:	2380      	movs	r3, #128	; 0x80
    28d0:	021b      	lsls	r3, r3, #8
    28d2:	e020      	b.n	2916 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    28d4:	2380      	movs	r3, #128	; 0x80
    28d6:	021b      	lsls	r3, r3, #8
    28d8:	e01d      	b.n	2916 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    28da:	4b12      	ldr	r3, [pc, #72]	; (2924 <system_clock_source_get_hz+0x90>)
    28dc:	691b      	ldr	r3, [r3, #16]
    28de:	e01a      	b.n	2916 <system_clock_source_get_hz+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    28e0:	4b10      	ldr	r3, [pc, #64]	; (2924 <system_clock_source_get_hz+0x90>)
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	2202      	movs	r2, #2
    28e6:	4013      	ands	r3, r2
    28e8:	d101      	bne.n	28ee <system_clock_source_get_hz+0x5a>
			return 0;
    28ea:	2300      	movs	r3, #0
    28ec:	e013      	b.n	2916 <system_clock_source_get_hz+0x82>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    28ee:	4b10      	ldr	r3, [pc, #64]	; (2930 <system_clock_source_get_hz+0x9c>)
    28f0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    28f2:	4b0c      	ldr	r3, [pc, #48]	; (2924 <system_clock_source_get_hz+0x90>)
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	2204      	movs	r2, #4
    28f8:	4013      	ands	r3, r2
    28fa:	d009      	beq.n	2910 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    28fc:	2000      	movs	r0, #0
    28fe:	4b0d      	ldr	r3, [pc, #52]	; (2934 <system_clock_source_get_hz+0xa0>)
    2900:	4798      	blx	r3
    2902:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    2904:	4b07      	ldr	r3, [pc, #28]	; (2924 <system_clock_source_get_hz+0x90>)
    2906:	689b      	ldr	r3, [r3, #8]
    2908:	041b      	lsls	r3, r3, #16
    290a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    290c:	4353      	muls	r3, r2
    290e:	e002      	b.n	2916 <system_clock_source_get_hz+0x82>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2910:	4b09      	ldr	r3, [pc, #36]	; (2938 <system_clock_source_get_hz+0xa4>)
    2912:	e000      	b.n	2916 <system_clock_source_get_hz+0x82>

	default:
		return 0;
    2914:	2300      	movs	r3, #0
	}
}
    2916:	1c18      	adds	r0, r3, #0
    2918:	46bd      	mov	sp, r7
    291a:	b002      	add	sp, #8
    291c:	bd80      	pop	{r7, pc}
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	0000480c 	.word	0x0000480c
    2924:	20000050 	.word	0x20000050
    2928:	40000800 	.word	0x40000800
    292c:	007a1200 	.word	0x007a1200
    2930:	00002839 	.word	0x00002839
    2934:	000032bd 	.word	0x000032bd
    2938:	02dc6c00 	.word	0x02dc6c00

0000293c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    293c:	b580      	push	{r7, lr}
    293e:	b084      	sub	sp, #16
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2944:	4b1a      	ldr	r3, [pc, #104]	; (29b0 <system_clock_source_osc8m_set_config+0x74>)
    2946:	6a1b      	ldr	r3, [r3, #32]
    2948:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	1c1a      	adds	r2, r3, #0
    2950:	2303      	movs	r3, #3
    2952:	4013      	ands	r3, r2
    2954:	b2da      	uxtb	r2, r3
    2956:	230d      	movs	r3, #13
    2958:	18fb      	adds	r3, r7, r3
    295a:	2103      	movs	r1, #3
    295c:	400a      	ands	r2, r1
    295e:	1c10      	adds	r0, r2, #0
    2960:	781a      	ldrb	r2, [r3, #0]
    2962:	2103      	movs	r1, #3
    2964:	438a      	bics	r2, r1
    2966:	1c11      	adds	r1, r2, #0
    2968:	1c02      	adds	r2, r0, #0
    296a:	430a      	orrs	r2, r1
    296c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	789a      	ldrb	r2, [r3, #2]
    2972:	230c      	movs	r3, #12
    2974:	18fb      	adds	r3, r7, r3
    2976:	01d0      	lsls	r0, r2, #7
    2978:	781a      	ldrb	r2, [r3, #0]
    297a:	217f      	movs	r1, #127	; 0x7f
    297c:	400a      	ands	r2, r1
    297e:	1c11      	adds	r1, r2, #0
    2980:	1c02      	adds	r2, r0, #0
    2982:	430a      	orrs	r2, r1
    2984:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	785a      	ldrb	r2, [r3, #1]
    298a:	230c      	movs	r3, #12
    298c:	18fb      	adds	r3, r7, r3
    298e:	2101      	movs	r1, #1
    2990:	400a      	ands	r2, r1
    2992:	0190      	lsls	r0, r2, #6
    2994:	781a      	ldrb	r2, [r3, #0]
    2996:	2140      	movs	r1, #64	; 0x40
    2998:	438a      	bics	r2, r1
    299a:	1c11      	adds	r1, r2, #0
    299c:	1c02      	adds	r2, r0, #0
    299e:	430a      	orrs	r2, r1
    29a0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    29a2:	4b03      	ldr	r3, [pc, #12]	; (29b0 <system_clock_source_osc8m_set_config+0x74>)
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	621a      	str	r2, [r3, #32]
}
    29a8:	46bd      	mov	sp, r7
    29aa:	b004      	add	sp, #16
    29ac:	bd80      	pop	{r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	40000800 	.word	0x40000800

000029b4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    29bc:	4b39      	ldr	r3, [pc, #228]	; (2aa4 <system_clock_source_dfll_set_config+0xf0>)
    29be:	4798      	blx	r3
    29c0:	1c03      	adds	r3, r0, #0
    29c2:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    29c4:	68fa      	ldr	r2, [r7, #12]
    29c6:	23f0      	movs	r3, #240	; 0xf0
    29c8:	011b      	lsls	r3, r3, #4
    29ca:	4013      	ands	r3, r2
    29cc:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    29ce:	68fb      	ldr	r3, [r7, #12]
    29d0:	0a1b      	lsrs	r3, r3, #8
    29d2:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
    29d4:	68fb      	ldr	r3, [r7, #12]
    29d6:	2b02      	cmp	r3, #2
    29d8:	d80f      	bhi.n	29fa <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	7a1b      	ldrb	r3, [r3, #8]
    29de:	021b      	lsls	r3, r3, #8
    29e0:	1c1a      	adds	r2, r3, #0
    29e2:	23f8      	movs	r3, #248	; 0xf8
    29e4:	015b      	lsls	r3, r3, #5
    29e6:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	895b      	ldrh	r3, [r3, #10]
    29ec:	1c19      	adds	r1, r3, #0
    29ee:	23ff      	movs	r3, #255	; 0xff
    29f0:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    29f2:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
    29f4:	4b2c      	ldr	r3, [pc, #176]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    29f6:	605a      	str	r2, [r3, #4]
    29f8:	e00b      	b.n	2a12 <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	7a1b      	ldrb	r3, [r3, #8]
    29fe:	029b      	lsls	r3, r3, #10
    2a00:	041b      	lsls	r3, r3, #16
    2a02:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	895b      	ldrh	r3, [r3, #10]
    2a08:	059b      	lsls	r3, r3, #22
    2a0a:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    2a0c:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
    2a0e:	4b26      	ldr	r3, [pc, #152]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a10:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2a1a:	4313      	orrs	r3, r2
    2a1c:	b2db      	uxtb	r3, r3
    2a1e:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    2a24:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    2a26:	687a      	ldr	r2, [r7, #4]
    2a28:	8892      	ldrh	r2, [r2, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2a2a:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	785b      	ldrb	r3, [r3, #1]
    2a30:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    2a32:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
    2a34:	4b1c      	ldr	r3, [pc, #112]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a36:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	781b      	ldrb	r3, [r3, #0]
    2a3c:	2b04      	cmp	r3, #4
    2a3e:	d12e      	bne.n	2a9e <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	2b02      	cmp	r3, #2
    2a44:	d814      	bhi.n	2a70 <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	7b1b      	ldrb	r3, [r3, #12]
    2a4a:	061b      	lsls	r3, r3, #24
    2a4c:	1c1a      	adds	r2, r3, #0
    2a4e:	23f8      	movs	r3, #248	; 0xf8
    2a50:	055b      	lsls	r3, r3, #21
    2a52:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	89db      	ldrh	r3, [r3, #14]
    2a58:	041b      	lsls	r3, r3, #16
    2a5a:	1c19      	adds	r1, r3, #0
    2a5c:	23ff      	movs	r3, #255	; 0xff
    2a5e:	041b      	lsls	r3, r3, #16
    2a60:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
    2a62:	4313      	orrs	r3, r2
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2a64:	687a      	ldr	r2, [r7, #4]
    2a66:	8a12      	ldrh	r2, [r2, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
    2a68:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
    2a6a:	4b0f      	ldr	r3, [pc, #60]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a6c:	609a      	str	r2, [r3, #8]
    2a6e:	e00f      	b.n	2a90 <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	7b1b      	ldrb	r3, [r3, #12]
    2a74:	069b      	lsls	r3, r3, #26
    2a76:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	89db      	ldrh	r3, [r3, #14]
    2a7c:	041b      	lsls	r3, r3, #16
    2a7e:	1c19      	adds	r1, r3, #0
    2a80:	4b0a      	ldr	r3, [pc, #40]	; (2aac <system_clock_source_dfll_set_config+0xf8>)
    2a82:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
    2a84:	4313      	orrs	r3, r2
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2a86:	687a      	ldr	r2, [r7, #4]
    2a88:	8a12      	ldrh	r2, [r2, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
    2a8a:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
    2a8c:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a8e:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2a90:	4b05      	ldr	r3, [pc, #20]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	687a      	ldr	r2, [r7, #4]
    2a96:	7812      	ldrb	r2, [r2, #0]
    2a98:	431a      	orrs	r2, r3
    2a9a:	4b03      	ldr	r3, [pc, #12]	; (2aa8 <system_clock_source_dfll_set_config+0xf4>)
    2a9c:	601a      	str	r2, [r3, #0]
	}
}
    2a9e:	46bd      	mov	sp, r7
    2aa0:	b004      	add	sp, #16
    2aa2:	bd80      	pop	{r7, pc}
    2aa4:	00002825 	.word	0x00002825
    2aa8:	20000050 	.word	0x20000050
    2aac:	03ff0000 	.word	0x03ff0000

00002ab0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	1c02      	adds	r2, r0, #0
    2ab8:	1dfb      	adds	r3, r7, #7
    2aba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2abc:	1dfb      	adds	r3, r7, #7
    2abe:	781b      	ldrb	r3, [r3, #0]
    2ac0:	2b07      	cmp	r3, #7
    2ac2:	d830      	bhi.n	2b26 <system_clock_source_enable+0x76>
    2ac4:	009a      	lsls	r2, r3, #2
    2ac6:	4b1b      	ldr	r3, [pc, #108]	; (2b34 <system_clock_source_enable+0x84>)
    2ac8:	18d3      	adds	r3, r2, r3
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2ace:	4b1a      	ldr	r3, [pc, #104]	; (2b38 <system_clock_source_enable+0x88>)
    2ad0:	4a19      	ldr	r2, [pc, #100]	; (2b38 <system_clock_source_enable+0x88>)
    2ad2:	6a12      	ldr	r2, [r2, #32]
    2ad4:	2102      	movs	r1, #2
    2ad6:	430a      	orrs	r2, r1
    2ad8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    2ada:	2300      	movs	r3, #0
    2adc:	e026      	b.n	2b2c <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2ade:	4b16      	ldr	r3, [pc, #88]	; (2b38 <system_clock_source_enable+0x88>)
    2ae0:	4a15      	ldr	r2, [pc, #84]	; (2b38 <system_clock_source_enable+0x88>)
    2ae2:	6992      	ldr	r2, [r2, #24]
    2ae4:	2102      	movs	r1, #2
    2ae6:	430a      	orrs	r2, r1
    2ae8:	619a      	str	r2, [r3, #24]
		break;
    2aea:	e01e      	b.n	2b2a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2aec:	4a12      	ldr	r2, [pc, #72]	; (2b38 <system_clock_source_enable+0x88>)
    2aee:	4b12      	ldr	r3, [pc, #72]	; (2b38 <system_clock_source_enable+0x88>)
    2af0:	8a1b      	ldrh	r3, [r3, #16]
    2af2:	b29b      	uxth	r3, r3
    2af4:	2102      	movs	r1, #2
    2af6:	430b      	orrs	r3, r1
    2af8:	b29b      	uxth	r3, r3
    2afa:	8213      	strh	r3, [r2, #16]
		break;
    2afc:	e015      	b.n	2b2a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2afe:	4a0e      	ldr	r2, [pc, #56]	; (2b38 <system_clock_source_enable+0x88>)
    2b00:	4b0d      	ldr	r3, [pc, #52]	; (2b38 <system_clock_source_enable+0x88>)
    2b02:	8a9b      	ldrh	r3, [r3, #20]
    2b04:	b29b      	uxth	r3, r3
    2b06:	2102      	movs	r1, #2
    2b08:	430b      	orrs	r3, r1
    2b0a:	b29b      	uxth	r3, r3
    2b0c:	8293      	strh	r3, [r2, #20]
		break;
    2b0e:	e00c      	b.n	2b2a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b10:	4b0a      	ldr	r3, [pc, #40]	; (2b3c <system_clock_source_enable+0x8c>)
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	2202      	movs	r2, #2
    2b16:	431a      	orrs	r2, r3
    2b18:	4b08      	ldr	r3, [pc, #32]	; (2b3c <system_clock_source_enable+0x8c>)
    2b1a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2b1c:	4b08      	ldr	r3, [pc, #32]	; (2b40 <system_clock_source_enable+0x90>)
    2b1e:	4798      	blx	r3
		break;
    2b20:	e003      	b.n	2b2a <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2b22:	2300      	movs	r3, #0
    2b24:	e002      	b.n	2b2c <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b26:	2317      	movs	r3, #23
    2b28:	e000      	b.n	2b2c <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    2b2a:	2300      	movs	r3, #0
}
    2b2c:	1c18      	adds	r0, r3, #0
    2b2e:	46bd      	mov	sp, r7
    2b30:	b002      	add	sp, #8
    2b32:	bd80      	pop	{r7, pc}
    2b34:	0000482c 	.word	0x0000482c
    2b38:	40000800 	.word	0x40000800
    2b3c:	20000050 	.word	0x20000050
    2b40:	00002851 	.word	0x00002851

00002b44 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    2b44:	b580      	push	{r7, lr}
    2b46:	b084      	sub	sp, #16
    2b48:	af00      	add	r7, sp, #0
    2b4a:	1c02      	adds	r2, r0, #0
    2b4c:	1dfb      	adds	r3, r7, #7
    2b4e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    2b50:	2300      	movs	r3, #0
    2b52:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    2b54:	1dfb      	adds	r3, r7, #7
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	2b07      	cmp	r3, #7
    2b5a:	d815      	bhi.n	2b88 <system_clock_source_is_ready+0x44>
    2b5c:	009a      	lsls	r2, r3, #2
    2b5e:	4b12      	ldr	r3, [pc, #72]	; (2ba8 <system_clock_source_is_ready+0x64>)
    2b60:	18d3      	adds	r3, r2, r3
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    2b66:	2308      	movs	r3, #8
    2b68:	60fb      	str	r3, [r7, #12]
		break;
    2b6a:	e00f      	b.n	2b8c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    2b6c:	2304      	movs	r3, #4
    2b6e:	60fb      	str	r3, [r7, #12]
		break;
    2b70:	e00c      	b.n	2b8c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    2b72:	2301      	movs	r3, #1
    2b74:	60fb      	str	r3, [r7, #12]
		break;
    2b76:	e009      	b.n	2b8c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    2b78:	2302      	movs	r3, #2
    2b7a:	60fb      	str	r3, [r7, #12]
		break;
    2b7c:	e006      	b.n	2b8c <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    2b7e:	2310      	movs	r3, #16
    2b80:	60fb      	str	r3, [r7, #12]
		}
		break;
    2b82:	e003      	b.n	2b8c <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    2b84:	2301      	movs	r3, #1
    2b86:	e00a      	b.n	2b9e <system_clock_source_is_ready+0x5a>

	default:
		return false;
    2b88:	2300      	movs	r3, #0
    2b8a:	e008      	b.n	2b9e <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2b8c:	4b07      	ldr	r3, [pc, #28]	; (2bac <system_clock_source_is_ready+0x68>)
    2b8e:	68db      	ldr	r3, [r3, #12]
    2b90:	68fa      	ldr	r2, [r7, #12]
    2b92:	401a      	ands	r2, r3
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	1ad3      	subs	r3, r2, r3
    2b98:	425a      	negs	r2, r3
    2b9a:	4153      	adcs	r3, r2
    2b9c:	b2db      	uxtb	r3, r3
}
    2b9e:	1c18      	adds	r0, r3, #0
    2ba0:	46bd      	mov	sp, r7
    2ba2:	b004      	add	sp, #16
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	0000484c 	.word	0x0000484c
    2bac:	40000800 	.word	0x40000800

00002bb0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2bb6:	1c3b      	adds	r3, r7, #0
    2bb8:	2202      	movs	r2, #2
    2bba:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bbc:	2300      	movs	r3, #0
    2bbe:	607b      	str	r3, [r7, #4]
    2bc0:	e009      	b.n	2bd6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	b2da      	uxtb	r2, r3
    2bc6:	1c3b      	adds	r3, r7, #0
    2bc8:	1c10      	adds	r0, r2, #0
    2bca:	1c19      	adds	r1, r3, #0
    2bcc:	4b05      	ldr	r3, [pc, #20]	; (2be4 <_switch_peripheral_gclk+0x34>)
    2bce:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	3301      	adds	r3, #1
    2bd4:	607b      	str	r3, [r7, #4]
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	2b1b      	cmp	r3, #27
    2bda:	d9f2      	bls.n	2bc2 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    2bdc:	46bd      	mov	sp, r7
    2bde:	b002      	add	sp, #8
    2be0:	bd80      	pop	{r7, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	00003151 	.word	0x00003151

00002be8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b0a4      	sub	sp, #144	; 0x90
    2bec:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2bee:	4b7b      	ldr	r3, [pc, #492]	; (2ddc <system_clock_init+0x1f4>)
    2bf0:	22c2      	movs	r2, #194	; 0xc2
    2bf2:	00d2      	lsls	r2, r2, #3
    2bf4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2bf6:	2000      	movs	r0, #0
    2bf8:	4b79      	ldr	r3, [pc, #484]	; (2de0 <system_clock_init+0x1f8>)
    2bfa:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2bfc:	4b79      	ldr	r3, [pc, #484]	; (2de4 <system_clock_init+0x1fc>)
    2bfe:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    2c00:	2374      	movs	r3, #116	; 0x74
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	1c18      	adds	r0, r3, #0
    2c06:	4b78      	ldr	r3, [pc, #480]	; (2de8 <system_clock_init+0x200>)
    2c08:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c0a:	2374      	movs	r3, #116	; 0x74
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	2200      	movs	r2, #0
    2c10:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    2c12:	2374      	movs	r3, #116	; 0x74
    2c14:	18fb      	adds	r3, r7, r3
    2c16:	2200      	movs	r2, #0
    2c18:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
     in DFLL.COARSE helps to output a frequency close to 48 MHz.
	   Not applicable for silicon rev C and previous*/

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
    2c1a:	4b74      	ldr	r3, [pc, #464]	; (2dec <system_clock_init+0x204>)
    2c1c:	4798      	blx	r3
    2c1e:	1c03      	adds	r3, r0, #0
    2c20:	2288      	movs	r2, #136	; 0x88
    2c22:	18ba      	adds	r2, r7, r2
    2c24:	6013      	str	r3, [r2, #0]

	rev &= DSU_DID_REVISION_Msk;
    2c26:	2388      	movs	r3, #136	; 0x88
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	681a      	ldr	r2, [r3, #0]
    2c2c:	23f0      	movs	r3, #240	; 0xf0
    2c2e:	011b      	lsls	r3, r3, #4
    2c30:	4013      	ands	r3, r2
    2c32:	2288      	movs	r2, #136	; 0x88
    2c34:	18ba      	adds	r2, r7, r2
    2c36:	6013      	str	r3, [r2, #0]
	rev = rev >> DSU_DID_REVISION_Pos;
    2c38:	2388      	movs	r3, #136	; 0x88
    2c3a:	18fb      	adds	r3, r7, r3
    2c3c:	681b      	ldr	r3, [r3, #0]
    2c3e:	0a1b      	lsrs	r3, r3, #8
    2c40:	2288      	movs	r2, #136	; 0x88
    2c42:	18ba      	adds	r2, r7, r2
    2c44:	6013      	str	r3, [r2, #0]

	if (rev >= _SYSTEM_MCU_REVISION_D) {
    2c46:	2388      	movs	r3, #136	; 0x88
    2c48:	18fb      	adds	r3, r7, r3
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	2b02      	cmp	r3, #2
    2c4e:	d915      	bls.n	2c7c <system_clock_init+0x94>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2c50:	4b67      	ldr	r3, [pc, #412]	; (2df0 <system_clock_init+0x208>)
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	0e9b      	lsrs	r3, r3, #26
    2c56:	228c      	movs	r2, #140	; 0x8c
    2c58:	18ba      	adds	r2, r7, r2
    2c5a:	6013      	str	r3, [r2, #0]
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
    2c5c:	238c      	movs	r3, #140	; 0x8c
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	2b3f      	cmp	r3, #63	; 0x3f
    2c64:	d103      	bne.n	2c6e <system_clock_init+0x86>
			coarse = 0x1f;
    2c66:	231f      	movs	r3, #31
    2c68:	228c      	movs	r2, #140	; 0x8c
    2c6a:	18ba      	adds	r2, r7, r2
    2c6c:	6013      	str	r3, [r2, #0]
		}
		dfll_conf.coarse_value = coarse;
    2c6e:	238c      	movs	r3, #140	; 0x8c
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	b2da      	uxtb	r2, r3
    2c76:	2374      	movs	r3, #116	; 0x74
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	721a      	strb	r2, [r3, #8]
	}

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    2c7c:	2374      	movs	r3, #116	; 0x74
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	223f      	movs	r2, #63	; 0x3f
    2c82:	815a      	strh	r2, [r3, #10]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c84:	2374      	movs	r3, #116	; 0x74
    2c86:	18fb      	adds	r3, r7, r3
    2c88:	2200      	movs	r2, #0
    2c8a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c8c:	2374      	movs	r3, #116	; 0x74
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	2200      	movs	r2, #0
    2c92:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c94:	2374      	movs	r3, #116	; 0x74
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	2200      	movs	r2, #0
    2c9a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2c9c:	2374      	movs	r3, #116	; 0x74
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	2200      	movs	r2, #0
    2ca2:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2ca4:	2374      	movs	r3, #116	; 0x74
    2ca6:	18fb      	adds	r3, r7, r3
    2ca8:	2207      	movs	r2, #7
    2caa:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2cac:	2374      	movs	r3, #116	; 0x74
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	223f      	movs	r2, #63	; 0x3f
    2cb2:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
    2cb4:	2374      	movs	r3, #116	; 0x74
    2cb6:	18fb      	adds	r3, r7, r3
    2cb8:	1c18      	adds	r0, r3, #0
    2cba:	4b4e      	ldr	r3, [pc, #312]	; (2df4 <system_clock_init+0x20c>)
    2cbc:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2cbe:	2370      	movs	r3, #112	; 0x70
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	1c18      	adds	r0, r3, #0
    2cc4:	4b4c      	ldr	r3, [pc, #304]	; (2df8 <system_clock_init+0x210>)
    2cc6:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2cc8:	2370      	movs	r3, #112	; 0x70
    2cca:	18fb      	adds	r3, r7, r3
    2ccc:	2200      	movs	r2, #0
    2cce:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2cd0:	2370      	movs	r3, #112	; 0x70
    2cd2:	18fb      	adds	r3, r7, r3
    2cd4:	2201      	movs	r2, #1
    2cd6:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2cd8:	2370      	movs	r3, #112	; 0x70
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	2200      	movs	r2, #0
    2cde:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2ce0:	2370      	movs	r3, #112	; 0x70
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	1c18      	adds	r0, r3, #0
    2ce6:	4b45      	ldr	r3, [pc, #276]	; (2dfc <system_clock_init+0x214>)
    2ce8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2cea:	2006      	movs	r0, #6
    2cec:	4b44      	ldr	r3, [pc, #272]	; (2e00 <system_clock_init+0x218>)
    2cee:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2cf0:	4b44      	ldr	r3, [pc, #272]	; (2e04 <system_clock_init+0x21c>)
    2cf2:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2cf4:	2358      	movs	r3, #88	; 0x58
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	1c18      	adds	r0, r3, #0
    2cfa:	4b43      	ldr	r3, [pc, #268]	; (2e08 <system_clock_init+0x220>)
    2cfc:	4798      	blx	r3
    2cfe:	2358      	movs	r3, #88	; 0x58
    2d00:	18fb      	adds	r3, r7, r3
    2d02:	2206      	movs	r2, #6
    2d04:	701a      	strb	r2, [r3, #0]
    2d06:	2358      	movs	r3, #88	; 0x58
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	2201      	movs	r2, #1
    2d0c:	605a      	str	r2, [r3, #4]
    2d0e:	2358      	movs	r3, #88	; 0x58
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	2200      	movs	r2, #0
    2d14:	721a      	strb	r2, [r3, #8]
    2d16:	2358      	movs	r3, #88	; 0x58
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	2200      	movs	r2, #0
    2d1c:	725a      	strb	r2, [r3, #9]
    2d1e:	2358      	movs	r3, #88	; 0x58
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	2001      	movs	r0, #1
    2d24:	1c19      	adds	r1, r3, #0
    2d26:	4b39      	ldr	r3, [pc, #228]	; (2e0c <system_clock_init+0x224>)
    2d28:	4798      	blx	r3
    2d2a:	2001      	movs	r0, #1
    2d2c:	4b38      	ldr	r3, [pc, #224]	; (2e10 <system_clock_init+0x228>)
    2d2e:	4798      	blx	r3
    2d30:	2334      	movs	r3, #52	; 0x34
    2d32:	18fb      	adds	r3, r7, r3
    2d34:	1c18      	adds	r0, r3, #0
    2d36:	4b34      	ldr	r3, [pc, #208]	; (2e08 <system_clock_init+0x220>)
    2d38:	4798      	blx	r3
    2d3a:	2334      	movs	r3, #52	; 0x34
    2d3c:	18fb      	adds	r3, r7, r3
    2d3e:	2206      	movs	r2, #6
    2d40:	701a      	strb	r2, [r3, #0]
    2d42:	2334      	movs	r3, #52	; 0x34
    2d44:	18fb      	adds	r3, r7, r3
    2d46:	22ff      	movs	r2, #255	; 0xff
    2d48:	605a      	str	r2, [r3, #4]
    2d4a:	2334      	movs	r3, #52	; 0x34
    2d4c:	18fb      	adds	r3, r7, r3
    2d4e:	2200      	movs	r2, #0
    2d50:	721a      	strb	r2, [r3, #8]
    2d52:	2334      	movs	r3, #52	; 0x34
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	2200      	movs	r2, #0
    2d58:	725a      	strb	r2, [r3, #9]
    2d5a:	2334      	movs	r3, #52	; 0x34
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	2004      	movs	r0, #4
    2d60:	1c19      	adds	r1, r3, #0
    2d62:	4b2a      	ldr	r3, [pc, #168]	; (2e0c <system_clock_init+0x224>)
    2d64:	4798      	blx	r3
    2d66:	2004      	movs	r0, #4
    2d68:	4b29      	ldr	r3, [pc, #164]	; (2e10 <system_clock_init+0x228>)
    2d6a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2d6c:	2007      	movs	r0, #7
    2d6e:	4b24      	ldr	r3, [pc, #144]	; (2e00 <system_clock_init+0x218>)
    2d70:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	2007      	movs	r0, #7
    2d76:	4b27      	ldr	r3, [pc, #156]	; (2e14 <system_clock_init+0x22c>)
    2d78:	4798      	blx	r3
    2d7a:	1c03      	adds	r3, r0, #0
    2d7c:	1c1a      	adds	r2, r3, #0
    2d7e:	2301      	movs	r3, #1
    2d80:	4053      	eors	r3, r2
    2d82:	b2db      	uxtb	r3, r3
    2d84:	2b00      	cmp	r3, #0
    2d86:	d1f5      	bne.n	2d74 <system_clock_init+0x18c>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2d88:	2000      	movs	r0, #0
    2d8a:	4b23      	ldr	r3, [pc, #140]	; (2e18 <system_clock_init+0x230>)
    2d8c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2d8e:	2000      	movs	r0, #0
    2d90:	2100      	movs	r1, #0
    2d92:	4b22      	ldr	r3, [pc, #136]	; (2e1c <system_clock_init+0x234>)
    2d94:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2d96:	2001      	movs	r0, #1
    2d98:	2100      	movs	r1, #0
    2d9a:	4b20      	ldr	r3, [pc, #128]	; (2e1c <system_clock_init+0x234>)
    2d9c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2d9e:	2002      	movs	r0, #2
    2da0:	2100      	movs	r1, #0
    2da2:	4b1e      	ldr	r3, [pc, #120]	; (2e1c <system_clock_init+0x234>)
    2da4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2da6:	1c3b      	adds	r3, r7, #0
    2da8:	1c18      	adds	r0, r3, #0
    2daa:	4b17      	ldr	r3, [pc, #92]	; (2e08 <system_clock_init+0x220>)
    2dac:	4798      	blx	r3
    2dae:	1c3b      	adds	r3, r7, #0
    2db0:	2206      	movs	r2, #6
    2db2:	701a      	strb	r2, [r3, #0]
    2db4:	1c3b      	adds	r3, r7, #0
    2db6:	2201      	movs	r2, #1
    2db8:	605a      	str	r2, [r3, #4]
    2dba:	1c3b      	adds	r3, r7, #0
    2dbc:	2200      	movs	r2, #0
    2dbe:	721a      	strb	r2, [r3, #8]
    2dc0:	1c3b      	adds	r3, r7, #0
    2dc2:	2200      	movs	r2, #0
    2dc4:	725a      	strb	r2, [r3, #9]
    2dc6:	1c3b      	adds	r3, r7, #0
    2dc8:	2000      	movs	r0, #0
    2dca:	1c19      	adds	r1, r3, #0
    2dcc:	4b0f      	ldr	r3, [pc, #60]	; (2e0c <system_clock_init+0x224>)
    2dce:	4798      	blx	r3
    2dd0:	2000      	movs	r0, #0
    2dd2:	4b0f      	ldr	r3, [pc, #60]	; (2e10 <system_clock_init+0x228>)
    2dd4:	4798      	blx	r3
#endif
}
    2dd6:	46bd      	mov	sp, r7
    2dd8:	b024      	add	sp, #144	; 0x90
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	40000800 	.word	0x40000800
    2de0:	000027f1 	.word	0x000027f1
    2de4:	00002bb1 	.word	0x00002bb1
    2de8:	0000272d 	.word	0x0000272d
    2dec:	00002825 	.word	0x00002825
    2df0:	00806024 	.word	0x00806024
    2df4:	000029b5 	.word	0x000029b5
    2df8:	0000270d 	.word	0x0000270d
    2dfc:	0000293d 	.word	0x0000293d
    2e00:	00002ab1 	.word	0x00002ab1
    2e04:	00002ec1 	.word	0x00002ec1
    2e08:	000026e1 	.word	0x000026e1
    2e0c:	00002ef1 	.word	0x00002ef1
    2e10:	00003011 	.word	0x00003011
    2e14:	00002b45 	.word	0x00002b45
    2e18:	0000277d 	.word	0x0000277d
    2e1c:	0000279d 	.word	0x0000279d

00002e20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	b082      	sub	sp, #8
    2e24:	af00      	add	r7, sp, #0
    2e26:	1c02      	adds	r2, r0, #0
    2e28:	6039      	str	r1, [r7, #0]
    2e2a:	1dfb      	adds	r3, r7, #7
    2e2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2e2e:	1dfb      	adds	r3, r7, #7
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	2b01      	cmp	r3, #1
    2e34:	d00a      	beq.n	2e4c <system_apb_clock_set_mask+0x2c>
    2e36:	2b02      	cmp	r3, #2
    2e38:	d00f      	beq.n	2e5a <system_apb_clock_set_mask+0x3a>
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d114      	bne.n	2e68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2e3e:	4b0e      	ldr	r3, [pc, #56]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e40:	4a0d      	ldr	r2, [pc, #52]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e42:	6991      	ldr	r1, [r2, #24]
    2e44:	683a      	ldr	r2, [r7, #0]
    2e46:	430a      	orrs	r2, r1
    2e48:	619a      	str	r2, [r3, #24]
			break;
    2e4a:	e00f      	b.n	2e6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2e4c:	4b0a      	ldr	r3, [pc, #40]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e4e:	4a0a      	ldr	r2, [pc, #40]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e50:	69d1      	ldr	r1, [r2, #28]
    2e52:	683a      	ldr	r2, [r7, #0]
    2e54:	430a      	orrs	r2, r1
    2e56:	61da      	str	r2, [r3, #28]
			break;
    2e58:	e008      	b.n	2e6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2e5a:	4b07      	ldr	r3, [pc, #28]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e5c:	4a06      	ldr	r2, [pc, #24]	; (2e78 <system_apb_clock_set_mask+0x58>)
    2e5e:	6a11      	ldr	r1, [r2, #32]
    2e60:	683a      	ldr	r2, [r7, #0]
    2e62:	430a      	orrs	r2, r1
    2e64:	621a      	str	r2, [r3, #32]
			break;
    2e66:	e001      	b.n	2e6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2e68:	2317      	movs	r3, #23
    2e6a:	e000      	b.n	2e6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2e6c:	2300      	movs	r3, #0
}
    2e6e:	1c18      	adds	r0, r3, #0
    2e70:	46bd      	mov	sp, r7
    2e72:	b002      	add	sp, #8
    2e74:	bd80      	pop	{r7, pc}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	40000400 	.word	0x40000400

00002e7c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2e80:	4b01      	ldr	r3, [pc, #4]	; (2e88 <system_interrupt_enter_critical_section+0xc>)
    2e82:	4798      	blx	r3
}
    2e84:	46bd      	mov	sp, r7
    2e86:	bd80      	pop	{r7, pc}
    2e88:	00001e2d 	.word	0x00001e2d

00002e8c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2e90:	4b01      	ldr	r3, [pc, #4]	; (2e98 <system_interrupt_leave_critical_section+0xc>)
    2e92:	4798      	blx	r3
}
    2e94:	46bd      	mov	sp, r7
    2e96:	bd80      	pop	{r7, pc}
    2e98:	00001e7d 	.word	0x00001e7d

00002e9c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2e9c:	b580      	push	{r7, lr}
    2e9e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ea0:	4b06      	ldr	r3, [pc, #24]	; (2ebc <system_gclk_is_syncing+0x20>)
    2ea2:	785b      	ldrb	r3, [r3, #1]
    2ea4:	b2db      	uxtb	r3, r3
    2ea6:	b2db      	uxtb	r3, r3
    2ea8:	b25b      	sxtb	r3, r3
    2eaa:	2b00      	cmp	r3, #0
    2eac:	da01      	bge.n	2eb2 <system_gclk_is_syncing+0x16>
		return true;
    2eae:	2301      	movs	r3, #1
    2eb0:	e000      	b.n	2eb4 <system_gclk_is_syncing+0x18>
	}

	return false;
    2eb2:	2300      	movs	r3, #0
}
    2eb4:	1c18      	adds	r0, r3, #0
    2eb6:	46bd      	mov	sp, r7
    2eb8:	bd80      	pop	{r7, pc}
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	40000c00 	.word	0x40000c00

00002ec0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2ec4:	2000      	movs	r0, #0
    2ec6:	2108      	movs	r1, #8
    2ec8:	4b07      	ldr	r3, [pc, #28]	; (2ee8 <system_gclk_init+0x28>)
    2eca:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2ecc:	4b07      	ldr	r3, [pc, #28]	; (2eec <system_gclk_init+0x2c>)
    2ece:	2201      	movs	r2, #1
    2ed0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	4b05      	ldr	r3, [pc, #20]	; (2eec <system_gclk_init+0x2c>)
    2ed6:	781b      	ldrb	r3, [r3, #0]
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	1c1a      	adds	r2, r3, #0
    2edc:	2301      	movs	r3, #1
    2ede:	4013      	ands	r3, r2
    2ee0:	d1f8      	bne.n	2ed4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2ee2:	46bd      	mov	sp, r7
    2ee4:	bd80      	pop	{r7, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	00002e21 	.word	0x00002e21
    2eec:	40000c00 	.word	0x40000c00

00002ef0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b086      	sub	sp, #24
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	1c02      	adds	r2, r0, #0
    2ef8:	6039      	str	r1, [r7, #0]
    2efa:	1dfb      	adds	r3, r7, #7
    2efc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2efe:	1dfb      	adds	r3, r7, #7
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2f04:	1dfb      	adds	r3, r7, #7
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f0a:	683b      	ldr	r3, [r7, #0]
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	021b      	lsls	r3, r3, #8
    2f10:	1c1a      	adds	r2, r3, #0
    2f12:	697b      	ldr	r3, [r7, #20]
    2f14:	4313      	orrs	r3, r2
    2f16:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f18:	683b      	ldr	r3, [r7, #0]
    2f1a:	785b      	ldrb	r3, [r3, #1]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d004      	beq.n	2f2a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f20:	697b      	ldr	r3, [r7, #20]
    2f22:	2280      	movs	r2, #128	; 0x80
    2f24:	02d2      	lsls	r2, r2, #11
    2f26:	4313      	orrs	r3, r2
    2f28:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	7a5b      	ldrb	r3, [r3, #9]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d004      	beq.n	2f3c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	2280      	movs	r2, #128	; 0x80
    2f36:	0312      	lsls	r2, r2, #12
    2f38:	4313      	orrs	r3, r2
    2f3a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f3c:	683b      	ldr	r3, [r7, #0]
    2f3e:	685b      	ldr	r3, [r3, #4]
    2f40:	2b01      	cmp	r3, #1
    2f42:	d92c      	bls.n	2f9e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	685a      	ldr	r2, [r3, #4]
    2f48:	683b      	ldr	r3, [r7, #0]
    2f4a:	685b      	ldr	r3, [r3, #4]
    2f4c:	3b01      	subs	r3, #1
    2f4e:	4013      	ands	r3, r2
    2f50:	d11a      	bne.n	2f88 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2f52:	2300      	movs	r3, #0
    2f54:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f56:	2302      	movs	r3, #2
    2f58:	60bb      	str	r3, [r7, #8]
    2f5a:	e005      	b.n	2f68 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	3301      	adds	r3, #1
    2f60:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2f62:	68bb      	ldr	r3, [r7, #8]
    2f64:	005b      	lsls	r3, r3, #1
    2f66:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f68:	683b      	ldr	r3, [r7, #0]
    2f6a:	685a      	ldr	r2, [r3, #4]
    2f6c:	68bb      	ldr	r3, [r7, #8]
    2f6e:	429a      	cmp	r2, r3
    2f70:	d8f4      	bhi.n	2f5c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2f72:	68fb      	ldr	r3, [r7, #12]
    2f74:	021b      	lsls	r3, r3, #8
    2f76:	693a      	ldr	r2, [r7, #16]
    2f78:	4313      	orrs	r3, r2
    2f7a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f7c:	697b      	ldr	r3, [r7, #20]
    2f7e:	2280      	movs	r2, #128	; 0x80
    2f80:	0352      	lsls	r2, r2, #13
    2f82:	4313      	orrs	r3, r2
    2f84:	617b      	str	r3, [r7, #20]
    2f86:	e00a      	b.n	2f9e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2f88:	683b      	ldr	r3, [r7, #0]
    2f8a:	685b      	ldr	r3, [r3, #4]
    2f8c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2f8e:	693a      	ldr	r2, [r7, #16]
    2f90:	4313      	orrs	r3, r2
    2f92:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2f94:	697b      	ldr	r3, [r7, #20]
    2f96:	2280      	movs	r2, #128	; 0x80
    2f98:	0292      	lsls	r2, r2, #10
    2f9a:	4313      	orrs	r3, r2
    2f9c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	7a1b      	ldrb	r3, [r3, #8]
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d004      	beq.n	2fb0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2fa6:	697b      	ldr	r3, [r7, #20]
    2fa8:	2280      	movs	r2, #128	; 0x80
    2faa:	0392      	lsls	r2, r2, #14
    2fac:	4313      	orrs	r3, r2
    2fae:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2fb0:	46c0      	nop			; (mov r8, r8)
    2fb2:	4b12      	ldr	r3, [pc, #72]	; (2ffc <system_gclk_gen_set_config+0x10c>)
    2fb4:	4798      	blx	r3
    2fb6:	1e03      	subs	r3, r0, #0
    2fb8:	d1fb      	bne.n	2fb2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2fba:	4b11      	ldr	r3, [pc, #68]	; (3000 <system_gclk_gen_set_config+0x110>)
    2fbc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2fbe:	4a11      	ldr	r2, [pc, #68]	; (3004 <system_gclk_gen_set_config+0x114>)
    2fc0:	1dfb      	adds	r3, r7, #7
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	4b0c      	ldr	r3, [pc, #48]	; (2ffc <system_gclk_gen_set_config+0x10c>)
    2fca:	4798      	blx	r3
    2fcc:	1e03      	subs	r3, r0, #0
    2fce:	d1fb      	bne.n	2fc8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2fd0:	4b0d      	ldr	r3, [pc, #52]	; (3008 <system_gclk_gen_set_config+0x118>)
    2fd2:	693a      	ldr	r2, [r7, #16]
    2fd4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	4b08      	ldr	r3, [pc, #32]	; (2ffc <system_gclk_gen_set_config+0x10c>)
    2fda:	4798      	blx	r3
    2fdc:	1e03      	subs	r3, r0, #0
    2fde:	d1fb      	bne.n	2fd8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2fe0:	4b09      	ldr	r3, [pc, #36]	; (3008 <system_gclk_gen_set_config+0x118>)
    2fe2:	4a09      	ldr	r2, [pc, #36]	; (3008 <system_gclk_gen_set_config+0x118>)
    2fe4:	6851      	ldr	r1, [r2, #4]
    2fe6:	2280      	movs	r2, #128	; 0x80
    2fe8:	0252      	lsls	r2, r2, #9
    2fea:	4011      	ands	r1, r2
    2fec:	697a      	ldr	r2, [r7, #20]
    2fee:	430a      	orrs	r2, r1
    2ff0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <system_gclk_gen_set_config+0x11c>)
    2ff4:	4798      	blx	r3
}
    2ff6:	46bd      	mov	sp, r7
    2ff8:	b006      	add	sp, #24
    2ffa:	bd80      	pop	{r7, pc}
    2ffc:	00002e9d 	.word	0x00002e9d
    3000:	00002e7d 	.word	0x00002e7d
    3004:	40000c08 	.word	0x40000c08
    3008:	40000c00 	.word	0x40000c00
    300c:	00002e8d 	.word	0x00002e8d

00003010 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3010:	b580      	push	{r7, lr}
    3012:	b082      	sub	sp, #8
    3014:	af00      	add	r7, sp, #0
    3016:	1c02      	adds	r2, r0, #0
    3018:	1dfb      	adds	r3, r7, #7
    301a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    301c:	46c0      	nop			; (mov r8, r8)
    301e:	4b0d      	ldr	r3, [pc, #52]	; (3054 <system_gclk_gen_enable+0x44>)
    3020:	4798      	blx	r3
    3022:	1e03      	subs	r3, r0, #0
    3024:	d1fb      	bne.n	301e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3026:	4b0c      	ldr	r3, [pc, #48]	; (3058 <system_gclk_gen_enable+0x48>)
    3028:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    302a:	4a0c      	ldr	r2, [pc, #48]	; (305c <system_gclk_gen_enable+0x4c>)
    302c:	1dfb      	adds	r3, r7, #7
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	4b07      	ldr	r3, [pc, #28]	; (3054 <system_gclk_gen_enable+0x44>)
    3036:	4798      	blx	r3
    3038:	1e03      	subs	r3, r0, #0
    303a:	d1fb      	bne.n	3034 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    303c:	4b08      	ldr	r3, [pc, #32]	; (3060 <system_gclk_gen_enable+0x50>)
    303e:	4a08      	ldr	r2, [pc, #32]	; (3060 <system_gclk_gen_enable+0x50>)
    3040:	6852      	ldr	r2, [r2, #4]
    3042:	2180      	movs	r1, #128	; 0x80
    3044:	0249      	lsls	r1, r1, #9
    3046:	430a      	orrs	r2, r1
    3048:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    304a:	4b06      	ldr	r3, [pc, #24]	; (3064 <system_gclk_gen_enable+0x54>)
    304c:	4798      	blx	r3
}
    304e:	46bd      	mov	sp, r7
    3050:	b002      	add	sp, #8
    3052:	bd80      	pop	{r7, pc}
    3054:	00002e9d 	.word	0x00002e9d
    3058:	00002e7d 	.word	0x00002e7d
    305c:	40000c04 	.word	0x40000c04
    3060:	40000c00 	.word	0x40000c00
    3064:	00002e8d 	.word	0x00002e8d

00003068 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3068:	b580      	push	{r7, lr}
    306a:	b086      	sub	sp, #24
    306c:	af00      	add	r7, sp, #0
    306e:	1c02      	adds	r2, r0, #0
    3070:	1dfb      	adds	r3, r7, #7
    3072:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3074:	46c0      	nop			; (mov r8, r8)
    3076:	4b2e      	ldr	r3, [pc, #184]	; (3130 <system_gclk_gen_get_hz+0xc8>)
    3078:	4798      	blx	r3
    307a:	1e03      	subs	r3, r0, #0
    307c:	d1fb      	bne.n	3076 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    307e:	4b2d      	ldr	r3, [pc, #180]	; (3134 <system_gclk_gen_get_hz+0xcc>)
    3080:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3082:	4a2d      	ldr	r2, [pc, #180]	; (3138 <system_gclk_gen_get_hz+0xd0>)
    3084:	1dfb      	adds	r3, r7, #7
    3086:	781b      	ldrb	r3, [r3, #0]
    3088:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	4b28      	ldr	r3, [pc, #160]	; (3130 <system_gclk_gen_get_hz+0xc8>)
    308e:	4798      	blx	r3
    3090:	1e03      	subs	r3, r0, #0
    3092:	d1fb      	bne.n	308c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3094:	4b29      	ldr	r3, [pc, #164]	; (313c <system_gclk_gen_get_hz+0xd4>)
    3096:	685b      	ldr	r3, [r3, #4]
    3098:	0a1b      	lsrs	r3, r3, #8
    309a:	1c1a      	adds	r2, r3, #0
    309c:	231f      	movs	r3, #31
    309e:	4013      	ands	r3, r2
    30a0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    30a2:	1c18      	adds	r0, r3, #0
    30a4:	4b26      	ldr	r3, [pc, #152]	; (3140 <system_gclk_gen_get_hz+0xd8>)
    30a6:	4798      	blx	r3
    30a8:	1c03      	adds	r3, r0, #0
    30aa:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    30ac:	4a22      	ldr	r2, [pc, #136]	; (3138 <system_gclk_gen_get_hz+0xd0>)
    30ae:	1dfb      	adds	r3, r7, #7
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    30b4:	4b21      	ldr	r3, [pc, #132]	; (313c <system_gclk_gen_get_hz+0xd4>)
    30b6:	685b      	ldr	r3, [r3, #4]
    30b8:	0d1b      	lsrs	r3, r3, #20
    30ba:	1c1a      	adds	r2, r3, #0
    30bc:	2301      	movs	r3, #1
    30be:	4013      	ands	r3, r2
    30c0:	b2da      	uxtb	r2, r3
    30c2:	2313      	movs	r3, #19
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    30c8:	4a1e      	ldr	r2, [pc, #120]	; (3144 <system_gclk_gen_get_hz+0xdc>)
    30ca:	1dfb      	adds	r3, r7, #7
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    30d0:	46c0      	nop			; (mov r8, r8)
    30d2:	4b17      	ldr	r3, [pc, #92]	; (3130 <system_gclk_gen_get_hz+0xc8>)
    30d4:	4798      	blx	r3
    30d6:	1e03      	subs	r3, r0, #0
    30d8:	d1fb      	bne.n	30d2 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    30da:	4b18      	ldr	r3, [pc, #96]	; (313c <system_gclk_gen_get_hz+0xd4>)
    30dc:	689b      	ldr	r3, [r3, #8]
    30de:	0a1b      	lsrs	r3, r3, #8
    30e0:	1c1a      	adds	r2, r3, #0
    30e2:	2300      	movs	r3, #0
    30e4:	439a      	bics	r2, r3
    30e6:	1c13      	adds	r3, r2, #0
    30e8:	b29b      	uxth	r3, r3
    30ea:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    30ec:	4b16      	ldr	r3, [pc, #88]	; (3148 <system_gclk_gen_get_hz+0xe0>)
    30ee:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    30f0:	2313      	movs	r3, #19
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d109      	bne.n	310e <system_gclk_gen_get_hz+0xa6>
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	2b01      	cmp	r3, #1
    30fe:	d906      	bls.n	310e <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    3100:	4b12      	ldr	r3, [pc, #72]	; (314c <system_gclk_gen_get_hz+0xe4>)
    3102:	6978      	ldr	r0, [r7, #20]
    3104:	68f9      	ldr	r1, [r7, #12]
    3106:	4798      	blx	r3
    3108:	1c03      	adds	r3, r0, #0
    310a:	617b      	str	r3, [r7, #20]
    310c:	e00a      	b.n	3124 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    310e:	2313      	movs	r3, #19
    3110:	18fb      	adds	r3, r7, r3
    3112:	781b      	ldrb	r3, [r3, #0]
    3114:	2b00      	cmp	r3, #0
    3116:	d005      	beq.n	3124 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	3301      	adds	r3, #1
    311c:	1c1a      	adds	r2, r3, #0
    311e:	697b      	ldr	r3, [r7, #20]
    3120:	40d3      	lsrs	r3, r2
    3122:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3124:	697b      	ldr	r3, [r7, #20]
}
    3126:	1c18      	adds	r0, r3, #0
    3128:	46bd      	mov	sp, r7
    312a:	b006      	add	sp, #24
    312c:	bd80      	pop	{r7, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	00002e9d 	.word	0x00002e9d
    3134:	00002e7d 	.word	0x00002e7d
    3138:	40000c04 	.word	0x40000c04
    313c:	40000c00 	.word	0x40000c00
    3140:	00002895 	.word	0x00002895
    3144:	40000c08 	.word	0x40000c08
    3148:	00002e8d 	.word	0x00002e8d
    314c:	00004535 	.word	0x00004535

00003150 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	1c02      	adds	r2, r0, #0
    3158:	6039      	str	r1, [r7, #0]
    315a:	1dfb      	adds	r3, r7, #7
    315c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    315e:	1dfb      	adds	r3, r7, #7
    3160:	781b      	ldrb	r3, [r3, #0]
    3162:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3164:	683b      	ldr	r3, [r7, #0]
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	021b      	lsls	r3, r3, #8
    316a:	1c1a      	adds	r2, r3, #0
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	4313      	orrs	r3, r2
    3170:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3172:	1dfb      	adds	r3, r7, #7
    3174:	781b      	ldrb	r3, [r3, #0]
    3176:	1c18      	adds	r0, r3, #0
    3178:	4b04      	ldr	r3, [pc, #16]	; (318c <system_gclk_chan_set_config+0x3c>)
    317a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    317c:	4b04      	ldr	r3, [pc, #16]	; (3190 <system_gclk_chan_set_config+0x40>)
    317e:	68fa      	ldr	r2, [r7, #12]
    3180:	b292      	uxth	r2, r2
    3182:	805a      	strh	r2, [r3, #2]
}
    3184:	46bd      	mov	sp, r7
    3186:	b004      	add	sp, #16
    3188:	bd80      	pop	{r7, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	000031d9 	.word	0x000031d9
    3190:	40000c00 	.word	0x40000c00

00003194 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af00      	add	r7, sp, #0
    319a:	1c02      	adds	r2, r0, #0
    319c:	1dfb      	adds	r3, r7, #7
    319e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    31a0:	4b09      	ldr	r3, [pc, #36]	; (31c8 <system_gclk_chan_enable+0x34>)
    31a2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31a4:	4a09      	ldr	r2, [pc, #36]	; (31cc <system_gclk_chan_enable+0x38>)
    31a6:	1dfb      	adds	r3, r7, #7
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    31ac:	4908      	ldr	r1, [pc, #32]	; (31d0 <system_gclk_chan_enable+0x3c>)
    31ae:	4b08      	ldr	r3, [pc, #32]	; (31d0 <system_gclk_chan_enable+0x3c>)
    31b0:	885b      	ldrh	r3, [r3, #2]
    31b2:	b29b      	uxth	r3, r3
    31b4:	2280      	movs	r2, #128	; 0x80
    31b6:	01d2      	lsls	r2, r2, #7
    31b8:	4313      	orrs	r3, r2
    31ba:	b29b      	uxth	r3, r3
    31bc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <system_gclk_chan_enable+0x40>)
    31c0:	4798      	blx	r3
}
    31c2:	46bd      	mov	sp, r7
    31c4:	b002      	add	sp, #8
    31c6:	bd80      	pop	{r7, pc}
    31c8:	00002e7d 	.word	0x00002e7d
    31cc:	40000c02 	.word	0x40000c02
    31d0:	40000c00 	.word	0x40000c00
    31d4:	00002e8d 	.word	0x00002e8d

000031d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b084      	sub	sp, #16
    31dc:	af00      	add	r7, sp, #0
    31de:	1c02      	adds	r2, r0, #0
    31e0:	1dfb      	adds	r3, r7, #7
    31e2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    31e4:	4b1d      	ldr	r3, [pc, #116]	; (325c <system_gclk_chan_disable+0x84>)
    31e6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31e8:	4a1d      	ldr	r2, [pc, #116]	; (3260 <system_gclk_chan_disable+0x88>)
    31ea:	1dfb      	adds	r3, r7, #7
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    31f0:	4b1c      	ldr	r3, [pc, #112]	; (3264 <system_gclk_chan_disable+0x8c>)
    31f2:	885b      	ldrh	r3, [r3, #2]
    31f4:	b29b      	uxth	r3, r3
    31f6:	0a1b      	lsrs	r3, r3, #8
    31f8:	1c1a      	adds	r2, r3, #0
    31fa:	230f      	movs	r3, #15
    31fc:	4013      	ands	r3, r2
    31fe:	b2db      	uxtb	r3, r3
    3200:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3202:	4b18      	ldr	r3, [pc, #96]	; (3264 <system_gclk_chan_disable+0x8c>)
    3204:	885a      	ldrh	r2, [r3, #2]
    3206:	4918      	ldr	r1, [pc, #96]	; (3268 <system_gclk_chan_disable+0x90>)
    3208:	400a      	ands	r2, r1
    320a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    320c:	4a15      	ldr	r2, [pc, #84]	; (3264 <system_gclk_chan_disable+0x8c>)
    320e:	4b15      	ldr	r3, [pc, #84]	; (3264 <system_gclk_chan_disable+0x8c>)
    3210:	885b      	ldrh	r3, [r3, #2]
    3212:	b29b      	uxth	r3, r3
    3214:	4915      	ldr	r1, [pc, #84]	; (326c <system_gclk_chan_disable+0x94>)
    3216:	400b      	ands	r3, r1
    3218:	b29b      	uxth	r3, r3
    321a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    321c:	46c0      	nop			; (mov r8, r8)
    321e:	4b11      	ldr	r3, [pc, #68]	; (3264 <system_gclk_chan_disable+0x8c>)
    3220:	885b      	ldrh	r3, [r3, #2]
    3222:	b29b      	uxth	r3, r3
    3224:	1c1a      	adds	r2, r3, #0
    3226:	2380      	movs	r3, #128	; 0x80
    3228:	01db      	lsls	r3, r3, #7
    322a:	4013      	ands	r3, r2
    322c:	d1f7      	bne.n	321e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    322e:	4b0d      	ldr	r3, [pc, #52]	; (3264 <system_gclk_chan_disable+0x8c>)
    3230:	68fa      	ldr	r2, [r7, #12]
    3232:	b2d2      	uxtb	r2, r2
    3234:	1c11      	adds	r1, r2, #0
    3236:	220f      	movs	r2, #15
    3238:	400a      	ands	r2, r1
    323a:	b2d2      	uxtb	r2, r2
    323c:	1c11      	adds	r1, r2, #0
    323e:	220f      	movs	r2, #15
    3240:	400a      	ands	r2, r1
    3242:	0210      	lsls	r0, r2, #8
    3244:	885a      	ldrh	r2, [r3, #2]
    3246:	4908      	ldr	r1, [pc, #32]	; (3268 <system_gclk_chan_disable+0x90>)
    3248:	400a      	ands	r2, r1
    324a:	1c11      	adds	r1, r2, #0
    324c:	1c02      	adds	r2, r0, #0
    324e:	430a      	orrs	r2, r1
    3250:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    3252:	4b07      	ldr	r3, [pc, #28]	; (3270 <system_gclk_chan_disable+0x98>)
    3254:	4798      	blx	r3
}
    3256:	46bd      	mov	sp, r7
    3258:	b004      	add	sp, #16
    325a:	bd80      	pop	{r7, pc}
    325c:	00002e7d 	.word	0x00002e7d
    3260:	40000c02 	.word	0x40000c02
    3264:	40000c00 	.word	0x40000c00
    3268:	fffff0ff 	.word	0xfffff0ff
    326c:	ffffbfff 	.word	0xffffbfff
    3270:	00002e8d 	.word	0x00002e8d

00003274 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    3274:	b580      	push	{r7, lr}
    3276:	b082      	sub	sp, #8
    3278:	af00      	add	r7, sp, #0
    327a:	1c02      	adds	r2, r0, #0
    327c:	1dfb      	adds	r3, r7, #7
    327e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3280:	4b09      	ldr	r3, [pc, #36]	; (32a8 <system_gclk_chan_lock+0x34>)
    3282:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3284:	4a09      	ldr	r2, [pc, #36]	; (32ac <system_gclk_chan_lock+0x38>)
    3286:	1dfb      	adds	r3, r7, #7
    3288:	781b      	ldrb	r3, [r3, #0]
    328a:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK;
    328c:	4a08      	ldr	r2, [pc, #32]	; (32b0 <system_gclk_chan_lock+0x3c>)
    328e:	4b08      	ldr	r3, [pc, #32]	; (32b0 <system_gclk_chan_lock+0x3c>)
    3290:	885b      	ldrh	r3, [r3, #2]
    3292:	b29b      	uxth	r3, r3
    3294:	4907      	ldr	r1, [pc, #28]	; (32b4 <system_gclk_chan_lock+0x40>)
    3296:	430b      	orrs	r3, r1
    3298:	b29b      	uxth	r3, r3
    329a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    329c:	4b06      	ldr	r3, [pc, #24]	; (32b8 <system_gclk_chan_lock+0x44>)
    329e:	4798      	blx	r3
}
    32a0:	46bd      	mov	sp, r7
    32a2:	b002      	add	sp, #8
    32a4:	bd80      	pop	{r7, pc}
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	00002e7d 	.word	0x00002e7d
    32ac:	40000c02 	.word	0x40000c02
    32b0:	40000c00 	.word	0x40000c00
    32b4:	ffff8000 	.word	0xffff8000
    32b8:	00002e8d 	.word	0x00002e8d

000032bc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b084      	sub	sp, #16
    32c0:	af00      	add	r7, sp, #0
    32c2:	1c02      	adds	r2, r0, #0
    32c4:	1dfb      	adds	r3, r7, #7
    32c6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    32c8:	4b0e      	ldr	r3, [pc, #56]	; (3304 <system_gclk_chan_get_hz+0x48>)
    32ca:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32cc:	4a0e      	ldr	r2, [pc, #56]	; (3308 <system_gclk_chan_get_hz+0x4c>)
    32ce:	1dfb      	adds	r3, r7, #7
    32d0:	781b      	ldrb	r3, [r3, #0]
    32d2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    32d4:	4b0d      	ldr	r3, [pc, #52]	; (330c <system_gclk_chan_get_hz+0x50>)
    32d6:	885b      	ldrh	r3, [r3, #2]
    32d8:	b29b      	uxth	r3, r3
    32da:	0a1b      	lsrs	r3, r3, #8
    32dc:	1c1a      	adds	r2, r3, #0
    32de:	230f      	movs	r3, #15
    32e0:	4013      	ands	r3, r2
    32e2:	b2da      	uxtb	r2, r3
    32e4:	230f      	movs	r3, #15
    32e6:	18fb      	adds	r3, r7, r3
    32e8:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <system_gclk_chan_get_hz+0x54>)
    32ec:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    32ee:	230f      	movs	r3, #15
    32f0:	18fb      	adds	r3, r7, r3
    32f2:	781b      	ldrb	r3, [r3, #0]
    32f4:	1c18      	adds	r0, r3, #0
    32f6:	4b07      	ldr	r3, [pc, #28]	; (3314 <system_gclk_chan_get_hz+0x58>)
    32f8:	4798      	blx	r3
    32fa:	1c03      	adds	r3, r0, #0
}
    32fc:	1c18      	adds	r0, r3, #0
    32fe:	46bd      	mov	sp, r7
    3300:	b004      	add	sp, #16
    3302:	bd80      	pop	{r7, pc}
    3304:	00002e7d 	.word	0x00002e7d
    3308:	40000c02 	.word	0x40000c02
    330c:	40000c00 	.word	0x40000c00
    3310:	00002e8d 	.word	0x00002e8d
    3314:	00003069 	.word	0x00003069

00003318 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3318:	b580      	push	{r7, lr}
    331a:	b084      	sub	sp, #16
    331c:	af00      	add	r7, sp, #0
    331e:	1c02      	adds	r2, r0, #0
    3320:	1dfb      	adds	r3, r7, #7
    3322:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3324:	230f      	movs	r3, #15
    3326:	18fb      	adds	r3, r7, r3
    3328:	1dfa      	adds	r2, r7, #7
    332a:	7812      	ldrb	r2, [r2, #0]
    332c:	09d2      	lsrs	r2, r2, #7
    332e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3330:	230e      	movs	r3, #14
    3332:	18fb      	adds	r3, r7, r3
    3334:	1dfa      	adds	r2, r7, #7
    3336:	7812      	ldrb	r2, [r2, #0]
    3338:	0952      	lsrs	r2, r2, #5
    333a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    333c:	4b0d      	ldr	r3, [pc, #52]	; (3374 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    333e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3340:	230f      	movs	r3, #15
    3342:	18fb      	adds	r3, r7, r3
    3344:	781b      	ldrb	r3, [r3, #0]
    3346:	2b00      	cmp	r3, #0
    3348:	d10f      	bne.n	336a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    334a:	230f      	movs	r3, #15
    334c:	18fb      	adds	r3, r7, r3
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	009b      	lsls	r3, r3, #2
    3352:	2210      	movs	r2, #16
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	3b08      	subs	r3, #8
    335c:	681a      	ldr	r2, [r3, #0]
    335e:	230e      	movs	r3, #14
    3360:	18fb      	adds	r3, r7, r3
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	01db      	lsls	r3, r3, #7
    3366:	18d3      	adds	r3, r2, r3
    3368:	e000      	b.n	336c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    336a:	2300      	movs	r3, #0
	}
}
    336c:	1c18      	adds	r0, r3, #0
    336e:	46bd      	mov	sp, r7
    3370:	b004      	add	sp, #16
    3372:	bd80      	pop	{r7, pc}
    3374:	41004400 	.word	0x41004400

00003378 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3378:	b580      	push	{r7, lr}
    337a:	b088      	sub	sp, #32
    337c:	af00      	add	r7, sp, #0
    337e:	60f8      	str	r0, [r7, #12]
    3380:	60b9      	str	r1, [r7, #8]
    3382:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3384:	2300      	movs	r3, #0
    3386:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	78db      	ldrb	r3, [r3, #3]
    338c:	2201      	movs	r2, #1
    338e:	4053      	eors	r3, r2
    3390:	b2db      	uxtb	r3, r3
    3392:	2b00      	cmp	r3, #0
    3394:	d035      	beq.n	3402 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	781b      	ldrb	r3, [r3, #0]
    339a:	2b80      	cmp	r3, #128	; 0x80
    339c:	d00b      	beq.n	33b6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    339e:	69fb      	ldr	r3, [r7, #28]
    33a0:	2280      	movs	r2, #128	; 0x80
    33a2:	0252      	lsls	r2, r2, #9
    33a4:	4313      	orrs	r3, r2
    33a6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	781b      	ldrb	r3, [r3, #0]
    33ac:	061b      	lsls	r3, r3, #24
    33ae:	1c1a      	adds	r2, r3, #0
    33b0:	69fb      	ldr	r3, [r7, #28]
    33b2:	4313      	orrs	r3, r2
    33b4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	785b      	ldrb	r3, [r3, #1]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d003      	beq.n	33c6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33c2:	2b02      	cmp	r3, #2
    33c4:	d110      	bne.n	33e8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    33c6:	69fb      	ldr	r3, [r7, #28]
    33c8:	2280      	movs	r2, #128	; 0x80
    33ca:	0292      	lsls	r2, r2, #10
    33cc:	4313      	orrs	r3, r2
    33ce:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	789b      	ldrb	r3, [r3, #2]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d004      	beq.n	33e2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    33d8:	69fb      	ldr	r3, [r7, #28]
    33da:	2280      	movs	r2, #128	; 0x80
    33dc:	02d2      	lsls	r2, r2, #11
    33de:	4313      	orrs	r3, r2
    33e0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    33e2:	68fb      	ldr	r3, [r7, #12]
    33e4:	68ba      	ldr	r2, [r7, #8]
    33e6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	785b      	ldrb	r3, [r3, #1]
    33ec:	2b01      	cmp	r3, #1
    33ee:	d003      	beq.n	33f8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33f4:	2b02      	cmp	r3, #2
    33f6:	d107      	bne.n	3408 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    33f8:	69fb      	ldr	r3, [r7, #28]
    33fa:	4a21      	ldr	r2, [pc, #132]	; (3480 <_system_pinmux_config+0x108>)
    33fc:	4013      	ands	r3, r2
    33fe:	61fb      	str	r3, [r7, #28]
    3400:	e002      	b.n	3408 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3402:	68fb      	ldr	r3, [r7, #12]
    3404:	68ba      	ldr	r2, [r7, #8]
    3406:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	041b      	lsls	r3, r3, #16
    340c:	0c1b      	lsrs	r3, r3, #16
    340e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	0c1b      	lsrs	r3, r3, #16
    3414:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3416:	69ba      	ldr	r2, [r7, #24]
    3418:	69fb      	ldr	r3, [r7, #28]
    341a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    341c:	22a0      	movs	r2, #160	; 0xa0
    341e:	05d2      	lsls	r2, r2, #23
    3420:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3422:	68fb      	ldr	r3, [r7, #12]
    3424:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3426:	697a      	ldr	r2, [r7, #20]
    3428:	69fb      	ldr	r3, [r7, #28]
    342a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    342c:	22d0      	movs	r2, #208	; 0xd0
    342e:	0612      	lsls	r2, r2, #24
    3430:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	78db      	ldrb	r3, [r3, #3]
    343a:	2201      	movs	r2, #1
    343c:	4053      	eors	r3, r2
    343e:	b2db      	uxtb	r3, r3
    3440:	2b00      	cmp	r3, #0
    3442:	d01a      	beq.n	347a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3444:	69fa      	ldr	r2, [r7, #28]
    3446:	2380      	movs	r3, #128	; 0x80
    3448:	02db      	lsls	r3, r3, #11
    344a:	4013      	ands	r3, r2
    344c:	d00a      	beq.n	3464 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	789b      	ldrb	r3, [r3, #2]
    3452:	2b01      	cmp	r3, #1
    3454:	d103      	bne.n	345e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	68ba      	ldr	r2, [r7, #8]
    345a:	619a      	str	r2, [r3, #24]
    345c:	e002      	b.n	3464 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	68ba      	ldr	r2, [r7, #8]
    3462:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	785b      	ldrb	r3, [r3, #1]
    3468:	2b01      	cmp	r3, #1
    346a:	d003      	beq.n	3474 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3470:	2b02      	cmp	r3, #2
    3472:	d102      	bne.n	347a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	68ba      	ldr	r2, [r7, #8]
    3478:	609a      	str	r2, [r3, #8]
		}
	}
}
    347a:	46bd      	mov	sp, r7
    347c:	b008      	add	sp, #32
    347e:	bd80      	pop	{r7, pc}
    3480:	fffbffff 	.word	0xfffbffff

00003484 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3484:	b580      	push	{r7, lr}
    3486:	b084      	sub	sp, #16
    3488:	af00      	add	r7, sp, #0
    348a:	1c02      	adds	r2, r0, #0
    348c:	6039      	str	r1, [r7, #0]
    348e:	1dfb      	adds	r3, r7, #7
    3490:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3492:	1dfb      	adds	r3, r7, #7
    3494:	781b      	ldrb	r3, [r3, #0]
    3496:	1c18      	adds	r0, r3, #0
    3498:	4b0b      	ldr	r3, [pc, #44]	; (34c8 <system_pinmux_pin_set_config+0x44>)
    349a:	4798      	blx	r3
    349c:	1c03      	adds	r3, r0, #0
    349e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    34a0:	1dfb      	adds	r3, r7, #7
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	221f      	movs	r2, #31
    34a6:	4013      	ands	r3, r2
    34a8:	2201      	movs	r2, #1
    34aa:	409a      	lsls	r2, r3
    34ac:	1c13      	adds	r3, r2, #0
    34ae:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    34b0:	68f9      	ldr	r1, [r7, #12]
    34b2:	68ba      	ldr	r2, [r7, #8]
    34b4:	683b      	ldr	r3, [r7, #0]
    34b6:	1c08      	adds	r0, r1, #0
    34b8:	1c11      	adds	r1, r2, #0
    34ba:	1c1a      	adds	r2, r3, #0
    34bc:	4b03      	ldr	r3, [pc, #12]	; (34cc <system_pinmux_pin_set_config+0x48>)
    34be:	4798      	blx	r3
}
    34c0:	46bd      	mov	sp, r7
    34c2:	b004      	add	sp, #16
    34c4:	bd80      	pop	{r7, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	00003319 	.word	0x00003319
    34cc:	00003379 	.word	0x00003379

000034d0 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	60f8      	str	r0, [r7, #12]
    34d8:	60b9      	str	r1, [r7, #8]
    34da:	1dfb      	adds	r3, r7, #7
    34dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    34de:	1dfb      	adds	r3, r7, #7
    34e0:	781a      	ldrb	r2, [r3, #0]
    34e2:	68fb      	ldr	r3, [r7, #12]
    34e4:	3202      	adds	r2, #2
    34e6:	0092      	lsls	r2, r2, #2
    34e8:	68b9      	ldr	r1, [r7, #8]
    34ea:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    34ec:	1dfb      	adds	r3, r7, #7
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	2b02      	cmp	r3, #2
    34f2:	d107      	bne.n	3504 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    34f4:	68fb      	ldr	r3, [r7, #12]
    34f6:	7e1b      	ldrb	r3, [r3, #24]
    34f8:	2210      	movs	r2, #16
    34fa:	4313      	orrs	r3, r2
    34fc:	b2da      	uxtb	r2, r3
    34fe:	68fb      	ldr	r3, [r7, #12]
    3500:	761a      	strb	r2, [r3, #24]
    3502:	e01a      	b.n	353a <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3504:	1dfb      	adds	r3, r7, #7
    3506:	781b      	ldrb	r3, [r3, #0]
    3508:	2b03      	cmp	r3, #3
    350a:	d107      	bne.n	351c <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    350c:	68fb      	ldr	r3, [r7, #12]
    350e:	7e1b      	ldrb	r3, [r3, #24]
    3510:	2220      	movs	r2, #32
    3512:	4313      	orrs	r3, r2
    3514:	b2da      	uxtb	r2, r3
    3516:	68fb      	ldr	r3, [r7, #12]
    3518:	761a      	strb	r2, [r3, #24]
    351a:	e00e      	b.n	353a <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    351c:	68fb      	ldr	r3, [r7, #12]
    351e:	7e1b      	ldrb	r3, [r3, #24]
    3520:	b2d9      	uxtb	r1, r3
    3522:	1dfb      	adds	r3, r7, #7
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	2201      	movs	r2, #1
    3528:	409a      	lsls	r2, r3
    352a:	1c13      	adds	r3, r2, #0
    352c:	b2db      	uxtb	r3, r3
    352e:	1c0a      	adds	r2, r1, #0
    3530:	4313      	orrs	r3, r2
    3532:	b2db      	uxtb	r3, r3
    3534:	b2da      	uxtb	r2, r3
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    353a:	2300      	movs	r3, #0
}
    353c:	1c18      	adds	r0, r3, #0
    353e:	46bd      	mov	sp, r7
    3540:	b004      	add	sp, #16
    3542:	bd80      	pop	{r7, pc}

00003544 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3544:	b580      	push	{r7, lr}
    3546:	af00      	add	r7, sp, #0
    3548:	2000      	movs	r0, #0
    354a:	4b02      	ldr	r3, [pc, #8]	; (3554 <TC0_Handler+0x10>)
    354c:	4798      	blx	r3
    354e:	46bd      	mov	sp, r7
    3550:	bd80      	pop	{r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	000035e5 	.word	0x000035e5

00003558 <TC1_Handler>:
    3558:	b580      	push	{r7, lr}
    355a:	af00      	add	r7, sp, #0
    355c:	2001      	movs	r0, #1
    355e:	4b02      	ldr	r3, [pc, #8]	; (3568 <TC1_Handler+0x10>)
    3560:	4798      	blx	r3
    3562:	46bd      	mov	sp, r7
    3564:	bd80      	pop	{r7, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	000035e5 	.word	0x000035e5

0000356c <TC2_Handler>:
    356c:	b580      	push	{r7, lr}
    356e:	af00      	add	r7, sp, #0
    3570:	2002      	movs	r0, #2
    3572:	4b02      	ldr	r3, [pc, #8]	; (357c <TC2_Handler+0x10>)
    3574:	4798      	blx	r3
    3576:	46bd      	mov	sp, r7
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	000035e5 	.word	0x000035e5

00003580 <TC3_Handler>:
    3580:	b580      	push	{r7, lr}
    3582:	af00      	add	r7, sp, #0
    3584:	2003      	movs	r0, #3
    3586:	4b02      	ldr	r3, [pc, #8]	; (3590 <TC3_Handler+0x10>)
    3588:	4798      	blx	r3
    358a:	46bd      	mov	sp, r7
    358c:	bd80      	pop	{r7, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	000035e5 	.word	0x000035e5

00003594 <TC4_Handler>:
    3594:	b580      	push	{r7, lr}
    3596:	af00      	add	r7, sp, #0
    3598:	2004      	movs	r0, #4
    359a:	4b02      	ldr	r3, [pc, #8]	; (35a4 <TC4_Handler+0x10>)
    359c:	4798      	blx	r3
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	000035e5 	.word	0x000035e5

000035a8 <TC5_Handler>:
    35a8:	b580      	push	{r7, lr}
    35aa:	af00      	add	r7, sp, #0
    35ac:	2005      	movs	r0, #5
    35ae:	4b02      	ldr	r3, [pc, #8]	; (35b8 <TC5_Handler+0x10>)
    35b0:	4798      	blx	r3
    35b2:	46bd      	mov	sp, r7
    35b4:	bd80      	pop	{r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	000035e5 	.word	0x000035e5

000035bc <TC6_Handler>:
    35bc:	b580      	push	{r7, lr}
    35be:	af00      	add	r7, sp, #0
    35c0:	2006      	movs	r0, #6
    35c2:	4b02      	ldr	r3, [pc, #8]	; (35cc <TC6_Handler+0x10>)
    35c4:	4798      	blx	r3
    35c6:	46bd      	mov	sp, r7
    35c8:	bd80      	pop	{r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	000035e5 	.word	0x000035e5

000035d0 <TC7_Handler>:
    35d0:	b580      	push	{r7, lr}
    35d2:	af00      	add	r7, sp, #0
    35d4:	2007      	movs	r0, #7
    35d6:	4b02      	ldr	r3, [pc, #8]	; (35e0 <TC7_Handler+0x10>)
    35d8:	4798      	blx	r3
    35da:	46bd      	mov	sp, r7
    35dc:	bd80      	pop	{r7, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	000035e5 	.word	0x000035e5

000035e4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b084      	sub	sp, #16
    35e8:	af00      	add	r7, sp, #0
    35ea:	1c02      	adds	r2, r0, #0
    35ec:	1dfb      	adds	r3, r7, #7
    35ee:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    35f0:	1dfb      	adds	r3, r7, #7
    35f2:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    35f4:	4b28      	ldr	r3, [pc, #160]	; (3698 <_tc_interrupt_handler+0xb4>)
    35f6:	0092      	lsls	r2, r2, #2
    35f8:	58d3      	ldr	r3, [r2, r3]
    35fa:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	7b9b      	ldrb	r3, [r3, #14]
    3602:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3604:	68fa      	ldr	r2, [r7, #12]
    3606:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3608:	4013      	ands	r3, r2
    360a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    360c:	68fb      	ldr	r3, [r7, #12]
    360e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3610:	230b      	movs	r3, #11
    3612:	18fb      	adds	r3, r7, r3
    3614:	400a      	ands	r2, r1
    3616:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3618:	230b      	movs	r3, #11
    361a:	18fb      	adds	r3, r7, r3
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	2201      	movs	r2, #1
    3620:	4013      	ands	r3, r2
    3622:	d008      	beq.n	3636 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	689b      	ldr	r3, [r3, #8]
    3628:	68fa      	ldr	r2, [r7, #12]
    362a:	1c10      	adds	r0, r2, #0
    362c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    362e:	68fb      	ldr	r3, [r7, #12]
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	2201      	movs	r2, #1
    3634:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3636:	230b      	movs	r3, #11
    3638:	18fb      	adds	r3, r7, r3
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	2202      	movs	r2, #2
    363e:	4013      	ands	r3, r2
    3640:	d008      	beq.n	3654 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    3642:	68fb      	ldr	r3, [r7, #12]
    3644:	68db      	ldr	r3, [r3, #12]
    3646:	68fa      	ldr	r2, [r7, #12]
    3648:	1c10      	adds	r0, r2, #0
    364a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    364c:	68fb      	ldr	r3, [r7, #12]
    364e:	681b      	ldr	r3, [r3, #0]
    3650:	2202      	movs	r2, #2
    3652:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3654:	230b      	movs	r3, #11
    3656:	18fb      	adds	r3, r7, r3
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	2210      	movs	r2, #16
    365c:	4013      	ands	r3, r2
    365e:	d008      	beq.n	3672 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3660:	68fb      	ldr	r3, [r7, #12]
    3662:	691b      	ldr	r3, [r3, #16]
    3664:	68fa      	ldr	r2, [r7, #12]
    3666:	1c10      	adds	r0, r2, #0
    3668:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    366a:	68fb      	ldr	r3, [r7, #12]
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	2210      	movs	r2, #16
    3670:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3672:	230b      	movs	r3, #11
    3674:	18fb      	adds	r3, r7, r3
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	2220      	movs	r2, #32
    367a:	4013      	ands	r3, r2
    367c:	d008      	beq.n	3690 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    367e:	68fb      	ldr	r3, [r7, #12]
    3680:	695b      	ldr	r3, [r3, #20]
    3682:	68fa      	ldr	r2, [r7, #12]
    3684:	1c10      	adds	r0, r2, #0
    3686:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3688:	68fb      	ldr	r3, [r7, #12]
    368a:	681b      	ldr	r3, [r3, #0]
    368c:	2220      	movs	r2, #32
    368e:	739a      	strb	r2, [r3, #14]
	}
}
    3690:	46bd      	mov	sp, r7
    3692:	b004      	add	sp, #16
    3694:	bd80      	pop	{r7, pc}
    3696:	46c0      	nop			; (mov r8, r8)
    3698:	20000200 	.word	0x20000200

0000369c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    369c:	b580      	push	{r7, lr}
    369e:	b082      	sub	sp, #8
    36a0:	af00      	add	r7, sp, #0
    36a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	2200      	movs	r2, #0
    36a8:	701a      	strb	r2, [r3, #0]
}
    36aa:	46bd      	mov	sp, r7
    36ac:	b002      	add	sp, #8
    36ae:	bd80      	pop	{r7, pc}

000036b0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	b082      	sub	sp, #8
    36b4:	af00      	add	r7, sp, #0
    36b6:	1c02      	adds	r2, r0, #0
    36b8:	6039      	str	r1, [r7, #0]
    36ba:	1dfb      	adds	r3, r7, #7
    36bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    36be:	1dfb      	adds	r3, r7, #7
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	2b01      	cmp	r3, #1
    36c4:	d00a      	beq.n	36dc <system_apb_clock_set_mask+0x2c>
    36c6:	2b02      	cmp	r3, #2
    36c8:	d00f      	beq.n	36ea <system_apb_clock_set_mask+0x3a>
    36ca:	2b00      	cmp	r3, #0
    36cc:	d114      	bne.n	36f8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    36ce:	4b0e      	ldr	r3, [pc, #56]	; (3708 <system_apb_clock_set_mask+0x58>)
    36d0:	4a0d      	ldr	r2, [pc, #52]	; (3708 <system_apb_clock_set_mask+0x58>)
    36d2:	6991      	ldr	r1, [r2, #24]
    36d4:	683a      	ldr	r2, [r7, #0]
    36d6:	430a      	orrs	r2, r1
    36d8:	619a      	str	r2, [r3, #24]
			break;
    36da:	e00f      	b.n	36fc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    36dc:	4b0a      	ldr	r3, [pc, #40]	; (3708 <system_apb_clock_set_mask+0x58>)
    36de:	4a0a      	ldr	r2, [pc, #40]	; (3708 <system_apb_clock_set_mask+0x58>)
    36e0:	69d1      	ldr	r1, [r2, #28]
    36e2:	683a      	ldr	r2, [r7, #0]
    36e4:	430a      	orrs	r2, r1
    36e6:	61da      	str	r2, [r3, #28]
			break;
    36e8:	e008      	b.n	36fc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    36ea:	4b07      	ldr	r3, [pc, #28]	; (3708 <system_apb_clock_set_mask+0x58>)
    36ec:	4a06      	ldr	r2, [pc, #24]	; (3708 <system_apb_clock_set_mask+0x58>)
    36ee:	6a11      	ldr	r1, [r2, #32]
    36f0:	683a      	ldr	r2, [r7, #0]
    36f2:	430a      	orrs	r2, r1
    36f4:	621a      	str	r2, [r3, #32]
			break;
    36f6:	e001      	b.n	36fc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    36f8:	2317      	movs	r3, #23
    36fa:	e000      	b.n	36fe <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    36fc:	2300      	movs	r3, #0
}
    36fe:	1c18      	adds	r0, r3, #0
    3700:	46bd      	mov	sp, r7
    3702:	b002      	add	sp, #8
    3704:	bd80      	pop	{r7, pc}
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	40000400 	.word	0x40000400

0000370c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    370c:	b580      	push	{r7, lr}
    370e:	b082      	sub	sp, #8
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2280      	movs	r2, #128	; 0x80
    3718:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	2200      	movs	r2, #0
    371e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2201      	movs	r2, #1
    3724:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	2200      	movs	r2, #0
    372a:	70da      	strb	r2, [r3, #3]
}
    372c:	46bd      	mov	sp, r7
    372e:	b002      	add	sp, #8
    3730:	bd80      	pop	{r7, pc}
    3732:	46c0      	nop			; (mov r8, r8)

00003734 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3742:	68fb      	ldr	r3, [r7, #12]
    3744:	7bdb      	ldrb	r3, [r3, #15]
    3746:	b2db      	uxtb	r3, r3
    3748:	1c1a      	adds	r2, r3, #0
    374a:	2380      	movs	r3, #128	; 0x80
    374c:	4013      	ands	r3, r2
    374e:	1e5a      	subs	r2, r3, #1
    3750:	4193      	sbcs	r3, r2
    3752:	b2db      	uxtb	r3, r3
#endif
}
    3754:	1c18      	adds	r0, r3, #0
    3756:	46bd      	mov	sp, r7
    3758:	b004      	add	sp, #16
    375a:	bd80      	pop	{r7, pc}

0000375c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    375c:	b590      	push	{r4, r7, lr}
    375e:	b08d      	sub	sp, #52	; 0x34
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3764:	230c      	movs	r3, #12
    3766:	18fb      	adds	r3, r7, r3
    3768:	4a0f      	ldr	r2, [pc, #60]	; (37a8 <_tc_get_inst_index+0x4c>)
    376a:	ca13      	ldmia	r2!, {r0, r1, r4}
    376c:	c313      	stmia	r3!, {r0, r1, r4}
    376e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3770:	c313      	stmia	r3!, {r0, r1, r4}
    3772:	ca03      	ldmia	r2!, {r0, r1}
    3774:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3776:	2300      	movs	r3, #0
    3778:	62fb      	str	r3, [r7, #44]	; 0x2c
    377a:	e00d      	b.n	3798 <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    377c:	230c      	movs	r3, #12
    377e:	18fb      	adds	r3, r7, r3
    3780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3782:	0092      	lsls	r2, r2, #2
    3784:	58d2      	ldr	r2, [r2, r3]
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	429a      	cmp	r2, r3
    378a:	d102      	bne.n	3792 <_tc_get_inst_index+0x36>
			return i;
    378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    378e:	b2db      	uxtb	r3, r3
    3790:	e006      	b.n	37a0 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3794:	3301      	adds	r3, #1
    3796:	62fb      	str	r3, [r7, #44]	; 0x2c
    3798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    379a:	2b07      	cmp	r3, #7
    379c:	d9ee      	bls.n	377c <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    379e:	2300      	movs	r3, #0
}
    37a0:	1c18      	adds	r0, r3, #0
    37a2:	46bd      	mov	sp, r7
    37a4:	b00d      	add	sp, #52	; 0x34
    37a6:	bd90      	pop	{r4, r7, pc}
    37a8:	0000486c 	.word	0x0000486c

000037ac <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    37ac:	b590      	push	{r4, r7, lr}
    37ae:	b08f      	sub	sp, #60	; 0x3c
    37b0:	af00      	add	r7, sp, #0
    37b2:	60f8      	str	r0, [r7, #12]
    37b4:	60b9      	str	r1, [r7, #8]
    37b6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    37b8:	2336      	movs	r3, #54	; 0x36
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	2200      	movs	r2, #0
    37be:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    37c0:	2335      	movs	r3, #53	; 0x35
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	2200      	movs	r2, #0
    37c6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    37c8:	2334      	movs	r3, #52	; 0x34
    37ca:	18fb      	adds	r3, r7, r3
    37cc:	2200      	movs	r2, #0
    37ce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    37d0:	2331      	movs	r3, #49	; 0x31
    37d2:	18fc      	adds	r4, r7, r3
    37d4:	68bb      	ldr	r3, [r7, #8]
    37d6:	1c18      	adds	r0, r3, #0
    37d8:	4bc0      	ldr	r3, [pc, #768]	; (3adc <tc_init+0x330>)
    37da:	4798      	blx	r3
    37dc:	1c03      	adds	r3, r0, #0
    37de:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    37e0:	2328      	movs	r3, #40	; 0x28
    37e2:	18fa      	adds	r2, r7, r3
    37e4:	4bbe      	ldr	r3, [pc, #760]	; (3ae0 <tc_init+0x334>)
    37e6:	1c11      	adds	r1, r2, #0
    37e8:	1c1a      	adds	r2, r3, #0
    37ea:	2308      	movs	r3, #8
    37ec:	1c08      	adds	r0, r1, #0
    37ee:	1c11      	adds	r1, r2, #0
    37f0:	1c1a      	adds	r2, r3, #0
    37f2:	4bbc      	ldr	r3, [pc, #752]	; (3ae4 <tc_init+0x338>)
    37f4:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    37f6:	2318      	movs	r3, #24
    37f8:	18fa      	adds	r2, r7, r3
    37fa:	4bbb      	ldr	r3, [pc, #748]	; (3ae8 <tc_init+0x33c>)
    37fc:	1c11      	adds	r1, r2, #0
    37fe:	1c1a      	adds	r2, r3, #0
    3800:	2310      	movs	r3, #16
    3802:	1c08      	adds	r0, r1, #0
    3804:	1c11      	adds	r1, r2, #0
    3806:	1c1a      	adds	r2, r3, #0
    3808:	4bb6      	ldr	r3, [pc, #728]	; (3ae4 <tc_init+0x338>)
    380a:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    380c:	2333      	movs	r3, #51	; 0x33
    380e:	18fb      	adds	r3, r7, r3
    3810:	2200      	movs	r2, #0
    3812:	701a      	strb	r2, [r3, #0]
    3814:	e00e      	b.n	3834 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    3816:	2333      	movs	r3, #51	; 0x33
    3818:	18fb      	adds	r3, r7, r3
    381a:	781a      	ldrb	r2, [r3, #0]
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	3202      	adds	r2, #2
    3820:	0092      	lsls	r2, r2, #2
    3822:	2100      	movs	r1, #0
    3824:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    3826:	2333      	movs	r3, #51	; 0x33
    3828:	18fb      	adds	r3, r7, r3
    382a:	781a      	ldrb	r2, [r3, #0]
    382c:	2333      	movs	r3, #51	; 0x33
    382e:	18fb      	adds	r3, r7, r3
    3830:	3201      	adds	r2, #1
    3832:	701a      	strb	r2, [r3, #0]
    3834:	2333      	movs	r3, #51	; 0x33
    3836:	18fb      	adds	r3, r7, r3
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	2b03      	cmp	r3, #3
    383c:	d9eb      	bls.n	3816 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	2200      	movs	r2, #0
    3842:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	2200      	movs	r2, #0
    3848:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    384a:	2331      	movs	r3, #49	; 0x31
    384c:	18fb      	adds	r3, r7, r3
    384e:	781a      	ldrb	r2, [r3, #0]
    3850:	4ba6      	ldr	r3, [pc, #664]	; (3aec <tc_init+0x340>)
    3852:	0092      	lsls	r2, r2, #2
    3854:	68f9      	ldr	r1, [r7, #12]
    3856:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    3858:	68fb      	ldr	r3, [r7, #12]
    385a:	68ba      	ldr	r2, [r7, #8]
    385c:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	789b      	ldrb	r3, [r3, #2]
    3862:	2b08      	cmp	r3, #8
    3864:	d107      	bne.n	3876 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    3866:	2331      	movs	r3, #49	; 0x31
    3868:	18fb      	adds	r3, r7, r3
    386a:	781b      	ldrb	r3, [r3, #0]
    386c:	2201      	movs	r2, #1
    386e:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3870:	d001      	beq.n	3876 <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3872:	2317      	movs	r3, #23
    3874:	e1c3      	b.n	3bfe <tc_init+0x452>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	789a      	ldrb	r2, [r3, #2]
    387a:	68fb      	ldr	r3, [r7, #12]
    387c:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    387e:	68bb      	ldr	r3, [r7, #8]
    3880:	881b      	ldrh	r3, [r3, #0]
    3882:	b29b      	uxth	r3, r3
    3884:	1c1a      	adds	r2, r3, #0
    3886:	2301      	movs	r3, #1
    3888:	4013      	ands	r3, r2
    388a:	d001      	beq.n	3890 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    388c:	2305      	movs	r3, #5
    388e:	e1b6      	b.n	3bfe <tc_init+0x452>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3890:	68bb      	ldr	r3, [r7, #8]
    3892:	7bdb      	ldrb	r3, [r3, #15]
    3894:	b2db      	uxtb	r3, r3
    3896:	1c1a      	adds	r2, r3, #0
    3898:	2310      	movs	r3, #16
    389a:	4013      	ands	r3, r2
    389c:	d001      	beq.n	38a2 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    389e:	231c      	movs	r3, #28
    38a0:	e1ad      	b.n	3bfe <tc_init+0x452>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    38a2:	68bb      	ldr	r3, [r7, #8]
    38a4:	881b      	ldrh	r3, [r3, #0]
    38a6:	b29b      	uxth	r3, r3
    38a8:	1c1a      	adds	r2, r3, #0
    38aa:	2302      	movs	r3, #2
    38ac:	4013      	ands	r3, r2
    38ae:	d001      	beq.n	38b4 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    38b0:	231c      	movs	r3, #28
    38b2:	e1a4      	b.n	3bfe <tc_init+0x452>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	7c1b      	ldrb	r3, [r3, #16]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d017      	beq.n	38ec <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    38bc:	2314      	movs	r3, #20
    38be:	18fb      	adds	r3, r7, r3
    38c0:	1c18      	adds	r0, r3, #0
    38c2:	4b8b      	ldr	r3, [pc, #556]	; (3af0 <tc_init+0x344>)
    38c4:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	699b      	ldr	r3, [r3, #24]
    38ca:	b2da      	uxtb	r2, r3
    38cc:	2314      	movs	r3, #20
    38ce:	18fb      	adds	r3, r7, r3
    38d0:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    38d2:	2314      	movs	r3, #20
    38d4:	18fb      	adds	r3, r7, r3
    38d6:	2201      	movs	r2, #1
    38d8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    38de:	b2da      	uxtb	r2, r3
    38e0:	2314      	movs	r3, #20
    38e2:	18fb      	adds	r3, r7, r3
    38e4:	1c10      	adds	r0, r2, #0
    38e6:	1c19      	adds	r1, r3, #0
    38e8:	4b82      	ldr	r3, [pc, #520]	; (3af4 <tc_init+0x348>)
    38ea:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	7f1b      	ldrb	r3, [r3, #28]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d017      	beq.n	3924 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    38f4:	2314      	movs	r3, #20
    38f6:	18fb      	adds	r3, r7, r3
    38f8:	1c18      	adds	r0, r3, #0
    38fa:	4b7d      	ldr	r3, [pc, #500]	; (3af0 <tc_init+0x344>)
    38fc:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3902:	b2da      	uxtb	r2, r3
    3904:	2314      	movs	r3, #20
    3906:	18fb      	adds	r3, r7, r3
    3908:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    390a:	2314      	movs	r3, #20
    390c:	18fb      	adds	r3, r7, r3
    390e:	2201      	movs	r2, #1
    3910:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    3916:	b2da      	uxtb	r2, r3
    3918:	2314      	movs	r3, #20
    391a:	18fb      	adds	r3, r7, r3
    391c:	1c10      	adds	r0, r2, #0
    391e:	1c19      	adds	r1, r3, #0
    3920:	4b74      	ldr	r3, [pc, #464]	; (3af4 <tc_init+0x348>)
    3922:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    3924:	2331      	movs	r3, #49	; 0x31
    3926:	18fb      	adds	r3, r7, r3
    3928:	781a      	ldrb	r2, [r3, #0]
    392a:	2318      	movs	r3, #24
    392c:	18fb      	adds	r3, r7, r3
    392e:	0052      	lsls	r2, r2, #1
    3930:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3932:	2002      	movs	r0, #2
    3934:	1c19      	adds	r1, r3, #0
    3936:	4b70      	ldr	r3, [pc, #448]	; (3af8 <tc_init+0x34c>)
    3938:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	789b      	ldrb	r3, [r3, #2]
    393e:	2b08      	cmp	r3, #8
    3940:	d10b      	bne.n	395a <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    3942:	2331      	movs	r3, #49	; 0x31
    3944:	18fb      	adds	r3, r7, r3
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	1c5a      	adds	r2, r3, #1
    394a:	2318      	movs	r3, #24
    394c:	18fb      	adds	r3, r7, r3
    394e:	0052      	lsls	r2, r2, #1
    3950:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3952:	2002      	movs	r0, #2
    3954:	1c19      	adds	r1, r3, #0
    3956:	4b68      	ldr	r3, [pc, #416]	; (3af8 <tc_init+0x34c>)
    3958:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    395a:	2310      	movs	r3, #16
    395c:	18fb      	adds	r3, r7, r3
    395e:	1c18      	adds	r0, r3, #0
    3960:	4b66      	ldr	r3, [pc, #408]	; (3afc <tc_init+0x350>)
    3962:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    3964:	687b      	ldr	r3, [r7, #4]
    3966:	781a      	ldrb	r2, [r3, #0]
    3968:	2310      	movs	r3, #16
    396a:	18fb      	adds	r3, r7, r3
    396c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    396e:	2331      	movs	r3, #49	; 0x31
    3970:	18fb      	adds	r3, r7, r3
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	2228      	movs	r2, #40	; 0x28
    3976:	18ba      	adds	r2, r7, r2
    3978:	5cd2      	ldrb	r2, [r2, r3]
    397a:	2310      	movs	r3, #16
    397c:	18fb      	adds	r3, r7, r3
    397e:	1c10      	adds	r0, r2, #0
    3980:	1c19      	adds	r1, r3, #0
    3982:	4b5f      	ldr	r3, [pc, #380]	; (3b00 <tc_init+0x354>)
    3984:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    3986:	2331      	movs	r3, #49	; 0x31
    3988:	18fb      	adds	r3, r7, r3
    398a:	781b      	ldrb	r3, [r3, #0]
    398c:	2228      	movs	r2, #40	; 0x28
    398e:	18ba      	adds	r2, r7, r2
    3990:	5cd3      	ldrb	r3, [r2, r3]
    3992:	1c18      	adds	r0, r3, #0
    3994:	4b5b      	ldr	r3, [pc, #364]	; (3b04 <tc_init+0x358>)
    3996:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    39a0:	4313      	orrs	r3, r2
    39a2:	b2db      	uxtb	r3, r3
    39a4:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    39a6:	687b      	ldr	r3, [r7, #4]
    39a8:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    39aa:	4313      	orrs	r3, r2
    39ac:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    39b2:	2336      	movs	r3, #54	; 0x36
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	430a      	orrs	r2, r1
    39b8:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	785b      	ldrb	r3, [r3, #1]
    39be:	2b00      	cmp	r3, #0
    39c0:	d008      	beq.n	39d4 <tc_init+0x228>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    39c2:	2336      	movs	r3, #54	; 0x36
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	2236      	movs	r2, #54	; 0x36
    39c8:	18ba      	adds	r2, r7, r2
    39ca:	8812      	ldrh	r2, [r2, #0]
    39cc:	2180      	movs	r1, #128	; 0x80
    39ce:	0109      	lsls	r1, r1, #4
    39d0:	430a      	orrs	r2, r1
    39d2:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    39d4:	46c0      	nop			; (mov r8, r8)
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	1c18      	adds	r0, r3, #0
    39da:	4b4b      	ldr	r3, [pc, #300]	; (3b08 <tc_init+0x35c>)
    39dc:	4798      	blx	r3
    39de:	1e03      	subs	r3, r0, #0
    39e0:	d1f9      	bne.n	39d6 <tc_init+0x22a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    39e2:	68bb      	ldr	r3, [r7, #8]
    39e4:	2236      	movs	r2, #54	; 0x36
    39e6:	18ba      	adds	r2, r7, r2
    39e8:	8812      	ldrh	r2, [r2, #0]
    39ea:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	7b5b      	ldrb	r3, [r3, #13]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d003      	beq.n	39fc <tc_init+0x250>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    39f4:	2335      	movs	r3, #53	; 0x35
    39f6:	18fb      	adds	r3, r7, r3
    39f8:	2204      	movs	r2, #4
    39fa:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	7b9b      	ldrb	r3, [r3, #14]
    3a00:	2b00      	cmp	r3, #0
    3a02:	d007      	beq.n	3a14 <tc_init+0x268>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    3a04:	2335      	movs	r3, #53	; 0x35
    3a06:	18fb      	adds	r3, r7, r3
    3a08:	2235      	movs	r2, #53	; 0x35
    3a0a:	18ba      	adds	r2, r7, r2
    3a0c:	7812      	ldrb	r2, [r2, #0]
    3a0e:	2101      	movs	r1, #1
    3a10:	430a      	orrs	r2, r1
    3a12:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    3a14:	46c0      	nop			; (mov r8, r8)
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	1c18      	adds	r0, r3, #0
    3a1a:	4b3b      	ldr	r3, [pc, #236]	; (3b08 <tc_init+0x35c>)
    3a1c:	4798      	blx	r3
    3a1e:	1e03      	subs	r3, r0, #0
    3a20:	d1f9      	bne.n	3a16 <tc_init+0x26a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3a22:	68bb      	ldr	r3, [r7, #8]
    3a24:	22ff      	movs	r2, #255	; 0xff
    3a26:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3a28:	2335      	movs	r3, #53	; 0x35
    3a2a:	18fb      	adds	r3, r7, r3
    3a2c:	781b      	ldrb	r3, [r3, #0]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d00b      	beq.n	3a4a <tc_init+0x29e>
		while (tc_is_syncing(module_inst)) {
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	68fb      	ldr	r3, [r7, #12]
    3a36:	1c18      	adds	r0, r3, #0
    3a38:	4b33      	ldr	r3, [pc, #204]	; (3b08 <tc_init+0x35c>)
    3a3a:	4798      	blx	r3
    3a3c:	1e03      	subs	r3, r0, #0
    3a3e:	d1f9      	bne.n	3a34 <tc_init+0x288>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3a40:	68bb      	ldr	r3, [r7, #8]
    3a42:	2235      	movs	r2, #53	; 0x35
    3a44:	18ba      	adds	r2, r7, r2
    3a46:	7812      	ldrb	r2, [r2, #0]
    3a48:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    3a4a:	2334      	movs	r3, #52	; 0x34
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	687a      	ldr	r2, [r7, #4]
    3a50:	7a92      	ldrb	r2, [r2, #10]
    3a52:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3a54:	2332      	movs	r3, #50	; 0x32
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	2200      	movs	r2, #0
    3a5a:	701a      	strb	r2, [r3, #0]
    3a5c:	e01c      	b.n	3a98 <tc_init+0x2ec>
		if (config->enable_capture_on_channel[i] == true) {
    3a5e:	2332      	movs	r3, #50	; 0x32
    3a60:	18fb      	adds	r3, r7, r3
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	687a      	ldr	r2, [r7, #4]
    3a66:	18d3      	adds	r3, r2, r3
    3a68:	7adb      	ldrb	r3, [r3, #11]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d00d      	beq.n	3a8a <tc_init+0x2de>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3a6e:	2332      	movs	r3, #50	; 0x32
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	2210      	movs	r2, #16
    3a76:	409a      	lsls	r2, r3
    3a78:	1c13      	adds	r3, r2, #0
    3a7a:	b2d9      	uxtb	r1, r3
    3a7c:	2334      	movs	r3, #52	; 0x34
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	2234      	movs	r2, #52	; 0x34
    3a82:	18ba      	adds	r2, r7, r2
    3a84:	7812      	ldrb	r2, [r2, #0]
    3a86:	430a      	orrs	r2, r1
    3a88:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3a8a:	2332      	movs	r3, #50	; 0x32
    3a8c:	18fb      	adds	r3, r7, r3
    3a8e:	781a      	ldrb	r2, [r3, #0]
    3a90:	2332      	movs	r3, #50	; 0x32
    3a92:	18fb      	adds	r3, r7, r3
    3a94:	3201      	adds	r2, #1
    3a96:	701a      	strb	r2, [r3, #0]
    3a98:	2332      	movs	r3, #50	; 0x32
    3a9a:	18fb      	adds	r3, r7, r3
    3a9c:	781b      	ldrb	r3, [r3, #0]
    3a9e:	2b01      	cmp	r3, #1
    3aa0:	d9dd      	bls.n	3a5e <tc_init+0x2b2>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	68fb      	ldr	r3, [r7, #12]
    3aa6:	1c18      	adds	r0, r3, #0
    3aa8:	4b17      	ldr	r3, [pc, #92]	; (3b08 <tc_init+0x35c>)
    3aaa:	4798      	blx	r3
    3aac:	1e03      	subs	r3, r0, #0
    3aae:	d1f9      	bne.n	3aa4 <tc_init+0x2f8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    3ab0:	68bb      	ldr	r3, [r7, #8]
    3ab2:	2234      	movs	r2, #52	; 0x34
    3ab4:	18ba      	adds	r2, r7, r2
    3ab6:	7812      	ldrb	r2, [r2, #0]
    3ab8:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	68fb      	ldr	r3, [r7, #12]
    3abe:	1c18      	adds	r0, r3, #0
    3ac0:	4b11      	ldr	r3, [pc, #68]	; (3b08 <tc_init+0x35c>)
    3ac2:	4798      	blx	r3
    3ac4:	1e03      	subs	r3, r0, #0
    3ac6:	d1f9      	bne.n	3abc <tc_init+0x310>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3ac8:	68fb      	ldr	r3, [r7, #12]
    3aca:	791b      	ldrb	r3, [r3, #4]
    3acc:	2b04      	cmp	r3, #4
    3ace:	d01d      	beq.n	3b0c <tc_init+0x360>
    3ad0:	2b08      	cmp	r3, #8
    3ad2:	d100      	bne.n	3ad6 <tc_init+0x32a>
    3ad4:	e06f      	b.n	3bb6 <tc_init+0x40a>
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d04a      	beq.n	3b70 <tc_init+0x3c4>
    3ada:	e08f      	b.n	3bfc <tc_init+0x450>
    3adc:	0000375d 	.word	0x0000375d
    3ae0:	0000488c 	.word	0x0000488c
    3ae4:	000046a5 	.word	0x000046a5
    3ae8:	00004894 	.word	0x00004894
    3aec:	20000200 	.word	0x20000200
    3af0:	0000370d 	.word	0x0000370d
    3af4:	00003485 	.word	0x00003485
    3af8:	000036b1 	.word	0x000036b1
    3afc:	0000369d 	.word	0x0000369d
    3b00:	00003151 	.word	0x00003151
    3b04:	00003195 	.word	0x00003195
    3b08:	00003735 	.word	0x00003735
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3b0c:	46c0      	nop			; (mov r8, r8)
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	1c18      	adds	r0, r3, #0
    3b12:	4b3d      	ldr	r3, [pc, #244]	; (3c08 <tc_init+0x45c>)
    3b14:	4798      	blx	r3
    3b16:	1e03      	subs	r3, r0, #0
    3b18:	d1f9      	bne.n	3b0e <tc_init+0x362>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	2228      	movs	r2, #40	; 0x28
    3b1e:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3b20:	68bb      	ldr	r3, [r7, #8]
    3b22:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    3b24:	46c0      	nop			; (mov r8, r8)
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	1c18      	adds	r0, r3, #0
    3b2a:	4b37      	ldr	r3, [pc, #220]	; (3c08 <tc_init+0x45c>)
    3b2c:	4798      	blx	r3
    3b2e:	1e03      	subs	r3, r0, #0
    3b30:	d1f9      	bne.n	3b26 <tc_init+0x37a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	2229      	movs	r2, #41	; 0x29
    3b36:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3b38:	68bb      	ldr	r3, [r7, #8]
    3b3a:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3b3c:	46c0      	nop			; (mov r8, r8)
    3b3e:	68fb      	ldr	r3, [r7, #12]
    3b40:	1c18      	adds	r0, r3, #0
    3b42:	4b31      	ldr	r3, [pc, #196]	; (3c08 <tc_init+0x45c>)
    3b44:	4798      	blx	r3
    3b46:	1e03      	subs	r3, r0, #0
    3b48:	d1f9      	bne.n	3b3e <tc_init+0x392>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	222a      	movs	r2, #42	; 0x2a
    3b4e:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3b50:	68bb      	ldr	r3, [r7, #8]
    3b52:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3b54:	46c0      	nop			; (mov r8, r8)
    3b56:	68fb      	ldr	r3, [r7, #12]
    3b58:	1c18      	adds	r0, r3, #0
    3b5a:	4b2b      	ldr	r3, [pc, #172]	; (3c08 <tc_init+0x45c>)
    3b5c:	4798      	blx	r3
    3b5e:	1e03      	subs	r3, r0, #0
    3b60:	d1f9      	bne.n	3b56 <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	222b      	movs	r2, #43	; 0x2b
    3b66:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3b68:	68bb      	ldr	r3, [r7, #8]
    3b6a:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    3b6c:	2300      	movs	r3, #0
    3b6e:	e046      	b.n	3bfe <tc_init+0x452>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    3b70:	46c0      	nop			; (mov r8, r8)
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	1c18      	adds	r0, r3, #0
    3b76:	4b24      	ldr	r3, [pc, #144]	; (3c08 <tc_init+0x45c>)
    3b78:	4798      	blx	r3
    3b7a:	1e03      	subs	r3, r0, #0
    3b7c:	d1f9      	bne.n	3b72 <tc_init+0x3c6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    3b82:	68bb      	ldr	r3, [r7, #8]
    3b84:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	1c18      	adds	r0, r3, #0
    3b8c:	4b1e      	ldr	r3, [pc, #120]	; (3c08 <tc_init+0x45c>)
    3b8e:	4798      	blx	r3
    3b90:	1e03      	subs	r3, r0, #0
    3b92:	d1f9      	bne.n	3b88 <tc_init+0x3dc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    3b98:	68bb      	ldr	r3, [r7, #8]
    3b9a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3b9c:	46c0      	nop			; (mov r8, r8)
    3b9e:	68fb      	ldr	r3, [r7, #12]
    3ba0:	1c18      	adds	r0, r3, #0
    3ba2:	4b19      	ldr	r3, [pc, #100]	; (3c08 <tc_init+0x45c>)
    3ba4:	4798      	blx	r3
    3ba6:	1e03      	subs	r3, r0, #0
    3ba8:	d1f9      	bne.n	3b9e <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    3bae:	68bb      	ldr	r3, [r7, #8]
    3bb0:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    3bb2:	2300      	movs	r3, #0
    3bb4:	e023      	b.n	3bfe <tc_init+0x452>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	1c18      	adds	r0, r3, #0
    3bbc:	4b12      	ldr	r3, [pc, #72]	; (3c08 <tc_init+0x45c>)
    3bbe:	4798      	blx	r3
    3bc0:	1e03      	subs	r3, r0, #0
    3bc2:	d1f9      	bne.n	3bb8 <tc_init+0x40c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bc8:	68bb      	ldr	r3, [r7, #8]
    3bca:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3bcc:	46c0      	nop			; (mov r8, r8)
    3bce:	68fb      	ldr	r3, [r7, #12]
    3bd0:	1c18      	adds	r0, r3, #0
    3bd2:	4b0d      	ldr	r3, [pc, #52]	; (3c08 <tc_init+0x45c>)
    3bd4:	4798      	blx	r3
    3bd6:	1e03      	subs	r3, r0, #0
    3bd8:	d1f9      	bne.n	3bce <tc_init+0x422>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    3bda:	687b      	ldr	r3, [r7, #4]
    3bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    3bde:	68bb      	ldr	r3, [r7, #8]
    3be0:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	68fb      	ldr	r3, [r7, #12]
    3be6:	1c18      	adds	r0, r3, #0
    3be8:	4b07      	ldr	r3, [pc, #28]	; (3c08 <tc_init+0x45c>)
    3bea:	4798      	blx	r3
    3bec:	1e03      	subs	r3, r0, #0
    3bee:	d1f9      	bne.n	3be4 <tc_init+0x438>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    3bf4:	68bb      	ldr	r3, [r7, #8]
    3bf6:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    3bf8:	2300      	movs	r3, #0
    3bfa:	e000      	b.n	3bfe <tc_init+0x452>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    3bfc:	2317      	movs	r3, #23
}
    3bfe:	1c18      	adds	r0, r3, #0
    3c00:	46bd      	mov	sp, r7
    3c02:	b00f      	add	sp, #60	; 0x3c
    3c04:	bd90      	pop	{r4, r7, pc}
    3c06:	46c0      	nop			; (mov r8, r8)
    3c08:	00003735 	.word	0x00003735

00003c0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b082      	sub	sp, #8
    3c10:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3c12:	4b19      	ldr	r3, [pc, #100]	; (3c78 <Reset_Handler+0x6c>)
    3c14:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3c16:	4b19      	ldr	r3, [pc, #100]	; (3c7c <Reset_Handler+0x70>)
    3c18:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3c1a:	687a      	ldr	r2, [r7, #4]
    3c1c:	683b      	ldr	r3, [r7, #0]
    3c1e:	429a      	cmp	r2, r3
    3c20:	d00c      	beq.n	3c3c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3c22:	e007      	b.n	3c34 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3c24:	683b      	ldr	r3, [r7, #0]
    3c26:	1d1a      	adds	r2, r3, #4
    3c28:	603a      	str	r2, [r7, #0]
    3c2a:	687a      	ldr	r2, [r7, #4]
    3c2c:	1d11      	adds	r1, r2, #4
    3c2e:	6079      	str	r1, [r7, #4]
    3c30:	6812      	ldr	r2, [r2, #0]
    3c32:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3c34:	683a      	ldr	r2, [r7, #0]
    3c36:	4b12      	ldr	r3, [pc, #72]	; (3c80 <Reset_Handler+0x74>)
    3c38:	429a      	cmp	r2, r3
    3c3a:	d3f3      	bcc.n	3c24 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3c3c:	4b11      	ldr	r3, [pc, #68]	; (3c84 <Reset_Handler+0x78>)
    3c3e:	603b      	str	r3, [r7, #0]
    3c40:	e004      	b.n	3c4c <Reset_Handler+0x40>
                *pDest++ = 0;
    3c42:	683b      	ldr	r3, [r7, #0]
    3c44:	1d1a      	adds	r2, r3, #4
    3c46:	603a      	str	r2, [r7, #0]
    3c48:	2200      	movs	r2, #0
    3c4a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3c4c:	683a      	ldr	r2, [r7, #0]
    3c4e:	4b0e      	ldr	r3, [pc, #56]	; (3c88 <Reset_Handler+0x7c>)
    3c50:	429a      	cmp	r2, r3
    3c52:	d3f6      	bcc.n	3c42 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3c54:	4b0d      	ldr	r3, [pc, #52]	; (3c8c <Reset_Handler+0x80>)
    3c56:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3c58:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <Reset_Handler+0x84>)
    3c5a:	687a      	ldr	r2, [r7, #4]
    3c5c:	21ff      	movs	r1, #255	; 0xff
    3c5e:	438a      	bics	r2, r1
    3c60:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3c62:	4b0c      	ldr	r3, [pc, #48]	; (3c94 <Reset_Handler+0x88>)
    3c64:	685a      	ldr	r2, [r3, #4]
    3c66:	2180      	movs	r1, #128	; 0x80
    3c68:	430a      	orrs	r2, r1
    3c6a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    3c6c:	4b0a      	ldr	r3, [pc, #40]	; (3c98 <Reset_Handler+0x8c>)
    3c6e:	4798      	blx	r3

        /* Branch to main function */
        main();
    3c70:	4b0a      	ldr	r3, [pc, #40]	; (3c9c <Reset_Handler+0x90>)
    3c72:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3c74:	e7fe      	b.n	3c74 <Reset_Handler+0x68>
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	000048c4 	.word	0x000048c4
    3c7c:	20000000 	.word	0x20000000
    3c80:	2000000c 	.word	0x2000000c
    3c84:	2000000c 	.word	0x2000000c
    3c88:	2000045c 	.word	0x2000045c
    3c8c:	00000000 	.word	0x00000000
    3c90:	e000ed00 	.word	0xe000ed00
    3c94:	41004000 	.word	0x41004000
    3c98:	00004659 	.word	0x00004659
    3c9c:	00004055 	.word	0x00004055

00003ca0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	af00      	add	r7, sp, #0
        while (1) {
        }
    3ca4:	e7fe      	b.n	3ca4 <Dummy_Handler+0x4>
    3ca6:	46c0      	nop			; (mov r8, r8)

00003ca8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b082      	sub	sp, #8
    3cac:	af00      	add	r7, sp, #0
    3cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	2201      	movs	r2, #1
    3cb4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	2200      	movs	r2, #0
    3cba:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	2206      	movs	r2, #6
    3cc0:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	2200      	movs	r2, #0
    3cc6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	2200      	movs	r2, #0
    3ccc:	725a      	strb	r2, [r3, #9]
}
    3cce:	46bd      	mov	sp, r7
    3cd0:	b002      	add	sp, #8
    3cd2:	bd80      	pop	{r7, pc}

00003cd4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b082      	sub	sp, #8
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	2200      	movs	r2, #0
    3ce0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	2200      	movs	r2, #0
    3ce6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	2200      	movs	r2, #0
    3cec:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	2200      	movs	r2, #0
    3cf2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	2200      	movs	r2, #0
    3cf8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	2201      	movs	r2, #1
    3cfe:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	2207      	movs	r2, #7
    3d04:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	223f      	movs	r2, #63	; 0x3f
    3d0a:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	2201      	movs	r2, #1
    3d10:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	2201      	movs	r2, #1
    3d16:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	2206      	movs	r2, #6
    3d1c:	821a      	strh	r2, [r3, #16]
}
    3d1e:	46bd      	mov	sp, r7
    3d20:	b002      	add	sp, #8
    3d22:	bd80      	pop	{r7, pc}

00003d24 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    3d28:	2000      	movs	r0, #0
    3d2a:	4b05      	ldr	r3, [pc, #20]	; (3d40 <system_cpu_clock_get_hz+0x1c>)
    3d2c:	4798      	blx	r3
    3d2e:	1c02      	adds	r2, r0, #0
    3d30:	4b04      	ldr	r3, [pc, #16]	; (3d44 <system_cpu_clock_get_hz+0x20>)
    3d32:	7a1b      	ldrb	r3, [r3, #8]
    3d34:	b2db      	uxtb	r3, r3
    3d36:	40da      	lsrs	r2, r3
    3d38:	1c13      	adds	r3, r2, #0
}
    3d3a:	1c18      	adds	r0, r3, #0
    3d3c:	46bd      	mov	sp, r7
    3d3e:	bd80      	pop	{r7, pc}
    3d40:	00003069 	.word	0x00003069
    3d44:	40000400 	.word	0x40000400

00003d48 <system_apb_clock_get_hz>:
 *
 * \return Current APBx bus frequency in Hz.
 */
static inline uint32_t system_apb_clock_get_hz(
		const enum system_clock_apb_bus bus)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	b084      	sub	sp, #16
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	1c02      	adds	r2, r0, #0
    3d50:	1dfb      	adds	r3, r7, #7
    3d52:	701a      	strb	r2, [r3, #0]
	uint16_t bus_divider = 0;
    3d54:	230e      	movs	r3, #14
    3d56:	18fb      	adds	r3, r7, r3
    3d58:	2200      	movs	r2, #0
    3d5a:	801a      	strh	r2, [r3, #0]

	switch (bus) {
    3d5c:	1dfb      	adds	r3, r7, #7
    3d5e:	781b      	ldrb	r3, [r3, #0]
    3d60:	2b01      	cmp	r3, #1
    3d62:	d00a      	beq.n	3d7a <system_apb_clock_get_hz+0x32>
    3d64:	2b02      	cmp	r3, #2
    3d66:	d00f      	beq.n	3d88 <system_apb_clock_get_hz+0x40>
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d114      	bne.n	3d96 <system_apb_clock_get_hz+0x4e>
		case SYSTEM_CLOCK_APB_APBA:
			bus_divider = PM->APBASEL.reg;
    3d6c:	4b11      	ldr	r3, [pc, #68]	; (3db4 <system_apb_clock_get_hz+0x6c>)
    3d6e:	7a5b      	ldrb	r3, [r3, #9]
    3d70:	b2da      	uxtb	r2, r3
    3d72:	230e      	movs	r3, #14
    3d74:	18fb      	adds	r3, r7, r3
    3d76:	801a      	strh	r2, [r3, #0]
			break;
    3d78:	e00f      	b.n	3d9a <system_apb_clock_get_hz+0x52>
		case SYSTEM_CLOCK_APB_APBB:
			bus_divider = PM->APBBSEL.reg;
    3d7a:	4b0e      	ldr	r3, [pc, #56]	; (3db4 <system_apb_clock_get_hz+0x6c>)
    3d7c:	7a9b      	ldrb	r3, [r3, #10]
    3d7e:	b2da      	uxtb	r2, r3
    3d80:	230e      	movs	r3, #14
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	801a      	strh	r2, [r3, #0]
			break;
    3d86:	e008      	b.n	3d9a <system_apb_clock_get_hz+0x52>
		case SYSTEM_CLOCK_APB_APBC:
			bus_divider = PM->APBCSEL.reg;
    3d88:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <system_apb_clock_get_hz+0x6c>)
    3d8a:	7adb      	ldrb	r3, [r3, #11]
    3d8c:	b2da      	uxtb	r2, r3
    3d8e:	230e      	movs	r3, #14
    3d90:	18fb      	adds	r3, r7, r3
    3d92:	801a      	strh	r2, [r3, #0]
			break;
    3d94:	e001      	b.n	3d9a <system_apb_clock_get_hz+0x52>
		default:
			Assert(false);
			return 0;
    3d96:	2300      	movs	r3, #0
    3d98:	e008      	b.n	3dac <system_apb_clock_get_hz+0x64>
	}

	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> bus_divider);
    3d9a:	2000      	movs	r0, #0
    3d9c:	4b06      	ldr	r3, [pc, #24]	; (3db8 <system_apb_clock_get_hz+0x70>)
    3d9e:	4798      	blx	r3
    3da0:	1c02      	adds	r2, r0, #0
    3da2:	230e      	movs	r3, #14
    3da4:	18fb      	adds	r3, r7, r3
    3da6:	881b      	ldrh	r3, [r3, #0]
    3da8:	40da      	lsrs	r2, r3
    3daa:	1c13      	adds	r3, r2, #0
}
    3dac:	1c18      	adds	r0, r3, #0
    3dae:	46bd      	mov	sp, r7
    3db0:	b004      	add	sp, #16
    3db2:	bd80      	pop	{r7, pc}
    3db4:	40000400 	.word	0x40000400
    3db8:	00003069 	.word	0x00003069

00003dbc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b082      	sub	sp, #8
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	1c02      	adds	r2, r0, #0
    3dc4:	1dfb      	adds	r3, r7, #7
    3dc6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3dc8:	4b08      	ldr	r3, [pc, #32]	; (3dec <system_flash_set_waitstates+0x30>)
    3dca:	1dfa      	adds	r2, r7, #7
    3dcc:	7812      	ldrb	r2, [r2, #0]
    3dce:	210f      	movs	r1, #15
    3dd0:	400a      	ands	r2, r1
    3dd2:	b2d2      	uxtb	r2, r2
    3dd4:	210f      	movs	r1, #15
    3dd6:	400a      	ands	r2, r1
    3dd8:	0052      	lsls	r2, r2, #1
    3dda:	6859      	ldr	r1, [r3, #4]
    3ddc:	201e      	movs	r0, #30
    3dde:	4381      	bics	r1, r0
    3de0:	430a      	orrs	r2, r1
    3de2:	605a      	str	r2, [r3, #4]
}
    3de4:	46bd      	mov	sp, r7
    3de6:	b002      	add	sp, #8
    3de8:	bd80      	pop	{r7, pc}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	41004000 	.word	0x41004000

00003df0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b084      	sub	sp, #16
    3df4:	af00      	add	r7, sp, #0
    3df6:	1c02      	adds	r2, r0, #0
    3df8:	1dfb      	adds	r3, r7, #7
    3dfa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3dfc:	230f      	movs	r3, #15
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	1dfa      	adds	r2, r7, #7
    3e02:	7812      	ldrb	r2, [r2, #0]
    3e04:	09d2      	lsrs	r2, r2, #7
    3e06:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e08:	230e      	movs	r3, #14
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	1dfa      	adds	r2, r7, #7
    3e0e:	7812      	ldrb	r2, [r2, #0]
    3e10:	0952      	lsrs	r2, r2, #5
    3e12:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3e14:	4b0d      	ldr	r3, [pc, #52]	; (3e4c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3e16:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3e18:	230f      	movs	r3, #15
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d10f      	bne.n	3e42 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3e22:	230f      	movs	r3, #15
    3e24:	18fb      	adds	r3, r7, r3
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	009b      	lsls	r3, r3, #2
    3e2a:	2210      	movs	r2, #16
    3e2c:	4694      	mov	ip, r2
    3e2e:	44bc      	add	ip, r7
    3e30:	4463      	add	r3, ip
    3e32:	3b08      	subs	r3, #8
    3e34:	681a      	ldr	r2, [r3, #0]
    3e36:	230e      	movs	r3, #14
    3e38:	18fb      	adds	r3, r7, r3
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	01db      	lsls	r3, r3, #7
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	e000      	b.n	3e44 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3e42:	2300      	movs	r3, #0
	}
}
    3e44:	1c18      	adds	r0, r3, #0
    3e46:	46bd      	mov	sp, r7
    3e48:	b004      	add	sp, #16
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	41004400 	.word	0x41004400

00003e50 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)PM->RCAUSE.reg;
    3e54:	4a03      	ldr	r2, [pc, #12]	; (3e64 <system_get_reset_cause+0x14>)
    3e56:	2338      	movs	r3, #56	; 0x38
    3e58:	5cd3      	ldrb	r3, [r2, r3]
    3e5a:	b2db      	uxtb	r3, r3
}
    3e5c:	1c18      	adds	r0, r3, #0
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	40000400 	.word	0x40000400

00003e68 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3e6c:	4b03      	ldr	r3, [pc, #12]	; (3e7c <system_interrupt_enable_global+0x14>)
    3e6e:	2201      	movs	r2, #1
    3e70:	701a      	strb	r2, [r3, #0]
    3e72:	f3bf 8f5f 	dmb	sy
    3e76:	b662      	cpsie	i
}
    3e78:	46bd      	mov	sp, r7
    3e7a:	bd80      	pop	{r7, pc}
    3e7c:	20000008 	.word	0x20000008

00003e80 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b084      	sub	sp, #16
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3e8e:	68fb      	ldr	r3, [r7, #12]
    3e90:	7e5b      	ldrb	r3, [r3, #25]
    3e92:	b2db      	uxtb	r3, r3
    3e94:	b2db      	uxtb	r3, r3
    3e96:	b25b      	sxtb	r3, r3
    3e98:	2b00      	cmp	r3, #0
    3e9a:	da01      	bge.n	3ea0 <adc_is_syncing+0x20>
		return true;
    3e9c:	2301      	movs	r3, #1
    3e9e:	e000      	b.n	3ea2 <adc_is_syncing+0x22>
	}

	return false;
    3ea0:	2300      	movs	r3, #0
}
    3ea2:	1c18      	adds	r0, r3, #0
    3ea4:	46bd      	mov	sp, r7
    3ea6:	b004      	add	sp, #16
    3ea8:	bd80      	pop	{r7, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)

00003eac <adc_set_pin_scan_mode>:
static inline enum status_code adc_set_pin_scan_mode(
		struct adc_module *const module_inst,
		uint8_t inputs_to_scan,
		const uint8_t start_offset)

{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	1c08      	adds	r0, r1, #0
    3eb6:	1c11      	adds	r1, r2, #0
    3eb8:	1cfb      	adds	r3, r7, #3
    3eba:	1c02      	adds	r2, r0, #0
    3ebc:	701a      	strb	r2, [r3, #0]
    3ebe:	1cbb      	adds	r3, r7, #2
    3ec0:	1c0a      	adds	r2, r1, #0
    3ec2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	681b      	ldr	r3, [r3, #0]
    3ec8:	60fb      	str	r3, [r7, #12]

	if (inputs_to_scan > 0) {
    3eca:	1cfb      	adds	r3, r7, #3
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d004      	beq.n	3edc <adc_set_pin_scan_mode+0x30>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    3ed2:	1cfb      	adds	r3, r7, #3
    3ed4:	781a      	ldrb	r2, [r3, #0]
    3ed6:	1cfb      	adds	r3, r7, #3
    3ed8:	3a01      	subs	r2, #1
    3eda:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3edc:	1cfb      	adds	r3, r7, #3
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	2b0f      	cmp	r3, #15
    3ee2:	d803      	bhi.n	3eec <adc_set_pin_scan_mode+0x40>
    3ee4:	1cbb      	adds	r3, r7, #2
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	2b0f      	cmp	r3, #15
    3eea:	d901      	bls.n	3ef0 <adc_set_pin_scan_mode+0x44>
			start_offset > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins */
		return STATUS_ERR_INVALID_ARG;
    3eec:	2317      	movs	r3, #23
    3eee:	e015      	b.n	3f1c <adc_set_pin_scan_mode+0x70>
	}

	while (adc_is_syncing(module_inst)) {
    3ef0:	46c0      	nop			; (mov r8, r8)
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	1c18      	adds	r0, r3, #0
    3ef6:	4b0b      	ldr	r3, [pc, #44]	; (3f24 <adc_set_pin_scan_mode+0x78>)
    3ef8:	4798      	blx	r3
    3efa:	1e03      	subs	r3, r0, #0
    3efc:	d1f9      	bne.n	3ef2 <adc_set_pin_scan_mode+0x46>
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
    3efe:	68fb      	ldr	r3, [r7, #12]
    3f00:	691b      	ldr	r3, [r3, #16]
    3f02:	4a09      	ldr	r2, [pc, #36]	; (3f28 <adc_set_pin_scan_mode+0x7c>)
    3f04:	4013      	ands	r3, r2
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    3f06:	1cba      	adds	r2, r7, #2
    3f08:	7812      	ldrb	r2, [r2, #0]
    3f0a:	0512      	lsls	r2, r2, #20
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
    3f0c:	4313      	orrs	r3, r2
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos);
    3f0e:	1cfa      	adds	r2, r7, #3
    3f10:	7812      	ldrb	r2, [r2, #0]
    3f12:	0412      	lsls	r2, r2, #16

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg &
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    3f14:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set pin scan mode */
	adc_module->INPUTCTRL.reg =
    3f16:	68fb      	ldr	r3, [r7, #12]
    3f18:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg &
			~(ADC_INPUTCTRL_INPUTSCAN_Msk | ADC_INPUTCTRL_INPUTOFFSET_Msk)) |
			(start_offset   << ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos);

	return STATUS_OK;
    3f1a:	2300      	movs	r3, #0
}
    3f1c:	1c18      	adds	r0, r3, #0
    3f1e:	46bd      	mov	sp, r7
    3f20:	b004      	add	sp, #16
    3f22:	bd80      	pop	{r7, pc}
    3f24:	00003e81 	.word	0x00003e81
    3f28:	ff00ffff 	.word	0xff00ffff

00003f2c <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b084      	sub	sp, #16
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    3f34:	1c0a      	adds	r2, r1, #0
    3f36:	1cfb      	adds	r3, r7, #3
    3f38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	681b      	ldr	r3, [r3, #0]
    3f3e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3f40:	46c0      	nop			; (mov r8, r8)
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	1c18      	adds	r0, r3, #0
    3f46:	4b0c      	ldr	r3, [pc, #48]	; (3f78 <adc_set_positive_input+0x4c>)
    3f48:	4798      	blx	r3
    3f4a:	1e03      	subs	r3, r0, #0
    3f4c:	d1f9      	bne.n	3f42 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    3f4e:	68fb      	ldr	r3, [r7, #12]
    3f50:	691b      	ldr	r3, [r3, #16]
    3f52:	221f      	movs	r2, #31
    3f54:	4393      	bics	r3, r2
    3f56:	1c1a      	adds	r2, r3, #0
    3f58:	1cfb      	adds	r3, r7, #3
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    3f5e:	68fb      	ldr	r3, [r7, #12]
    3f60:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	1c18      	adds	r0, r3, #0
    3f68:	4b03      	ldr	r3, [pc, #12]	; (3f78 <adc_set_positive_input+0x4c>)
    3f6a:	4798      	blx	r3
    3f6c:	1e03      	subs	r3, r0, #0
    3f6e:	d1f9      	bne.n	3f64 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
    3f70:	46bd      	mov	sp, r7
    3f72:	b004      	add	sp, #16
    3f74:	bd80      	pop	{r7, pc}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	00003e81 	.word	0x00003e81

00003f7c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	1c02      	adds	r2, r0, #0
    3f84:	1dfb      	adds	r3, r7, #7
    3f86:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f88:	1dfb      	adds	r3, r7, #7
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	1c18      	adds	r0, r3, #0
    3f8e:	4b03      	ldr	r3, [pc, #12]	; (3f9c <port_get_group_from_gpio_pin+0x20>)
    3f90:	4798      	blx	r3
    3f92:	1c03      	adds	r3, r0, #0
}
    3f94:	1c18      	adds	r0, r3, #0
    3f96:	46bd      	mov	sp, r7
    3f98:	b002      	add	sp, #8
    3f9a:	bd80      	pop	{r7, pc}
    3f9c:	00003df1 	.word	0x00003df1

00003fa0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b082      	sub	sp, #8
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	2200      	movs	r2, #0
    3fac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	2201      	movs	r2, #1
    3fb2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	709a      	strb	r2, [r3, #2]
}
    3fba:	46bd      	mov	sp, r7
    3fbc:	b002      	add	sp, #8
    3fbe:	bd80      	pop	{r7, pc}

00003fc0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b084      	sub	sp, #16
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	1c02      	adds	r2, r0, #0
    3fc8:	1dfb      	adds	r3, r7, #7
    3fca:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3fcc:	1dfb      	adds	r3, r7, #7
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	1c18      	adds	r0, r3, #0
    3fd2:	4b0b      	ldr	r3, [pc, #44]	; (4000 <port_pin_get_input_level+0x40>)
    3fd4:	4798      	blx	r3
    3fd6:	1c03      	adds	r3, r0, #0
    3fd8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3fda:	1dfb      	adds	r3, r7, #7
    3fdc:	781b      	ldrb	r3, [r3, #0]
    3fde:	221f      	movs	r2, #31
    3fe0:	4013      	ands	r3, r2
    3fe2:	2201      	movs	r2, #1
    3fe4:	409a      	lsls	r2, r3
    3fe6:	1c13      	adds	r3, r2, #0
    3fe8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    3fea:	68fb      	ldr	r3, [r7, #12]
    3fec:	6a1b      	ldr	r3, [r3, #32]
    3fee:	68ba      	ldr	r2, [r7, #8]
    3ff0:	4013      	ands	r3, r2
    3ff2:	1e5a      	subs	r2, r3, #1
    3ff4:	4193      	sbcs	r3, r2
    3ff6:	b2db      	uxtb	r3, r3
}
    3ff8:	1c18      	adds	r0, r3, #0
    3ffa:	46bd      	mov	sp, r7
    3ffc:	b004      	add	sp, #16
    3ffe:	bd80      	pop	{r7, pc}
    4000:	00003f7d 	.word	0x00003f7d

00004004 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4004:	b580      	push	{r7, lr}
    4006:	b084      	sub	sp, #16
    4008:	af00      	add	r7, sp, #0
    400a:	1c02      	adds	r2, r0, #0
    400c:	1dfb      	adds	r3, r7, #7
    400e:	701a      	strb	r2, [r3, #0]
    4010:	1dbb      	adds	r3, r7, #6
    4012:	1c0a      	adds	r2, r1, #0
    4014:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4016:	1dfb      	adds	r3, r7, #7
    4018:	781b      	ldrb	r3, [r3, #0]
    401a:	1c18      	adds	r0, r3, #0
    401c:	4b0c      	ldr	r3, [pc, #48]	; (4050 <port_pin_set_output_level+0x4c>)
    401e:	4798      	blx	r3
    4020:	1c03      	adds	r3, r0, #0
    4022:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4024:	1dfb      	adds	r3, r7, #7
    4026:	781b      	ldrb	r3, [r3, #0]
    4028:	221f      	movs	r2, #31
    402a:	4013      	ands	r3, r2
    402c:	2201      	movs	r2, #1
    402e:	409a      	lsls	r2, r3
    4030:	1c13      	adds	r3, r2, #0
    4032:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4034:	1dbb      	adds	r3, r7, #6
    4036:	781b      	ldrb	r3, [r3, #0]
    4038:	2b00      	cmp	r3, #0
    403a:	d003      	beq.n	4044 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    403c:	68fb      	ldr	r3, [r7, #12]
    403e:	68ba      	ldr	r2, [r7, #8]
    4040:	619a      	str	r2, [r3, #24]
    4042:	e002      	b.n	404a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4044:	68fb      	ldr	r3, [r7, #12]
    4046:	68ba      	ldr	r2, [r7, #8]
    4048:	615a      	str	r2, [r3, #20]
	}
}
    404a:	46bd      	mov	sp, r7
    404c:	b004      	add	sp, #16
    404e:	bd80      	pop	{r7, pc}
    4050:	00003f7d 	.word	0x00003f7d

00004054 <main>:

enum status_code statusCode;


int main(void)
{
    4054:	b590      	push	{r4, r7, lr}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0

	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    405a:	4bf1      	ldr	r3, [pc, #964]	; (4420 <main+0x3cc>)
    405c:	4798      	blx	r3

	/* Initialize board hardware */
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);
    405e:	1c3b      	adds	r3, r7, #0
    4060:	1c18      	adds	r0, r3, #0
    4062:	4bf0      	ldr	r3, [pc, #960]	; (4424 <main+0x3d0>)
    4064:	4798      	blx	r3

		/* Configure LEDs as outputs, turn them off */
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4066:	1c3b      	adds	r3, r7, #0
    4068:	2201      	movs	r2, #1
    406a:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(LED_PIN, &pin_conf);
    406c:	1c3b      	adds	r3, r7, #0
    406e:	2000      	movs	r0, #0
    4070:	1c19      	adds	r1, r3, #0
    4072:	4bed      	ldr	r3, [pc, #948]	; (4428 <main+0x3d4>)
    4074:	4798      	blx	r3
		port_pin_set_output_level(LED_PIN, 1);
    4076:	2000      	movs	r0, #0
    4078:	2101      	movs	r1, #1
    407a:	4bec      	ldr	r3, [pc, #944]	; (442c <main+0x3d8>)
    407c:	4798      	blx	r3
		port_pin_set_config(TP41_PIN, &pin_conf);
    407e:	1c3b      	adds	r3, r7, #0
    4080:	2014      	movs	r0, #20
    4082:	1c19      	adds	r1, r3, #0
    4084:	4be8      	ldr	r3, [pc, #928]	; (4428 <main+0x3d4>)
    4086:	4798      	blx	r3
		port_pin_set_config(TP42_PIN, &pin_conf);
    4088:	1c3b      	adds	r3, r7, #0
    408a:	2015      	movs	r0, #21
    408c:	1c19      	adds	r1, r3, #0
    408e:	4be6      	ldr	r3, [pc, #920]	; (4428 <main+0x3d4>)
    4090:	4798      	blx	r3
		port_pin_set_config(TP43_PIN, &pin_conf);
    4092:	1c3b      	adds	r3, r7, #0
    4094:	2016      	movs	r0, #22
    4096:	1c19      	adds	r1, r3, #0
    4098:	4be3      	ldr	r3, [pc, #908]	; (4428 <main+0x3d4>)
    409a:	4798      	blx	r3

		/* Set inputs */
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    409c:	1c3b      	adds	r3, r7, #0
    409e:	2200      	movs	r2, #0
    40a0:	701a      	strb	r2, [r3, #0]
		pin_conf.input_pull = PORT_PIN_PULL_UP;
    40a2:	1c3b      	adds	r3, r7, #0
    40a4:	2201      	movs	r2, #1
    40a6:	705a      	strb	r2, [r3, #1]
		port_pin_set_config(PROCESSOR_LOC0_PIN, &pin_conf);
    40a8:	1c3b      	adds	r3, r7, #0
    40aa:	200d      	movs	r0, #13
    40ac:	1c19      	adds	r1, r3, #0
    40ae:	4bde      	ldr	r3, [pc, #888]	; (4428 <main+0x3d4>)
    40b0:	4798      	blx	r3
		port_pin_set_config(PROCESSOR_LOC1_PIN, &pin_conf);
    40b2:	1c3b      	adds	r3, r7, #0
    40b4:	200e      	movs	r0, #14
    40b6:	1c19      	adds	r1, r3, #0
    40b8:	4bdb      	ldr	r3, [pc, #876]	; (4428 <main+0x3d4>)
    40ba:	4798      	blx	r3
		port_pin_set_config(PROCESSOR_LOC2_PIN, &pin_conf);
    40bc:	1c3b      	adds	r3, r7, #0
    40be:	200f      	movs	r0, #15
    40c0:	1c19      	adds	r1, r3, #0
    40c2:	4bd9      	ldr	r3, [pc, #868]	; (4428 <main+0x3d4>)
    40c4:	4798      	blx	r3

	// determine location and set note offset			 port_pin_get_input_level(BUTTON_0_PIN) == false
	if(port_pin_get_input_level(PROCESSOR_LOC0_PIN) == 0) noteOffset = 21;
    40c6:	200d      	movs	r0, #13
    40c8:	4bd9      	ldr	r3, [pc, #868]	; (4430 <main+0x3dc>)
    40ca:	4798      	blx	r3
    40cc:	1c03      	adds	r3, r0, #0
    40ce:	1c1a      	adds	r2, r3, #0
    40d0:	2301      	movs	r3, #1
    40d2:	4053      	eors	r3, r2
    40d4:	b2db      	uxtb	r3, r3
    40d6:	2b00      	cmp	r3, #0
    40d8:	d003      	beq.n	40e2 <main+0x8e>
    40da:	4bd6      	ldr	r3, [pc, #856]	; (4434 <main+0x3e0>)
    40dc:	2215      	movs	r2, #21
    40de:	701a      	strb	r2, [r3, #0]
    40e0:	e010      	b.n	4104 <main+0xb0>
	else if(port_pin_get_input_level(PROCESSOR_LOC1_PIN) == 0) noteOffset = 41;
    40e2:	200e      	movs	r0, #14
    40e4:	4bd2      	ldr	r3, [pc, #840]	; (4430 <main+0x3dc>)
    40e6:	4798      	blx	r3
    40e8:	1c03      	adds	r3, r0, #0
    40ea:	1c1a      	adds	r2, r3, #0
    40ec:	2301      	movs	r3, #1
    40ee:	4053      	eors	r3, r2
    40f0:	b2db      	uxtb	r3, r3
    40f2:	2b00      	cmp	r3, #0
    40f4:	d003      	beq.n	40fe <main+0xaa>
    40f6:	4bcf      	ldr	r3, [pc, #828]	; (4434 <main+0x3e0>)
    40f8:	2229      	movs	r2, #41	; 0x29
    40fa:	701a      	strb	r2, [r3, #0]
    40fc:	e002      	b.n	4104 <main+0xb0>
		else noteOffset = 61;
    40fe:	4bcd      	ldr	r3, [pc, #820]	; (4434 <main+0x3e0>)
    4100:	223d      	movs	r2, #61	; 0x3d
    4102:	701a      	strb	r2, [r3, #0]

// check restart cause
	enum system_reset_cause reset_cause = system_get_reset_cause();
    4104:	1d7c      	adds	r4, r7, #5
    4106:	4bcc      	ldr	r3, [pc, #816]	; (4438 <main+0x3e4>)
    4108:	4798      	blx	r3
    410a:	1c03      	adds	r3, r0, #0
    410c:	7023      	strb	r3, [r4, #0]
	if (reset_cause == SYSTEM_RESET_CAUSE_WDT) {
    410e:	1d7b      	adds	r3, r7, #5
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	2b20      	cmp	r3, #32
    4114:	d104      	bne.n	4120 <main+0xcc>
		port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    4116:	200e      	movs	r0, #14
    4118:	2101      	movs	r1, #1
    411a:	4bc4      	ldr	r3, [pc, #784]	; (442c <main+0x3d8>)
    411c:	4798      	blx	r3
    411e:	e003      	b.n	4128 <main+0xd4>
	}
	else {
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
    4120:	200e      	movs	r0, #14
    4122:	2100      	movs	r1, #0
    4124:	4bc1      	ldr	r3, [pc, #772]	; (442c <main+0x3d8>)
    4126:	4798      	blx	r3
	}

		

	//	configure_vel_counter();
	configure_tc7();
    4128:	4bc4      	ldr	r3, [pc, #784]	; (443c <main+0x3e8>)
    412a:	4798      	blx	r3
	configure_tc7_callbacks();
    412c:	4bc4      	ldr	r3, [pc, #784]	; (4440 <main+0x3ec>)
    412e:	4798      	blx	r3

	system_interrupt_enable_global();
    4130:	4bc4      	ldr	r3, [pc, #784]	; (4444 <main+0x3f0>)
    4132:	4798      	blx	r3

	clock_dfll();
    4134:	4bc4      	ldr	r3, [pc, #784]	; (4448 <main+0x3f4>)
    4136:	4798      	blx	r3

	configure_wdt();
    4138:	4bc4      	ldr	r3, [pc, #784]	; (444c <main+0x3f8>)
    413a:	4798      	blx	r3

	// setup MAX_TC_AVAIL timers
	configure_vel_counters();
    413c:	4bc4      	ldr	r3, [pc, #784]	; (4450 <main+0x3fc>)
    413e:	4798      	blx	r3

	// setup spi
	configure_spi_slave();
    4140:	4bc4      	ldr	r3, [pc, #784]	; (4454 <main+0x400>)
    4142:	4798      	blx	r3
	configure_spi_slave_callbacks();
    4144:	4bc4      	ldr	r3, [pc, #784]	; (4458 <main+0x404>)
    4146:	4798      	blx	r3
	
	// setup adc  (analog to digital converter
	configure_adc();
    4148:	4bc4      	ldr	r3, [pc, #784]	; (445c <main+0x408>)
    414a:	4798      	blx	r3
	configure_adc_callbacks();
    414c:	4bc4      	ldr	r3, [pc, #784]	; (4460 <main+0x40c>)
    414e:	4798      	blx	r3
 
	sysHz = system_cpu_clock_get_hz();
    4150:	4bc4      	ldr	r3, [pc, #784]	; (4464 <main+0x410>)
    4152:	4798      	blx	r3
    4154:	1c02      	adds	r2, r0, #0
    4156:	4bc4      	ldr	r3, [pc, #784]	; (4468 <main+0x414>)
    4158:	601a      	str	r2, [r3, #0]
	sysHz = system_apb_clock_get_hz(GCLK_GENERATOR_1);
    415a:	2001      	movs	r0, #1
    415c:	4bc3      	ldr	r3, [pc, #780]	; (446c <main+0x418>)
    415e:	4798      	blx	r3
    4160:	1c02      	adds	r2, r0, #0
    4162:	4bc1      	ldr	r3, [pc, #772]	; (4468 <main+0x414>)
    4164:	601a      	str	r2, [r3, #0]
	
	system_interrupt_enable_global();
    4166:	4bb7      	ldr	r3, [pc, #732]	; (4444 <main+0x3f0>)
    4168:	4798      	blx	r3
	

	// init trebKeys
	for (uint8_t i=0; i<20; i++)
    416a:	1dfb      	adds	r3, r7, #7
    416c:	2200      	movs	r2, #0
    416e:	701a      	strb	r2, [r3, #0]
    4170:	e080      	b.n	4274 <main+0x220>
	{
			trebKeys[i].on = false;
    4172:	1dfb      	adds	r3, r7, #7
    4174:	781a      	ldrb	r2, [r3, #0]
    4176:	49be      	ldr	r1, [pc, #760]	; (4470 <main+0x41c>)
    4178:	1c13      	adds	r3, r2, #0
    417a:	009b      	lsls	r3, r3, #2
    417c:	189b      	adds	r3, r3, r2
    417e:	009b      	lsls	r3, r3, #2
    4180:	2200      	movs	r2, #0
    4182:	545a      	strb	r2, [r3, r1]
			trebKeys[i].lastAtoDval = 0;
    4184:	1dfb      	adds	r3, r7, #7
    4186:	781a      	ldrb	r2, [r3, #0]
    4188:	49b9      	ldr	r1, [pc, #740]	; (4470 <main+0x41c>)
    418a:	1c13      	adds	r3, r2, #0
    418c:	009b      	lsls	r3, r3, #2
    418e:	189b      	adds	r3, r3, r2
    4190:	009b      	lsls	r3, r3, #2
    4192:	18cb      	adds	r3, r1, r3
    4194:	2200      	movs	r2, #0
    4196:	705a      	strb	r2, [r3, #1]
			trebKeys[i].maxAtoDval = 100;
    4198:	1dfb      	adds	r3, r7, #7
    419a:	781a      	ldrb	r2, [r3, #0]
    419c:	49b4      	ldr	r1, [pc, #720]	; (4470 <main+0x41c>)
    419e:	1c13      	adds	r3, r2, #0
    41a0:	009b      	lsls	r3, r3, #2
    41a2:	189b      	adds	r3, r3, r2
    41a4:	009b      	lsls	r3, r3, #2
    41a6:	18cb      	adds	r3, r1, r3
    41a8:	2264      	movs	r2, #100	; 0x64
    41aa:	709a      	strb	r2, [r3, #2]
			trebKeys[i].minAtoDval = 100;
    41ac:	1dfb      	adds	r3, r7, #7
    41ae:	781a      	ldrb	r2, [r3, #0]
    41b0:	49af      	ldr	r1, [pc, #700]	; (4470 <main+0x41c>)
    41b2:	1c13      	adds	r3, r2, #0
    41b4:	009b      	lsls	r3, r3, #2
    41b6:	189b      	adds	r3, r3, r2
    41b8:	009b      	lsls	r3, r3, #2
    41ba:	18cb      	adds	r3, r1, r3
    41bc:	2264      	movs	r2, #100	; 0x64
    41be:	70da      	strb	r2, [r3, #3]
			trebKeys[i].velCalculating = false;
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	781a      	ldrb	r2, [r3, #0]
    41c4:	49aa      	ldr	r1, [pc, #680]	; (4470 <main+0x41c>)
    41c6:	1c13      	adds	r3, r2, #0
    41c8:	009b      	lsls	r3, r3, #2
    41ca:	189b      	adds	r3, r3, r2
    41cc:	009b      	lsls	r3, r3, #2
    41ce:	18cb      	adds	r3, r1, r3
    41d0:	2200      	movs	r2, #0
    41d2:	711a      	strb	r2, [r3, #4]
			trebKeys[i].state = KEY_OFF;
    41d4:	1dfb      	adds	r3, r7, #7
    41d6:	781a      	ldrb	r2, [r3, #0]
    41d8:	49a5      	ldr	r1, [pc, #660]	; (4470 <main+0x41c>)
    41da:	1c13      	adds	r3, r2, #0
    41dc:	009b      	lsls	r3, r3, #2
    41de:	189b      	adds	r3, r3, r2
    41e0:	009b      	lsls	r3, r3, #2
    41e2:	18cb      	adds	r3, r1, r3
    41e4:	2200      	movs	r2, #0
    41e6:	719a      	strb	r2, [r3, #6]
//			trebKeys[i].analogHigh = 100;
//			trebKeys[i].analogLow = 50;
			trebKeys[i].thresholdHigh = 60;	 // PULL FROM FLASH MEMORY SAVED AT CALIBRATION
    41e8:	1dfb      	adds	r3, r7, #7
    41ea:	781a      	ldrb	r2, [r3, #0]
    41ec:	49a0      	ldr	r1, [pc, #640]	; (4470 <main+0x41c>)
    41ee:	1c13      	adds	r3, r2, #0
    41f0:	009b      	lsls	r3, r3, #2
    41f2:	189b      	adds	r3, r3, r2
    41f4:	009b      	lsls	r3, r3, #2
    41f6:	18cb      	adds	r3, r1, r3
    41f8:	223c      	movs	r2, #60	; 0x3c
    41fa:	71da      	strb	r2, [r3, #7]
			trebKeys[i].thresholdLow = 90;
    41fc:	1dfb      	adds	r3, r7, #7
    41fe:	781a      	ldrb	r2, [r3, #0]
    4200:	499b      	ldr	r1, [pc, #620]	; (4470 <main+0x41c>)
    4202:	1c13      	adds	r3, r2, #0
    4204:	009b      	lsls	r3, r3, #2
    4206:	189b      	adds	r3, r3, r2
    4208:	009b      	lsls	r3, r3, #2
    420a:	18cb      	adds	r3, r1, r3
    420c:	3308      	adds	r3, #8
    420e:	225a      	movs	r2, #90	; 0x5a
    4210:	701a      	strb	r2, [r3, #0]
			trebKeys[i].count = 0;
    4212:	1dfb      	adds	r3, r7, #7
    4214:	781a      	ldrb	r2, [r3, #0]
    4216:	4996      	ldr	r1, [pc, #600]	; (4470 <main+0x41c>)
    4218:	1c13      	adds	r3, r2, #0
    421a:	009b      	lsls	r3, r3, #2
    421c:	189b      	adds	r3, r3, r2
    421e:	009b      	lsls	r3, r3, #2
    4220:	18cb      	adds	r3, r1, r3
    4222:	3308      	adds	r3, #8
    4224:	2200      	movs	r2, #0
    4226:	805a      	strh	r2, [r3, #2]
			trebKeys[i].tcPtr = NULL;
    4228:	1dfb      	adds	r3, r7, #7
    422a:	781a      	ldrb	r2, [r3, #0]
    422c:	4990      	ldr	r1, [pc, #576]	; (4470 <main+0x41c>)
    422e:	1c13      	adds	r3, r2, #0
    4230:	009b      	lsls	r3, r3, #2
    4232:	189b      	adds	r3, r3, r2
    4234:	009b      	lsls	r3, r3, #2
    4236:	18cb      	adds	r3, r1, r3
    4238:	3308      	adds	r3, #8
    423a:	2200      	movs	r2, #0
    423c:	605a      	str	r2, [r3, #4]
			trebKeys[i].sent = false;
    423e:	1dfb      	adds	r3, r7, #7
    4240:	781a      	ldrb	r2, [r3, #0]
    4242:	498b      	ldr	r1, [pc, #556]	; (4470 <main+0x41c>)
    4244:	1c13      	adds	r3, r2, #0
    4246:	009b      	lsls	r3, r3, #2
    4248:	189b      	adds	r3, r3, r2
    424a:	009b      	lsls	r3, r3, #2
    424c:	18cb      	adds	r3, r1, r3
    424e:	3310      	adds	r3, #16
    4250:	2200      	movs	r2, #0
    4252:	701a      	strb	r2, [r3, #0]
			trebKeys[i].calcVelocity = 0;
    4254:	1dfb      	adds	r3, r7, #7
    4256:	781a      	ldrb	r2, [r3, #0]
    4258:	4985      	ldr	r1, [pc, #532]	; (4470 <main+0x41c>)
    425a:	1c13      	adds	r3, r2, #0
    425c:	009b      	lsls	r3, r3, #2
    425e:	189b      	adds	r3, r3, r2
    4260:	009b      	lsls	r3, r3, #2
    4262:	18cb      	adds	r3, r1, r3
    4264:	3310      	adds	r3, #16
    4266:	2200      	movs	r2, #0
    4268:	705a      	strb	r2, [r3, #1]
	
	system_interrupt_enable_global();
	

	// init trebKeys
	for (uint8_t i=0; i<20; i++)
    426a:	1dfb      	adds	r3, r7, #7
    426c:	781a      	ldrb	r2, [r3, #0]
    426e:	1dfb      	adds	r3, r7, #7
    4270:	3201      	adds	r2, #1
    4272:	701a      	strb	r2, [r3, #0]
    4274:	1dfb      	adds	r3, r7, #7
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	2b13      	cmp	r3, #19
    427a:	d800      	bhi.n	427e <main+0x22a>
    427c:	e779      	b.n	4172 <main+0x11e>
	}
	
		
	// start scan 2nd group of Keys 
			// note   	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN10;		  // start at AD10 in configure_adc()
			statusCode = adc_set_pin_scan_mode( &adc_instance, 10, 0);		// 2nd set of 10 channels
    427e:	4b7d      	ldr	r3, [pc, #500]	; (4474 <main+0x420>)
    4280:	1c18      	adds	r0, r3, #0
    4282:	210a      	movs	r1, #10
    4284:	2200      	movs	r2, #0
    4286:	4b7c      	ldr	r3, [pc, #496]	; (4478 <main+0x424>)
    4288:	4798      	blx	r3
    428a:	1c03      	adds	r3, r0, #0
    428c:	1c1a      	adds	r2, r3, #0
    428e:	4b7b      	ldr	r3, [pc, #492]	; (447c <main+0x428>)
    4290:	701a      	strb	r2, [r3, #0]
			adc_read_buffer_job(&adc_instance, adc_result_buffer+ADC_SAMPLES, ADC_SAMPLES);
    4292:	4a78      	ldr	r2, [pc, #480]	; (4474 <main+0x420>)
    4294:	4b7a      	ldr	r3, [pc, #488]	; (4480 <main+0x42c>)
    4296:	1c10      	adds	r0, r2, #0
    4298:	1c19      	adds	r1, r3, #0
    429a:	220a      	movs	r2, #10
    429c:	4b79      	ldr	r3, [pc, #484]	; (4484 <main+0x430>)
    429e:	4798      	blx	r3
	// AtoD & and note calcs are done in forground 
		//	(SPI work is in background driven by tc7
	
	
	
	tx_note[0] = 0x80;
    42a0:	4b79      	ldr	r3, [pc, #484]	; (4488 <main+0x434>)
    42a2:	2280      	movs	r2, #128	; 0x80
    42a4:	701a      	strb	r2, [r3, #0]
	
	port_pin_set_output_level(TP41_PIN,1);
    42a6:	2014      	movs	r0, #20
    42a8:	2101      	movs	r1, #1
    42aa:	4b60      	ldr	r3, [pc, #384]	; (442c <main+0x3d8>)
    42ac:	4798      	blx	r3

 	spi_transceive_one(&spi_slave_instance, tx_note,buffer_rx,1);
    42ae:	4977      	ldr	r1, [pc, #476]	; (448c <main+0x438>)
    42b0:	4a75      	ldr	r2, [pc, #468]	; (4488 <main+0x434>)
    42b2:	4b77      	ldr	r3, [pc, #476]	; (4490 <main+0x43c>)
    42b4:	1c08      	adds	r0, r1, #0
    42b6:	1c11      	adds	r1, r2, #0
    42b8:	1c1a      	adds	r2, r3, #0
    42ba:	2301      	movs	r3, #1
    42bc:	4c75      	ldr	r4, [pc, #468]	; (4494 <main+0x440>)
    42be:	47a0      	blx	r4

	buffer_rx[0] = 0xf7;
    42c0:	4b73      	ldr	r3, [pc, #460]	; (4490 <main+0x43c>)
    42c2:	22f7      	movs	r2, #247	; 0xf7
    42c4:	701a      	strb	r2, [r3, #0]

	 
	// spi_transceive_buffer_job(&spi_slave_instance, tx_note,buffer_rx,1);
//uint32_t txCnt=0;
bool doADCcnt = 0;
    42c6:	1dbb      	adds	r3, r7, #6
    42c8:	2200      	movs	r2, #0
    42ca:	701a      	strb	r2, [r3, #0]


	// run ADCs one time before calcs start
  	adc_set_positive_input( &adc_instance,ADC_POSITIVE_INPUT_PIN0);
    42cc:	4b69      	ldr	r3, [pc, #420]	; (4474 <main+0x420>)
    42ce:	1c18      	adds	r0, r3, #0
    42d0:	2100      	movs	r1, #0
    42d2:	4b71      	ldr	r3, [pc, #452]	; (4498 <main+0x444>)
    42d4:	4798      	blx	r3
	statusCode = adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 0);	  // 1st set of 10 channels
    42d6:	4b67      	ldr	r3, [pc, #412]	; (4474 <main+0x420>)
    42d8:	1c18      	adds	r0, r3, #0
    42da:	210a      	movs	r1, #10
    42dc:	2200      	movs	r2, #0
    42de:	4b66      	ldr	r3, [pc, #408]	; (4478 <main+0x424>)
    42e0:	4798      	blx	r3
    42e2:	1c03      	adds	r3, r0, #0
    42e4:	1c1a      	adds	r2, r3, #0
    42e6:	4b65      	ldr	r3, [pc, #404]	; (447c <main+0x428>)
    42e8:	701a      	strb	r2, [r3, #0]
	statusCode = adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    42ea:	4a62      	ldr	r2, [pc, #392]	; (4474 <main+0x420>)
    42ec:	4b6b      	ldr	r3, [pc, #428]	; (449c <main+0x448>)
    42ee:	1c10      	adds	r0, r2, #0
    42f0:	1c19      	adds	r1, r3, #0
    42f2:	220a      	movs	r2, #10
    42f4:	4b63      	ldr	r3, [pc, #396]	; (4484 <main+0x430>)
    42f6:	4798      	blx	r3
    42f8:	1c03      	adds	r3, r0, #0
    42fa:	1c1a      	adds	r2, r3, #0
    42fc:	4b5f      	ldr	r3, [pc, #380]	; (447c <main+0x428>)
    42fe:	701a      	strb	r2, [r3, #0]
				
	adc_set_positive_input( &adc_instance,ADC_POSITIVE_INPUT_PIN0);
    4300:	4b5c      	ldr	r3, [pc, #368]	; (4474 <main+0x420>)
    4302:	1c18      	adds	r0, r3, #0
    4304:	2100      	movs	r1, #0
    4306:	4b64      	ldr	r3, [pc, #400]	; (4498 <main+0x444>)
    4308:	4798      	blx	r3
	statusCode = adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 0);	  // 1st set of 10 channels
    430a:	4b5a      	ldr	r3, [pc, #360]	; (4474 <main+0x420>)
    430c:	1c18      	adds	r0, r3, #0
    430e:	210a      	movs	r1, #10
    4310:	2200      	movs	r2, #0
    4312:	4b59      	ldr	r3, [pc, #356]	; (4478 <main+0x424>)
    4314:	4798      	blx	r3
    4316:	1c03      	adds	r3, r0, #0
    4318:	1c1a      	adds	r2, r3, #0
    431a:	4b58      	ldr	r3, [pc, #352]	; (447c <main+0x428>)
    431c:	701a      	strb	r2, [r3, #0]
	statusCode = adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    431e:	4a55      	ldr	r2, [pc, #340]	; (4474 <main+0x420>)
    4320:	4b5e      	ldr	r3, [pc, #376]	; (449c <main+0x448>)
    4322:	1c10      	adds	r0, r2, #0
    4324:	1c19      	adds	r1, r3, #0
    4326:	220a      	movs	r2, #10
    4328:	4b56      	ldr	r3, [pc, #344]	; (4484 <main+0x430>)
    432a:	4798      	blx	r3
    432c:	1c03      	adds	r3, r0, #0
    432e:	1c1a      	adds	r2, r3, #0
    4330:	4b52      	ldr	r3, [pc, #328]	; (447c <main+0x428>)
    4332:	701a      	strb	r2, [r3, #0]

	while (1)						// Loop forever
	{
//		port_pin_toggle_output_level(TP41_PIN); // test point loop indicator

		if (transfer_complete_spi_slave)
    4334:	4b5a      	ldr	r3, [pc, #360]	; (44a0 <main+0x44c>)
    4336:	781b      	ldrb	r3, [r3, #0]
    4338:	b2db      	uxtb	r3, r3
    433a:	2b00      	cmp	r3, #0
    433c:	d004      	beq.n	4348 <main+0x2f4>
		{
			transfer_complete_spi_slave= false;
    433e:	4b58      	ldr	r3, [pc, #352]	; (44a0 <main+0x44c>)
    4340:	2200      	movs	r2, #0
    4342:	701a      	strb	r2, [r3, #0]
				
			wdt_reset_count();							 // looking good, prevent WDT from reseting uP
    4344:	4b57      	ldr	r3, [pc, #348]	; (44a4 <main+0x450>)
    4346:	4798      	blx	r3
		}
		
		if (adc_read_done == true)
    4348:	4b57      	ldr	r3, [pc, #348]	; (44a8 <main+0x454>)
    434a:	781b      	ldrb	r3, [r3, #0]
    434c:	b2db      	uxtb	r3, r3
    434e:	2b00      	cmp	r3, #0
    4350:	d064      	beq.n	441c <main+0x3c8>
		{
			adc_read_done=false;
    4352:	4b55      	ldr	r3, [pc, #340]	; (44a8 <main+0x454>)
    4354:	2200      	movs	r2, #0
    4356:	701a      	strb	r2, [r3, #0]
			if (doADCcnt)
    4358:	1dbb      	adds	r3, r7, #6
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	2b00      	cmp	r3, #0
    435e:	d027      	beq.n	43b0 <main+0x35c>
			{
				// start scan 1st group Keys - 20 keys are scanned in 2 sets of 10
				adc_set_positive_input( &adc_instance,ADC_POSITIVE_INPUT_PIN0);
    4360:	4b44      	ldr	r3, [pc, #272]	; (4474 <main+0x420>)
    4362:	1c18      	adds	r0, r3, #0
    4364:	2100      	movs	r1, #0
    4366:	4b4c      	ldr	r3, [pc, #304]	; (4498 <main+0x444>)
    4368:	4798      	blx	r3
				statusCode = adc_set_pin_scan_mode( &adc_instance, ADC_SAMPLES, 0);	  // 1st set of 10 channels
    436a:	4b42      	ldr	r3, [pc, #264]	; (4474 <main+0x420>)
    436c:	1c18      	adds	r0, r3, #0
    436e:	210a      	movs	r1, #10
    4370:	2200      	movs	r2, #0
    4372:	4b41      	ldr	r3, [pc, #260]	; (4478 <main+0x424>)
    4374:	4798      	blx	r3
    4376:	1c03      	adds	r3, r0, #0
    4378:	1c1a      	adds	r2, r3, #0
    437a:	4b40      	ldr	r3, [pc, #256]	; (447c <main+0x428>)
    437c:	701a      	strb	r2, [r3, #0]
				statusCode = adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    437e:	4a3d      	ldr	r2, [pc, #244]	; (4474 <main+0x420>)
    4380:	4b46      	ldr	r3, [pc, #280]	; (449c <main+0x448>)
    4382:	1c10      	adds	r0, r2, #0
    4384:	1c19      	adds	r1, r3, #0
    4386:	220a      	movs	r2, #10
    4388:	4b3e      	ldr	r3, [pc, #248]	; (4484 <main+0x430>)
    438a:	4798      	blx	r3
    438c:	1c03      	adds	r3, r0, #0
    438e:	1c1a      	adds	r2, r3, #0
    4390:	4b3a      	ldr	r3, [pc, #232]	; (447c <main+0x428>)
    4392:	701a      	strb	r2, [r3, #0]
				// process 2nd set of key reads
				if (velocityCmdRx != VELOCITY_MODE)
    4394:	4b45      	ldr	r3, [pc, #276]	; (44ac <main+0x458>)
    4396:	781b      	ldrb	r3, [r3, #0]
    4398:	2bf1      	cmp	r3, #241	; 0xf1
    439a:	d004      	beq.n	43a6 <main+0x352>
					key_closer(10, 20);	// operating in switch closure mode
    439c:	200a      	movs	r0, #10
    439e:	2114      	movs	r1, #20
    43a0:	4b43      	ldr	r3, [pc, #268]	; (44b0 <main+0x45c>)
    43a2:	4798      	blx	r3
    43a4:	e02b      	b.n	43fe <main+0x3aa>
				else key_velocity(10,20); // velocity mode
    43a6:	200a      	movs	r0, #10
    43a8:	2114      	movs	r1, #20
    43aa:	4b42      	ldr	r3, [pc, #264]	; (44b4 <main+0x460>)
    43ac:	4798      	blx	r3
    43ae:	e026      	b.n	43fe <main+0x3aa>
			}
			else
			{
				// start scan 2nd group of Keys - 20 keys are scanned in 2 sets of 10
				adc_set_positive_input( &adc_instance,ADC_POSITIVE_INPUT_PIN10);
    43b0:	4b30      	ldr	r3, [pc, #192]	; (4474 <main+0x420>)
    43b2:	1c18      	adds	r0, r3, #0
    43b4:	210a      	movs	r1, #10
    43b6:	4b38      	ldr	r3, [pc, #224]	; (4498 <main+0x444>)
    43b8:	4798      	blx	r3
				statusCode = adc_set_pin_scan_mode( &adc_instance, 10, 0);		// 2nd set of 10 channels
    43ba:	4b2e      	ldr	r3, [pc, #184]	; (4474 <main+0x420>)
    43bc:	1c18      	adds	r0, r3, #0
    43be:	210a      	movs	r1, #10
    43c0:	2200      	movs	r2, #0
    43c2:	4b2d      	ldr	r3, [pc, #180]	; (4478 <main+0x424>)
    43c4:	4798      	blx	r3
    43c6:	1c03      	adds	r3, r0, #0
    43c8:	1c1a      	adds	r2, r3, #0
    43ca:	4b2c      	ldr	r3, [pc, #176]	; (447c <main+0x428>)
    43cc:	701a      	strb	r2, [r3, #0]
				statusCode = adc_read_buffer_job(&adc_instance, adc_result_buffer+ADC_SAMPLES, ADC_SAMPLES);
    43ce:	4a29      	ldr	r2, [pc, #164]	; (4474 <main+0x420>)
    43d0:	4b2b      	ldr	r3, [pc, #172]	; (4480 <main+0x42c>)
    43d2:	1c10      	adds	r0, r2, #0
    43d4:	1c19      	adds	r1, r3, #0
    43d6:	220a      	movs	r2, #10
    43d8:	4b2a      	ldr	r3, [pc, #168]	; (4484 <main+0x430>)
    43da:	4798      	blx	r3
    43dc:	1c03      	adds	r3, r0, #0
    43de:	1c1a      	adds	r2, r3, #0
    43e0:	4b26      	ldr	r3, [pc, #152]	; (447c <main+0x428>)
    43e2:	701a      	strb	r2, [r3, #0]
				// process 1st set of key reads
				if (velocityCmdRx != VELOCITY_MODE)	 
    43e4:	4b31      	ldr	r3, [pc, #196]	; (44ac <main+0x458>)
    43e6:	781b      	ldrb	r3, [r3, #0]
    43e8:	2bf1      	cmp	r3, #241	; 0xf1
    43ea:	d004      	beq.n	43f6 <main+0x3a2>
					key_closer(0, 10);	// operating in switch closure mode
    43ec:	2000      	movs	r0, #0
    43ee:	210a      	movs	r1, #10
    43f0:	4b2f      	ldr	r3, [pc, #188]	; (44b0 <main+0x45c>)
    43f2:	4798      	blx	r3
    43f4:	e003      	b.n	43fe <main+0x3aa>
				else key_velocity(0,10); // velocity mode
    43f6:	2000      	movs	r0, #0
    43f8:	210a      	movs	r1, #10
    43fa:	4b2e      	ldr	r3, [pc, #184]	; (44b4 <main+0x460>)
    43fc:	4798      	blx	r3
			}
			doADCcnt = !doADCcnt;
    43fe:	1dbb      	adds	r3, r7, #6
    4400:	781b      	ldrb	r3, [r3, #0]
    4402:	1e5a      	subs	r2, r3, #1
    4404:	4193      	sbcs	r3, r2
    4406:	b2db      	uxtb	r3, r3
    4408:	2201      	movs	r2, #1
    440a:	4053      	eors	r3, r2
    440c:	b2db      	uxtb	r3, r3
    440e:	1c1a      	adds	r2, r3, #0
    4410:	1dbb      	adds	r3, r7, #6
    4412:	701a      	strb	r2, [r3, #0]
    4414:	781a      	ldrb	r2, [r3, #0]
    4416:	2101      	movs	r1, #1
    4418:	400a      	ands	r2, r1
    441a:	701a      	strb	r2, [r3, #0]
		}
	}
    441c:	e78a      	b.n	4334 <main+0x2e0>
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	00002be9 	.word	0x00002be9
    4424:	00003fa1 	.word	0x00003fa1
    4428:	00001ee1 	.word	0x00001ee1
    442c:	00004005 	.word	0x00004005
    4430:	00003fc1 	.word	0x00003fc1
    4434:	2000027a 	.word	0x2000027a
    4438:	00003e51 	.word	0x00003e51
    443c:	00001dd1 	.word	0x00001dd1
    4440:	00001d89 	.word	0x00001d89
    4444:	00003e69 	.word	0x00003e69
    4448:	000044dd 	.word	0x000044dd
    444c:	00000139 	.word	0x00000139
    4450:	00001c79 	.word	0x00001c79
    4454:	000002c5 	.word	0x000002c5
    4458:	00000425 	.word	0x00000425
    445c:	00001951 	.word	0x00001951
    4460:	000019a9 	.word	0x000019a9
    4464:	00003d25 	.word	0x00003d25
    4468:	20000274 	.word	0x20000274
    446c:	00003d49 	.word	0x00003d49
    4470:	200002a8 	.word	0x200002a8
    4474:	2000043c 	.word	0x2000043c
    4478:	00003ead 	.word	0x00003ead
    447c:	200002a4 	.word	0x200002a4
    4480:	20000290 	.word	0x20000290
    4484:	000017a5 	.word	0x000017a5
    4488:	20000438 	.word	0x20000438
    448c:	20000220 	.word	0x20000220
    4490:	20000278 	.word	0x20000278
    4494:	00000345 	.word	0x00000345
    4498:	00003f2d 	.word	0x00003f2d
    449c:	2000027c 	.word	0x2000027c
    44a0:	20000064 	.word	0x20000064
    44a4:	0000089d 	.word	0x0000089d
    44a8:	20000065 	.word	0x20000065
    44ac:	20000009 	.word	0x20000009
    44b0:	000009b9 	.word	0x000009b9
    44b4:	00000ce1 	.word	0x00000ce1

000044b8 <configure_dfll_open_loop>:
}


void configure_dfll_open_loop(void)
{
    44b8:	b580      	push	{r7, lr}
    44ba:	b086      	sub	sp, #24
    44bc:	af00      	add	r7, sp, #0
	//! [config_dfll_config]
	struct system_clock_source_dfll_config config_dfll;
	//! [config_dfll_config]
	//! [config_dfll_get_defaults]
	system_clock_source_dfll_get_config_defaults(&config_dfll);
    44be:	1d3b      	adds	r3, r7, #4
    44c0:	1c18      	adds	r0, r3, #0
    44c2:	4b04      	ldr	r3, [pc, #16]	; (44d4 <configure_dfll_open_loop+0x1c>)
    44c4:	4798      	blx	r3
	//! [config_dfll_get_defaults]

	//! [config_dfll_set_config]
	system_clock_source_dfll_set_config(&config_dfll);
    44c6:	1d3b      	adds	r3, r7, #4
    44c8:	1c18      	adds	r0, r3, #0
    44ca:	4b03      	ldr	r3, [pc, #12]	; (44d8 <configure_dfll_open_loop+0x20>)
    44cc:	4798      	blx	r3
	//! [config_dfll_set_config]
}
    44ce:	46bd      	mov	sp, r7
    44d0:	b006      	add	sp, #24
    44d2:	bd80      	pop	{r7, pc}
    44d4:	00003cd5 	.word	0x00003cd5
    44d8:	000029b5 	.word	0x000029b5

000044dc <clock_dfll>:
	
	
void clock_dfll(void)		 {
    44dc:	b590      	push	{r4, r7, lr}
    44de:	b085      	sub	sp, #20
    44e0:	af00      	add	r7, sp, #0
		/* Configure the DFLL in open loop mode using default values */
		//! [config_dfll_main]
		configure_dfll_open_loop();
    44e2:	4b0f      	ldr	r3, [pc, #60]	; (4520 <clock_dfll+0x44>)
    44e4:	4798      	blx	r3
		//! [config_dfll_main]

		/* Enable the DFLL oscillator */
		//! [enable_dfll_main]
		enum status_code dfll_status =
    44e6:	230f      	movs	r3, #15
    44e8:	18fc      	adds	r4, r7, r3
    44ea:	2007      	movs	r0, #7
    44ec:	4b0d      	ldr	r3, [pc, #52]	; (4524 <clock_dfll+0x48>)
    44ee:	4798      	blx	r3
    44f0:	1c03      	adds	r3, r0, #0
    44f2:	7023      	strb	r3, [r4, #0]
		}
		//! [enable_dfll_main]

		/* Configure flash wait states before switching to high frequency clock */
		//! [set_sys_wait_states]
		system_flash_set_waitstates(2);
    44f4:	2002      	movs	r0, #2
    44f6:	4b0c      	ldr	r3, [pc, #48]	; (4528 <clock_dfll+0x4c>)
    44f8:	4798      	blx	r3
		//! [set_sys_wait_states]

		/* Change system clock to DFLL */
		//! [set_sys_clk_src]
		struct system_gclk_gen_config config_gclock_gen;
		system_gclk_gen_get_config_defaults(&config_gclock_gen);
    44fa:	1c3b      	adds	r3, r7, #0
    44fc:	1c18      	adds	r0, r3, #0
    44fe:	4b0b      	ldr	r3, [pc, #44]	; (452c <clock_dfll+0x50>)
    4500:	4798      	blx	r3
		config_gclock_gen.source_clock    = SYSTEM_CLOCK_SOURCE_DFLL;
    4502:	1c3b      	adds	r3, r7, #0
    4504:	2207      	movs	r2, #7
    4506:	701a      	strb	r2, [r3, #0]
		config_gclock_gen.division_factor = 1;
    4508:	1c3b      	adds	r3, r7, #0
    450a:	2201      	movs	r2, #1
    450c:	605a      	str	r2, [r3, #4]
	
		system_gclk_gen_set_config(GCLK_GENERATOR_0, &config_gclock_gen);
    450e:	1c3b      	adds	r3, r7, #0
    4510:	2000      	movs	r0, #0
    4512:	1c19      	adds	r1, r3, #0
    4514:	4b06      	ldr	r3, [pc, #24]	; (4530 <clock_dfll+0x54>)
    4516:	4798      	blx	r3
	
}
    4518:	46bd      	mov	sp, r7
    451a:	b005      	add	sp, #20
    451c:	bd90      	pop	{r4, r7, pc}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	000044b9 	.word	0x000044b9
    4524:	00002ab1 	.word	0x00002ab1
    4528:	00003dbd 	.word	0x00003dbd
    452c:	00003ca9 	.word	0x00003ca9
    4530:	00002ef1 	.word	0x00002ef1

00004534 <__aeabi_uidiv>:
    4534:	2200      	movs	r2, #0
    4536:	0843      	lsrs	r3, r0, #1
    4538:	428b      	cmp	r3, r1
    453a:	d374      	bcc.n	4626 <__aeabi_uidiv+0xf2>
    453c:	0903      	lsrs	r3, r0, #4
    453e:	428b      	cmp	r3, r1
    4540:	d35f      	bcc.n	4602 <__aeabi_uidiv+0xce>
    4542:	0a03      	lsrs	r3, r0, #8
    4544:	428b      	cmp	r3, r1
    4546:	d344      	bcc.n	45d2 <__aeabi_uidiv+0x9e>
    4548:	0b03      	lsrs	r3, r0, #12
    454a:	428b      	cmp	r3, r1
    454c:	d328      	bcc.n	45a0 <__aeabi_uidiv+0x6c>
    454e:	0c03      	lsrs	r3, r0, #16
    4550:	428b      	cmp	r3, r1
    4552:	d30d      	bcc.n	4570 <__aeabi_uidiv+0x3c>
    4554:	22ff      	movs	r2, #255	; 0xff
    4556:	0209      	lsls	r1, r1, #8
    4558:	ba12      	rev	r2, r2
    455a:	0c03      	lsrs	r3, r0, #16
    455c:	428b      	cmp	r3, r1
    455e:	d302      	bcc.n	4566 <__aeabi_uidiv+0x32>
    4560:	1212      	asrs	r2, r2, #8
    4562:	0209      	lsls	r1, r1, #8
    4564:	d065      	beq.n	4632 <__aeabi_uidiv+0xfe>
    4566:	0b03      	lsrs	r3, r0, #12
    4568:	428b      	cmp	r3, r1
    456a:	d319      	bcc.n	45a0 <__aeabi_uidiv+0x6c>
    456c:	e000      	b.n	4570 <__aeabi_uidiv+0x3c>
    456e:	0a09      	lsrs	r1, r1, #8
    4570:	0bc3      	lsrs	r3, r0, #15
    4572:	428b      	cmp	r3, r1
    4574:	d301      	bcc.n	457a <__aeabi_uidiv+0x46>
    4576:	03cb      	lsls	r3, r1, #15
    4578:	1ac0      	subs	r0, r0, r3
    457a:	4152      	adcs	r2, r2
    457c:	0b83      	lsrs	r3, r0, #14
    457e:	428b      	cmp	r3, r1
    4580:	d301      	bcc.n	4586 <__aeabi_uidiv+0x52>
    4582:	038b      	lsls	r3, r1, #14
    4584:	1ac0      	subs	r0, r0, r3
    4586:	4152      	adcs	r2, r2
    4588:	0b43      	lsrs	r3, r0, #13
    458a:	428b      	cmp	r3, r1
    458c:	d301      	bcc.n	4592 <__aeabi_uidiv+0x5e>
    458e:	034b      	lsls	r3, r1, #13
    4590:	1ac0      	subs	r0, r0, r3
    4592:	4152      	adcs	r2, r2
    4594:	0b03      	lsrs	r3, r0, #12
    4596:	428b      	cmp	r3, r1
    4598:	d301      	bcc.n	459e <__aeabi_uidiv+0x6a>
    459a:	030b      	lsls	r3, r1, #12
    459c:	1ac0      	subs	r0, r0, r3
    459e:	4152      	adcs	r2, r2
    45a0:	0ac3      	lsrs	r3, r0, #11
    45a2:	428b      	cmp	r3, r1
    45a4:	d301      	bcc.n	45aa <__aeabi_uidiv+0x76>
    45a6:	02cb      	lsls	r3, r1, #11
    45a8:	1ac0      	subs	r0, r0, r3
    45aa:	4152      	adcs	r2, r2
    45ac:	0a83      	lsrs	r3, r0, #10
    45ae:	428b      	cmp	r3, r1
    45b0:	d301      	bcc.n	45b6 <__aeabi_uidiv+0x82>
    45b2:	028b      	lsls	r3, r1, #10
    45b4:	1ac0      	subs	r0, r0, r3
    45b6:	4152      	adcs	r2, r2
    45b8:	0a43      	lsrs	r3, r0, #9
    45ba:	428b      	cmp	r3, r1
    45bc:	d301      	bcc.n	45c2 <__aeabi_uidiv+0x8e>
    45be:	024b      	lsls	r3, r1, #9
    45c0:	1ac0      	subs	r0, r0, r3
    45c2:	4152      	adcs	r2, r2
    45c4:	0a03      	lsrs	r3, r0, #8
    45c6:	428b      	cmp	r3, r1
    45c8:	d301      	bcc.n	45ce <__aeabi_uidiv+0x9a>
    45ca:	020b      	lsls	r3, r1, #8
    45cc:	1ac0      	subs	r0, r0, r3
    45ce:	4152      	adcs	r2, r2
    45d0:	d2cd      	bcs.n	456e <__aeabi_uidiv+0x3a>
    45d2:	09c3      	lsrs	r3, r0, #7
    45d4:	428b      	cmp	r3, r1
    45d6:	d301      	bcc.n	45dc <__aeabi_uidiv+0xa8>
    45d8:	01cb      	lsls	r3, r1, #7
    45da:	1ac0      	subs	r0, r0, r3
    45dc:	4152      	adcs	r2, r2
    45de:	0983      	lsrs	r3, r0, #6
    45e0:	428b      	cmp	r3, r1
    45e2:	d301      	bcc.n	45e8 <__aeabi_uidiv+0xb4>
    45e4:	018b      	lsls	r3, r1, #6
    45e6:	1ac0      	subs	r0, r0, r3
    45e8:	4152      	adcs	r2, r2
    45ea:	0943      	lsrs	r3, r0, #5
    45ec:	428b      	cmp	r3, r1
    45ee:	d301      	bcc.n	45f4 <__aeabi_uidiv+0xc0>
    45f0:	014b      	lsls	r3, r1, #5
    45f2:	1ac0      	subs	r0, r0, r3
    45f4:	4152      	adcs	r2, r2
    45f6:	0903      	lsrs	r3, r0, #4
    45f8:	428b      	cmp	r3, r1
    45fa:	d301      	bcc.n	4600 <__aeabi_uidiv+0xcc>
    45fc:	010b      	lsls	r3, r1, #4
    45fe:	1ac0      	subs	r0, r0, r3
    4600:	4152      	adcs	r2, r2
    4602:	08c3      	lsrs	r3, r0, #3
    4604:	428b      	cmp	r3, r1
    4606:	d301      	bcc.n	460c <__aeabi_uidiv+0xd8>
    4608:	00cb      	lsls	r3, r1, #3
    460a:	1ac0      	subs	r0, r0, r3
    460c:	4152      	adcs	r2, r2
    460e:	0883      	lsrs	r3, r0, #2
    4610:	428b      	cmp	r3, r1
    4612:	d301      	bcc.n	4618 <__aeabi_uidiv+0xe4>
    4614:	008b      	lsls	r3, r1, #2
    4616:	1ac0      	subs	r0, r0, r3
    4618:	4152      	adcs	r2, r2
    461a:	0843      	lsrs	r3, r0, #1
    461c:	428b      	cmp	r3, r1
    461e:	d301      	bcc.n	4624 <__aeabi_uidiv+0xf0>
    4620:	004b      	lsls	r3, r1, #1
    4622:	1ac0      	subs	r0, r0, r3
    4624:	4152      	adcs	r2, r2
    4626:	1a41      	subs	r1, r0, r1
    4628:	d200      	bcs.n	462c <__aeabi_uidiv+0xf8>
    462a:	4601      	mov	r1, r0
    462c:	4152      	adcs	r2, r2
    462e:	4610      	mov	r0, r2
    4630:	4770      	bx	lr
    4632:	e7ff      	b.n	4634 <__aeabi_uidiv+0x100>
    4634:	b501      	push	{r0, lr}
    4636:	2000      	movs	r0, #0
    4638:	f000 f80c 	bl	4654 <__aeabi_idiv0>
    463c:	bd02      	pop	{r1, pc}
    463e:	46c0      	nop			; (mov r8, r8)

00004640 <__aeabi_uidivmod>:
    4640:	2900      	cmp	r1, #0
    4642:	d0f7      	beq.n	4634 <__aeabi_uidiv+0x100>
    4644:	b503      	push	{r0, r1, lr}
    4646:	f7ff ff75 	bl	4534 <__aeabi_uidiv>
    464a:	bc0e      	pop	{r1, r2, r3}
    464c:	4342      	muls	r2, r0
    464e:	1a89      	subs	r1, r1, r2
    4650:	4718      	bx	r3
    4652:	46c0      	nop			; (mov r8, r8)

00004654 <__aeabi_idiv0>:
    4654:	4770      	bx	lr
    4656:	46c0      	nop			; (mov r8, r8)

00004658 <__libc_init_array>:
    4658:	4b0e      	ldr	r3, [pc, #56]	; (4694 <__libc_init_array+0x3c>)
    465a:	b570      	push	{r4, r5, r6, lr}
    465c:	2500      	movs	r5, #0
    465e:	1c1e      	adds	r6, r3, #0
    4660:	4c0d      	ldr	r4, [pc, #52]	; (4698 <__libc_init_array+0x40>)
    4662:	1ae4      	subs	r4, r4, r3
    4664:	10a4      	asrs	r4, r4, #2
    4666:	42a5      	cmp	r5, r4
    4668:	d004      	beq.n	4674 <__libc_init_array+0x1c>
    466a:	00ab      	lsls	r3, r5, #2
    466c:	58f3      	ldr	r3, [r6, r3]
    466e:	4798      	blx	r3
    4670:	3501      	adds	r5, #1
    4672:	e7f8      	b.n	4666 <__libc_init_array+0xe>
    4674:	f000 f916 	bl	48a4 <_init>
    4678:	4b08      	ldr	r3, [pc, #32]	; (469c <__libc_init_array+0x44>)
    467a:	2500      	movs	r5, #0
    467c:	1c1e      	adds	r6, r3, #0
    467e:	4c08      	ldr	r4, [pc, #32]	; (46a0 <__libc_init_array+0x48>)
    4680:	1ae4      	subs	r4, r4, r3
    4682:	10a4      	asrs	r4, r4, #2
    4684:	42a5      	cmp	r5, r4
    4686:	d004      	beq.n	4692 <__libc_init_array+0x3a>
    4688:	00ab      	lsls	r3, r5, #2
    468a:	58f3      	ldr	r3, [r6, r3]
    468c:	4798      	blx	r3
    468e:	3501      	adds	r5, #1
    4690:	e7f8      	b.n	4684 <__libc_init_array+0x2c>
    4692:	bd70      	pop	{r4, r5, r6, pc}
    4694:	000048b0 	.word	0x000048b0
    4698:	000048b0 	.word	0x000048b0
    469c:	000048b0 	.word	0x000048b0
    46a0:	000048b4 	.word	0x000048b4

000046a4 <memcpy>:
    46a4:	2300      	movs	r3, #0
    46a6:	b510      	push	{r4, lr}
    46a8:	4293      	cmp	r3, r2
    46aa:	d003      	beq.n	46b4 <memcpy+0x10>
    46ac:	5ccc      	ldrb	r4, [r1, r3]
    46ae:	54c4      	strb	r4, [r0, r3]
    46b0:	3301      	adds	r3, #1
    46b2:	e7f9      	b.n	46a8 <memcpy+0x4>
    46b4:	bd10      	pop	{r4, pc}

000046b6 <memset>:
    46b6:	1c03      	adds	r3, r0, #0
    46b8:	1882      	adds	r2, r0, r2
    46ba:	4293      	cmp	r3, r2
    46bc:	d002      	beq.n	46c4 <memset+0xe>
    46be:	7019      	strb	r1, [r3, #0]
    46c0:	3301      	adds	r3, #1
    46c2:	e7fa      	b.n	46ba <memset+0x4>
    46c4:	4770      	bx	lr
    46c6:	0000      	movs	r0, r0
    46c8:	0a090807 	.word	0x0a090807
    46cc:	00000c0b 	.word	0x00000c0b
    46d0:	00000002 	.word	0x00000002
    46d4:	00000003 	.word	0x00000003
    46d8:	00000028 	.word	0x00000028
    46dc:	00000029 	.word	0x00000029
    46e0:	00000004 	.word	0x00000004
    46e4:	00000005 	.word	0x00000005
    46e8:	00000006 	.word	0x00000006
    46ec:	00000007 	.word	0x00000007
    46f0:	00000020 	.word	0x00000020
    46f4:	00000021 	.word	0x00000021
    46f8:	00000022 	.word	0x00000022
    46fc:	00000023 	.word	0x00000023
    4700:	00000024 	.word	0x00000024
    4704:	00000025 	.word	0x00000025
    4708:	00000026 	.word	0x00000026
    470c:	00000027 	.word	0x00000027
    4710:	00000008 	.word	0x00000008
    4714:	00000009 	.word	0x00000009
    4718:	0000000a 	.word	0x0000000a
    471c:	0000000b 	.word	0x0000000b
    4720:	000010f4 	.word	0x000010f4
    4724:	000010fa 	.word	0x000010fa
    4728:	000010fa 	.word	0x000010fa
    472c:	000010fa 	.word	0x000010fa
    4730:	000010fa 	.word	0x000010fa
    4734:	000010fa 	.word	0x000010fa
    4738:	000010fa 	.word	0x000010fa
    473c:	000010fa 	.word	0x000010fa
    4740:	000010fa 	.word	0x000010fa
    4744:	000010fa 	.word	0x000010fa
    4748:	000010fa 	.word	0x000010fa
    474c:	000010fa 	.word	0x000010fa
    4750:	000010fa 	.word	0x000010fa
    4754:	000010fa 	.word	0x000010fa
    4758:	000010fa 	.word	0x000010fa
    475c:	000010fa 	.word	0x000010fa
    4760:	000010be 	.word	0x000010be
    4764:	000010fa 	.word	0x000010fa
    4768:	000010fa 	.word	0x000010fa
    476c:	000010fa 	.word	0x000010fa
    4770:	000010fa 	.word	0x000010fa
    4774:	000010fa 	.word	0x000010fa
    4778:	000010fa 	.word	0x000010fa
    477c:	000010fa 	.word	0x000010fa
    4780:	000010fa 	.word	0x000010fa
    4784:	000010fa 	.word	0x000010fa
    4788:	000010fa 	.word	0x000010fa
    478c:	000010fa 	.word	0x000010fa
    4790:	000010fa 	.word	0x000010fa
    4794:	000010fa 	.word	0x000010fa
    4798:	000010fa 	.word	0x000010fa
    479c:	000010fa 	.word	0x000010fa
    47a0:	000010ee 	.word	0x000010ee
    47a4:	000010fa 	.word	0x000010fa
    47a8:	000010fa 	.word	0x000010fa
    47ac:	000010fa 	.word	0x000010fa
    47b0:	000010fa 	.word	0x000010fa
    47b4:	000010fa 	.word	0x000010fa
    47b8:	000010fa 	.word	0x000010fa
    47bc:	000010fa 	.word	0x000010fa
    47c0:	000010fa 	.word	0x000010fa
    47c4:	000010fa 	.word	0x000010fa
    47c8:	000010fa 	.word	0x000010fa
    47cc:	000010fa 	.word	0x000010fa
    47d0:	000010fa 	.word	0x000010fa
    47d4:	000010fa 	.word	0x000010fa
    47d8:	000010fa 	.word	0x000010fa
    47dc:	000010fa 	.word	0x000010fa
    47e0:	000010e8 	.word	0x000010e8
    47e4:	00001068 	.word	0x00001068
    47e8:	0000107e 	.word	0x0000107e
    47ec:	00001094 	.word	0x00001094
    47f0:	0000104e 	.word	0x0000104e
    47f4:	42000800 	.word	0x42000800
    47f8:	42000c00 	.word	0x42000c00
    47fc:	42001000 	.word	0x42001000
    4800:	42001400 	.word	0x42001400
    4804:	42001800 	.word	0x42001800
    4808:	42001c00 	.word	0x42001c00
    480c:	000028b2 	.word	0x000028b2
    4810:	00002914 	.word	0x00002914
    4814:	00002914 	.word	0x00002914
    4818:	000028d4 	.word	0x000028d4
    481c:	000028ce 	.word	0x000028ce
    4820:	000028da 	.word	0x000028da
    4824:	000028b8 	.word	0x000028b8
    4828:	000028e0 	.word	0x000028e0
    482c:	00002aec 	.word	0x00002aec
    4830:	00002b26 	.word	0x00002b26
    4834:	00002b26 	.word	0x00002b26
    4838:	00002b22 	.word	0x00002b22
    483c:	00002ade 	.word	0x00002ade
    4840:	00002afe 	.word	0x00002afe
    4844:	00002ace 	.word	0x00002ace
    4848:	00002b10 	.word	0x00002b10
    484c:	00002b72 	.word	0x00002b72
    4850:	00002b88 	.word	0x00002b88
    4854:	00002b88 	.word	0x00002b88
    4858:	00002b84 	.word	0x00002b84
    485c:	00002b6c 	.word	0x00002b6c
    4860:	00002b78 	.word	0x00002b78
    4864:	00002b66 	.word	0x00002b66
    4868:	00002b7e 	.word	0x00002b7e
    486c:	42002000 	.word	0x42002000
    4870:	42002400 	.word	0x42002400
    4874:	42002800 	.word	0x42002800
    4878:	42002c00 	.word	0x42002c00
    487c:	42003000 	.word	0x42003000
    4880:	42003400 	.word	0x42003400
    4884:	42003800 	.word	0x42003800
    4888:	42003c00 	.word	0x42003c00
    488c:	14141313 	.word	0x14141313
    4890:	16161515 	.word	0x16161515
    4894:	02000100 	.word	0x02000100
    4898:	08000400 	.word	0x08000400
    489c:	20001000 	.word	0x20001000
    48a0:	80004000 	.word	0x80004000

000048a4 <_init>:
    48a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48aa:	bc08      	pop	{r3}
    48ac:	469e      	mov	lr, r3
    48ae:	4770      	bx	lr

000048b0 <__init_array_start>:
    48b0:	000000cd 	.word	0x000000cd

000048b4 <_fini>:
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	46c0      	nop			; (mov r8, r8)
    48b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ba:	bc08      	pop	{r3}
    48bc:	469e      	mov	lr, r3
    48be:	4770      	bx	lr

000048c0 <__fini_array_start>:
    48c0:	000000a5 	.word	0x000000a5
